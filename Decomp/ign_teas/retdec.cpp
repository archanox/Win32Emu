//
// This file was generated by the Retargetable Decompiler
// Website: https://retdec.com
//

#include <math.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>
#include <windows.h>

// ---------------- Integer Types Definitions -----------------

typedef int8_t int3_t;
typedef int64_t int864_t;

// ----------------- Float Types Definitions ------------------

typedef float float32_t;
typedef double float64_t;
typedef long double float80_t;

// ------------------------ Structures ------------------------

struct IDirectDraw {
    int32_t e0;
};

struct IDirectSound {
    int32_t e0;
};

struct _EXCEPTION_POINTERS {
    struct _EXCEPTION_RECORD * e0;
    struct _CONTEXT * e1;
};

struct _EXCEPTION_RECORD {
    int32_t e0;
    int32_t e1;
    struct _EXCEPTION_RECORD * e2;
    int32_t * e3;
    int32_t e4;
    int32_t e5[1];
};

struct _M128A {
    int32_t e0;
    int64_t e1;
};

struct _CONTEXT {
    int32_t e0;
    int32_t e1;
    int32_t e2;
    int32_t e3;
    int32_t e4;
    int32_t e5;
    int32_t e6;
    int32_t e7;
    int16_t e8;
    int16_t e9;
    int16_t e10;
    int16_t e11;
    int16_t e12;
    int16_t e13;
    int32_t e14;
    int32_t e15;
    int32_t e16;
    int32_t e17;
    int32_t e18;
    int32_t e19;
    int32_t e20;
    int32_t e21;
    int32_t e22;
    int32_t e23;
    int32_t e24;
    int32_t e25;
    int32_t e26;
    int32_t e27;
    int32_t e28;
    int32_t e29;
    int32_t e30;
    int32_t e31;
    int32_t e32;
    int32_t e33;
    int32_t e34;
    int32_t e35;
    int32_t e36;
    int32_t e37;
    int32_t e38;
    struct _M128A e39[26];
    int32_t e40;
    int32_t e41;
    int32_t e42;
    int32_t e43;
    int32_t e44;
    int32_t e45;
};

struct _OVERLAPPED {
    int32_t e0;
    int32_t e1;
    int32_t e2;
    int32_t * e3;
};

struct _SECURITY_ATTRIBUTES {
    int32_t e0;
    int32_t * e1;
    bool e2;
};

struct _STARTUPINFOA {
    int32_t e0;
    char * e1;
    char * e2;
    char * e3;
    int32_t e4;
    int32_t e5;
    int32_t e6;
    int32_t e7;
    int32_t e8;
    int32_t e9;
    int32_t e10;
    int32_t e11;
    int16_t e12;
    int16_t e13;
    char * e14;
    int32_t * e15;
    int32_t * e16;
    int32_t * e17;
};

struct _TYPEDEF_GUID {
    int32_t e0;
    int16_t e1;
    int16_t e2;
    char e3[8];
};

struct _cpinfo {
    int32_t e0;
    char e1[1];
    char e2[1];
};

struct tagPOINT {
    int32_t e0;
    int32_t e1;
};

struct tagMSG {
    int32_t * e0;
    int32_t e1;
    int32_t e2;
    int32_t e3;
    int32_t e4;
    struct tagPOINT e5;
};

struct tagRECT {
    int32_t e0;
    int32_t e1;
    int32_t e2;
    int32_t e3;
};

struct tagWNDCLASSA {
    int32_t e0;
    int32_t (*e1)(int32_t *, int32_t, int32_t, int32_t);
    int32_t e2;
    int32_t e3;
    int32_t * e4;
    int32_t * e5;
    int32_t * e6;
    int32_t * e7;
    char * e8;
    char * e9;
};

// ------------------- Function Prototypes --------------------

int32_t __ms_p5_test_fdiv(void);
void _RtlUnwind_40_16(int32_t * TargetFrame, int32_t * TargetIp, struct _EXCEPTION_RECORD * ExceptionRecord, int32_t * ReturnValue);
int32_t entry_point(void);
int32_t function_401000(int32_t a1, int32_t a2);
int32_t function_401080(int32_t a1, int32_t result);
int32_t function_4011a0(void);
int32_t function_4012a0(void);
int32_t function_4013a0(void);
int32_t function_4013c0(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_4019d0(int32_t a1, int32_t * a2, int32_t * a3);
int32_t function_401b60(int32_t a1);
int32_t function_401be0(int32_t a1);
int32_t function_401c00(int32_t a1);
int32_t function_401c20(int32_t a1, int32_t a2);
int32_t function_401d20(int32_t a1, int32_t a2, int32_t a3);
int32_t function_401e30(int32_t a1, int32_t a2);
int32_t function_4023f0(void);
int32_t function_402410(void);
int32_t function_402520(void);
int32_t function_402540(void);
int32_t function_4025d0(void);
int32_t function_4027d0(void);
int32_t function_402840(int32_t a1);
int32_t function_402a80(int32_t a1, int32_t a2, int32_t a3);
int32_t function_402aa0(int32_t a1);
int32_t function_402e10(int32_t a1);
int32_t function_402e30(void);
int32_t function_402f00(int32_t a1, int32_t a2, uint32_t result2, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9);
int32_t function_402f70(int32_t a1);
int32_t function_4030c0(int32_t a1, int32_t a2);
int32_t function_403140(int32_t a1);
int32_t function_4032a0(void);
int32_t function_403340(int32_t a1, uint32_t a2, int32_t a3);
int32_t function_4034d0(void);
int32_t function_403510(void);
int32_t function_403540(void);
int32_t function_403560(void);
int32_t function_403570(void);
int32_t function_4035a0(char * a1);
int32_t function_403630(int32_t a1, int32_t a2);
int32_t function_4037d0(int32_t a1, uint32_t a2);
int32_t function_403820(int32_t a1);
int32_t function_4038e0(void);
int32_t function_403910(void);
int32_t function_403bf0(void);
int32_t function_403cb0(void);
int32_t function_403d20(void);
int32_t function_404320(char * a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_4043a0(int32_t a1);
int32_t function_404490(int32_t a1);
int32_t function_4044d0(int32_t a1);
int32_t function_404500(int32_t a1);
int32_t function_404530(void);
int32_t function_4045e0(int32_t a1);
int32_t function_404600(int32_t a1, int32_t a2, int32_t result, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9);
int32_t function_404640(void);
int32_t function_404660(void);
int32_t function_404670(void);
int32_t function_404690(int32_t * a1);
int32_t function_4046a0(int32_t result);
int32_t function_4046b0(int32_t a1, int32_t result, int32_t a3, int32_t a4, int32_t a5);
int32_t function_4046e0(void);
int32_t function_4046f0(void);
int32_t function_404890(void);
int32_t function_404910(void);
int32_t function_404a90(int32_t a1);
int32_t function_404aa0(int32_t a1, int32_t a2);
int32_t function_404ac0(uint32_t a1);
int32_t function_404b00(void);
int32_t function_404b30(void);
int32_t function_404b40(void);
int32_t function_404b90(void);
int32_t function_404c30(void);
int32_t function_404c60(void);
int32_t function_404d20(void);
int32_t function_404d30(void);
int32_t function_404d40(void);
int32_t function_404d50(void);
int32_t function_404d60(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5);
int32_t function_404e20(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_404f10(int32_t a1);
int32_t function_404f70(int32_t a1);
int32_t function_404fb0(int32_t a1, int32_t a2, int32_t a3);
int32_t function_405050(int32_t a1);
int32_t function_4050b0(void);
int32_t function_4050c0(void);
int32_t function_405170(void);
int32_t function_405220(void);
int32_t function_4052c0(void);
int32_t function_4052d0(void);
int32_t function_405900(void);
int32_t function_405bf0(void);
int32_t function_405ce0(void);
int32_t function_405cf0(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8);
int32_t function_405d60(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, uint32_t a6, int32_t a7, int32_t a8, int32_t a9);
int32_t function_405ef0(int32_t a1);
int32_t function_405fd0(int32_t a1);
int32_t function_406040(void);
int32_t function_406050(int32_t a1, int32_t a2);
int32_t function_4061a0(int32_t a1);
int32_t function_4061f0(int32_t a1);
int32_t function_406250(void);
int32_t function_406310(void);
int32_t function_406460(void);
int32_t function_406470(int32_t a1);
int32_t function_406490(int32_t a1);
int32_t function_406520(void);
int32_t function_406570(int32_t a1);
int32_t function_406590(void);
int32_t function_4065a0(int32_t a1, int32_t a2);
int32_t function_4065f0(void);
int32_t function_406630(void);
int32_t function_406640(void);
int32_t function_4066d0(void);
int32_t function_406710(int32_t a1, int32_t a2);
int32_t function_4067a0(int32_t result, int32_t a2);
int32_t function_4067e0(int32_t * a1, int32_t result);
int32_t function_406860(int32_t * a1, int32_t a2);
int32_t function_4069b0(int32_t a1);
int32_t function_4069d0(void);
int32_t function_406a10(int32_t a1);
int32_t function_406b70(int32_t result, int32_t a2, int32_t a3);
int32_t function_406ba0(int32_t a1);
int32_t function_406cc0(void);
int32_t function_406d20(int32_t a1, uint32_t a2);
int32_t function_406d50(uint32_t a1, int32_t a2);
int32_t function_406d90(int32_t a1);
int32_t function_406f40(int32_t a1);
int32_t function_406f60(void);
int32_t function_406f70(int32_t * a1);
int32_t function_406fc0(void);
int32_t function_407000(int32_t a1, int32_t a2);
int32_t function_4070d0(int32_t a1, int32_t a2);
int32_t function_4070f0(int32_t a1);
int32_t function_407110(int32_t a1, int32_t a2);
int32_t function_407130(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_407150(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5);
int32_t function_407170(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_407190(void);
int32_t function_4071f0(int32_t a1);
int32_t function_407910(int32_t a1);
int32_t function_407f40(uint32_t a1, int32_t a2, uint32_t a3, int32_t a4);
int32_t function_407f80(int32_t a1, int32_t a2, int32_t a3);
int32_t function_407fa0(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5);
int32_t function_407fc0(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_407fe0(void);
int32_t function_408040(int32_t * a1);
int32_t function_408750(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5);
int32_t function_408d70(uint32_t a1, int32_t a2, uint32_t a3, int32_t a4);
int32_t function_408da8(void);
int32_t function_408dc9(void);
int32_t function_408fa4(void);
int32_t function_408fca(void);
int32_t function_40901f(void);
int32_t function_4090a8(void);
int32_t function_4090b8(void);
int32_t function_4090d8(void);
int32_t function_40914e(void);
int32_t function_4091eb(void);
int32_t function_4091f8(void);
int32_t function_409470(struct _TYPEDEF_GUID * lpGUID, struct IDirectDraw ** lplpDD, int32_t * pUnkOuter);
int32_t function_409476(struct _TYPEDEF_GUID * pcGuidDevice, struct IDirectSound ** ppDS, int32_t * pUnkOuter);
int32_t function_40a0a4(void);
int32_t function_40a0a9(void);
int32_t function_40a0b4(void);
int32_t function_40a0b9(void);
int32_t function_40a124(int32_t a1);
int32_t function_40a129(int32_t a1);
int32_t function_40a134(int32_t a1);
int32_t function_40a139(int32_t a1);
int32_t function_40a314(void);
int32_t function_40a319(void);
int32_t function_40a324(void);
int32_t function_40a334(void);
int32_t function_40a498(int32_t a1, int32_t a2, int32_t * a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9, int32_t a10, int32_t a11, int32_t a12, int32_t a13, int32_t a14);
int32_t function_40a4a0(int32_t a1, int32_t a2);
int32_t function_40a519(void);
int32_t function_40a5ca(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7);
int32_t function_40a5d1(void);
int32_t function_40a5d8(void);
int32_t function_40a5e5(void);
int32_t function_40a5f2(void);
int32_t function_40a5f9(void);
int32_t function_40a608(void);
int32_t function_40a61f(void);
int32_t function_40abfa(void);
int32_t function_40ac4c(void);
int32_t function_40ac93(void);
int32_t function_40acef(void);
int32_t function_40ad60(void);
int32_t function_40ade6(void);
int32_t function_40ae33(void);
int32_t function_40ae75(void);
int32_t function_40aec7(void);
int32_t function_40af29(void);
int32_t function_40af9b(void);
int32_t function_40afed(void);
int32_t function_40b034(void);
int32_t function_40b090(void);
int32_t function_40b101(void);
int32_t function_40b187(void);
int32_t function_40b1d4(void);
int32_t function_40b216(void);
int32_t function_40b268(void);
int32_t function_40b2ca(void);
int32_t function_40b340(void);
int32_t function_40b390(int32_t a1);
int32_t function_40bcfc(void);
int32_t function_40bd50(void);
int32_t function_40bd5f(void);
int32_t function_40c650(void);
int32_t function_40c9e0(int32_t a1);
int32_t function_40cb70(void);
int32_t function_40cde0(int32_t a1);
int32_t function_40ce20(void);
int32_t function_40ce37(void);
int32_t function_40d318(void);
int32_t function_40d34b(void);
int32_t function_40d372(void);
int32_t function_40d39e(void);
int32_t function_40d3ce(void);
int32_t function_40d402(void);
int32_t function_40d430(void);
int32_t function_40d46a(void);
int32_t function_40d4aa(void);
int32_t function_40d4d4(void);
int32_t function_40d501(void);
int32_t function_40d534(void);
int32_t function_40d55b(void);
int32_t function_40d587(void);
int32_t function_40d5b7(void);
int32_t function_40d5eb(void);
int32_t function_40d619(void);
int32_t function_40d658(void);
int32_t function_40d684(void);
int32_t function_40d6cd(void);
int32_t function_40d700(void);
int32_t function_40d750(int32_t a1);
int32_t function_40e0ac(void);
int32_t function_40e0bb(void);
int32_t function_40e79b(void);
int32_t function_40e980(void);
int32_t function_40e9cc(void);
int32_t function_40f920(void);
int32_t function_40f9dc(void);
int32_t function_40fba0(void);
int32_t function_40fc98(void);
int32_t function_40fcfe(void);
int32_t function_40fd64(void);
int32_t function_40fd7b(void);
int32_t function_41035c(void);
int32_t function_4103aa(void);
int32_t function_4103ed(void);
int32_t function_410443(void);
int32_t function_4104ac(void);
int32_t function_410528(void);
int32_t function_410571(void);
int32_t function_4105af(void);
int32_t function_4105fb(void);
int32_t function_410655(void);
int32_t function_4106bd(void);
int32_t function_41070b(void);
int32_t function_41074e(void);
int32_t function_4107a4(void);
int32_t function_41080d(void);
int32_t function_410889(void);
int32_t function_4108d2(void);
int32_t function_410910(void);
int32_t function_41095c(void);
int32_t function_4109b6(void);
int32_t function_410a20(void);
int32_t function_410c98(void);
int32_t function_410cbe(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6);
int32_t function_410d3c(void);
int32_t function_410d5c(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6);
int32_t function_410e20(void);
int32_t function_410e40(void);
int32_t function_410e50(void);
int32_t function_410e90(void);
int32_t function_410ec0(int32_t a1);
int32_t function_410ee0(int32_t a1);
int32_t function_410f00(int32_t a1);
int32_t function_410fb0(int32_t * a1, int32_t * a2);
int32_t function_411123(void);
int32_t function_41114a(int32_t a1, int32_t a2, int32_t a3);
int32_t function_411170(int32_t a1);
int32_t function_4111a0(int32_t a1);
int32_t function_4111c0(uint32_t a1, int32_t a2);
int32_t function_411210(int32_t a1);
int32_t function_411250(int32_t lpMem);
int32_t function_4112a0(int32_t a1);
int32_t function_411310(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_411460(int32_t a1, int32_t * a2);
int32_t function_411480(int32_t a1, int32_t a2, int32_t a3);
int32_t function_4114b0(int32_t a1, char * a2);
int32_t function_4114d0(int32_t a1, int32_t a2, uint32_t a3);
int32_t function_411570(int32_t a1);
int32_t function_411720(int32_t result, int32_t a2);
int32_t function_4117a0(char * a1);
int32_t function_4117e0(int32_t a1, int32_t a2);
int32_t function_411880(int32_t result, int32_t a2, int32_t a3);
int32_t function_4119b0(void);
int32_t function_4119ba(void);
int32_t function_4119c4(void);
int32_t function_4119cb(void);
int32_t function_4119d2(void);
int32_t function_4119dc(void);
int32_t function_4119e6(void);
int32_t function_4119ed(void);
int32_t function_411a00(void);
int32_t function_411aa0(int32_t a1);
int32_t function_411b10(int32_t result);
int32_t function_411b70(int32_t a1);
int32_t function_411b90(int32_t a1, int32_t a2, int32_t a3);
int32_t function_411be0(int32_t a1, int32_t result, int32_t a3, int32_t a4);
int32_t function_411d20(int32_t a1, int32_t result, int32_t a3);
int32_t function_411e20(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_411ed0(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_411f00(int32_t a1, int32_t a2, int32_t a3);
int32_t function_411f30(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5);
int32_t function_411fa0(int32_t a1, int32_t a2);
int32_t function_412099(void);
int32_t function_4120c0(int32_t a1, int32_t ExceptionInfo);
int32_t function_412220(int32_t a1);
int32_t function_412250(int32_t a1);
int32_t function_412270(int32_t a1, int32_t a2, int32_t a3);
int32_t function_4122b0(void);
int32_t function_4123a0(void);
int32_t function_412440(int32_t a1, int32_t a2, int32_t a3, int32_t * a4, int32_t * a5);
int32_t function_412620(void);
int32_t function_4127b0(int32_t a1);
int32_t function_412990(int32_t a1);
int32_t function_4129e0(int32_t a1);
int32_t function_412a40(void);
int32_t function_412a70(void);
int32_t function_412a80(int32_t a1);
int32_t function_412c60(void);
int32_t function_412c9c(int32_t a1, int32_t a2, int32_t a3);
int32_t function_412d80(void);
int32_t function_412dc0(int32_t a1);
int32_t function_412fc0(int32_t a1);
int32_t function_412ff0(void);
int32_t function_413160(int32_t a1);
int32_t function_4131c0(int32_t a1);
int32_t function_4132a0(uint32_t a1, int32_t * a2, int32_t * a3);
int32_t function_413300(int32_t a1, int32_t a2, int32_t result);
int32_t function_413350(uint32_t a1);
int32_t function_4135d0(int32_t a1, int32_t a2, uint32_t a3);
int32_t function_413750(uint32_t a1);
int32_t function_413820(int32_t a1);
int32_t function_413860(int32_t a1);
int32_t function_4138b0(int32_t a1);
int32_t function_413920(void);
int32_t function_413930(int32_t a1);
int32_t function_4139c0(int32_t a1);
int32_t function_413ab0(uint32_t a1, int32_t a2, int32_t a3);
int32_t function_413d20(int32_t a1, uint32_t a2, int32_t a3, uint32_t a4);
int32_t function_413dd0(int32_t a1, int32_t a2, int32_t a3, int32_t result);
int32_t function_413fe0(void);
int32_t function_414060(int32_t a1);
int32_t function_4141b0(uint32_t a1, int32_t lpBuffer, uint32_t nNumberOfBytesToWrite);
int32_t function_4143e0(uint32_t a1, int32_t lDistanceToMove, int32_t dwMoveMethod);
int32_t function_4144a0(int32_t a1);
int32_t function_414510(int32_t a1);
int32_t function_414526(int32_t a1);
int32_t function_4145e0(int32_t * a1);
int32_t function_414680(int32_t a1, int32_t * a2);
int32_t function_4146d0(void);
int32_t function_4147a0(void);
int32_t function_4147c0(int32_t * a1);
int32_t function_415170(int32_t a1, int32_t a2, int32_t result);
int32_t function_4151c0(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_415200(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_415240(int32_t a1);
int32_t function_415250(int32_t a1);
int32_t function_415270(int32_t a1);
int32_t function_415280(void);
int32_t function_4152f8(void);
int32_t function_41530a(void);
int32_t function_415324(void);
int32_t function_415334(void);
int32_t function_415390(int32_t a1);
int32_t function_4153bf(void);
int32_t function_4153d1(void);
int32_t function_4153de(void);
int32_t function_415421(void);
int32_t function_415455(void);
int32_t function_415504(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_41553e(void);
int32_t function_415545(void);
int32_t function_415675(int32_t a1, int32_t a2);
int32_t function_4156e0(int32_t a1, int32_t a2);
int32_t function_415730(int32_t a1, int32_t a2);
int32_t function_415750(uint32_t a1);
int32_t function_415800(uint32_t a1);
int32_t function_415890(void);
int32_t function_4158a0(uint32_t a1, int32_t a2);
int32_t function_415940(uint32_t result);
int32_t function_415a30(int32_t a1, int32_t a2);
int32_t function_415aa0(int32_t a1, int32_t a2);
int32_t function_415b10(int32_t * a1, int32_t a2);
int32_t function_415bc0(int32_t * a1, int32_t * a2);
int32_t function_415be0(int32_t * a1);
int32_t function_415bf0(int32_t * a1);
int32_t function_415c10(int32_t * a1, int32_t a2);
int32_t function_415cc0(int32_t a1, int32_t a2);
int32_t function_415e90(int32_t * a1, int32_t a2);
int32_t function_415eb0(int32_t * a1, int32_t a2);
int32_t function_415ed0(int32_t * a1, int32_t a2);
int32_t function_415f10(int32_t * a1, int32_t a2);
int32_t function_415f50(int32_t a1, int32_t a2, int32_t a3);
int32_t function_415fe0(void);
int32_t function_416050(int32_t * a1, int32_t * a2);
int32_t function_416110(uint32_t result, uint32_t a2, uint32_t a3);
int32_t function_416260(int32_t * a1);
int32_t function_416300(int32_t result, char * a2, int32_t a3);
int32_t function_416400(void);
int32_t function_4164c0(uint32_t a1, int32_t hHandle);
int32_t function_416570(uint32_t a1);
int32_t function_416600(uint32_t a1);
int32_t function_416650(uint32_t a1);
int32_t function_4166c0(int32_t a1);
int32_t function_416710(uint32_t a1, int32_t lDistanceToMove, int32_t a3, int32_t dwMoveMethod);
int32_t function_416800(int32_t a1);
int32_t function_4169e0(int32_t lpFileName, uint32_t a2, int32_t a3, int32_t a4);
int32_t function_416e00(uint32_t a1);
int32_t function_416e30(void);
int32_t function_416eb0(int32_t lpMultiByteStr, int32_t a2);
int32_t function_417178(void);
int32_t function_41717d(void);
int32_t function_417186(void);
int32_t function_41718b(void);
int32_t function_417192(void);
int32_t function_4171bd(void);
int32_t function_4171e7(void);
int32_t function_417226(void);
int32_t function_417243(void);
int32_t function_417250(int864_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5);
int32_t function_4174a0(int32_t a1, int32_t a2);
int32_t function_417644(void);
int32_t function_41764a(void);
int32_t function_417655(void);
int32_t function_417660(void);
int32_t function_417666(void);
int32_t function_41766c(void);
int32_t function_417672(void);
int32_t function_41768e(void);
int32_t function_4176a9(void);
int32_t function_4176ca(void);
int32_t function_4176da(void);
int32_t function_4176ee(void);
int32_t function_4176fe(void);
int32_t function_41771e(void);
int32_t function_41773d(void);
int32_t function_417762(void);
int32_t function_417776(void);
int32_t function_41778e(void);
int32_t function_4177a2(void);
int32_t function_4177c2(void);
int32_t function_4177e1(void);
int32_t function_417806(void);
int32_t function_41781a(void);
int32_t function_417832(void);
int32_t function_417846(void);
int32_t function_417866(void);
int32_t function_417885(void);
int32_t function_4178aa(void);
int32_t function_4178be(void);
int32_t function_4178d6(void);
int32_t function_4178ea(void);
int32_t function_41790a(void);
int32_t function_417929(void);
int32_t function_41794e(void);
int32_t function_417962(void);
int32_t function_41797a(void);
int32_t function_41798e(void);
int32_t function_4179ae(void);
int32_t function_4179cd(void);
int32_t function_4179f2(void);
int32_t function_417a06(void);
int32_t function_417a1e(void);
int32_t function_417a32(void);
int32_t function_417a52(void);
int32_t function_417a71(void);
int32_t function_417a96(void);
int32_t function_417aaa(void);
int32_t function_417ac2(void);
int32_t function_417ad6(void);
int32_t function_417ae9(void);
int32_t function_417cfc(void);
int32_t function_417d11(void);
int32_t function_418299(void);
int32_t function_41829f(void);
int32_t function_4182a5(void);
int32_t function_4182a8(void);
int32_t function_4182b0(int32_t a1, int32_t a2, int32_t a3);
int32_t function_4183d0(int32_t a1, char * a2, int32_t a3, int32_t * a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, char a9);
int32_t function_418500(int32_t a1, int32_t a2, char * a3, int32_t a4, int32_t * a5, int32_t a6, int32_t a7);
int32_t function_418730(int32_t a1, int32_t result);
int32_t function_418760(uint32_t a1, uint32_t a2, int32_t a3);
int32_t function_418790(int32_t a1, int32_t a2);
int32_t function_418800(int32_t a1);
int32_t function_418840(int32_t a1);
int32_t function_418880(int32_t a1, int32_t a2, int32_t a3);
int32_t function_418970(int32_t * a1);
int32_t function_4190c0(int32_t a1, uint32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t * a6, int32_t a7);
int32_t function_419460(uint32_t a1, int32_t a2);
int32_t function_4195d0(int32_t a1, int32_t a2, int32_t a3, int32_t a4);
int32_t function_419610(int32_t a1, int32_t a2, int32_t a3);
int32_t function_419680(int32_t a1, int32_t a2, int32_t * a3, int32_t a4, int32_t result);
int32_t function_419770(int32_t a1);
int32_t function_419790(int32_t a1, int32_t a2, int32_t a3);
int32_t function_419840(int32_t * a1, int32_t * a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6);
int32_t function_419bb0(int32_t a1, int32_t a2, int32_t a3);
int32_t function_419e70(int32_t result);
int32_t function_419ea0(void);
int32_t function_419eb0(int32_t a1, int32_t a2, int32_t a3);
int32_t function_419ed0(void);
int32_t function_419ef0(int32_t a1, int32_t a2);
int32_t function_419f30(int32_t a1);
int32_t function_419f90(int32_t * a1, char * a2);
int32_t function_41a240(int32_t a1, int32_t a2, int32_t a3);
int32_t function_41a2c0(uint32_t a1, int32_t a2);
int32_t function_41a340(int32_t result);
int32_t function_41a380(int32_t a1, int32_t a2);
int32_t function_456000(void);
int32_t function_456180(void);
int32_t function_4561c0(void);
int32_t function_456520(void);
int32_t function_456640(void);
int32_t function_456760(void);
int32_t function_4567a0(void);
int32_t function_4567f0(void);
int32_t function_456a09(void);
int32_t function_456a50(void);
int32_t function_456b20(void);
int32_t function_456c70(void);
int32_t function_456cb0(void);
int32_t function_456ce0(void);
int32_t function_456e00(void);
int32_t function_456ef0(void);
int32_t function_456f20(void);
int32_t function_456f60(void);
int32_t function_456fb0(void);
int32_t function_4571cb(void);
int32_t function_457210(void);
int32_t function_4572e0(void);
int32_t function_45741a(void);
int32_t function_457440(void);
int32_t function_c000000(void);
int32_t function_c40a319(void);

// --------------------- Global Variables ---------------------

char * g1; // 0x412a2c
char * g2; // 0x415090
char * g3; // 0x4150b8
char * g4; // 0x41512c
char * g5; // 0x416dc4
char * g6; // 0x418fe0
char * g7; // 0x419030
char * g8; // 0x419080
int32_t g9 = 0x1d29fda4; // 0x41b1c0
int32_t g10 = 0x6000006; // 0x41b638
char * g11; // 0x41b728
int16_t * g12 = NULL; // 0x41b72c
int32_t g13 = 0; // 0x41c000
int32_t g14 = 0; // 0x41c004
int32_t g15 = 0; // 0x41c008
int32_t g16 = 0; // 0x41c010
int32_t g17 = 0; // 0x41c014
int32_t g18 = 0; // 0x41c01c
int32_t g19 = 0; // 0x41c020
int32_t g20 = 0; // 0x41c024
int32_t g21 = 0; // 0x41c030
bool g22 = false; // 0x41c1fa
int32_t g23 = 0; // 0x41c200
int32_t g24 = 0; // 0x41c520
int32_t g25 = 0; // 0x41c538
int32_t g26 = 0; // 0x41c53c
int32_t g27 = 0; // 0x41c540
int32_t g28 = 0; // 0x41c544
int32_t g29 = 0; // 0x41c548
float64_t g30 = 0.0; // 0x41c550
int32_t g31 = 0; // 0x41c554
int32_t g32 = 640; // 0x41c558
int32_t g33 = 480; // 0x41c55c
int32_t g34 = 0; // 0x41c560
int32_t g35 = 1; // 0x41c79c
int32_t g36 = 0; // 0x41c7a0
int32_t g37 = 0; // 0x41c7a8
int32_t g38 = 0; // 0x41c7ac
int32_t g39 = 0; // 0x41c7b0
int32_t g40 = 0; // 0x41c824
int32_t g41 = 0; // 0x41c828
int32_t g42 = 0; // 0x41c82c
int32_t g43 = 0; // 0x41c830
int32_t g44 = 0; // 0x41c844
int32_t g45 = 0; // 0x41c848
char g46[2] = "r"; // 0x41c860
int32_t g47 = 640; // 0x41c870
int32_t g48 = 480; // 0x41c874
int32_t g49 = 8; // 0x41c878
int32_t g50 = 1; // 0x41c87c
int32_t g51 = 0; // 0x41c890
int32_t g52 = 0; // 0x41c894
char * g53 = "\xff\xff\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30-=\xff\xffQWERTYUIOP{}\xff\xff\x41SDFGHJKL;'\xff\xff\\ZXCVBNM,./\xff*\xff \xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x37\x38\x39-456+1230."; // 0x41c898
int32_t g54 = 0; // 0x41c90c
int32_t g55 = 0; // 0x41c910
int32_t g56 = 0; // 0x41c958
int32_t g57 = 4; // 0x41c964
int32_t g58 = 0; // 0x41c968
int32_t g59 = 0; // 0x41c96c
int32_t g60 = 0; // 0x41c970
int32_t g61 = 18; // 0x41c978
int32_t g62 = 0; // 0x41c97c
int32_t g63 = 0; // 0x41c980
int32_t g64 = 0; // 0x41c984
int32_t g65 = 0; // 0x41c988
int32_t g66 = 0; // 0x41c98c
int32_t g67 = 0; // 0x41c990
int32_t g68 = 0; // 0x41c994
int32_t g69 = 0; // 0x41c998
int32_t g70 = 0; // 0x41c99c
int32_t g71 = 0; // 0x41c9a0
int32_t g72 = 0; // 0x41c9a4
int32_t g73 = 0; // 0x41c9a8
int32_t g74 = 0; // 0x41c9ac
int32_t g75 = 0; // 0x41c9b8
int32_t g76 = 0; // 0x41c9bc
int32_t g77 = 0; // 0x41c9c0
int32_t g78 = 0; // 0x41c9c4
int32_t g79 = 0; // 0x41c9c8
int32_t g80 = 0; // 0x41c9cc
int32_t g81 = 0; // 0x41c9d0
int32_t g82 = 0; // 0x41c9d4
int32_t g83 = 0; // 0x41c9dc
int32_t g84 = 0; // 0x41c9e4
int32_t g85 = 0; // 0x41c9e8
int32_t g86 = 8; // 0x41c9ec
int32_t g87 = 0; // 0x41ca54
int32_t g88 = 0; // 0x41ca58
char * g89; // 0x41ca5c
int32_t g90 = 0; // 0x41ca60
int32_t g91 = 0; // 0x41ca64
int32_t g92 = 0; // 0x41ca6c
int32_t g93 = 0; // 0x41ca70
int32_t g94 = 0; // 0x41ca74
int32_t g95 = 0; // 0x41ca78
char g96 = 0; // 0x41ca98
int32_t g97 = 0; // 0x41ca9c
int32_t g98 = 0; // 0x41caa0
int32_t g99 = 0; // 0x41caa4
char g100 = 0; // 0x41caa8
int32_t g101 = 0; // 0x41caac
int32_t g102 = 0; // 0x41cab0
int32_t g103 = 0; // 0x41cab4
int32_t g104 = 0; // 0x41cab8
int32_t g105 = 0; // 0x41cabc
int32_t g106 = 0; // 0x41cac0
int32_t g107 = 0; // 0x41cac4
int32_t g108 = 0; // 0x41cac8
int32_t g109 = 0; // 0x41cacc
int32_t g110 = 0; // 0x41cad0
int32_t g111 = 0; // 0x41cad4
int32_t g112 = 0; // 0x41cad8
int64_t g113 = 0; // 0x41cadc
int64_t g114 = 0; // 0x41cae0
int32_t g115 = 0; // 0x41caec
int32_t g116 = 0; // 0x41caf0
int32_t g117 = 0; // 0x41caf4
int32_t g118 = 0; // 0x41caf8
int32_t g119 = 0; // 0x41cafc
int32_t g120 = 0; // 0x41cb00
int32_t g121 = 0; // 0x41cb04
int32_t g122 = 0; // 0x41cb08
int32_t g123 = 0; // 0x41cb0c
int32_t g124 = 0; // 0x41cb10
int32_t g125 = 0; // 0x41cb14
int32_t g126 = 0; // 0x41cb18
int32_t g127 = 0; // 0x41cb1c
int32_t g128 = 0; // 0x41cb20
int32_t g129 = 0; // 0x41cb24
int32_t g130 = 0; // 0x41cb28
int64_t g131 = 0; // 0x41cb2c
int64_t g132 = 0; // 0x41cb30
int64_t g133 = 0; // 0x41cb34
int32_t g134 = 0; // 0x41cb38
int32_t g135 = 0; // 0x41cb3c
int32_t g136 = 0; // 0x41cb40
int32_t g137 = 0; // 0x41cb44
int64_t g138 = 0; // 0x41cb48
int32_t g139 = 0; // 0x41cbdc
int32_t g140 = 0; // 0x41cbe0
int64_t g141 = 0; // 0x41cbe4
int64_t g142 = 0; // 0x41cbe8
int32_t g143 = 0; // 0x41cbf0
int32_t g144 = 0; // 0x41cbf4
int32_t g145 = 0; // 0x41cbf8
int32_t g146 = 0; // 0x41cc00
int32_t g147 = 0; // 0x41cc04
int32_t g148 = 0; // 0x41cc08
int32_t g149 = 0; // 0x41cc0c
int32_t g150 = 0; // 0x41cc10
int32_t g151 = 0; // 0x41cc14
int32_t g152 = 0; // 0x41cc1c
int32_t g153 = 0; // 0x41cc20
char g154 = 0; // 0x41cc34
int32_t g155 = 0; // 0x41cc38
int32_t g156 = 0; // 0x41cc3c
char g157 = 0; // 0x41cc44
int32_t g158 = 0; // 0x41cc48
int32_t g159 = 0; // 0x41cc4c
int32_t g160 = 0; // 0x41cc50
int32_t g161 = 0; // 0x41cc54
int32_t g162 = 0; // 0x41cc58
int32_t g163 = 0; // 0x41cc5c
int32_t g164 = 0; // 0x41cc60
int32_t g165 = 0; // 0x41cc64
int32_t g166 = 0; // 0x41cc68
int32_t g167 = 0; // 0x41cc6c
int32_t g168 = 0; // 0x41cc70
int32_t g169 = 0; // 0x41cc74
int32_t g170 = 0; // 0x41cc78
int32_t g171 = 0; // 0x41cc7c
int32_t g172 = 0; // 0x41cc80
int32_t g173 = 0; // 0x41cc84
int32_t g174 = 0; // 0x41cc88
int32_t g175 = 0; // 0x41cc8c
int32_t g176 = 0; // 0x41cc90
int32_t g177 = 0; // 0x41cc94
int32_t g178 = 0; // 0x41cc98
int32_t g179 = 0; // 0x41cc9c
int32_t g180 = 0; // 0x41cca0
int32_t g181 = 0; // 0x41cca4
int32_t g182 = 0; // 0x41cca8
int32_t g183 = 0; // 0x41ccac
int32_t g184 = 0; // 0x41ccb0
int32_t g185 = 0; // 0x41ccb4
int32_t g186 = 0; // 0x41ccb8
int32_t g187 = 0; // 0x41cda4
int32_t g188 = 0; // 0x41cdac
int16_t g189 = 0; // 0x41cdb0
int32_t g190 = 0; // 0x41cdb4
int16_t g191 = 0; // 0x41cdb8
int32_t g192 = 0; // 0x41cdbc
int32_t g193 = 0; // 0x41cdc0
int32_t g194 = 0; // 0x41cdc4
int32_t g195 = 0; // 0x41cdc8
int32_t g196 = 0; // 0x41cdcc
int32_t g197 = 0; // 0x41cdd0
int32_t g198 = 0; // 0x41cdd4
int32_t g199 = 0; // 0x41cdd8
int32_t g200 = 0; // 0x41cddc
int32_t g201 = 0; // 0x41cde0
int32_t g202 = 0; // 0x41cde4
int32_t g203 = 0; // 0x41cde8
int32_t g204 = 0; // 0x41cdec
int64_t g205 = 0; // 0x41cdf0
int32_t g206 = 0; // 0x41cdf8
int32_t g207 = 0; // 0x41d75c
int32_t g208 = 0x40ce20; // 0x42c21c
int16_t g209 = 0; // 0x42c240
int32_t g210 = 0; // 0x42c244
int16_t g211 = 0; // 0x42c248
int32_t g212 = 0; // 0x42c24c
int64_t g213 = 0; // 0x42c250
int32_t g214 = 0; // 0x42c254
int64_t g215 = 0; // 0x42c258
int32_t g216 = 0; // 0x43012c
int32_t g217 = 0; // 0x430130
int16_t g218 = 0; // 0x430134
int16_t g219 = 0; // 0x430136
int16_t g220 = 0; // 0x430138
int16_t g221 = 0; // 0x43013a
int16_t g222 = 0; // 0x43013c
int32_t g223 = 0; // 0x430140
int32_t g224 = 0; // 0x430144
int32_t g225 = 0; // 0x430148
int32_t g226 = 0; // 0x43014c
int32_t g227 = 0; // 0x430150
int32_t g228 = 0; // 0x430154
int32_t g229 = 0; // 0x430158
int32_t g230 = 0; // 0x43015c
int64_t g231 = 0; // 0x430160
int64_t g232 = 0; // 0x430164
int32_t g233 = 0; // 0x430168
int32_t g234 = 0; // 0x43016a
int32_t g235 = 0; // 0x43016c
int32_t g236 = 0; // 0x43016e
int32_t g237 = 0; // 0x430170
int32_t g238 = 0; // 0x430172
int16_t g239 = 0; // 0x430174
int32_t g240 = 0; // 0x430178
int64_t g241 = 0; // 0x43017c
int64_t g242 = 0; // 0x430180
int64_t g243 = 0; // 0x430188
int32_t g244 = 0; // 0x43018c
int32_t g245 = 0; // 0x43018e
int32_t g246 = 0; // 0x430190
int32_t g247 = 0; // 0x430192
int32_t g248 = 0; // 0x430194
int32_t g249 = 0; // 0x430196
int32_t g250 = 0; // 0x430198
int16_t g251 = 0; // 0x43019c
int32_t g252 = 0; // 0x4301a0
int16_t g253 = 0; // 0x4301a4
int32_t g254 = 0; // 0x4301a8
int64_t g255 = 0; // 0x4301ac
int32_t g256 = 0; // 0x4301b0
int32_t g257 = 0; // 0x434082
int32_t g258 = 0; // 0x434086
int16_t g259 = 0; // 0x43408a
int16_t g260 = 0; // 0x43408c
int16_t g261 = 0; // 0x43408e
int32_t g262 = 0; // 0x434090
int32_t g263 = 0; // 0x434098
int32_t g264 = 0; // 0x43409c
int32_t g265 = 0; // 0x4340a8
int32_t g266 = 0; // 0x4340ac
int32_t g267 = 0; // 0x4340b8
int32_t g268 = 0; // 0x4340bc
int32_t g269 = 0; // 0x4340cc
int32_t g270 = 0; // 0x4340d0
int32_t g271 = 0; // 0x4340d4
int32_t g272 = 0; // 0x4340d8
int16_t g273 = 0; // 0x4340dc
int32_t g274 = 0; // 0x4340de
int16_t g275 = 0; // 0x4340e2
int32_t g276 = 0; // 0x4340e4
int32_t g277 = 0; // 0x4340e8
int32_t g278 = 0; // 0x4340ec
int32_t g279 = 0; // 0x4340f0
int32_t g280 = 0; // 0x4340f4
int32_t g281 = 0; // 0x4340fc
int32_t g282 = 0; // 0x434100
int32_t g283 = 0; // 0x434104
int64_t g284 = 0; // 0x434108
int64_t g285 = 0; // 0x43410c
int64_t g286 = 0; // 0x434110
int64_t g287 = 0; // 0x434114
int64_t g288 = 0; // 0x43411c
int32_t g289 = 0; // 0x434120
int16_t g290 = 0; // 0x434122
int32_t g291 = 0; // 0x434124
int32_t g292 = 0; // 0x434126
int16_t g293 = 0; // 0x434128
int32_t g294 = 0; // 0x43412a
int32_t g295 = 0; // 0x43412c
int64_t g296 = 0; // 0x434130
int32_t g297 = 0; // 0x434134
int32_t g298 = 0; // 0x434138
int32_t g299 = 0; // 0x4366b8
int16_t g300 = 0; // 0x4366bc
int32_t g301 = 0xc00000; // 0x4366c4
int16_t g302 = 0; // 0x4366c8
int32_t g303 = 0; // 0x4366ca
int32_t g304 = 0; // 0x4366d0
float64_t g305 = 0.0; // 0x4366d4
float32_t g306 = 0.0f; // 0x4366e4
int32_t g307 = 0; // 0x4366e8
int32_t g308 = 0; // 0x4366ec
int32_t g309 = 0; // 0x4366f0
int32_t g310 = 0; // 0x4366f4
int32_t g311 = 0; // 0x4366f8
int32_t g312 = 0; // 0x4366fc
float32_t g313 = 0.0f; // 0x436700
float32_t g314 = 0.0f; // 0x436704
int32_t g315 = 0; // 0x436708
float32_t g316 = 0.0f; // 0x43670c
float32_t g317 = 0.0f; // 0x436710
int32_t g318 = 0; // 0x436714
int32_t g319 = 0; // 0x436718
int32_t g320 = 0; // 0x43671c
int32_t g321 = 0; // 0x436720
int32_t g322 = 0; // 0x436724
float32_t g323 = 0.0f; // 0x436728
float32_t g324 = 0.0f; // 0x43672c
float32_t g325 = 0.0f; // 0x436730
float32_t g326 = 0.0f; // 0x436734
float32_t g327 = 0.0f; // 0x436738
float32_t g328 = 0.0f; // 0x43673c
int32_t g329 = 0; // 0x436740
int32_t g330 = 0; // 0x436744
int32_t g331 = 0; // 0x436748
int32_t g332 = 0; // 0x43674c
int32_t g333 = 0; // 0x436750
int32_t g334 = 0; // 0x436754
int32_t g335 = 0; // 0x436758
int32_t g336 = 0; // 0x43675c
int32_t g337 = 0; // 0x436760
int32_t g338 = 0; // 0x436764
int32_t g339 = 0; // 0x436768
int32_t g340 = 0; // 0x43676c
int32_t g341 = 0; // 0x436770
int32_t g342 = 0; // 0x436774
int32_t g343 = 0; // 0x436778
int32_t g344 = 0; // 0x43677c
int32_t g345 = 0; // 0x436780
int32_t g346 = 0; // 0x436784
int32_t g347 = 0; // 0x436788
int32_t g348 = 0; // 0x43678c
int32_t g349 = 0; // 0x436790
int32_t g350 = 0; // 0x436794
int32_t g351 = 0; // 0x436798
int32_t g352 = 0; // 0x43679c
int32_t g353 = 0; // 0x4367a0
float32_t g354 = 0.0f; // 0x4367a4
float32_t g355 = 0.0f; // 0x4367a8
int32_t g356 = 0; // 0x4367ac
int32_t g357 = 0; // 0x4367b0
int32_t g358 = 0; // 0x4367b4
int32_t g359 = 0; // 0x4367b8
int32_t g360 = 0; // 0x4367bc
int32_t g361 = 0; // 0x4367c0
int32_t g362 = 0; // 0x4367c4
int32_t g363 = 0; // 0x4367c8
float32_t g364 = 0.0f; // 0x4367cc
float32_t g365 = 0.0f; // 0x4367d0
int32_t g366 = 0; // 0x4367d4
float32_t * g367 = NULL; // 0x4367d8
int32_t g368 = 0; // 0x436828
int32_t g369 = 0; // 0x436878
int32_t g370 = 0; // 0x43687c
int32_t g371 = 0; // 0x436880
int32_t g372 = 0; // 0x436884
int32_t g373 = 0; // 0x436888
int32_t g374 = 0; // 0x43688c
int32_t g375 = 0; // 0x436890
int32_t g376 = 0; // 0x436894
int64_t g377 = 0; // 0x436898
int64_t g378 = 0; // 0x43689c
int32_t g379 = 0; // 0x4368a0
int32_t g380 = 0; // 0x4368a8
int32_t g381 = 0; // 0x4368ac
int32_t g382 = 0; // 0x4368b0
int32_t g383 = 0; // 0x4368b4
int32_t g384 = 0; // 0x4368b8
int32_t g385 = 0; // 0x4368bc
int16_t g386 = 0; // 0x4368c0
int32_t g387 = 0; // 0x4368c4
int16_t g388 = 0; // 0x4368c8
int32_t g389 = 0; // 0x4368cc
int64_t g390 = 0; // 0x4368d0
int32_t g391 = 0; // 0x4368d4
int64_t g392 = 0; // 0x4368d8
int32_t g393 = 0; // 0x43a7ac
int32_t g394 = 0; // 0x43a7b0
int16_t g395 = 0; // 0x43a7b4
int16_t g396 = 0; // 0x43a7b6
int16_t g397 = 0; // 0x43a7b8
int16_t g398 = 0; // 0x43a7ba
int16_t g399 = 0; // 0x43a7bc
int32_t g400 = 0; // 0x43a7c0
int32_t g401 = 0; // 0x43a7c4
int32_t g402 = 0; // 0x43a7c8
int32_t g403 = 0; // 0x43a7cc
int32_t g404 = 0; // 0x43a7d0
int32_t g405 = 0; // 0x43a7d4
int32_t g406 = 0; // 0x43a7d8
int32_t g407 = 0; // 0x43a7dc
int32_t g408 = 0; // 0x43a7e0
int32_t g409 = 0; // 0x43a7e4
int32_t g410 = 0; // 0x43a7e8
int32_t g411 = 0; // 0x43a7ec
int32_t g412 = 0; // 0x43a7f0
int32_t g413 = 0; // 0x43a7f4
int32_t g414 = 0; // 0x43a7f8
int32_t g415 = 0; // 0x43a7fc
int32_t g416 = 0; // 0x43a800
int32_t g417 = 0; // 0x43a804
int32_t g418 = 0; // 0x43a808
int32_t g419 = 0; // 0x43a80c
int32_t g420 = 0; // 0x43a810
int32_t g421 = 0; // 0x43a814
int32_t g422 = 0; // 0x43a818
int32_t g423 = 0; // 0x43a81c
int32_t g424 = 0; // 0x43a820
int32_t g425 = 0; // 0x43a824
int32_t g426 = 0; // 0x43a828
int32_t g427 = 0; // 0x43a82c
int32_t g428 = 0; // 0x43a830
int32_t g429 = 0; // 0x43a834
int32_t g430 = 0; // 0x43a910
int32_t g431 = 0; // 0x43a914
int32_t g432 = 0; // 0x43a918
int32_t g433 = 0; // 0x43a91c
int32_t g434 = 0; // 0x43a920
int32_t g435 = 0; // 0x43a924
int32_t g436 = 0; // 0x43a928
int32_t g437 = 0; // 0x43a92c
int32_t g438 = 0; // 0x43a930
int32_t g439 = 0; // 0x43a934
int32_t g440 = 0; // 0x43a938
int32_t g441 = 0; // 0x43a93c
int32_t g442 = 0; // 0x43a940
char g443 = 0; // 0x43a944
int32_t g444 = 0; // 0x43a948
int32_t g445 = 0; // 0x43a94c
int64_t g446 = 0; // 0x43a950
int64_t g447 = 0; // 0x43a954
int64_t g448 = 0; // 0x43a960
int32_t g449 = 0; // 0x43a964
int32_t g450 = 0; // 0x43a968
int32_t g451 = 0; // 0x43a96c
int32_t g452 = 0; // 0x43a970
int32_t g453 = 0; // 0x43a974
int32_t g454 = 0; // 0x43a978
int32_t g455 = 0; // 0x43a97c
int32_t g456 = 0; // 0x43a980
int32_t g457 = 0; // 0x43a984
int32_t g458 = 0; // 0x43a988
int32_t g459 = 0; // 0x43a98c
int32_t g460 = 0; // 0x43a990
int32_t g461 = 0; // 0x43a994
int32_t g462 = 0; // 0x43a998
int32_t g463 = 0; // 0x43a99c
int32_t g464 = 0; // 0x43a9a0
int32_t g465 = 0; // 0x43a9a4
int32_t g466 = 0; // 0x43a9f0
int32_t g467 = 0; // 0x43a9f4
int64_t g468 = 0; // 0x43a9f8
int64_t g469 = 0; // 0x43a9fc
int32_t g470 = 0; // 0x43aa04
int32_t g471 = 0; // 0x43aa08
int32_t g472 = 0; // 0x43aa0c
int32_t g473 = 0; // 0x43aa14
int32_t g474 = 0; // 0x43aa18
int32_t g475 = 0; // 0x43aa1c
int32_t g476 = 0; // 0x43aa20
int32_t g477 = 0; // 0x43aa24
int32_t g478 = 0; // 0x43aa28
int32_t g479 = 0; // 0x43aa30
int32_t g480 = 0; // 0x43aa34
int32_t g481 = 0; // 0x43aa44
int32_t g482 = 0; // 0x43aa48
int32_t g483 = 0x410e20; // 0x43aa4c
int32_t g484 = 0; // 0x43aa58
int32_t g485 = 0; // 0x43aa5c
int32_t g486 = 0; // 0x43aa60
uint32_t g487 = 0; // 0x43aa64
char g488 = 0; // 0x43aa65
int32_t g489 = 0; // 0x43aa68
int32_t g490 = 0; // 0x43aa6c
int32_t g491 = 0; // 0x43aa70
int32_t g492 = 0; // 0x43aa74
int32_t g493 = 0; // 0x43aa78
int32_t g494 = 0; // 0x43aa80
char * g495; // 0x43aa90
char g496 = 0; // 0x43aa98
int32_t g497 = 0; // 0x43aa9c
int32_t g498 = 0; // 0x43aaa0
char * g499; // 0x43aaa4
int32_t g500 = 0; // 0x43aab0
int32_t g501 = 2; // 0x43aab4
int32_t g502 = 0x415890; // 0x43aac0
int32_t g503 = 0x415890; // 0x43aac4
int32_t g504 = 0x415890; // 0x43aac8
int32_t g505 = 0x415890; // 0x43aacc
int32_t g506 = 0x415890; // 0x43aad0
int32_t g507 = 0x415890; // 0x43aad4
char g508 = 0; // 0x43aad8
int32_t g509 = 0; // 0x43aadc
int32_t g510 = 0; // 0x43aae0
int32_t g511 = -0x3ffffffb; // 0x43aaf8
int32_t g512 = 0; // 0x43ab00
int32_t g513 = 3; // 0x43ab70
int32_t g514 = 7; // 0x43ab74
int32_t g515 = 10; // 0x43ab78
struct _EXCEPTION_POINTERS * g516 = (struct _EXCEPTION_POINTERS *)140; // 0x43ab7c
int32_t g517 = 0; // 0x43ab80
int32_t g518 = 0; // 0x43ab88
char * g519; // 0x43ab90
char * g520; // 0x43ab91
int32_t g521 = 0; // 0x43ac94
int32_t g522 = 0; // 0x43ac98
int32_t g523 = 0; // 0x43aca0
int32_t g524 = 0; // 0x43aca4
int32_t g525 = 0; // 0x43aca8
int32_t g526 = 0; // 0x43acac
char * g527 = "\x01\x02\x04\b"; // 0x43acb0
int32_t g528 = 932; // 0x43acb8
int32_t g529 = -0x7d867da0; // 0x43acbc
int32_t g530 = 33; // 0x43acc0
char * g531 = "\xa6\xdf"; // 0x43acc8
bool g532 = true; // 0x43ada8
int32_t g533 = 2; // 0x43adb8
char (*g534)[37] = "R6002\r\n- floating point not loaded\r\n"; // 0x43adbc
bool g535 = false; // 0x43ae48
int32_t g536 = 0; // 0x43ae4c
int32_t g537; // 0x43ae50
int32_t g539 = 0; // 0x43b660
int32_t g541 = 0; // 0x43b668
int32_t g542 = 480; // 0x43b66c
int32_t g543 = 1; // 0x43b670
int32_t g544 = 22; // 0x43b674
bool g545 = false; // 0x43b7d8
int32_t g546 = 0; // 0x43b7e0
int32_t g548 = 0; // 0x43b7f8
int32_t g549 = 0; // 0x43b808
int32_t g550 = 0; // 0x43b828
bool g551 = false; // 0x43b858
int32_t g552 = 0; // 0x43ba68
char (*g553)[7] = "(null)"; // 0x43ba6c
int16_t (*g554)[7] = L"(null)"; // 0x43ba70
float64_t g555 = 0.5; // 0x43bab2
int32_t g556 = 1; // 0x43bb80
char g557 = 46; // 0x43bb84
int32_t g558; // 0x43bb90
int16_t * g559 = (int16_t *)0x200020; // 0x43bb9a
int32_t g560 = 0; // 0x43bdd0
int32_t g561 = 0; // 0x43bdd8
int32_t g562 = 0; // 0x43bde8
int32_t g563 = 0; // 0x43bdec
int32_t g564 = 0; // 0x43bdf0
int32_t g565 = 0; // 0x43bdf4
int32_t g566 = 0; // 0x43be00
int32_t g567 = 0; // 0x43bfa4
int32_t g568 = 0; // 0x43bfac
int32_t g569 = 0; // 0x43bfb0
float64_t g570 = INFINITY; // 0x43bfb8
int32_t g571 = 0x7ff00000; // 0x43bfbc
int32_t g572 = 0; // 0x43bfc0
int32_t g573 = -0x80000; // 0x43bfc4
float64_t g574 = 1.7976931348623157e+308; // 0x43bfc8
int32_t g575 = 0x7fefffff; // 0x43bfcc
int32_t g576 = 0; // 0x43bfd8
int32_t g577 = -0x80000000; // 0x43bfdc
int32_t g578 = 17; // 0x43c080
int32_t g579 = 0x2694; // 0x43c0b8
int32_t g580 = -0x5f5159f2; // 0x43c1e0
int32_t g581 = 0; // 0x43c3a0
int32_t g582 = 0; // 0x43c3c4
int32_t g583 = 0; // 0x43c3c8
int32_t g584 = 0; // 0x43c3cc
int32_t g585 = 0; // 0x43c3d0
int32_t g586 = 0; // 0x43c3d8
int64_t g587 = 0; // 0x43c3fc
int32_t g588 = 0; // 0x43c400
int32_t g589 = 0; // 0x43c408
int32_t g590 = 0; // 0x43c40c
int32_t g591 = 0; // 0x43c410
int32_t g592 = 0; // 0x43c414
int32_t g593 = 0; // 0x43c418
int32_t g594 = 0; // 0x43c41c
int32_t g595 = 0; // 0x43c420
bool g596 = false; // 0x43c460
int32_t g597 = 0; // 0x43c464
int32_t g598 = 0; // 0x43c468
struct tagRECT * g599 = NULL; // 0x43c780
struct tagPOINT * g600 = NULL; // 0x43c788
struct tagRECT * g601 = NULL; // 0x43c790
int32_t g602 = 0; // 0x43c7a4
int32_t g603 = 0; // 0x43c7b0
int32_t g604 = 0; // 0x43c7b8
int32_t g605 = 0; // 0x43c7bc
int32_t g606 = 0; // 0x43c7c0
int32_t g607 = 0; // 0x43c7c4
int32_t g608 = 0; // 0x43c7c8
int32_t g609 = 0; // 0x43c7cc
int32_t g610 = 0; // 0x43c7d0
int32_t g611 = 0; // 0x43c7d4
int32_t g612 = 0; // 0x43c7d8
int32_t g613 = 0; // 0x43c7dc
int32_t g614 = 0; // 0x43c7e0
int32_t g615 = 0; // 0x43c7e4
int64_t g616 = 0; // 0x43c7e8
int64_t g617 = 0; // 0x43c7ec
int64_t g618 = 0; // 0x43c7f0
int32_t g619 = 0; // 0x43c7f4
int32_t g620 = 0; // 0x43c7f8
int32_t g621 = 0; // 0x43c824
int32_t g622 = 0; // 0x43c8e8
int32_t g623 = 0; // 0x43c8ec
int32_t g624 = 0; // 0x43c904
int32_t g625 = 0; // 0x43c908
int32_t g626 = 0; // 0x43c90c
int32_t g627 = 0; // 0x43c914
int32_t g628 = 0; // 0x43c918
int32_t g629 = 0; // 0x43c944
bool g630 = false; // 0x43ccd8
int32_t g631 = 0; // 0x43ccdc
int32_t g632 = 0; // 0x43cce0
int32_t g633 = 0; // 0x43cce4
int32_t g634 = 0; // 0x43cce8
int32_t g635 = 0; // 0x43ccec
int32_t g636 = 0; // 0x43ccf0
int32_t g637 = 0; // 0x43ccf4
int32_t g638 = 0; // 0x43ccf8
int32_t g639 = 0; // 0x43ccfc
int32_t g640 = 0; // 0x43cd00
bool g641 = false; // 0x43cd04
int32_t g642 = 0; // 0x43cd08
int32_t g643 = 0; // 0x43cd0c
int32_t g644 = 0; // 0x43cd10
int32_t g645 = 0; // 0x43cd14
int32_t g646 = 0; // 0x43cd18
int32_t g647 = 0; // 0x43cd1c
int32_t g648 = 0; // 0x43cd20
int32_t g649 = 0; // 0x43cd24
int32_t g650 = 0; // 0x43cd28
int32_t g651 = 0; // 0x43cd2c
int32_t g652 = 0; // 0x43cd30
int32_t g653 = 0; // 0x43cd44
int32_t g654 = 0; // 0x43cd48
int32_t g655 = 0; // 0x43cd4c
int32_t g656 = 0; // 0x43cd50
int32_t g657 = 0; // 0x43cd54
int32_t g658 = 0; // 0x43cd58
int32_t g659 = 0; // 0x43cd5c
char * g660; // 0x43cd60
int32_t g661 = 0; // 0x43cd64
char * g662; // 0x43cd68
int32_t g663 = 0; // 0x43cda8
char * g664; // 0x43cdb0
int32_t g665 = 0; // 0x43ceb0
int32_t g666 = 0; // 0x43ceb4
char * g667; // 0x43ceb8
char * g668; // 0x43cfb8
char * g669; // 0x43d0b8
int32_t g670 = 0; // 0x43d1b8
int32_t g671 = 0; // 0x43d1bc
int32_t g672 = 0; // 0x43d1c0
int32_t g673 = 0; // 0x43d1c4
int32_t g674 = 0; // 0x43d1c8
bool g675 = false; // 0x43d5c8
int32_t g676 = 0; // 0x43d8f0
int16_t * g677 = NULL; // 0x43dc0e
char * g678; // 0x43e0c0
int32_t g679 = 0; // 0x43e700
int32_t g680 = 0; // 0x43ea20
int32_t g681 = 0; // 0x43ea28
int32_t g682 = 0; // 0x43ea2c
int32_t g683 = 0; // 0x43ea30
int32_t g684 = 0; // 0x43ea34
int32_t g685 = 0; // 0x43ea38
int32_t g686 = 0; // 0x43ea3c
int32_t g687 = 0; // 0x43ea48
int32_t g688 = 0; // 0x43ea4c
int32_t g689 = 0; // 0x43ea50
int32_t g690 = 0; // 0x43ea54
int32_t g691 = 0; // 0x43eb58
int32_t g692 = 0; // 0x43eb5c
int32_t g693 = 0; // 0x43eb60
int32_t g694 = 0; // 0x43eb64
int32_t g695 = 0; // 0x43eb68
int32_t g696 = 0; // 0x43eb6c
int32_t g697 = 0; // 0x43eb70
int32_t g698 = 0; // 0x43eb78
int32_t g699 = 0; // 0x43eb79
int32_t g700 = 0; // 0x43eb7a
char * g701; // 0x43eb7c
int32_t g702 = 0; // 0x43ef78
char * g703; // 0x43ef80
bool g704 = false; // 0x43f380
int32_t g705 = 0; // 0x43f381
int32_t g706 = 0; // 0x43f382
char * g707; // 0x43f384
struct IDirectDraw ** g708 = NULL; // 0x43f780
char * g709; // 0x43f7c8
int32_t g710 = 0; // 0x43f7cc
int32_t g711 = 0; // 0x43f7d4
int32_t g712 = 0; // 0x43f7d8
int32_t g713 = 0; // 0x43f7dc
int32_t g714 = 0; // 0x43f7e0
int32_t g715 = 0; // 0x43f7e4
int32_t g716 = 0; // 0x43f7e8
int32_t g717 = 0; // 0x43f7e9
int32_t g718 = 0; // 0x440844
char * g719; // 0x444870
int32_t g720 = 0; // 0x444874
int32_t g721 = 0; // 0x444878
int32_t g722 = 0; // 0x44487c
int32_t g723 = 0; // 0x444880
int32_t g724 = 0; // 0x444884
int32_t g725 = 0; // 0x444888
int32_t g726 = 0; // 0x4448b0
int32_t g727 = 0; // 0x4448b4
int32_t g728 = 0; // 0x4448b8
int32_t g729 = 0; // 0x4448bc
int32_t g730 = 0; // 0x4448c0
int32_t g731 = 0; // 0x4448c4
int32_t g732 = 0; // 0x4448c8
int32_t g733 = 0; // 0x4448cc
int32_t g734 = 0; // 0x4448d0
int32_t g735 = 0; // 0x4448d4
int32_t g736 = 0; // 0x4448d8
char * g737; // 0x4448e8
int32_t g738 = 0; // 0x4448ec
int32_t g739 = 0; // 0x4448f0
int32_t g740 = 0; // 0x4448f4
int32_t g741 = 0; // 0x4448f8
int32_t g742 = 0; // 0x4448fc
int32_t g743 = 0; // 0x444908
int32_t g744 = 0; // 0x444970
int32_t g745 = 0; // 0x444974
int32_t g746 = 0; // 0x444978
int32_t g747 = 0; // 0x44497c
int32_t g748 = 0; // 0x4449e8
int32_t g749 = 0; // 0x4449ec
int32_t g750 = 0; // 0x4449f0
int32_t g751 = 0; // 0x4449f4
int32_t g752 = 0; // 0x444b18
int32_t g753 = 0; // 0x444b1c
int32_t g754 = 0; // 0x444b20
int32_t g755 = 0; // 0x444b24
int32_t g756 = 0; // 0x444b28
int32_t g757 = 0; // 0x444b80
int32_t g758 = 0; // 0x444b84
int32_t g759 = 0; // 0x444b88
int32_t g760 = 0; // 0x444b8c
char * g761; // 0x444c40
int32_t g762 = 0; // 0x445048
int32_t g763 = 0; // 0x44504c
int32_t g764 = 0; // 0x445050
int32_t g765 = 0; // 0x445054
int32_t g766 = 0; // 0x445058
int32_t g767 = 0; // 0x445068
int32_t g768 = 0; // 0x44506c
int32_t g769 = 0; // 0x445070
int32_t g770 = 0; // 0x445074
int32_t g771 = 0; // 0x445088
int32_t g772 = 0; // 0x44508c
int32_t g773 = 0; // 0x445090
int32_t g774 = 0; // 0x445094
int32_t g775 = 0; // 0x4450a0
int32_t g776 = 0; // 0x4450a4
int32_t g777 = 0; // 0x4450a8
int32_t g778 = 0; // 0x4450ac
int32_t g779 = 0; // 0x4450b8
int32_t g780 = 0; // 0x446ff8
int32_t g781 = 0; // 0x446ffc
int32_t g782 = 0; // 0x447000
int32_t g783 = 0; // 0x447004
int32_t g784 = 0; // 0x447008
int32_t g785 = 0; // 0x44700c
int32_t g786 = 0; // 0x447038
int32_t g787 = 0; // 0x44cdf8
int32_t g788 = 0; // 0x44ce00
int32_t g789 = 0; // 0x44ce04
int32_t g790 = 0; // 0x44ce08
int32_t g791 = 0; // 0x44ce0c
int32_t g792 = 0; // 0x44ce10
int32_t g793 = 0; // 0x44ce14
int32_t g794 = 0; // 0x44ce18
int32_t g795 = 0; // 0x44ce1c
int32_t g796 = 0; // 0x44ce24
int32_t g797 = 0; // 0x44ce2c
int32_t g798 = 0; // 0x44ce30
int32_t g799 = 0; // 0x44ce34
int32_t g800 = 0; // 0x44ce38
int32_t g801 = 0; // 0x44ce3c
int32_t g802 = 0; // 0x44ce40
int32_t g803 = 0; // 0x44ce58
int32_t g804 = 0; // 0x44ce60
int32_t g805 = 0; // 0x44ce64
int32_t g806 = 0; // 0x44ce68
int32_t g807 = 0; // 0x44ce6c
int32_t g808 = 0; // 0x44ce70
int32_t g809 = 0; // 0x44ce74
int32_t g810 = 0; // 0x44ce78
int32_t g811 = 0; // 0x44ce7c
int32_t g812 = 0; // 0x44ce88
int32_t g813 = 0; // 0x44ce8c
int32_t g814 = 0; // 0x44ce90
int32_t g815 = 0; // 0x44ce94
int32_t g816 = 0; // 0x44ce98
int32_t g817 = 0; // 0x44ce9c
int32_t g818 = 0; // 0x44cea0
int32_t g819 = 0; // 0x44cea4
int32_t g820 = 0; // 0x44cea8
int32_t g821 = 0; // 0x44ceb0
int32_t g822 = 0; // 0x44ceb4
int32_t g823 = 0; // 0x44ceb8
int32_t g824 = 0; // 0x44cebc
int32_t g825 = 0; // 0x44cec0
int32_t g826 = 0; // 0x44cec4
int32_t g827 = 0; // 0x44ced8
int32_t g828 = 0; // 0x44cee0
int32_t g829 = 0; // 0x44cee4
int32_t g830 = 0; // 0x44cee8
int32_t g831 = 0; // 0x44ceec
int32_t g832 = 0; // 0x44cef0
int32_t g833 = 0; // 0x44cef4
int32_t g834 = 0; // 0x44cef8
int32_t g835 = 0; // 0x44cefc
int32_t g836 = 0; // 0x4526d8
int32_t g837 = 0; // 0x4526dc
int32_t g838 = 0; // 0x4526e0
int32_t g839 = 0; // 0x4526e4
int32_t g840 = 0; // 0x4526e8
int32_t g841 = 0; // 0x4526ec
int32_t g842 = 0; // 0x4526f0
int32_t g843 = 0; // 0x4526f4
int32_t g844 = 0; // 0x4526fc
int32_t g845 = 0; // 0x452700
int32_t g846 = 0; // 0x452704
int32_t g847 = 0; // 0x452708
int32_t g848 = 0; // 0x45270c
int32_t g849 = 0; // 0x452710
int32_t g850 = 0; // 0x452714
int32_t g851 = 0; // 0x452718
int32_t g852 = 0; // 0x45271c
int32_t g853 = 0; // 0x452720
int32_t g854 = 0; // 0x452724
int32_t g855 = 0; // 0x452728
int32_t g856 = 0; // 0x45272c
int32_t g857 = 0; // 0x452730
int32_t g858 = 0; // 0x452734
int32_t g859 = 0; // 0x452740
int32_t g860 = 0; // 0x452744
int32_t g861 = 0; // 0x452748
int32_t g862 = 0; // 0x45274c
int32_t g863 = 0; // 0x452750
int32_t g864 = 0; // 0x452754
int32_t g865 = 0; // 0x452758
int32_t g866 = 0; // 0x45275c
char * g867; // 0x452760
int32_t g868 = 0; // 0x452864
int32_t g869 = 0; // 0x452870
char g870 = 0; // 0x452878
int32_t g871 = 0; // 0x452880
char g872 = 0; // 0x452882
int32_t g873 = 0; // 0x452884
int32_t g874 = 0; // 0x4528a0
int32_t g875 = 0; // 0x4528a4
int32_t g876 = 0; // 0x4528a8
int32_t g877 = 0; // 0x4528ac
int32_t g878 = 0; // 0x4528b0
int32_t g879 = 0; // 0x4528b4
int32_t g880 = 0; // 0x4528b8
int32_t g881 = 0; // 0x4528bc
int32_t g882 = 0; // 0x4528c0
int32_t g883 = 0; // 0x4528c4
int32_t g884 = 0; // 0x4528c8
int32_t g885 = 0; // 0x4528d0
int32_t g886 = 0; // 0x452948
float64_t g887 = 0.0; // 0x452950
int64_t g888 = 0; // 0x452958
int32_t g889 = 0; // 0x45295c
int32_t g890 = 0; // 0x452960
int32_t g891 = 0; // 0x452970
int32_t g892 = 0; // 0x452974
int32_t g893 = 0; // 0x452978
int32_t g894 = 0; // 0x452980
int32_t g895 = 0; // 0x452984
int32_t g896 = 0; // 0x452988
int32_t g897 = 0; // 0x45298c
int32_t g898 = 0; // 0x452990
int32_t g899 = 0; // 0x452994
int32_t g900 = 0; // 0x452998
int32_t g901 = 0; // 0x45299c
int32_t g902 = 0; // 0x4529d0
int32_t g903 = 0; // 0x4529d4
int32_t g904 = 0; // 0x4529d8
int32_t g905 = 0; // 0x4529dc
int32_t g906 = 0; // 0x4529f8
int32_t g907 = 0; // 0x4529fc
int32_t g908 = 0; // 0x452a00
int32_t g909 = 0; // 0x452a08
int32_t g910 = 0; // 0x452a10
int32_t g911 = 0; // 0x452a20
int32_t g912 = 0; // 0x452e20
int16_t * g913 = NULL; // 0x452e30
int16_t g914 = 0; // 0x453030
int32_t g915 = 0; // 0x453034
int32_t g916 = 0; // 0x453038
int32_t g917 = 0; // 0x45303c
int32_t g918 = 0; // 0x453040
int32_t g919 = 0; // 0x453044
int32_t g920 = 0; // 0x453048
int64_t g921 = 0; // 0x45304c
int32_t g922 = 0; // 0x453050
int32_t g923 = 0; // 0x453054
int32_t g924 = 0; // 0x453058
int64_t g925 = 0; // 0x45305c
int32_t g926 = 0; // 0x453060
int32_t g927 = 0; // 0x453064
int32_t g928 = 0; // 0x453068
int32_t g929 = 0; // 0x45306c
struct IDirectSound ** g930 = NULL; // 0x453070
int32_t g931 = 0; // 0x453080
int32_t g932 = 0; // 0x453084
int32_t g933 = 0; // 0x453088
int64_t g934 = 0; // 0x45308c
int32_t g935 = 0; // 0x453090
int32_t g936 = 0; // 0x453094
int64_t g937 = 0; // 0x453098
int32_t g938 = 0; // 0x4530a0
int32_t g939 = 0; // 0x4530b0
int32_t g940 = 0; // 0x4530b4
uint32_t g941 = 0; // 0x4530b8
uint32_t g942 = 0; // 0x4530bc
int32_t g943 = 0; // 0x4530c0
char * g944; // 0x4530d0
int32_t g945 = 0; // 0x4534d0
int32_t g946 = 0; // 0x4534d4
int32_t g947 = 0; // 0x4534d8
int32_t g948 = 0; // 0x4534dc
int32_t g949 = 0; // 0x4534e0
int32_t g950 = 0; // 0x4534e4
int32_t g951 = 0; // 0x4534e8
int32_t g952 = 0; // 0x4534ec
int32_t g953 = 0; // 0x4534f0
int32_t g954 = 0; // 0x4534f4
int32_t g955 = 0; // 0x4534f8
int32_t g956 = 0; // 0x453500
int32_t g957 = 0; // 0x453504
int32_t g958 = 0; // 0x453508
int32_t g959 = 0; // 0x45350c
int32_t g960 = 0; // 0x453510
int32_t g961 = 0; // 0x453514
int32_t g962 = 0; // 0x453518
int32_t g963 = 0; // 0x45351c
int32_t g964 = 0; // 0x453520
int32_t g965 = 0; // 0x453524
int32_t g966 = 0; // 0x453528
int32_t g967 = 0; // 0x45352c
int32_t g968 = 0; // 0x453530
int32_t g969 = 0; // 0x453534
int32_t g970 = 0; // 0x453538
int32_t g971 = 0; // 0x45353c
int32_t g972 = 0; // 0x453540
int32_t g973 = 0; // 0x453544
int32_t g974 = 0; // 0x453548
int32_t g975 = 0; // 0x45354c
int32_t g976 = 0; // 0x453550
int32_t g977 = 0; // 0x453554
float32_t g978 = 0.0f; // 0x453558
int32_t g979 = 0; // 0x45355c
int32_t g980 = 0; // 0x453560
int32_t g981 = 0; // 0x453564
int32_t g982 = 0; // 0x453570
int32_t g983 = 0; // 0x454570
int32_t g984 = 0; // 0x454574
int32_t g985 = 0; // 0x454580
int32_t g986 = 0; // 0x454584
bool g987 = false; // 0x454680
char * g988; // 0x454684
int32_t g989 = 0; // 0x454688
int32_t g990 = 0; // 0x45468c
int32_t g991;
int32_t g992;
int32_t g993;
int32_t g994;
int32_t g995;
int32_t g996;
int32_t g997;
int32_t g998;
int32_t g999;
int32_t g1000;
int32_t g1001;
int32_t g1002;
int32_t g1003;
int32_t g1004;
int32_t g1005;
int32_t g1006;
int32_t g1007;
int32_t g1008;
int32_t * g538 = &g537; // 0x43ae54
int32_t * g540 = &g537; // 0x43b664
int32_t * g547 = &g982; // 0x43b7e8

// ------- Dynamically Linked Functions Without Header --------

int32_t DirectDrawCreate(struct _TYPEDEF_GUID * a1, struct IDirectDraw ** a2, int32_t * a3);
int32_t DirectInputCreateA(int32_t a1, int32_t a2, int32_t * a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9, int32_t a10, int32_t a11, int32_t a12, int32_t a13, int32_t a14);
int32_t DirectSoundCreate(struct _TYPEDEF_GUID * a1, struct IDirectSound ** a2, int32_t * a3);
void RtlUnwind(int32_t * a1, int32_t * a2, struct _EXCEPTION_RECORD * a3, int32_t * a4);

// ------------------------ Functions -------------------------

// Address range: 0x401000 - 0x40107a
int32_t function_401000(int32_t a1, int32_t a2) {
    int32_t v1 = 0; // 0x401010
    int32_t v2 = &g911; // 0x401010
    int32_t v3 = (int32_t)&g913; // 0x401010
    int32_t v4 = a1; // 0x401010
    *(int16_t *)v3 = *(int16_t *)v4;
    v1++;
    *(int32_t *)v2 = 16 * (int32_t)*(char *)(a1 + 511 + v1);
    v2 += 4;
    v3 += 2;
    v4 += 2;
    while (v1 != (((int32_t)&g914 > (int32_t)&g913 + 2 ? (int32_t)&g914 : (int32_t)&g913 + 2) - 1 - (int32_t)&g913 >> 1) + 1) {
        // 0x401015
        *(int16_t *)v3 = *(int16_t *)v4;
        v1++;
        *(int32_t *)v2 = 16 * (int32_t)*(char *)(a1 + 511 + v1);
        v2 += 4;
        v3 += 2;
        v4 += 2;
    }
    // 0x40103b
    g912 = 128;
    g915 = a1 + 768;
    g914 = 0;
    g916 = 2 * a2 - 1536;
    g917 = 0;
    return 1;
}

// Address range: 0x401080 - 0x40119d
int32_t function_401080(int32_t a1, int32_t result) {
    int32_t v1 = g916; // 0x401081
    if (g917 == v1) {
        // 0x401093
        return 0;
    }
    int32_t v2 = v1 < result ? v1 : result;
    int32_t v3 = g912; // 0x4010ba
    int32_t v4 = g915 + g917 / 2; // 0x4010cb
    int16_t v5 = g914; // 0x4010cd
    int32_t v6 = 0; // 0x4010d7
    int32_t v7 = v2; // 0x4010d7
    int32_t v8 = v3; // 0x4010d7
    int16_t v9 = v5; // 0x4010d7
    int32_t v10 = v4; // 0x4010d7
    int32_t v11 = a1; // 0x4010d7
    int16_t v12; // 0x401080
    int32_t v13; // 0x401080
    if ((g917 & 1) == 0) {
        goto lab_0x4010f9;
    } else {
        // 0x4010d9
        v6 = (int32_t)(*(char *)v4 / 16);
        int32_t v14 = v3 + v6; // 0x4010de
        v9 = *(int16_t *)(2 * v14 + (int32_t)&g913) + v5;
        v8 = *(int32_t *)(4 * v14 + (int32_t)&g911);
        *(int16_t *)a1 = v9;
        v7 = v2 - 1;
        v10 = v4 + 1;
        v11 = a1 + 2;
        v13 = v8;
        v12 = v9;
        if (v7 == 0) {
            goto lab_0x401151;
        } else {
            goto lab_0x4010f9;
        }
    }
  lab_0x4010f9:;
    int32_t v15 = v7;
    int32_t v16 = 1 - v15;
    char * v17 = (char *)v10; // 0x4010f9
    int32_t v18 = v6 & -256; // 0x4010f9
    int32_t v19 = (v18 | (int32_t)(*v17 & 15)) + v8; // 0x4010fd
    int16_t v20 = *(int16_t *)(2 * v19 + (int32_t)&g913) + v9; // 0x4010ff
    *(int16_t *)v11 = v20;
    int32_t v21 = v18 | (int32_t)(*v17 / 16); // 0x401113
    int32_t v22 = v21 + *(int32_t *)(4 * v19 + (int32_t)&g911); // 0x401116
    int16_t v23 = *(int16_t *)(2 * v22 + (int32_t)&g913) + v20; // 0x401118
    int32_t v24 = *(int32_t *)(4 * v22 + (int32_t)&g911); // 0x401120
    *(int16_t *)(v11 + 2) = v23;
    int32_t v25 = v11 + 4; // 0x40112b
    int32_t v26 = v10 + 1; // 0x40112e
    int32_t v27 = v15 - 2; // 0x40112f
    int32_t v28 = v27; // 0x401135
    int32_t v29 = v26; // 0x401135
    int32_t v30 = v25; // 0x401135
    while (v27 > 1) {
        // 0x4010f9
        v17 = (char *)v29;
        v18 = v21 & -256;
        v19 = (v18 | (int32_t)(*v17 & 15)) + v24;
        v20 = *(int16_t *)(2 * v19 + (int32_t)&g913) + v23;
        *(int16_t *)v30 = v20;
        v21 = v18 | (int32_t)(*v17 / 16);
        v22 = v21 + *(int32_t *)(4 * v19 + (int32_t)&g911);
        v23 = *(int16_t *)(2 * v22 + (int32_t)&g913) + v20;
        v24 = *(int32_t *)(4 * v22 + (int32_t)&g911);
        *(int16_t *)(v30 + 2) = v23;
        v25 = v30 + 4;
        v26 = v29 + 1;
        v27 = v28 - 2;
        v28 = v27;
        v29 = v26;
        v30 = v25;
    }
    // 0x401137
    v13 = v24;
    v12 = v23;
    if (v15 - 2 - ((v16 > -2 ? v16 : -2) + v15 & -2) == 1) {
        int32_t v31 = (v18 | (int32_t)(*(char *)v26 & 15)) + v24; // 0x40113d
        int16_t v32 = *(int16_t *)(2 * v31 + (int32_t)&g913) + v23; // 0x40113f
        *(int16_t *)v25 = v32;
        v13 = *(int32_t *)(4 * v31 + (int32_t)&g911);
        v12 = v32;
    }
    goto lab_0x401151;
  lab_0x401151:
    // 0x401151
    g912 = v13;
    g914 = v12;
    int32_t v33 = g917; // 0x401164
    int32_t v34 = v33 + result; // 0x401169
    if (g916 < v34) {
        // 0x401174
        g917 = g916;
        return g916 - v33;
    }
    // 0x401190
    g917 = v34;
    return result;
}

// Address range: 0x4011a0 - 0x4012a0
int32_t function_4011a0(void) {
    // 0x4011a0
    int32_t v1; // bp-8, 0x4011a0
    int32_t v2 = &v1; // 0x4011a1
    int32_t * v3 = (int32_t *)(v2 - 4);
    int32_t v4 = (int32_t)"data\\IGN1.DPS"; // 0x4011a4
    int32_t v5 = 0; // 0x4011a4
    *v3 = v4;
    int32_t v6 = function_4044d0((int32_t)&g1001); // 0x4011aa
    *(int32_t *)(v5 + (int32_t)&g581) = v6;
    int64_t v7; // 0x4011a0
    int32_t * v8; // 0x4011fc
    int32_t v9; // 0x40125f
    while (v6 >= 768) {
        // 0x4011bf
        *v3 = v4;
        int32_t v10 = function_4043a0((int32_t)&g1001); // 0x4011c0
        *(int32_t *)(v5 + (int32_t)&g586) = v10;
        if (v10 == 0) {
            // break -> 0x401219
            break;
        }
        // 0x4011d2
        v4 += 50;
        v5 += 4;
        if (v4 >= (int32_t)&g22) {
            int32_t v11 = 4 * *(int32_t *)(4 * g24 + (int32_t)&g23); // 0x4011ec
            *v3 = *(int32_t *)(v11 + (int32_t)&g581);
            v8 = (int32_t *)(v2 - 8);
            *v8 = *(int32_t *)(v11 + (int32_t)&g586);
            function_401000((int32_t)&g1001, (int32_t)&g1001);
            g937 = 20;
            if (function_403d20() != 1) {
                return 0;
            }
            // 0x401228
            g583 = g933;
            g588 = g932;
            g585 = g935;
            int32_t v12 = g934; // 0x401250
            int64_t v13 = v12;
            g587 = v13;
            v7 = v13;
            v9 = v12;
            if (g931 < 0xabe0) {
                goto lab_0x401262;
            } else {
                // 0x40125c
                v9 = (v12 - (v12 >> 31)) / 2;
                v7 = v9;
                goto lab_0x401262;
            }
        }
        *v3 = v4;
        v6 = function_4044d0((int32_t)&g1001);
        *(int32_t *)(v5 + (int32_t)&g581) = v6;
    }
    // 0x401219
    return 0;
  lab_0x401262:
    // 0x401262
    g587 = v7;
    g582 = g931;
    *v3 = 2 * v9;
    *v8 = 0;
    int32_t v14 = function_403630((int32_t)&g1001, (int32_t)&g1001); // 0x401278
    g584 = v14;
    if (v14 == 0) {
        return 0;
    }
    // 0x40128e
    g21 = 1;
    return 1;
}

// Address range: 0x4012a0 - 0x40139f
int32_t function_4012a0(void) {
    // 0x4012a0
    if (g21 != 1) {
        // 0x401395
        return 1;
    }
    int32_t v1 = function_403910(); // 0x4012b1
    if (v1 == 0) {
        // 0x401395
        return 1;
    }
    // 0x4012ca
    int32_t v2; // bp-16, 0x4012a0
    int32_t v3 = &v2; // 0x4012aa
    int32_t * v4 = (int32_t *)(v3 - 4); // 0x4012d5
    int32_t * v5 = (int32_t *)(v3 - 8); // 0x4012d6
    int32_t * v6 = (int32_t *)(v3 - 12);
    int32_t * v7 = (int32_t *)(v3 - 16);
    *v4 = (int32_t)g587;
    *v5 = g584;
    int32_t v8 = function_401080((int32_t)&g1001, (int32_t)&g1001); // 0x4012d7
    int32_t v9; // 0x4012a0
    int32_t v10; // 0x4012e9
    int32_t v11; // 0x4012f4
    int32_t v12; // 0x40130f
    if (v8 < (int32_t)g587) {
        // 0x4012e9
        v10 = g24 + 1;
        g24 = v10;
        v11 = *(int32_t *)(4 * v10 + (int32_t)&g23);
        v9 = v11 != -1 ? v10 : 9;
        g24 = v9;
        v12 = 4 * *(int32_t *)(4 * v9 + (int32_t)&g23);
        *v4 = *(int32_t *)(v12 + (int32_t)&g581);
        *v5 = *(int32_t *)(v12 + (int32_t)&g586);
        function_401000((int32_t)&g1001, (int32_t)&g1001);
        *v4 = (int32_t)g587 - v8;
        *v5 = g584 + 2 * v8;
        function_401080((int32_t)&g1001, (int32_t)&g1001);
    }
    // 0x401346
    *v4 = 0;
    int32_t * v13 = (int32_t *)(v1 + 8); // 0x401348
    *v5 = *v13;
    *v6 = g584;
    *v7 = *(int32_t *)v1;
    function_4013c0((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
    int32_t v14 = *(int32_t *)(v1 + 4); // 0x40135e
    int32_t v15; // 0x401365
    if (v14 != 0) {
        // 0x401365
        v15 = *(int32_t *)(v1 + 12);
        if (v15 != 0) {
            // 0x40136c
            *v4 = *v13;
            *v5 = v15;
            *v6 = g584;
            *v7 = v14;
            function_4013c0((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
        }
    }
    // 0x401381
    function_403bf0();
    int32_t v16 = function_403910(); // 0x401386
    while (v16 != 0) {
        int32_t v17 = v16;
        *v4 = (int32_t)g587;
        *v5 = g584;
        v8 = function_401080((int32_t)&g1001, (int32_t)&g1001);
        if (v8 < (int32_t)g587) {
            // 0x4012e9
            v10 = g24 + 1;
            g24 = v10;
            v11 = *(int32_t *)(4 * v10 + (int32_t)&g23);
            v9 = v11 != -1 ? v10 : 9;
            g24 = v9;
            v12 = 4 * *(int32_t *)(4 * v9 + (int32_t)&g23);
            *v4 = *(int32_t *)(v12 + (int32_t)&g581);
            *v5 = *(int32_t *)(v12 + (int32_t)&g586);
            function_401000((int32_t)&g1001, (int32_t)&g1001);
            *v4 = (int32_t)g587 - v8;
            *v5 = g584 + 2 * v8;
            function_401080((int32_t)&g1001, (int32_t)&g1001);
        }
        // 0x401346
        *v4 = 0;
        v13 = (int32_t *)(v17 + 8);
        *v5 = *v13;
        *v6 = g584;
        *v7 = *(int32_t *)v17;
        function_4013c0((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
        v14 = *(int32_t *)(v17 + 4);
        if (v14 != 0) {
            // 0x401365
            v15 = *(int32_t *)(v17 + 12);
            if (v15 != 0) {
                // 0x40136c
                *v4 = *v13;
                *v5 = v15;
                *v6 = g584;
                *v7 = v14;
                function_4013c0((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
            }
        }
        // 0x401381
        function_403bf0();
        v16 = function_403910();
    }
    // 0x401395
    return 1;
}

// Address range: 0x4013a0 - 0x4013bf
int32_t function_4013a0(void) {
    // 0x4013a0
    g21 = 1;
    function_403cb0();
    g21 = 0;
    return 1;
}

// Address range: 0x4013c0 - 0x4019ce
int32_t function_4013c0(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = a4; // 0x4013d4
    int32_t v2 = a3; // 0x4013d4
    int32_t v3; // 0x4013c0
    if (g582 >= 0xabe0) {
        int32_t v4 = a3 >> 31; // 0x4013d8
        v1 = (a4 - (a4 >> 31)) / 2;
        v2 = a3 - v4 >> 1;
        v3 = ((v4 ^ a3) - v4 & 1 ^ v4) - v4;
    }
    int32_t v5 = 2 * v1 + a2; // 0x40140f
    int32_t v6; // 0x4013c0
    int32_t v7; // 0x4013c0
    if (g588 != 16) {
        goto lab_0x4016dd;
    } else {
        // 0x401418
        if (g583 != 1) {
            goto lab_0x401592;
        } else {
            // 0x401421
            if (g582 > 0xabdf || g585 != 0) {
                if (g582 < 0xabe0 || g585 != 0) {
                    // 0x4014e3
                    if (g582 > 0xabdf || g585 != 1) {
                        if (g582 < 0xabe0 || g585 != 1) {
                            goto lab_0x401592;
                        } else {
                            int32_t v8 = v5; // 0x401555
                            v7 = a1;
                            v6 = a1;
                            if (v2 >= 1) {
                                int16_t v9 = *(int16_t *)v8; // 0x40155b
                                *(int16_t *)a1 = v9;
                                *(int16_t *)(a1 + 2) = v9;
                                *(int16_t *)(a1 + 4) = v9;
                                int32_t v10 = a1 + 8; // 0x401573
                                *(int16_t *)(a1 + 6) = v9;
                                int32_t v11 = v2 - 1; // 0x40157d
                                v8 += 2;
                                int32_t v12 = v10; // 0x40157e
                                int32_t v13 = v11; // 0x40157e
                                v7 = a1;
                                v6 = v10;
                                while (v11 != 0) {
                                    // 0x40155b
                                    v9 = *(int16_t *)v8;
                                    *(int16_t *)v12 = v9;
                                    *(int16_t *)(v12 + 2) = v9;
                                    *(int16_t *)(v12 + 4) = v9;
                                    v10 = v12 + 8;
                                    *(int16_t *)(v12 + 6) = v9;
                                    v11 = v13 - 1;
                                    v8 += 2;
                                    v12 = v10;
                                    v13 = v11;
                                    v7 = a1;
                                    v6 = v10;
                                }
                            }
                            goto lab_0x401976;
                        }
                    } else {
                        int32_t v14 = v5; // 0x401500
                        v7 = a1;
                        v6 = a1;
                        if (v2 >= 1) {
                            int16_t v15 = *(int16_t *)v14; // 0x401506
                            *(int16_t *)a1 = v15;
                            int32_t v16 = a1 + 4; // 0x401510
                            *(int16_t *)(a1 + 2) = v15;
                            int32_t v17 = v2 - 1; // 0x40151a
                            v14 += 2;
                            int32_t v18 = v16; // 0x40151b
                            int32_t v19 = v17; // 0x40151b
                            v7 = a1;
                            v6 = v16;
                            while (v17 != 0) {
                                // 0x401506
                                v15 = *(int16_t *)v14;
                                *(int16_t *)v18 = v15;
                                v16 = v18 + 4;
                                *(int16_t *)(v18 + 2) = v15;
                                v17 = v19 - 1;
                                v14 += 2;
                                v18 = v16;
                                v19 = v17;
                                v7 = a1;
                                v6 = v16;
                            }
                        }
                        goto lab_0x401976;
                    }
                } else {
                    int32_t v20 = v5; // 0x401498
                    v7 = a1;
                    v6 = a1;
                    if (v2 >= 1) {
                        int16_t v21 = *(int16_t *)v20 ^ -0x8000; // 0x4014a4
                        *(int16_t *)a1 = v21;
                        *(int16_t *)(a1 + 2) = v21;
                        int32_t v22 = a1 + 8; // 0x4014b7
                        *(int16_t *)(a1 + 4) = v21;
                        *(int16_t *)(a1 + 6) = v21;
                        int32_t v23 = v2 - 1; // 0x4014c5
                        v20 += 2;
                        int32_t v24 = v22; // 0x4014c6
                        int32_t v25 = v23; // 0x4014c6
                        v7 = a1;
                        v6 = v22;
                        while (v23 != 0) {
                            // 0x40149e
                            v21 = *(int16_t *)v20 ^ -0x8000;
                            *(int16_t *)v24 = v21;
                            *(int16_t *)(v24 + 2) = v21;
                            v22 = v24 + 8;
                            *(int16_t *)(v24 + 4) = v21;
                            *(int16_t *)(v24 + 6) = v21;
                            v23 = v25 - 1;
                            v20 += 2;
                            v24 = v22;
                            v25 = v23;
                            v7 = a1;
                            v6 = v22;
                        }
                    }
                    goto lab_0x401976;
                }
            } else {
                int32_t v26 = v5; // 0x40143e
                v7 = a1;
                v6 = a1;
                if (v2 >= 1) {
                    int16_t v27 = *(int16_t *)v26 ^ -0x8000; // 0x40144a
                    int32_t v28 = a1 + 4; // 0x40144f
                    *(int16_t *)a1 = v27;
                    *(int16_t *)(a1 + 2) = v27;
                    int32_t v29 = v2 - 1; // 0x40145d
                    v26 += 2;
                    int32_t v30 = v28; // 0x40145e
                    int32_t v31 = v29; // 0x40145e
                    v7 = a1;
                    v6 = v28;
                    while (v29 != 0) {
                        // 0x401444
                        v27 = *(int16_t *)v26 ^ -0x8000;
                        v28 = v30 + 4;
                        *(int16_t *)v30 = v27;
                        *(int16_t *)(v30 + 2) = v27;
                        v29 = v31 - 1;
                        v26 += 2;
                        v30 = v28;
                        v31 = v29;
                        v7 = a1;
                        v6 = v28;
                    }
                }
                goto lab_0x401976;
            }
        }
    }
  lab_0x4016dd:
    // 0x4016dd
    v7 = a1;
    if (g588 != 8) {
        goto lab_0x401976;
    } else {
        // 0x4016ea
        if (g583 != 1) {
            goto lab_0x40184a;
        } else {
            // 0x4016f3
            if (g582 > 0xabdf || g585 != 0) {
                if (g582 < 0xabe0 || g585 != 0) {
                    // 0x4017ae
                    if (g582 > 0xabdf || g585 != 1) {
                        if (g582 < 0xabe0 || g585 != 1) {
                            goto lab_0x40184a;
                        } else {
                            int32_t v32 = v5; // 0x40181a
                            v7 = a1;
                            if (v2 >= 1) {
                                char v33 = *(char *)(v32 + 1); // 0x401820
                                *(char *)a1 = v33;
                                *(char *)(a1 + 1) = v33;
                                *(char *)(a1 + 2) = v33;
                                *(char *)(a1 + 3) = v33;
                                int32_t v34 = a1 + 4; // 0x401834
                                int32_t v35 = v2 - 1; // 0x401835
                                v32 += 2;
                                int32_t v36 = v34; // 0x401836
                                int32_t v37 = v35; // 0x401836
                                v7 = v34;
                                while (v35 != 0) {
                                    // 0x401820
                                    v33 = *(char *)(v32 + 1);
                                    *(char *)v36 = v33;
                                    *(char *)(v36 + 1) = v33;
                                    *(char *)(v36 + 2) = v33;
                                    *(char *)(v36 + 3) = v33;
                                    v34 = v36 + 4;
                                    v35 = v37 - 1;
                                    v32 += 2;
                                    v36 = v34;
                                    v37 = v35;
                                    v7 = v34;
                                }
                            }
                            goto lab_0x401976;
                        }
                    } else {
                        int32_t v38 = v5; // 0x4017c9
                        v7 = a1;
                        if (v2 >= 1) {
                            int16_t * v39 = (int16_t *)v38; // 0x4017cf
                            int32_t v40 = a1 + 2; // 0x4017d3
                            int32_t v41 = v2 - 1; // 0x4017d7
                            *(char *)a1 = (char)(*v39 / 256);
                            *(char *)(a1 + 1) = (char)(*v39 / 256);
                            v38 += 2;
                            int32_t v42 = v40; // 0x4017e2
                            int32_t v43 = v41; // 0x4017e2
                            v7 = v40;
                            while (v41 != 0) {
                                // 0x4017cf
                                v39 = (int16_t *)v38;
                                v40 = v42 + 2;
                                v41 = v43 - 1;
                                *(char *)v42 = (char)(*v39 / 256);
                                *(char *)(v42 + 1) = (char)(*v39 / 256);
                                v38 += 2;
                                v42 = v40;
                                v43 = v41;
                                v7 = v40;
                            }
                        }
                        goto lab_0x401976;
                    }
                } else {
                    int32_t v44 = v5; // 0x40176d
                    v7 = a1;
                    if (v2 >= 1) {
                        int32_t v45 = a1 + 4; // 0x401780
                        int32_t v46 = v2 - 1; // 0x401784
                        char v47 = (char)(*(int16_t *)v44 / 256) ^ -128; // 0x401785
                        *(char *)a1 = v47;
                        *(char *)(a1 + 1) = v47;
                        *(char *)(a1 + 2) = v47;
                        *(char *)(a1 + 3) = v47;
                        v44 += 2;
                        int32_t v48 = v45; // 0x401791
                        int32_t v49 = v46; // 0x401791
                        v7 = v45;
                        while (v46 != 0) {
                            // 0x401773
                            v45 = v48 + 4;
                            v46 = v49 - 1;
                            v47 = (char)(*(int16_t *)v44 / 256) ^ -128;
                            *(char *)v48 = v47;
                            *(char *)(v48 + 1) = v47;
                            *(char *)(v48 + 2) = v47;
                            *(char *)(v48 + 3) = v47;
                            v44 += 2;
                            v48 = v45;
                            v49 = v46;
                            v7 = v45;
                        }
                    }
                    goto lab_0x401976;
                }
            } else {
                int32_t v50 = v5; // 0x40170e
                v7 = a1;
                if (v2 >= 1) {
                    int16_t * v51 = (int16_t *)v50; // 0x401714
                    int32_t v52 = a1 + 2; // 0x40171c
                    *(char *)a1 = (char)(*v51 / 256) ^ -128;
                    int32_t v53 = v2 - 1; // 0x401731
                    *(char *)(a1 + 1) = (char)(*v51 / 256) ^ -128;
                    v50 += 2;
                    int32_t v54 = v52; // 0x401735
                    int32_t v55 = v53; // 0x401735
                    v7 = v52;
                    while (v53 != 0) {
                        // 0x401714
                        v51 = (int16_t *)v50;
                        v52 = v54 + 2;
                        *(char *)v54 = (char)(*v51 / 256) ^ -128;
                        v53 = v55 - 1;
                        *(char *)(v54 + 1) = (char)(*v51 / 256) ^ -128;
                        v50 += 2;
                        v54 = v52;
                        v55 = v53;
                        v7 = v52;
                    }
                }
                goto lab_0x401976;
            }
        }
    }
  lab_0x401976:
    // 0x401976
    if (v3 != 1 || g582 < 0xabe0) {
        // 0x4019c2
        return 1;
    }
    int32_t v56 = g588 != 16 ? v7 : v6;
    if (g588 == 8) {
        // 0x40199b
        *(char *)v56 = *(char *)(v56 - 1);
        // 0x4019c2
        return 1;
    }
    if (g588 != 16 || g583 != 0) {
        // 0x4019bd
        *(int32_t *)v56 = *(int32_t *)(v56 - 4);
        // 0x4019c2
        return 1;
    }
    // 0x4019b4
    *(int16_t *)v56 = *(int16_t *)(v56 - 2);
    // 0x4019c2
    return 1;
  lab_0x401592:
    if (g583 != 0) {
        goto lab_0x4016dd;
    } else {
        // 0x40159b
        if (g582 > 0xabdf || g585 != 0) {
            if (g582 < 0xabe0 || g585 != 0) {
                // 0x401651
                if (g582 > 0xabdf || g585 != 1) {
                    if (g582 < 0xabe0 || g585 != 1) {
                        goto lab_0x4016dd;
                    } else {
                        int32_t v57 = v5; // 0x4016b8
                        v7 = a1;
                        v6 = a1;
                        if (v2 >= 1) {
                            int16_t * v58 = (int16_t *)v57; // 0x4016be
                            *(int16_t *)a1 = *v58;
                            int32_t v59 = a1 + 4; // 0x4016c8
                            *(int16_t *)(a1 + 2) = *v58;
                            int32_t v60 = v2 - 1; // 0x4016d5
                            v57 += 2;
                            int32_t v61 = v59; // 0x4016d6
                            int32_t v62 = v60; // 0x4016d6
                            v7 = a1;
                            v6 = v59;
                            while (v60 != 0) {
                                // 0x4016be
                                v58 = (int16_t *)v57;
                                *(int16_t *)v61 = *v58;
                                v59 = v61 + 4;
                                *(int16_t *)(v61 + 2) = *v58;
                                v60 = v62 - 1;
                                v57 += 2;
                                v61 = v59;
                                v62 = v60;
                                v7 = a1;
                                v6 = v59;
                            }
                        }
                        goto lab_0x401976;
                    }
                } else {
                    int32_t v63 = v5; // 0x40166e
                    v7 = a1;
                    v6 = a1;
                    if (v2 >= 1) {
                        int32_t v64 = a1 + 2; // 0x401677
                        *(int16_t *)a1 = *(int16_t *)v63;
                        int32_t v65 = v2 - 1; // 0x401681
                        v63 += 2;
                        int32_t v66 = v64; // 0x401682
                        int32_t v67 = v65; // 0x401682
                        v7 = a1;
                        v6 = v64;
                        while (v65 != 0) {
                            // 0x401674
                            v64 = v66 + 2;
                            *(int16_t *)v66 = *(int16_t *)v63;
                            v65 = v67 - 1;
                            v63 += 2;
                            v66 = v64;
                            v67 = v65;
                            v7 = a1;
                            v6 = v64;
                        }
                    }
                    goto lab_0x401976;
                }
            } else {
                int32_t v68 = v5; // 0x40160b
                v7 = a1;
                v6 = a1;
                if (v2 >= 1) {
                    int16_t * v69 = (int16_t *)v68; // 0x401611
                    int32_t v70 = a1 + 4; // 0x40161c
                    *(int16_t *)a1 = *v69 ^ -0x8000;
                    int32_t v71 = v2 - 1; // 0x40162f
                    *(int16_t *)(a1 + 2) = *v69 ^ -0x8000;
                    v68 += 2;
                    int32_t v72 = v70; // 0x401634
                    int32_t v73 = v71; // 0x401634
                    v7 = a1;
                    v6 = v70;
                    while (v71 != 0) {
                        // 0x401611
                        v69 = (int16_t *)v68;
                        v70 = v72 + 4;
                        *(int16_t *)v72 = *v69 ^ -0x8000;
                        v71 = v73 - 1;
                        *(int16_t *)(v72 + 2) = *v69 ^ -0x8000;
                        v68 += 2;
                        v72 = v70;
                        v73 = v71;
                        v7 = a1;
                        v6 = v70;
                    }
                }
                goto lab_0x401976;
            }
        } else {
            int32_t v74 = v5; // 0x4015b8
            v7 = a1;
            v6 = a1;
            if (v2 >= 1) {
                int32_t v75 = a1 + 2; // 0x4015c1
                *(int16_t *)a1 = *(int16_t *)v74 ^ -0x8000;
                int32_t v76 = v2 - 1; // 0x4015d0
                v74 += 2;
                int32_t v77 = v75; // 0x4015d1
                int32_t v78 = v76; // 0x4015d1
                v7 = a1;
                v6 = v75;
                while (v76 != 0) {
                    // 0x4015be
                    v75 = v77 + 2;
                    *(int16_t *)v77 = *(int16_t *)v74 ^ -0x8000;
                    v76 = v78 - 1;
                    v74 += 2;
                    v77 = v75;
                    v78 = v76;
                    v7 = a1;
                    v6 = v75;
                }
            }
            goto lab_0x401976;
        }
    }
  lab_0x40184a:;
    int32_t v79 = v5; // 0x401851
    v7 = a1;
    if (v2 >= 1 && g583 == 0) {
        int32_t v80 = a1 + 1; // 0x401875
        int32_t v81 = v2 - 1; // 0x401880
        *(char *)a1 = (char)(*(int16_t *)v79 / 256) ^ -128;
        v79 += 2;
        int32_t v82 = v80; // 0x401884
        int32_t v83 = v81; // 0x401884
        v7 = v80;
        while (v81 != 0) {
            // 0x401872
            v80 = v82 + 1;
            v81 = v83 - 1;
            *(char *)v82 = (char)(*(int16_t *)v79 / 256) ^ -128;
            v79 += 2;
            v82 = v80;
            v83 = v81;
            v7 = v80;
        }
    }
    goto lab_0x401976;
}

// Address range: 0x4019d0 - 0x401b5e
int32_t function_4019d0(int32_t a1, int32_t * a2, int32_t * a3) {
    int32_t v1 = function_4035a0("Script Player"); // 0x4019db
    g910 = v1;
    if (v1 == -1) {
        // 0x4019ed
        return -1;
    }
    // 0x4019f7
    if (*a3 != 0) {
        int32_t v2 = &g595; // 0x4019d0
        int32_t v3 = (int32_t)a3; // 0x401a0e
        while (v2 < (int32_t)&g596) {
            int32_t v4 = v3;
            v3 = v4 + 4;
            *(int32_t *)v2 = *(int32_t *)v4;
            v2 += 4;
            if (*(int32_t *)v3 == 0) {
                // break -> 0x401a1b
                break;
            }
        }
    }
    // 0x401a1b
    int32_t v5; // bp-16, 0x4019d0
    int32_t v6 = &v5; // 0x4019e0
    int32_t v7 = *(int32_t *)a1; // 0x401a21
    int32_t * v8 = (int32_t *)(v6 - 4);
    int32_t * v9 = (int32_t *)(v6 - 8);
    int32_t result = 0; // 0x401a27
    int32_t v10; // 0x4019d0
    int32_t v11; // 0x4019d0
    int32_t v12; // 0x4019d0
    int32_t v13; // 0x4019d0
    int32_t v14; // 0x4019d0
    if (v7 != 0x7878696c) {
        int32_t v15 = (int32_t)a2;
        v10 = v7;
        v11 = a1;
        v13 = 0;
        while (true) {
          lab_0x401a2d:;
            int32_t v16 = v13;
            v12 = v11;
            int32_t v17 = v10; // 0x401a2d
            if (v17 > 0x3130696c) {
                switch (v17) {
                    case 0x3230696c: {
                        // 0x401a79
                        *v8 = v15;
                        *v9 = v12;
                        function_401c20((int32_t)&g1001, (int32_t)&g1001);
                        v14 = v16;
                        goto lab_0x401a94;
                    }
                    case 0x3330696c: {
                        // 0x401a85
                        *v8 = (int32_t)&g595;
                        *v9 = v15;
                        *(int32_t *)(v6 - 12) = v12;
                        function_401d20((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
                        v14 = v16;
                        goto lab_0x401a94;
                    }
                    default: {
                        return -1;
                    }
                }
            } else {
                switch (v17) {
                    case 0x3130696c: {
                        // 0x401a6e
                        *v8 = v12;
                        function_401c00((int32_t)&g1001);
                        v14 = v16;
                        goto lab_0x401a94;
                    }
                    case 0x3030696c: {
                        // 0x401a62
                        *v8 = v12;
                        function_401be0((int32_t)&g1001);
                        v14 = v16 + 1;
                        goto lab_0x401a94;
                    }
                    default: {
                        return -1;
                    }
                }
            }
        }
        // 0x4019ed
        return -1;
    }
  lab_0x401aa5:;
    int32_t v18 = g596; // 0x401aa5
    *v8 = (v18 & 3) + v18 >> 2;
    *v9 = g910;
    int32_t v19 = function_403630((int32_t)&g1001, (int32_t)&g1001); // 0x401aba
    g592 = v19;
    if (v19 == 0) {
        // 0x4019ed
        return -1;
    }
    // 0x401ad5
    *v8 = (int32_t)g596;
    *v9 = g910;
    int32_t v20 = function_403630((int32_t)&g1001, (int32_t)&g1001); // 0x401ae2
    g597 = v20;
    if (v20 == 0) {
        // 0x4019ed
        return -1;
    }
    // 0x401afd
    *v8 = g590;
    *v9 = g910;
    int32_t v21 = function_403630((int32_t)&g1001, (int32_t)&g1001); // 0x401b0a
    g593 = v21;
    if (v21 == 0) {
        // 0x4019ed
        return -1;
    }
    // 0x401b25
    *v8 = 12 * result;
    *v9 = g910;
    int32_t v22 = function_403630((int32_t)&g1001, (int32_t)&g1001); // 0x401b33
    g589 = v22;
    if (v22 != 0) {
        // 0x401b4e
        *v8 = a1;
        function_401b60((int32_t)&g1001);
        return result;
    }
    // 0x4019ed
    return -1;
  lab_0x401a94:;
    int32_t v23 = v12 + 8 + *(int32_t *)(v12 + 4); // 0x401a9a
    int32_t v24 = *(int32_t *)v23; // 0x401a9c
    v10 = v24;
    v11 = v23;
    v13 = v14;
    result = v14;
    if (v24 == 0x7878696c) {
        goto lab_0x401aa5;
    }
    goto lab_0x401a2d;
}

// Address range: 0x401b60 - 0x401bdb
int32_t function_401b60(int32_t a1) {
    int32_t v1 = *(int32_t *)a1; // 0x401b6a
    if (v1 == 0x7878696c) {
        // 0x401bd4
        int32_t result; // 0x401b60
        return result;
    }
    int32_t v2 = 0;
    int32_t v3; // 0x401b60
    int32_t v4; // 0x401b60
    int32_t result2; // 0x401b60
    int32_t v5; // 0x401b60
    int32_t v6; // 0x401b60
    int32_t v7; // 0x401b60
    int32_t v8; // 0x401b60
    int32_t v9; // 0x401bb5
    int32_t v10; // 0x401b60
    switch (v1) {
        case 0x3030696c: {
            // 0x401b90
            v8 = a1 + 8;
            *(int32_t *)(g589 + v2) = v8;
            *(int32_t *)(v2 + 4 + g589) = v6;
            *(int32_t *)(v2 + 8 + g589) = v4;
            v3 = v8;
            result2 = v4;
            v7 = v6;
            v5 = v2 + 12;
            // break -> 0x401bc4
            break;
        }
        case 0x3130696c: {
            // 0x401bb5
            v9 = *(int32_t *)(a1 + 4);
            v10 = a1 + 8;
            v3 = v10;
            result2 = ((v9 >> 31 & 3) + v9) / 4;
            v7 = v10;
            v5 = v2;
            // break -> 0x401bc4
            break;
        }
        default: {
            // 0x401b7c
            v3 = a1 + 8;
            result2 = v4;
            v7 = v6;
            v5 = v2;
            // break -> 0x401bc4
            break;
        }
    }
    int32_t v11 = *(int32_t *)(a1 + 4) + v3; // 0x401bca
    int32_t v12 = *(int32_t *)v11; // 0x401bcc
    while (v12 != 0x7878696c) {
        // 0x401b7c
        v2 = v5;
        int32_t v13 = v11;
        int32_t v14 = v7;
        int32_t v15 = result2;
        switch (v12) {
            case 0x3030696c: {
                // 0x401b90
                v8 = v13 + 8;
                *(int32_t *)(g589 + v2) = v8;
                *(int32_t *)(v2 + 4 + g589) = v14;
                *(int32_t *)(v2 + 8 + g589) = v15;
                v3 = v8;
                result2 = v15;
                v7 = v14;
                v5 = v2 + 12;
                // break -> 0x401bc4
                break;
            }
            case 0x3130696c: {
                // 0x401bb5
                v9 = *(int32_t *)(v13 + 4);
                v10 = v13 + 8;
                v3 = v10;
                result2 = ((v9 >> 31 & 3) + v9) / 4;
                v7 = v10;
                v5 = v2;
                // break -> 0x401bc4
                break;
            }
            default: {
                // 0x401b7c
                v3 = v13 + 8;
                result2 = v15;
                v7 = v14;
                v5 = v2;
                // break -> 0x401bc4
                break;
            }
        }
        // 0x401bc4
        v11 = *(int32_t *)(v13 + 4) + v3;
        v12 = *(int32_t *)v11;
    }
    // 0x401bd4
    return result2;
}

// Address range: 0x401be0 - 0x401bfa
int32_t function_401be0(int32_t a1) {
    int32_t result = 6 * *(int32_t *)(a1 + 4); // 0x401bea
    if (result > (int32_t)g596) {
        // 0x401bf4
        g596 = false;
    }
    // 0x401bf9
    return result;
}

// Address range: 0x401c00 - 0x401c17
int32_t function_401c00(int32_t a1) {
    int32_t result = 2 * *(int32_t *)(a1 + 4); // 0x401c07
    if (g590 < result) {
        // 0x401c11
        g590 = result;
    }
    // 0x401c16
    return result;
}

// Address range: 0x401c20 - 0x401d12
int32_t function_401c20(int32_t a1, int32_t a2) {
    int32_t v1 = *(int32_t *)(a1 + 4); // 0x401c2a
    int32_t v2 = (v1 >> 31 & 15) + v1; // 0x401c31
    int32_t v3 = v2 >> 4; // 0x401c39
    int32_t v4 = function_403630(g910, 28 * v3); // 0x401c4c
    g594 = v4;
    if (v4 == 0) {
        // 0x401c5d
        return -1;
    }
    // 0x401c66
    if (v2 < 16) {
        // 0x401c5d
        return 0;
    }
    int32_t v5 = 0; // 0x401c20
    int32_t v6 = a1 + 8; // 0x401c20
    int32_t v7 = v3; // 0x401d05
    *(int32_t *)(v5 + v4) = (int32_t)*(int16_t *)v6;
    uint16_t v8 = *(int16_t *)(v6 + 2); // 0x401c90
    *(int32_t *)(v5 + 4 + g594) = (int32_t)v8;
    *(int32_t *)(v5 + 8 + g594) = (int32_t)*(int16_t *)(v6 + 4);
    uint16_t v9 = *(int16_t *)(v6 + 6); // 0x401cbc
    *(int32_t *)(v5 + 12 + g594) = (int32_t)v9;
    uint16_t v10 = *(int16_t *)(v6 + 8); // 0x401cc9
    *(int32_t *)(v5 + 16 + g594) = (int32_t)v10;
    uint16_t v11 = *(int16_t *)(v6 + 10); // 0x401cd9
    *(int32_t *)(v5 + 20 + g594) = (int32_t)v11;
    int32_t v12 = *(int32_t *)(v6 + 12); // 0x401ce7
    int32_t v13 = *(int32_t *)((v12 < 31 == v12 >= 0 ? 4 * v12 : 0) + a2); // 0x401cf5
    *(int32_t *)(v5 + 24 + g594) = v13;
    while (v7 != 1) {
        // 0x401c74
        v7--;
        // 0x401c74
        v5 += 28;
        v6 += 16;
        *(int32_t *)(v5 + g594) = (int32_t)*(int16_t *)v6;
        v8 = *(int16_t *)(v6 + 2);
        *(int32_t *)(v5 + 4 + g594) = (int32_t)v8;
        *(int32_t *)(v5 + 8 + g594) = (int32_t)*(int16_t *)(v6 + 4);
        v9 = *(int16_t *)(v6 + 6);
        *(int32_t *)(v5 + 12 + g594) = (int32_t)v9;
        v10 = *(int16_t *)(v6 + 8);
        *(int32_t *)(v5 + 16 + g594) = (int32_t)v10;
        v11 = *(int16_t *)(v6 + 10);
        *(int32_t *)(v5 + 20 + g594) = (int32_t)v11;
        v12 = *(int32_t *)(v6 + 12);
        v13 = *(int32_t *)((v12 < 31 == v12 >= 0 ? 4 * v12 : 0) + a2);
        *(int32_t *)(v5 + 24 + g594) = v13;
    }
    // 0x401c5d
    return 0;
}

// Address range: 0x401d20 - 0x401e2e
int32_t function_401d20(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = *(int32_t *)(a1 + 4); // 0x401d2b
    int32_t v2 = (v1 >> 31 & 15) + v1; // 0x401d38
    int32_t v3 = v2 >> 4; // 0x401d3a
    int32_t v4 = function_403630(g910, 32 * v3); // 0x401d44
    g591 = v4;
    if (v4 == 0) {
        // 0x401d55
        return -1;
    }
    // 0x401d5f
    if (v2 < 16) {
        // 0x401d55
        return 0;
    }
    int32_t v5 = 0; // 0x401d20
    int32_t v6 = a1 + 8; // 0x401d20
    int32_t v7 = v3; // 0x401e19
    *(int32_t *)(v5 + v4) = 256 * (int32_t)*(int16_t *)v6;
    int16_t v8 = *(int16_t *)(v6 + 2); // 0x401d9a
    *(int32_t *)(g591 + (v5 | 4)) = 256 * (int32_t)v8;
    uint16_t v9 = *(int16_t *)(v6 + 4); // 0x401db3
    *(int32_t *)(g591 + (v5 | 8)) = 256 * (int32_t)v9;
    uint16_t v10 = *(int16_t *)(v6 + 6); // 0x401dc3
    *(int32_t *)(g591 + (v5 | 12)) = 256 * (int32_t)v10;
    uint16_t v11 = *(int16_t *)(v6 + 8); // 0x401dd6
    *(int32_t *)(g591 + (v5 | 16)) = 256 * (int32_t)v11;
    uint16_t v12 = *(int16_t *)(v6 + 10); // 0x401de9
    *(int32_t *)(g591 + (v5 | 20)) = 256 * (int32_t)v12;
    int32_t v13 = *(int32_t *)(4 * (int32_t)*(int16_t *)(v6 + 12) + a2); // 0x401e06
    *(int32_t *)(g591 + (v5 | 24)) = v13;
    v7--;
    int32_t v14 = *(int32_t *)(4 * (int32_t)*(int16_t *)(v6 + 14) + a3); // 0x401e1a
    *(int32_t *)(g591 + (v5 | 28)) = v14;
    while (v7 != 0) {
        // 0x401d71
        v5 += 32;
        v6 += 16;
        *(int32_t *)(v5 + g591) = 256 * (int32_t)*(int16_t *)v6;
        v8 = *(int16_t *)(v6 + 2);
        *(int32_t *)(g591 + (v5 | 4)) = 256 * (int32_t)v8;
        v9 = *(int16_t *)(v6 + 4);
        *(int32_t *)(g591 + (v5 | 8)) = 256 * (int32_t)v9;
        v10 = *(int16_t *)(v6 + 6);
        *(int32_t *)(g591 + (v5 | 12)) = 256 * (int32_t)v10;
        v11 = *(int16_t *)(v6 + 8);
        *(int32_t *)(g591 + (v5 | 16)) = 256 * (int32_t)v11;
        v12 = *(int16_t *)(v6 + 10);
        *(int32_t *)(g591 + (v5 | 20)) = 256 * (int32_t)v12;
        v13 = *(int32_t *)(4 * (int32_t)*(int16_t *)(v6 + 12) + a2);
        *(int32_t *)(g591 + (v5 | 24)) = v13;
        v7--;
        v14 = *(int32_t *)(4 * (int32_t)*(int16_t *)(v6 + 14) + a3);
        *(int32_t *)(g591 + (v5 | 28)) = v14;
    }
    // 0x401d55
    return 0;
}

// Address range: 0x401e30 - 0x4023b4
int32_t function_401e30(int32_t a1, int32_t a2) {
    int32_t v1 = g589 + 12 * a1; // 0x401e44
    int32_t v2 = *(int32_t *)v1; // 0x401e4f
    int32_t v3 = *(int32_t *)(v1 + 4); // 0x401e51
    int32_t v4 = *(int32_t *)(v1 + 8); // 0x401e54
    if (a2 != 0) {
        int32_t v5 = v3; // 0x401e7e
        int32_t v6 = g593; // 0x401e7e
        if (a2 == 1 && v4 >= 1) {
            *(int32_t *)v6 = 32 * (int32_t)*(int16_t *)v5;
            int32_t v7 = v4 - 1; // 0x401ea5
            *(int32_t *)(v6 + 4) = 38 * (int32_t)*(int16_t *)(v5 + 2);
            v5 += 4;
            v6 += 8;
            int32_t v8 = v7; // 0x401ea9
            while (v7 != 0) {
                // 0x401e84
                *(int32_t *)v6 = 32 * (int32_t)*(int16_t *)v5;
                v7 = v8 - 1;
                *(int32_t *)(v6 + 4) = 38 * (int32_t)*(int16_t *)(v5 + 2);
                v5 += 4;
                v6 += 8;
                v8 = v7;
            }
        }
    } else {
        int32_t v9 = 2 * v4; // 0x401e59
        int32_t v10 = v3; // 0x401e62
        int32_t v11 = g593; // 0x401e62
        if (v9 >= 1) {
            int32_t v12 = v9 - 1; // 0x401e71
            *(int32_t *)v11 = 16 * (int32_t)*(int16_t *)v10;
            int32_t v13 = v12; // 0x401e75
            v10 += 2;
            v11 += 4;
            while (v12 != 0) {
                // 0x401e64
                v12 = v13 - 1;
                *(int32_t *)v11 = 16 * (int32_t)*(int16_t *)v10;
                v13 = v12;
                v10 += 2;
                v11 += 4;
            }
        }
    }
    char v14 = *(char *)v2; // 0x401eb7
    if (v14 == -1) {
        // 0x40239d
        *(int32_t *)g592 = 0;
        return g592;
    }
    char v15 = v14; // 0x402394
    int32_t v16 = v2;
    int32_t v17 = g592;
    int32_t v18 = g597; // 0x401e30
    while (true) {
        int32_t v19 = v18;
        int32_t v20 = v17;
        int32_t v21 = v16 + 2; // 0x401ec5
        int32_t v22 = v15; // 0x401ec6
        unsigned char v23 = *(char *)(v16 + 1); // 0x401ec9
        int32_t v24 = v23; // 0x401ec9
        unsigned char v25 = *(char *)(v22 + 0x4023cd); // 0x401eda
        g1002 = v25;
        int32_t v26; // 0x401e30
        int32_t v27; // 0x401e30
        switch (v25) {
            case 0: {
                if (a2 != 0) {
                    int32_t v28 = v21; // 0x401f72
                    int32_t v29 = v24; // 0x401f72
                    int32_t v30 = v20; // 0x401f72
                    int32_t v31 = v19; // 0x401f72
                    v26 = v21;
                    v27 = v20;
                    v18 = v19;
                    if (a2 == 1 && v23 != 0) {
                        *(int32_t *)v30 = v31;
                        int32_t v32 = v30 + 4; // 0x401f82
                        *(int32_t *)v31 = v22;
                        int32_t v33 = v31 + 36; // 0x401f92
                        int16_t v34 = *(int16_t *)v28; // 0x401f95
                        int32_t v35 = v28 + 8; // 0x401f9c
                        *(int32_t *)(v31 + 4) = 32 * (int32_t)v34 + g591;
                        int32_t v36 = v31 + 20; // 0x401fa8
                        *(int32_t *)(v31 + 8) = v36;
                        *(int32_t *)v36 = 512 * (int32_t)*(int16_t *)(v28 + 2);
                        *(int32_t *)(v31 + 24) = 0;
                        *(int32_t *)(v31 + 28) = 0;
                        int32_t v37 = v29 - 1; // 0x401fde
                        *(int32_t *)(v31 + 32) = 614 * (int32_t)*(int16_t *)(v28 + 4);
                        int32_t v38 = 8 * (int32_t)*(int16_t *)(v28 + 6); // 0x401fec
                        *(int32_t *)(v31 + 12) = *(int32_t *)(v38 + g593);
                        *(int32_t *)(v31 + 16) = *(int32_t *)((v38 | 4) + g593);
                        v28 = v35;
                        v29 = v37;
                        v30 = v32;
                        v31 = v33;
                        v26 = v35;
                        v27 = v32;
                        v18 = v33;
                        while (v37 != 0) {
                            // 0x401f80
                            *(int32_t *)v30 = v31;
                            v32 = v30 + 4;
                            *(int32_t *)v31 = v22;
                            v33 = v31 + 36;
                            v34 = *(int16_t *)v28;
                            v35 = v28 + 8;
                            *(int32_t *)(v31 + 4) = 32 * (int32_t)v34 + g591;
                            v36 = v31 + 20;
                            *(int32_t *)(v31 + 8) = v36;
                            *(int32_t *)v36 = 512 * (int32_t)*(int16_t *)(v28 + 2);
                            *(int32_t *)(v31 + 24) = 0;
                            *(int32_t *)(v31 + 28) = 0;
                            v37 = v29 - 1;
                            *(int32_t *)(v31 + 32) = 614 * (int32_t)*(int16_t *)(v28 + 4);
                            v38 = 8 * (int32_t)*(int16_t *)(v28 + 6);
                            *(int32_t *)(v31 + 12) = *(int32_t *)(v38 + g593);
                            *(int32_t *)(v31 + 16) = *(int32_t *)((v38 | 4) + g593);
                            v28 = v35;
                            v29 = v37;
                            v30 = v32;
                            v31 = v33;
                            v26 = v35;
                            v27 = v32;
                            v18 = v33;
                        }
                    }
                } else {
                    int32_t v39 = v21; // 0x401ef0
                    int32_t v40 = v24; // 0x401ef0
                    int32_t v41 = v20; // 0x401ef0
                    int32_t v42 = v19; // 0x401ef0
                    v26 = v21;
                    v27 = v20;
                    v18 = v19;
                    if (v23 != 0) {
                        *(int32_t *)v41 = v42;
                        int32_t v43 = v41 + 4; // 0x401ef8
                        *(int32_t *)v42 = v22;
                        int32_t v44 = v42 + 36; // 0x401f08
                        int16_t v45 = *(int16_t *)v39; // 0x401f0b
                        int32_t v46 = v39 + 8; // 0x401f12
                        *(int32_t *)(v42 + 4) = 32 * (int32_t)v45 + g591;
                        int32_t v47 = v42 + 20; // 0x401f1e
                        *(int32_t *)(v42 + 8) = v47;
                        *(int32_t *)v47 = 256 * (int32_t)*(int16_t *)(v39 + 2);
                        *(int32_t *)(v42 + 24) = 0;
                        *(int32_t *)(v42 + 28) = 0;
                        int32_t v48 = v40 - 1; // 0x401f44
                        *(int32_t *)(v42 + 32) = 256 * (int32_t)*(int16_t *)(v39 + 4);
                        int32_t v49 = 8 * (int32_t)*(int16_t *)(v39 + 6); // 0x401f52
                        *(int32_t *)(v42 + 12) = *(int32_t *)(v49 + g593);
                        *(int32_t *)(v42 + 16) = *(int32_t *)((v49 | 4) + g593);
                        v39 = v46;
                        v40 = v48;
                        v41 = v43;
                        v42 = v44;
                        v26 = v46;
                        v27 = v43;
                        v18 = v44;
                        while (v48 != 0) {
                            // 0x401ef6
                            *(int32_t *)v41 = v42;
                            v43 = v41 + 4;
                            *(int32_t *)v42 = v22;
                            v44 = v42 + 36;
                            v45 = *(int16_t *)v39;
                            v46 = v39 + 8;
                            *(int32_t *)(v42 + 4) = 32 * (int32_t)v45 + g591;
                            v47 = v42 + 20;
                            *(int32_t *)(v42 + 8) = v47;
                            *(int32_t *)v47 = 256 * (int32_t)*(int16_t *)(v39 + 2);
                            *(int32_t *)(v42 + 24) = 0;
                            *(int32_t *)(v42 + 28) = 0;
                            v48 = v40 - 1;
                            *(int32_t *)(v42 + 32) = 256 * (int32_t)*(int16_t *)(v39 + 4);
                            v49 = 8 * (int32_t)*(int16_t *)(v39 + 6);
                            *(int32_t *)(v42 + 12) = *(int32_t *)(v49 + g593);
                            *(int32_t *)(v42 + 16) = *(int32_t *)((v49 | 4) + g593);
                            v39 = v46;
                            v40 = v48;
                            v41 = v43;
                            v42 = v44;
                            v26 = v46;
                            v27 = v43;
                            v18 = v44;
                        }
                    }
                }
                // break -> 0x402394
                break;
            }
            case 1: {
                int32_t v50 = v21; // 0x40200d
                int32_t v51 = v24; // 0x40200d
                int32_t v52 = v20; // 0x40200d
                int32_t v53 = v19; // 0x40200d
                v26 = v21;
                v27 = v20;
                v18 = v19;
                if (v23 != 0) {
                    *(int32_t *)v52 = v53;
                    int32_t v54 = v52 + 4; // 0x402015
                    *(int32_t *)v53 = v22;
                    int32_t v55 = v50 + 5; // 0x40202f
                    int32_t v56 = 8 * (int32_t)*(int16_t *)v50; // 0x402037
                    *(int32_t *)(v53 + 4) = *(int32_t *)(v56 + g593);
                    int32_t v57 = v53 + 36; // 0x402044
                    *(int32_t *)(v53 + 8) = *(int32_t *)((v56 | 4) + g593);
                    int32_t v58 = 8 * (int32_t)*(int16_t *)(v50 + 2); // 0x40205e
                    *(int32_t *)(v53 + 16) = *(int32_t *)(v58 + g593);
                    *(int32_t *)(v53 + 20) = *(int32_t *)((v58 | 4) + g593);
                    int32_t v59 = v51 - 1; // 0x402077
                    *(int32_t *)(v53 + 28) = (int32_t)*(char *)(v50 + 4);
                    *(int32_t *)(v53 + 32) = 0;
                    v50 = v55;
                    v51 = v59;
                    v52 = v54;
                    v53 = v57;
                    v26 = v55;
                    v27 = v54;
                    v18 = v57;
                    while (v59 != 0) {
                        // 0x402013
                        *(int32_t *)v52 = v53;
                        v54 = v52 + 4;
                        *(int32_t *)v53 = v22;
                        v55 = v50 + 5;
                        v56 = 8 * (int32_t)*(int16_t *)v50;
                        *(int32_t *)(v53 + 4) = *(int32_t *)(v56 + g593);
                        v57 = v53 + 36;
                        *(int32_t *)(v53 + 8) = *(int32_t *)((v56 | 4) + g593);
                        v58 = 8 * (int32_t)*(int16_t *)(v50 + 2);
                        *(int32_t *)(v53 + 16) = *(int32_t *)(v58 + g593);
                        *(int32_t *)(v53 + 20) = *(int32_t *)((v58 | 4) + g593);
                        v59 = v51 - 1;
                        *(int32_t *)(v53 + 28) = (int32_t)*(char *)(v50 + 4);
                        *(int32_t *)(v53 + 32) = 0;
                        v50 = v55;
                        v51 = v59;
                        v52 = v54;
                        v53 = v57;
                        v26 = v55;
                        v27 = v54;
                        v18 = v57;
                    }
                }
                // break -> 0x402394
                break;
            }
            case 2: {
                // 0x402089
                v26 = v21;
                v27 = v20;
                v18 = v19;
                if (v23 != 0) {
                    // 0x402091
                    v26 = v21 - v24 + 8 * v24;
                    v27 = v20;
                    v18 = v19;
                }
                // break -> 0x402394
                break;
            }
            case 3: {
                int32_t v60 = v21; // 0x40209d
                int32_t v61 = v24; // 0x40209d
                int32_t v62 = v20; // 0x40209d
                int32_t v63 = v19; // 0x40209d
                v26 = v21;
                v27 = v20;
                v18 = v19;
                if (v23 != 0) {
                    *(int32_t *)v62 = v63;
                    int32_t v64 = v62 + 4; // 0x4020a5
                    *(int32_t *)v63 = v22;
                    int32_t v65 = v60 + 7; // 0x4020c5
                    int32_t v66 = 8 * (int32_t)*(int16_t *)v60; // 0x4020cd
                    *(int32_t *)(v63 + 4) = *(int32_t *)(v66 + g593);
                    int32_t v67 = v63 + 48; // 0x4020dd
                    *(int32_t *)(v63 + 8) = *(int32_t *)((v66 | 4) + g593);
                    int32_t v68 = 8 * (int32_t)*(int16_t *)(v60 + 2); // 0x4020f7
                    *(int32_t *)(v63 + 16) = *(int32_t *)(v68 + g593);
                    *(int32_t *)(v63 + 20) = *(int32_t *)((v68 | 4) + g593);
                    int32_t v69 = 8 * (int32_t)*(int16_t *)(v60 + 4); // 0x402115
                    *(int32_t *)(v63 + 28) = *(int32_t *)(v69 + g593);
                    *(int32_t *)(v63 + 32) = *(int32_t *)((v69 | 4) + g593);
                    int32_t v70 = v61 - 1; // 0x40212e
                    *(int32_t *)(v63 + 40) = (int32_t)*(char *)(v60 + 6);
                    *(int32_t *)(v63 + 44) = 0;
                    v60 = v65;
                    v61 = v70;
                    v62 = v64;
                    v63 = v67;
                    v26 = v65;
                    v27 = v64;
                    v18 = v67;
                    while (v70 != 0) {
                        // 0x4020a3
                        *(int32_t *)v62 = v63;
                        v64 = v62 + 4;
                        *(int32_t *)v63 = v22;
                        v65 = v60 + 7;
                        v66 = 8 * (int32_t)*(int16_t *)v60;
                        *(int32_t *)(v63 + 4) = *(int32_t *)(v66 + g593);
                        v67 = v63 + 48;
                        *(int32_t *)(v63 + 8) = *(int32_t *)((v66 | 4) + g593);
                        v68 = 8 * (int32_t)*(int16_t *)(v60 + 2);
                        *(int32_t *)(v63 + 16) = *(int32_t *)(v68 + g593);
                        *(int32_t *)(v63 + 20) = *(int32_t *)((v68 | 4) + g593);
                        v69 = 8 * (int32_t)*(int16_t *)(v60 + 4);
                        *(int32_t *)(v63 + 28) = *(int32_t *)(v69 + g593);
                        *(int32_t *)(v63 + 32) = *(int32_t *)((v69 | 4) + g593);
                        v70 = v61 - 1;
                        *(int32_t *)(v63 + 40) = (int32_t)*(char *)(v60 + 6);
                        *(int32_t *)(v63 + 44) = 0;
                        v60 = v65;
                        v61 = v70;
                        v62 = v64;
                        v63 = v67;
                        v26 = v65;
                        v27 = v64;
                        v18 = v67;
                    }
                }
                // break -> 0x402394
                break;
            }
            case 4: {
                int32_t v71 = v21; // 0x402146
                int32_t v72 = v24; // 0x402146
                int32_t v73 = v20; // 0x402146
                int32_t v74 = v19; // 0x402146
                v26 = v21;
                v27 = v20;
                v18 = v19;
                if (v23 != 0) {
                    *(int32_t *)v73 = v74;
                    int32_t v75 = v73 + 4; // 0x40214e
                    *(int32_t *)v74 = v22;
                    int32_t v76 = v71 + 8; // 0x40216e
                    int32_t v77 = 8 * (int32_t)*(int16_t *)v71; // 0x402178
                    *(int32_t *)(v74 + 4) = *(int32_t *)(v77 + g593);
                    int32_t v78 = v74 + 36; // 0x402188
                    *(int32_t *)(v74 + 8) = *(int32_t *)((v77 | 4) + g593);
                    int32_t v79 = 8 * (int32_t)*(int16_t *)(v71 + 2); // 0x4021a2
                    *(int32_t *)(v74 + 12) = *(int32_t *)(v79 + g593);
                    *(int32_t *)(v74 + 16) = *(int32_t *)((v79 | 4) + g593);
                    int32_t v80 = 8 * (int32_t)*(int16_t *)(v71 + 4); // 0x4021c0
                    *(int32_t *)(v74 + 20) = *(int32_t *)(v80 + g593);
                    *(int32_t *)(v74 + 24) = *(int32_t *)((v80 | 4) + g593);
                    int32_t v81 = 28 * (int32_t)*(int16_t *)(v71 + 6); // 0x4021e1
                    int32_t v82 = v72 - 1; // 0x4021f0
                    *(int32_t *)(v74 + 28) = v81 + g594;
                    *(int32_t *)(v74 + 32) = *(int32_t *)(v81 + 24 + g594);
                    v71 = v76;
                    v72 = v82;
                    v73 = v75;
                    v74 = v78;
                    v26 = v76;
                    v27 = v75;
                    v18 = v78;
                    while (v82 != 0) {
                        // 0x40214c
                        *(int32_t *)v73 = v74;
                        v75 = v73 + 4;
                        *(int32_t *)v74 = v22;
                        v76 = v71 + 8;
                        v77 = 8 * (int32_t)*(int16_t *)v71;
                        *(int32_t *)(v74 + 4) = *(int32_t *)(v77 + g593);
                        v78 = v74 + 36;
                        *(int32_t *)(v74 + 8) = *(int32_t *)((v77 | 4) + g593);
                        v79 = 8 * (int32_t)*(int16_t *)(v71 + 2);
                        *(int32_t *)(v74 + 12) = *(int32_t *)(v79 + g593);
                        *(int32_t *)(v74 + 16) = *(int32_t *)((v79 | 4) + g593);
                        v80 = 8 * (int32_t)*(int16_t *)(v71 + 4);
                        *(int32_t *)(v74 + 20) = *(int32_t *)(v80 + g593);
                        *(int32_t *)(v74 + 24) = *(int32_t *)((v80 | 4) + g593);
                        v81 = 28 * (int32_t)*(int16_t *)(v71 + 6);
                        v82 = v72 - 1;
                        *(int32_t *)(v74 + 28) = v81 + g594;
                        *(int32_t *)(v74 + 32) = *(int32_t *)(v81 + 24 + g594);
                        v71 = v76;
                        v72 = v82;
                        v73 = v75;
                        v74 = v78;
                        v26 = v76;
                        v27 = v75;
                        v18 = v78;
                    }
                }
                // break -> 0x402394
                break;
            }
            case 5: {
                int32_t v83 = v21; // 0x40220e
                int32_t v84 = v24; // 0x40220e
                int32_t v85 = v20; // 0x40220e
                int32_t v86 = v19; // 0x40220e
                v26 = v21;
                v27 = v20;
                v18 = v19;
                if (v23 != 0) {
                    *(int32_t *)v85 = v86;
                    int32_t v87 = v85 + 4; // 0x402216
                    *(int32_t *)v86 = v22;
                    int32_t v88 = v83 + 9; // 0x40223c
                    int32_t v89 = 8 * (int32_t)*(int16_t *)v83; // 0x402244
                    *(int32_t *)(v86 + 4) = *(int32_t *)(v89 + g593);
                    int32_t v90 = v86 + 40; // 0x402254
                    *(int32_t *)(v86 + 8) = *(int32_t *)((v89 | 4) + g593);
                    int32_t v91 = 8 * (int32_t)*(int16_t *)(v83 + 2); // 0x40226e
                    *(int32_t *)(v86 + 12) = *(int32_t *)(v91 + g593);
                    *(int32_t *)(v86 + 16) = *(int32_t *)((v91 | 4) + g593);
                    int32_t v92 = 8 * (int32_t)*(int16_t *)(v83 + 4); // 0x40228c
                    *(int32_t *)(v86 + 20) = *(int32_t *)(v92 + g593);
                    *(int32_t *)(v86 + 24) = *(int32_t *)((v92 | 4) + g593);
                    int32_t v93 = 28 * (int32_t)*(int16_t *)(v83 + 6); // 0x4022ad
                    *(int32_t *)(v86 + 28) = v93 + g594;
                    *(int32_t *)(v86 + 32) = *(int32_t *)(v93 + 24 + g594);
                    unsigned char v94 = *(char *)(v83 + 8); // 0x4022ce
                    int32_t v95 = v84 - 1; // 0x4022d1
                    int32_t v96 = *(int32_t *)(4 * (int32_t)v94 + (int32_t)&g595); // 0x4022d2
                    *(int32_t *)(v86 + 36) = v96;
                    v83 = v88;
                    v84 = v95;
                    v85 = v87;
                    v86 = v90;
                    v26 = v88;
                    v27 = v87;
                    v18 = v90;
                    while (v95 != 0) {
                        // 0x402214
                        *(int32_t *)v85 = v86;
                        v87 = v85 + 4;
                        *(int32_t *)v86 = v22;
                        v88 = v83 + 9;
                        v89 = 8 * (int32_t)*(int16_t *)v83;
                        *(int32_t *)(v86 + 4) = *(int32_t *)(v89 + g593);
                        v90 = v86 + 40;
                        *(int32_t *)(v86 + 8) = *(int32_t *)((v89 | 4) + g593);
                        v91 = 8 * (int32_t)*(int16_t *)(v83 + 2);
                        *(int32_t *)(v86 + 12) = *(int32_t *)(v91 + g593);
                        *(int32_t *)(v86 + 16) = *(int32_t *)((v91 | 4) + g593);
                        v92 = 8 * (int32_t)*(int16_t *)(v83 + 4);
                        *(int32_t *)(v86 + 20) = *(int32_t *)(v92 + g593);
                        *(int32_t *)(v86 + 24) = *(int32_t *)((v92 | 4) + g593);
                        v93 = 28 * (int32_t)*(int16_t *)(v83 + 6);
                        *(int32_t *)(v86 + 28) = v93 + g594;
                        *(int32_t *)(v86 + 32) = *(int32_t *)(v93 + 24 + g594);
                        v94 = *(char *)(v83 + 8);
                        v95 = v84 - 1;
                        v96 = *(int32_t *)(4 * (int32_t)v94 + (int32_t)&g595);
                        *(int32_t *)(v86 + 36) = v96;
                        v83 = v88;
                        v84 = v95;
                        v85 = v87;
                        v86 = v90;
                        v26 = v88;
                        v27 = v87;
                        v18 = v90;
                    }
                }
                // break -> 0x402394
                break;
            }
            case 6: {
                int32_t v97 = v21; // 0x4022e9
                int32_t v98 = v24; // 0x4022e9
                int32_t v99 = v20; // 0x4022e9
                int32_t v100 = v19; // 0x4022e9
                v26 = v21;
                v27 = v20;
                v18 = v19;
                if (v23 != 0) {
                    *(int32_t *)v99 = v100;
                    int32_t v101 = v99 + 4; // 0x4022f1
                    *(int32_t *)v100 = v22;
                    int32_t v102 = v97 + 8; // 0x402315
                    int32_t v103 = 8 * (int32_t)*(int16_t *)v97; // 0x40231d
                    *(int32_t *)(v100 + 4) = *(int32_t *)(v103 + g593);
                    int32_t v104 = v100 + 36; // 0x40232a
                    *(int32_t *)(v100 + 8) = *(int32_t *)((v103 | 4) + g593);
                    int32_t v105 = 8 * (int32_t)*(int16_t *)(v97 + 2); // 0x402344
                    *(int32_t *)(v100 + 12) = *(int32_t *)(v105 + g593);
                    *(int32_t *)(v100 + 16) = *(int32_t *)((v105 | 4) + g593);
                    int32_t v106 = 8 * (int32_t)*(int16_t *)(v97 + 4); // 0x402362
                    *(int32_t *)(v100 + 20) = *(int32_t *)(v106 + g593);
                    *(int32_t *)(v100 + 24) = *(int32_t *)((v106 | 4) + g593);
                    *(int32_t *)(v100 + 28) = (int32_t)*(char *)(v97 + 6);
                    unsigned char v107 = *(char *)(v97 + 7); // 0x402380
                    int32_t v108 = v98 - 1; // 0x402383
                    int32_t v109 = *(int32_t *)(4 * (int32_t)v107 + (int32_t)&g595); // 0x402384
                    *(int32_t *)(v100 + 32) = v109;
                    v97 = v102;
                    v98 = v108;
                    v99 = v101;
                    v100 = v104;
                    v26 = v102;
                    v27 = v101;
                    v18 = v104;
                    while (v108 != 0) {
                        // 0x4022ef
                        *(int32_t *)v99 = v100;
                        v101 = v99 + 4;
                        *(int32_t *)v100 = v22;
                        v102 = v97 + 8;
                        v103 = 8 * (int32_t)*(int16_t *)v97;
                        *(int32_t *)(v100 + 4) = *(int32_t *)(v103 + g593);
                        v104 = v100 + 36;
                        *(int32_t *)(v100 + 8) = *(int32_t *)((v103 | 4) + g593);
                        v105 = 8 * (int32_t)*(int16_t *)(v97 + 2);
                        *(int32_t *)(v100 + 12) = *(int32_t *)(v105 + g593);
                        *(int32_t *)(v100 + 16) = *(int32_t *)((v105 | 4) + g593);
                        v106 = 8 * (int32_t)*(int16_t *)(v97 + 4);
                        *(int32_t *)(v100 + 20) = *(int32_t *)(v106 + g593);
                        *(int32_t *)(v100 + 24) = *(int32_t *)((v106 | 4) + g593);
                        *(int32_t *)(v100 + 28) = (int32_t)*(char *)(v97 + 6);
                        v107 = *(char *)(v97 + 7);
                        v108 = v98 - 1;
                        v109 = *(int32_t *)(4 * (int32_t)v107 + (int32_t)&g595);
                        *(int32_t *)(v100 + 32) = v109;
                        v97 = v102;
                        v98 = v108;
                        v99 = v101;
                        v100 = v104;
                        v26 = v102;
                        v27 = v101;
                        v18 = v104;
                    }
                }
                // break -> 0x402394
                break;
            }
            default: {
                // 0x4023ad
                return 0;
            }
        }
        // 0x402394
        v17 = v27;
        v16 = v26;
        v15 = *(char *)v16;
        int32_t v110 = v17; // 0x402397
        if (v15 == -1) {
            // 0x40239d
            *(int32_t *)v110 = 0;
            return g592;
        }
    }
    // 0x4023ad
    return 0;
}

// Address range: 0x4023f0 - 0x40240a
int32_t function_4023f0(void) {
    // 0x4023f0
    function_402540();
    function_4025d0();
    function_4027d0();
    function_4011a0();
    return 1;
}

// Address range: 0x402410 - 0x402513
int32_t function_402410(void) {
    // 0x402410
    function_402e30();
    function_4012a0();
    int32_t v1; // 0x402410
    int32_t v2; // 0x402410
    int3_t v3; // 0x402410
    if (g29 != 0) {
        goto lab_0x40247b;
    } else {
        // 0x402427
        g881 = *(int32_t *)(4 * g28 + (int32_t)&g902);
        int32_t v4 = function_402840(0); // 0x40243f
        int32_t v5 = g29; // 0x402447
        int32_t v6 = g28;
        int32_t v7 = v6; // 0x402450
        if (v4 == 1) {
            // 0x402452
            v7 = v6 + 1;
            g28 = v7;
        }
        // 0x402458
        if (v7 != 3) {
            goto lab_0x40247b;
        } else {
            int3_t v8 = v3 - 1; // 0x402461
            __frontend_reg_store_fpr(v8, (float80_t)g39);
            __frontend_reg_store_fpr(v8, 0.02L * __frontend_reg_load_fpr(v8));
            g887 = __frontend_reg_load_fpr(v8);
            v1 = g39;
            v2 = v5 + 1;
            goto lab_0x402480;
        }
    }
  lab_0x40247b:
    // 0x40247b
    v1 = g39;
    v2 = g29;
    goto lab_0x402480;
  lab_0x402480:;
    int32_t v9 = v2;
    g29 = v9;
    int32_t v10 = v9; // 0x402489
    if (v9 != 1 != v9 != 2) {
        int3_t v11 = v3 - 1; // 0x402494
        __frontend_reg_store_fpr(v11, (float80_t)v1);
        __frontend_reg_store_fpr(v11, 0.02L * __frontend_reg_load_fpr(v11));
        __frontend_reg_store_fpr(v11, __frontend_reg_load_fpr(v11) - (float80_t)g887);
        *(float64_t *)&g909 = (float64_t)__frontend_reg_load_fpr(v11);
        function_402aa0(__ftol());
        v10 = g29;
    }
    int32_t v12 = v10;
    g29 = v12;
    if (v12 != 3 == (v12 != 4)) {
        // 0x40250d
        return 0;
    }
    // 0x4024ce
    g881 = *(int32_t *)(4 * g28 + (int32_t)&g902);
    int32_t v13 = g28 + (int32_t)(function_402840(0) == 1);
    g28 = v13;
    if (v13 == 4) {
        // 0x402503
        g37 = 2;
    }
    // 0x40250d
    return 0;
}

// Address range: 0x402520 - 0x402536
int32_t function_402520(void) {
    // 0x402520
    function_4013a0();
    function_403820(g890);
    return 0;
}

// Address range: 0x402540 - 0x4025c3
int32_t function_402540(void) {
    int32_t v1 = function_4035a0(NULL); // 0x402542
    g890 = v1;
    g878 = function_4037d0(v1, 0x4b000);
    g906 = function_403630(g890, 0x1dffff);
    g889 = function_403630(g890, 0x2ffff);
    g908 = function_403630(g890, 0x20000);
    int32_t result = function_403630(g890, 0x20000); // 0x4025b5
    g882 = result;
    return result;
}

// Address range: 0x4025d0 - 0x4027ca
int32_t function_4025d0(void) {
    // 0x4025d0
    g880 = function_4043a0((int32_t)"data\\ign.pfm");
    g884 = function_4043a0((int32_t)"data\\ign.psq");
    g879 = function_4043a0((int32_t)"data\\ign.col");
    g886 = function_4043a0((int32_t)"data\\ign0.pic");
    g902 = function_4043a0((int32_t)"data\\ign1.pic");
    g903 = function_4043a0((int32_t)"data\\ign2.pic");
    g904 = function_4043a0((int32_t)"data\\ign4.pic");
    g905 = function_4043a0((int32_t)"data\\ign3.pic");
    int32_t v1 = g908 + 0xffff & -0x10000; // 0x402676
    g908 = v1;
    function_404320("data\\ign.pan", v1, 0x10000, 0);
    int32_t v2; // bp-16, 0x4025d0
    int32_t v3 = &v2; // 0x402690
    int32_t * v4 = (int32_t *)(v3 - 4);
    int32_t * v5 = (int32_t *)(v3 - 8);
    int32_t * v6 = (int32_t *)(v3 - 12);
    int32_t * v7 = (int32_t *)(v3 - 16);
    int32_t v8 = g906 + 0xffff & -0x10000; // 0x40269f
    int32_t v9 = 0; // 0x40269f
    for (int32_t i = (int32_t)"data\\IGN1.TEX"; i < (int32_t)"data\\ign.shd"; i += 50) {
        int32_t v10 = v9;
        int32_t v11 = v8;
        *v4 = i;
        int32_t v12 = function_4044d0((int32_t)&g1001); // 0x4026a6
        if (v12 >= 0 != v12 != 0) {
            // 0x4026b4
            *v4 = 0;
            function_410ec0((int32_t)&g1001);
        }
        uint32_t v13 = v12 < 0x100000 ? v12 : 0x100000;
        *v4 = 0;
        *v5 = v13;
        *v6 = v11;
        *v7 = i;
        function_404320((char *)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
        v8 = v11;
        int32_t v14 = v10; // 0x4026da
        if (v13 >= 1) {
            int32_t v15 = (v13 + 0xffff) / 0x10000; // 0x4026e9
            int32_t v16 = 4 * v10 + (int32_t)&g885; // 0x4026ec
            int32_t v17 = v15; // 0x4026ec
            *(int32_t *)v16 = v11;
            int32_t v18 = v11 + 0x10000; // 0x4026f3
            v17--;
            v16 += 4;
            int32_t v19 = v18; // 0x4026fa
            while (v17 != 0) {
                // 0x4026ee
                *(int32_t *)v16 = v19;
                v18 = v19 + 0x10000;
                v17--;
                v16 += 4;
                v19 = v18;
            }
            // 0x4026fc
            v8 = v18;
            v14 = v15 + v10;
        }
        // 0x4026fc
        v9 = v14;
    }
    // 0x402707
    *v4 = 0;
    *(int32_t *)(4 * v9 + (int32_t)&g885) = 0;
    *v5 = 0x10000;
    int32_t v20 = g889 + 0xffff & -0x10000; // 0x402722
    *v6 = v20;
    g891 = v20;
    *v7 = (int32_t)"data\\ign.shd";
    int32_t v21 = v20 + 0x10000; // 0x402734
    function_404320((char *)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
    g892 = v21;
    int32_t v22 = 0; // 0x402742
    int32_t v23 = v21; // 0x402742
    *(char *)v23 = (char)v22;
    v23++;
    v22++;
    int32_t v24 = v23; // 0x402752
    while (v22 != 256) {
        // 0x402748
        *(char *)v23 = (char)v22;
        v23++;
        v22++;
        v24 = v23;
    }
    int32_t v25 = 1;
    int32_t v26 = v25 + 1; // 0x402762
    int32_t v27 = 256 * v25 | v25;
    __asm_rep_stosd_memset((char *)v24, 0x10000 * v27 | v27, 64);
    v24 += 256;
    while (v26 != 256) {
        // 0x402759
        v25 = v26;
        v26 = v25 + 1;
        v27 = 256 * v25 | v25;
        __asm_rep_stosd_memset((char *)v24, 0x10000 * v27 | v27, 64);
        v24 += 256;
    }
    // 0x402782
    g893 = 0;
    g882 = g882 + 0xffff & -0x10000;
    int32_t v28 = 0; // 0x40279b
    int32_t v29 = 0; // 0x40279b
    int32_t v30 = 0;
    int32_t v31 = v30 + 1; // 0x4027ab
    *(char *)(v30 + v29 + g882) = (char)v28;
    while (v31 != 256) {
        // 0x4027a2
        v30 = v31;
        v31 = v30 + 1;
        *(char *)(v30 + v29 + g882) = (char)v28;
    }
    // 0x4027b6
    v28++;
    v29 += 256;
    while (v28 != 256) {
        // 0x4027a0
        v30 = 0;
        v31 = v30 + 1;
        *(char *)(v30 + v29 + g882) = (char)v28;
        while (v31 != 256) {
            // 0x4027a2
            v30 = v31;
            v31 = v30 + 1;
            *(char *)(v30 + v29 + g882) = (char)v28;
        }
        // 0x4027b6
        v28++;
        v29 += 256;
    }
    // 0x4027c5
    return 256;
}

// Address range: 0x4027d0 - 0x40283b
int32_t function_4027d0(void) {
    // 0x4027d0
    function_4019d0(g880, &g885, &g891);
    function_402f70(1);
    function_4030c0(g879 + 8, (int32_t)(float32_t)g30);
    function_402a80(g32, g33, 0);
    int32_t result = function_4044d0((int32_t)"data\\ign.psq"); // 0x40282d
    g888 = result;
    return result;
}

// Address range: 0x402840 - 0x402a7c
int32_t function_402840(int32_t a1) {
    // 0x402840
    if (g883 != g881) {
        // 0x402851
        g883 = g881;
        g907 = 0;
        g30 = 0.0;
        g31 = 0;
        function_4030c0(g881 + 72, 0);
        int32_t v1 = 0;
        int32_t v2 = v1 + 1; // 0x402883
        char v3 = *(char *)(g881 + 845 + v2); // 0x40288a
        *(char *)(g878 + v1) = v3;
        while (v2 != 0x4b000) {
            // 0x402878
            v1 = v2;
            v2 = v1 + 1;
            v3 = *(char *)(g881 + 845 + v2);
            *(char *)(g878 + v1) = v3;
        }
        // 0x402897
        return 0;
    }
    // 0x40289e
    int3_t v4; // 0x402840
    int32_t v5; // 0x402840
    if (g29 <= 2) {
        // 0x4028ab
        int32_t v6; // 0x402840
        int3_t v7; // 0x402840
        if (g907 > 39) {
            // 0x4028ab
            v6 = v5 & 0x4100;
        } else {
            // 0x4028bd
            int3_t v8; // 0x402840
            int3_t v9 = v8 - 1; // 0x4028bd
            __frontend_reg_store_fpr(v9, 1.0L);
            __frontend_reg_load_fpr(v9);
            int32_t v10 = v5 & 0x4100;
            v6 = v10;
            if (v10 == 0) {
                // 0x4028cc
                __frontend_reg_store_fpr(v9, (float80_t)g30);
                __frontend_reg_store_fpr(v9, __frontend_reg_load_fpr(v9) + 0.1L);
                float80_t v11 = __frontend_reg_load_fpr(v8); // 0x4028d8
                g30 = v11;
                function_4030c0(g881 + 72, (int32_t)(float32_t)v11);
                v6 = v10;
                v7 = v8 + 1;
            }
        }
        float80_t v12 = (int64_t)a1; // 0x4028fc
        int3_t v13 = v7 - 1; // 0x4028fc
        __frontend_reg_store_fpr(v13, v12);
        __frontend_reg_store_fpr(v13, 100.0L * __frontend_reg_load_fpr(v13));
        int3_t v14 = v7 - 2; // 0x402906
        __frontend_reg_store_fpr(v14, (float80_t)g907);
        __frontend_reg_load_fpr(v14);
        __frontend_reg_load_fpr(v13);
        if (v6 == 0) {
            // 0x402915
            __frontend_reg_store_fpr(v13, 0.0L);
            __frontend_reg_load_fpr(v13);
            if ((v5 & 256) != 0) {
                // 0x40294f
                __frontend_reg_store_fpr(v13, (float80_t)g30);
                __frontend_reg_store_fpr(v13, __frontend_reg_load_fpr(v13) - 0.1L);
                __frontend_reg_load_fpr(v13);
                __frontend_reg_load_fpr(v13);
                g30 = 0.0;
                g31 = 0;
                function_4030c0(g881 + 72, 0);
            }
            // 0x40296d
            __frontend_reg_store_fpr(v13, v12);
            __frontend_reg_store_fpr(v13, 120.0L * __frontend_reg_load_fpr(v13));
            __frontend_reg_store_fpr(v14, (float80_t)g907);
            __frontend_reg_load_fpr(v14);
            __frontend_reg_load_fpr(v13);
            // 0x402897
            return 1;
        }
        // 0x402990
        __frontend_reg_store_fpr(v13, v12);
        __frontend_reg_store_fpr(v13, 120.0L * __frontend_reg_load_fpr(v13));
        __frontend_reg_store_fpr(v14, (float80_t)g907);
        __frontend_reg_load_fpr(v14);
        __frontend_reg_load_fpr(v13);
        v4 = v7;
    }
    int3_t v15 = v4; // 0x402997
    if (g29 == 3) {
        int3_t v16 = v4 - 1; // 0x402999
        __frontend_reg_store_fpr(v16, 1.0L);
        __frontend_reg_load_fpr(v16);
        v15 = v4;
        if ((v5 & 0x4100) == 0) {
            // 0x4029a8
            __frontend_reg_store_fpr(v16, (float80_t)g30);
            __frontend_reg_store_fpr(v16, __frontend_reg_load_fpr(v16) + 0.1L);
            float80_t v17 = __frontend_reg_load_fpr(v4); // 0x4029b4
            g30 = v17;
            function_4030c0(g881 + 72, (int32_t)(float32_t)v17);
            v15 = v4 + 1;
        }
    }
    // 0x4029d8
    int32_t v18; // bp-8, 0x402840
    int32_t v19 = &v18; // 0x40284e
    if (g29 == 4) {
        int3_t v20 = v15 - 1; // 0x4029e1
        __frontend_reg_store_fpr(v20, 0.0L);
        __frontend_reg_load_fpr(v20);
        if ((v5 & 256) != 0) {
            // 0x4029f0
            __frontend_reg_store_fpr(v20, (float80_t)g30);
            __frontend_reg_store_fpr(v20, __frontend_reg_load_fpr(v20) - 0.1L);
            float80_t v21 = __frontend_reg_load_fpr(v20); // 0x4029fc
            g30 = v21;
            *(int32_t *)(v19 - 4) = g31;
            *(int32_t *)(v19 - 8) = (int32_t)(float32_t)v21;
            *(int32_t *)(v19 - 12) = g881 + 72;
            function_4030c0((int32_t)&g1001, (int32_t)&g1001);
        }
        // 0x402a20
        __frontend_reg_store_fpr(v20, 0.0L);
        __frontend_reg_load_fpr(v20);
        if ((v5 & 256) == 0) {
            // 0x402897
            return 1;
        }
    }
    int32_t * v22 = (int32_t *)(v19 - 4); // 0x402a39
    *v22 = 0;
    *(int32_t *)(v19 - 8) = 0;
    *(int32_t *)(v19 - 12) = (int32_t)&g620;
    *(int32_t *)(v19 - 16) = g33;
    *(int32_t *)(v19 - 20) = g32;
    *(int32_t *)(v19 - 24) = 0;
    *(int32_t *)(v19 - 28) = 0;
    *(int32_t *)(v19 - 32) = g32;
    *(int32_t *)(v19 - 36) = g878;
    function_404600((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
    *v22 = (int32_t)&g620;
    function_4046a0((int32_t)&g1001);
    g907++;
    return 0;
}

// Address range: 0x402a80 - 0x402a9b
int32_t function_402a80(int32_t a1, int32_t a2, int32_t a3) {
    // 0x402a80
    int32_t v1; // 0x402a80
    function_40a4a0(v1, v1);
    return 1;
}

// Address range: 0x402aa0 - 0x402e0f
int32_t function_402aa0(int32_t a1) {
    // 0x402aa0
    int3_t v1; // 0x402aa0
    int32_t v2; // 0x402aa0
    if (g29 == 1) {
        // 0x402aab
        int3_t v3; // 0x402aa0
        int3_t v4 = v3 - 1; // 0x402aab
        __frontend_reg_store_fpr(v4, 1.0L);
        __frontend_reg_load_fpr(v4);
        if ((v2 & 0x4100) == 0 && g26 >= 5) {
            // 0x402ac3
            __frontend_reg_store_fpr(v4, (float80_t)g30);
            __frontend_reg_store_fpr(v4, __frontend_reg_load_fpr(v4) + 0.1L);
            float80_t v5 = __frontend_reg_load_fpr(v3); // 0x402acf
            g30 = v5;
            function_4030c0(g879 + 8, (int32_t)(float32_t)v5);
            v1 = v3 + 1;
        }
    }
    // 0x402af3
    if (g29 == 2) {
        int3_t v6 = v1 - 1; // 0x402afc
        __frontend_reg_store_fpr(v6, (float80_t)g30);
        __frontend_reg_store_fpr(v6, __frontend_reg_load_fpr(v6) - 0.1L);
        float80_t v7 = __frontend_reg_load_fpr(v6); // 0x402b08
        g30 = v7;
        function_4030c0(g879 + 8, (int32_t)(float32_t)v7);
        __frontend_reg_store_fpr(v6, 0.0L);
        __frontend_reg_load_fpr(v6);
        if ((v2 & 0x4100) == 0) {
            // 0x402b3b
            g29++;
            g34 = 1;
            function_402f70(1);
        }
    }
    // 0x402b55
    int32_t v8; // bp-8, 0x402aa0
    int32_t v9 = &v8; // 0x402aa8
    int32_t v10 = *(int32_t *)(v9 + 12) - g27; // 0x402b5e
    int32_t v11 = g884 + 12 * g25; // 0x402b6a
    int32_t v12 = g26; // 0x402b72
    g26 = v10;
    uint32_t v13 = *(int32_t *)(v11 + 4); // 0x402b7e
    if (v10 >= v13) {
        // 0x402b85
        g27 += v13;
        g26 = 0;
        int64_t v14 = g888; // 0x402b98
        int32_t v15 = g25 + 1; // 0x402b9d
        g25 = v15;
        if (v15 == (int32_t)((0x100000000 * (int64_t)((int32_t)v14 >> 31) | v14 & 0xffffffff) / 12)) {
            // 0x402bae
            g25 = 0;
        }
    }
    int32_t * v16 = (int32_t *)(v9 - 4); // 0x402bb9
    *v16 = g34;
    int32_t * v17 = (int32_t *)(v9 - 8); // 0x402bba
    *v17 = v12 + *(int32_t *)v11;
    g894 = function_401e30((int32_t)&g1001, (int32_t)&g1001);
    g897 = g882;
    g895 = g878;
    g896 = g878;
    g898 = 0;
    *v16 = (int32_t)&g894;
    g899 = 0;
    g900 = g32 - 1;
    g901 = g33 - 1;
    function_402e10((int32_t)&g1001);
    *v16 = g886 + 846;
    *v17 = g32;
    int32_t * v18 = (int32_t *)(v9 - 12);
    *v18 = 320;
    int32_t * v19 = (int32_t *)(v9 - 16);
    *v19 = 0;
    int32_t * v20 = (int32_t *)(v9 - 20);
    *v20 = 0;
    int32_t * v21 = (int32_t *)(v9 - 24);
    int32_t * v22; // 0x402aa0
    int32_t v23; // 0x402aa0
    if (g34 != 0) {
        // 0x402cd3
        *v21 = 40;
        int32_t * v24 = (int32_t *)(v9 - 28); // 0x402ceb
        *v24 = 40;
        int32_t * v25 = (int32_t *)(v9 - 32); // 0x402ced
        *v25 = 57;
        int32_t v26 = v9 - 36; // 0x402cef
        int32_t * v27 = (int32_t *)v26;
        *v27 = 0;
        function_402f00((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
        *v16 = g886 + 846;
        *v17 = g32;
        *v18 = 320;
        *v19 = 0;
        *v20 = g32 - 40;
        *v21 = 40;
        *v24 = 40;
        *v25 = 57;
        *v27 = 40;
        function_402f00((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
        *v16 = g886 + 846;
        *v17 = g32;
        *v18 = 320;
        *v19 = g33 - 40;
        *v20 = 0;
        *v21 = 40;
        *v24 = 40;
        *v25 = 97;
        *v27 = 0;
        function_402f00((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
        *v16 = g886 + 846;
        *v17 = g32;
        *v18 = 320;
        *v19 = g33 - 40;
        *v20 = g32 - 40;
        *v21 = 40;
        *v24 = 40;
        *v25 = 97;
        *v27 = 40;
        v22 = v27;
        v23 = v26;
    } else {
        // 0x402c25
        *v21 = 20;
        int32_t * v28 = (int32_t *)(v9 - 28); // 0x402c3b
        *v28 = 20;
        int32_t * v29 = (int32_t *)(v9 - 32); // 0x402c3d
        *v29 = 0;
        int32_t v30 = v9 - 36; // 0x402c3e
        int32_t * v31 = (int32_t *)v30;
        *v31 = 0;
        function_402f00((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
        *v16 = g886 + 846;
        *v17 = g32;
        *v18 = 320;
        *v19 = 0;
        *v20 = g32 - 20;
        *v21 = 20;
        *v28 = 20;
        *v29 = 0;
        *v31 = 20;
        function_402f00((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
        *v16 = g886 + 846;
        *v17 = g32;
        *v18 = 320;
        *v19 = g33 - 20;
        *v20 = 0;
        *v21 = 20;
        *v28 = 20;
        *v29 = 20;
        *v31 = 0;
        function_402f00((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
        *v16 = g886 + 846;
        *v17 = g32;
        *v18 = 320;
        *v19 = g33 - 20;
        *v20 = g32 - 20;
        *v21 = 20;
        *v28 = 20;
        *v29 = 20;
        *v31 = 20;
        v22 = v31;
        v23 = v30;
    }
    // 0x402d84
    function_402f00((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
    int32_t * v32 = (int32_t *)(v23 + 32); // 0x402d9c
    *v32 = g886 + 846;
    int32_t * v33 = (int32_t *)(v23 + 28); // 0x402da2
    *v33 = g32;
    int32_t * v34 = (int32_t *)(v23 + 24); // 0x402da8
    *v34 = 320;
    int32_t v35 = 2 * g33; // 0x402dad
    int32_t * v36 = (int32_t *)(v23 + 20); // 0x402db2
    *v36 = (int32_t)((0x100000000 * (int64_t)(v35 >> 31) | (int64_t)v35) / 200);
    int32_t v37 = g32 - 173; // 0x402db3
    int32_t * v38 = (int32_t *)(v23 + 16); // 0x402dbf
    *v38 = (v37 - (v37 >> 31)) / 2;
    int32_t * v39 = (int32_t *)(v23 + 12); // 0x402dc0
    *v39 = 57;
    int32_t * v40 = (int32_t *)(v23 + 8); // 0x402dc2
    *v40 = 173;
    int32_t * v41 = (int32_t *)(v23 + 4); // 0x402dc7
    *v41 = 0;
    *v22 = 40;
    function_402f00((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
    *v32 = 0;
    *v33 = 0;
    *v34 = (int32_t)&g620;
    *v36 = g33;
    *v38 = g32;
    *v39 = 0;
    *v40 = 0;
    *v41 = g32;
    *v22 = g878;
    function_404600((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
    *v32 = (int32_t)&g620;
    function_4046a0((int32_t)&g1001);
    return 0;
}

// Address range: 0x402e10 - 0x402e30
int32_t function_402e10(int32_t a1) {
    // 0x402e10
    return function_40a519();
}

// Address range: 0x402e30 - 0x402ef2
int32_t function_402e30(void) {
    // 0x402e30
    function_404910();
    if (function_404a90(28) == 1) {
        goto lab_0x402e62;
    } else {
        // 0x402e44
        if (function_404a90(57) == 1) {
            goto lab_0x402e62;
        } else {
            // 0x402e53
            if (function_404a90(1) != 1) {
                goto lab_0x402e7d;
            } else {
                goto lab_0x402e62;
            }
        }
    }
  lab_0x402e62:;
    int32_t v1 = g29; // 0x402e62
    int32_t v2 = v1 + (int32_t)(v1 == 1);
    g29 = v2;
    if (v2 == 3) {
        // 0x402e77
        g29 = v2 + 1;
    }
    goto lab_0x402e7d;
  lab_0x402e7d:
    // 0x402e7d
    if (function_404a90(74) == 1 && g34 != 0) {
        // 0x402e95
        function_402f70(0);
        function_4030c0(g879 + 8, 0);
    }
    int32_t v3 = function_404a90(78); // 0x402eb9
    int32_t result = v3; // 0x402ec4
    if (v3 == 1 && g34 != 1) {
        // 0x402ecf
        function_402f70(1);
        result = function_4030c0(g879 + 8, 0);
    }
    // 0x402ef1
    return result;
}

// Address range: 0x402f00 - 0x402f6d
int32_t function_402f00(int32_t a1, int32_t a2, uint32_t result2, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9) {
    if (a4 < 1) {
        // 0x402f68
        int32_t result; // 0x402f00
        return result;
    }
    int32_t v1 = a4; // 0x402f32
    int32_t v2 = a8 * a6 + a5 + g878;
    int32_t v3 = a7 * a2 + a1 + a9;
    int32_t v4 = 0; // 0x402f3a
    unsigned char v5; // 0x402f40
    char * v6; // 0x402f43
    int32_t v7; // 0x402f49
    char v8; // 0x402f54
    if (result2 >= 1) {
        v5 = *(char *)(v4 + v3);
        v6 = (char *)(v4 + v2);
        v7 = v4 + 1;
        v8 = *(char *)((256 * (int32_t)v5 | (int32_t)*v6) + g908);
        *v6 = v8;
        v4 = v7;
        while (v7 != result2) {
            // 0x402f3c
            v5 = *(char *)(v4 + v3);
            v6 = (char *)(v4 + v2);
            v7 = v4 + 1;
            v8 = *(char *)((256 * (int32_t)v5 | (int32_t)*v6) + g908);
            *v6 = v8;
            v4 = v7;
        }
    }
    // 0x402f5d
    v1--;
    int32_t v9 = v3 + a7; // 0x402f66
    int32_t v10 = v2 + a8; // 0x402f66
    while (v1 != 0) {
        // 0x402f36
        v2 = v10;
        v3 = v9;
        v4 = 0;
        if (result2 >= 1) {
            v5 = *(char *)(v4 + v3);
            v6 = (char *)(v4 + v2);
            v7 = v4 + 1;
            v8 = *(char *)((256 * (int32_t)v5 | (int32_t)*v6) + g908);
            *v6 = v8;
            v4 = v7;
            while (v7 != result2) {
                // 0x402f3c
                v5 = *(char *)(v4 + v3);
                v6 = (char *)(v4 + v2);
                v7 = v4 + 1;
                v8 = *(char *)((256 * (int32_t)v5 | (int32_t)*v6) + g908);
                *v6 = v8;
                v4 = v7;
            }
        }
        // 0x402f5d
        v1--;
        v9 = v3 + a7;
        v10 = v2 + a8;
    }
    // 0x402f68
    return result2;
}

// Address range: 0x402f70 - 0x4030b2
int32_t function_402f70(int32_t a1) {
    // 0x402f70
    g34 = a1;
    if (a1 == 0) {
        // 0x402f7d
        g32 = 320;
        g33 = 200;
    }
    if (a1 == 1) {
        // 0x402f96
        g32 = 640;
        g33 = 480;
    }
    // 0x402faa
    function_4030c0(g879 + 8, 0);
    int32_t v1 = 0;
    int32_t v2 = v1 + 1; // 0x402fc7
    *(char *)(g878 + v1) = 0;
    while (v2 != 0x4b000) {
        // 0x402fc1
        v1 = v2;
        v2 = v1 + 1;
        *(char *)(g878 + v1) = 0;
    }
    int32_t v3 = g32; // 0x402fdd
    function_404600(g878, v3, 0, 0, v3, g33, (int32_t)&g620, 0, 0);
    function_4046a0((int32_t)&g620);
    int32_t v4 = g32; // 0x403010
    function_404600(g878, v4, 0, 0, v4, g33, (int32_t)&g620, 0, 0);
    g47 = g32;
    g49 = 8;
    g50 = 1;
    g48 = g33;
    function_404660();
    int32_t v5 = g32; // 0x40306e
    function_4046b0(g878, v5, v5, g33, 8);
    function_402a80(g32, g33, 0);
    return function_4030c0(g879 + 8, 0);
}

// Address range: 0x4030c0 - 0x403140
int32_t function_4030c0(int32_t a1, int32_t a2) {
    int32_t v1 = 0;
    unsigned char v2 = *(char *)(v1 + a1); // 0x4030d6
    int3_t v3; // 0x4030c0
    int3_t v4 = v3 - 1; // 0x4030dd
    __frontend_reg_store_fpr(v4, (float80_t)(float64_t)(int64_t)v2);
    __frontend_reg_store_fpr(v4, __frontend_reg_load_fpr(v4) * (float80_t)(float64_t)(int64_t)a2);
    __frontend_reg_load_fpr(v4);
    float80_t v5 = __frontend_reg_load_fpr(v4); // 0x4030eb
    __frontend_reg_store_fpr(v4, 0.0L);
    __frontend_reg_load_fpr(v4);
    int32_t v6; // 0x4030c0
    __frontend_reg_store_fpr(v4, (v6 & 0x4100) != 0 ? v5 : 0.0L);
    int32_t v7 = v1 + 1; // 0x403117
    *(char *)(v1 + 0x43c468) = (char)__ftol();
    while (v7 != 768) {
        // 0x4030d4
        v1 = v7;
        v2 = *(char *)(v1 + a1);
        v4--;
        __frontend_reg_store_fpr(v4, (float80_t)(float64_t)(int64_t)v2);
        __frontend_reg_store_fpr(v4, __frontend_reg_load_fpr(v4) * (float80_t)(float64_t)(int64_t)a2);
        __frontend_reg_load_fpr(v4);
        v5 = __frontend_reg_load_fpr(v4);
        __frontend_reg_store_fpr(v4, 0.0L);
        __frontend_reg_load_fpr(v4);
        __frontend_reg_store_fpr(v4, (v6 & 0x4100) != 0 ? v5 : 0.0L);
        v7 = v1 + 1;
        *(char *)(v1 + 0x43c468) = (char)__ftol();
    }
    // 0x40312b
    return function_404690(&g598);
}

// Address range: 0x403140 - 0x40329e
int32_t function_403140(int32_t a1) {
    // 0x403140
    g606 = &g9;
    g604 = a1;
    g601 = (struct tagRECT *)LoadCursorA(NULL, (char *)0x7f00);
    LoadIconA(NULL, (char *)0x7f00);
    GetStockObject(4);
    int32_t lpWndClass; // bp-60, 0x403140
    if (RegisterClassA((struct tagWNDCLASSA *)&lpWndClass) == 0) {
        // 0x4031d4
        return 0;
    }
    int32_t v1 = 1; // bp-112, 0x4031e0
    timeBeginPeriod(1);
    function_404b00();
    if (function_403510() == 0) {
        // 0x4031d4
        return 0;
    }
    int32_t v2 = &v1; // 0x403140
    int32_t v3; // 0x403140
    while (true) {
        // 0x40321a
        v3 = v2;
        int32_t v4 = v3 - 4; // 0x403221
        *(int32_t *)v4 = 0;
        *(int32_t *)(v3 - 8) = 0;
        int32_t * v5 = (int32_t *)(v3 - 12);
        *v5 = 0;
        int32_t v6 = v3 + 16;
        int32_t * v7 = (int32_t *)(v3 - 16);
        if (g602 == 0) {
            // 0x403267
            *v7 = v6;
            bool v8 = GetMessageA((struct tagMSG *)&g1001, &g1001, (int32_t)&g1001, (int32_t)&g1001); // 0x40326c
            if (!v8) {
                // break -> 0x403290
                break;
            }
            // 0x403272
            *(int32_t *)(v3 - 20) = v3;
            TranslateMessage((struct tagMSG *)&g1001);
            int32_t v9 = v3 - 24; // 0x40327d
            *(int32_t *)v9 = v4;
            DispatchMessageA((struct tagMSG *)&g1001);
            v2 = v9;
        } else {
            // 0x403229
            *v7 = 0;
            int32_t v10 = v3 - 20; // 0x40322f
            *(int32_t *)v10 = v6;
            bool v11 = PeekMessageA((struct tagMSG *)&g1001, &g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001); // 0x403230
            if (!v11) {
                // 0x403257
                v2 = v10;
                if (function_4032a0() == 0) {
                    // 0x403260
                    function_403540();
                    v2 = v10;
                }
            } else {
                int32_t v12 = v3 - 24; // 0x40323a
                *(int32_t *)v12 = 0;
                *(int32_t *)(v3 - 28) = 0;
                *(int32_t *)(v3 - 32) = 0;
                *(int32_t *)(v3 - 36) = v4;
                bool v13 = GetMessageA((struct tagMSG *)&g1001, &g1001, (int32_t)&g1001, (int32_t)&g1001); // 0x403241
                if (!v13) {
                    // 0x403282
                    return *v5;
                }
                // 0x403247
                *(int32_t *)(v3 - 40) = v10;
                TranslateMessage((struct tagMSG *)&g1001);
                int32_t v14 = v3 - 44; // 0x403252
                *(int32_t *)v14 = v12;
                DispatchMessageA((struct tagMSG *)&g1001);
                v2 = v14;
            }
        }
    }
    // 0x403290
    return *(int32_t *)(v3 + 8);
}

// Address range: 0x4032a0 - 0x403331
int32_t function_4032a0(void) {
    int32_t v1 = g37; // 0x4032a0
    if (v1 == 0) {
        // 0x4032aa
        if (g41 == 0) {
            // 0x4032b3
            g41 = 1;
            g39 = function_4034d0();
            function_4023f0();
            g37 = 1;
            // 0x4032d6
            return 1;
        }
    }
    // 0x4032dc
    if (v1 == 1 == g42 == 0) {
        // 0x4032ea
        g39 = function_4034d0();
        function_402410();
        return 1;
    }
    if (v1 == 2 != (g42 == 0)) {
        // 0x4032d6
        return 1;
    }
    // 0x403308
    g39 = function_4034d0();
    function_402520();
    function_404b30();
    timeEndPeriod(1);
    g42 = 1;
    return 0;
}

// Address range: 0x403340 - 0x4034b8
int32_t function_403340(int32_t a1, uint32_t a2, int32_t a3) {
    // 0x403340
    int32_t v1; // bp-12, 0x403340
    int32_t v2 = &v1; // 0x403346
    int32_t v3; // 0x403340
    struct tagRECT * v4; // bp-16, 0x403340
    if (a2 < 29) {
        if (a2 == 28) {
            // 0x4033ff
            g602 = a3;
            v3 = v2;
            goto lab_0x40349c;
        } else {
            // 0x403354
            g994 = a2 - 1;
            v3 = v2;
            switch (a2) {
                case 1: {
                    return 0;
                }
                case 2: {
                    // 0x403389
                    if (g36 == 0) {
                        // 0x403392
                        function_403560();
                        v4 = NULL;
                        PostQuitMessage(0);
                    }
                    // 0x40339f
                    return 0;
                }
                case 3: {
                    goto lab_0x4033a7;
                }
                case 5: {
                    goto lab_0x4033a7;
                }
                default: {
                    goto lab_0x40349c;
                }
            }
        }
    } else {
        // 0x403365
        v3 = v2;
        switch (a2) {
            case 32: {
                // 0x40340d
                if (g35 == 0) {
                    // 0x403429
                    *(int32_t *)&v4 = (int32_t)g601;
                    SetCursor(&g601->e0);
                    return 1;
                }
                // 0x403416
                v4 = NULL;
                SetCursor(NULL);
                return 1;
            }
            case 256: {
                return 0;
            }
            case 261: {
                // 0x403448
                v3 = v2;
                if (a3 == 13) {
                    // 0x40344f
                    v3 = v2;
                    if (g603 == 1) {
                        // 0x403458
                        g36 = 1;
                        function_404890();
                        function_404670();
                        struct tagRECT * v5 = (struct tagRECT *)g605; // 0x403471
                        v4 = v5;
                        DestroyWindow(&v5->e0);
                        g35 = g35 == 0;
                        function_404640();
                        function_4046f0();
                        g36 = 0;
                        v3 = (int32_t)&v4;
                    }
                }
                goto lab_0x40349c;
            }
            default: {
                goto lab_0x40349c;
            }
        }
    }
  lab_0x40349c:;
    int32_t v6 = v3; // 0x40349c
    int32_t v7 = *(int32_t *)(v3 + 16); // 0x40349c
    goto lab_0x4034a0;
  lab_0x4033a7:;
    // 0x4033a7
    int32_t v9; // bp-36, 0x403340
    if (g35 == 0) {
        // 0x4033d4
        v4 = (struct tagRECT *)&g599;
        int32_t * hWnd = (int32_t *)a1; // 0x4033de
        GetClientRect(hWnd, (struct tagRECT *)&g599);
        ClientToScreen(hWnd, (struct tagPOINT *)&g599);
        v9 = a1;
        ClientToScreen(hWnd, (struct tagPOINT *)&g600);
        v6 = &v9;
        v7 = a1;
        goto lab_0x4034a0;
    } else {
        // 0x4033b0
        v4 = (struct tagRECT *)1;
        GetSystemMetrics(1);
        int32_t xRight = GetSystemMetrics(0); // 0x4033bd
        v9 = 0;
        struct tagRECT * v10 = (struct tagRECT *)&g599; // bp-40, 0x4033c4
        SetRect((struct tagRECT *)&g599, 0, 0, xRight, (int32_t)&g1001);
        v3 = (int32_t)&v10;
        goto lab_0x40349c;
    }
  lab_0x4034a0:;
    int32_t v8 = v6;
    *(int32_t *)(v8 - 4) = *(int32_t *)(v8 + 28);
    *(int32_t *)(v8 - 8) = *(int32_t *)(v8 + 24);
    *(int32_t *)(v8 - 12) = a2;
    *(int32_t *)(v8 - 16) = v7;
    int32_t result = DefWindowProcA(&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001); // 0x4034ac
    return result;
}

// Address range: 0x4034d0 - 0x403506
int32_t function_4034d0(void) {
    int32_t v1 = timeGetTime(); // 0x4034d0
    int32_t v2 = g43; // 0x4034d6
    int32_t v3 = v2 != 0 ? v2 : v1;
    g43 = v3;
    int32_t result; // 0x4034d0
    if (g602 == 0) {
        // 0x4034d0
        result = g40;
    } else {
        int32_t v4 = g40 + v1 - v3; // 0x4034f5
        g40 = v4;
        result = v4;
    }
    // 0x4034fb
    g43 = v1;
    return result;
}

// Address range: 0x403510 - 0x40353f
int32_t function_403510(void) {
    // 0x403510
    function_4045e0(0);
    if (function_404640() == 0 || function_4046f0() == 0) {
        // 0x40353c
        return 0;
    }
    // 0x40352c
    g603 = 1;
    return 1;
}

// Address range: 0x403540 - 0x403553
int32_t function_403540(void) {
    // 0x403540
    return PostMessageA((int32_t *)g605, 16, 0, 0);
}

// Address range: 0x403560 - 0x40356a
int32_t function_403560(void) {
    // 0x403560
    function_404670();
    return function_404890();
}

// Address range: 0x403570 - 0x403593
int32_t function_403570(void) {
    // 0x403570
    __asm_rep_stosd_memset((char *)&g944, 0, 256);
    function_4035a0("DEFAULT");
    return 1;
}

// Address range: 0x4035a0 - 0x403624
int32_t function_4035a0(char * a1) {
    int32_t v1 = (int32_t)&g944; // 0x4035a7
    int32_t v2 = 0; // 0x4035a7
    int32_t result = v2; // 0x4035ac
    while (*(int32_t *)v1 != 0) {
        // 0x4035ae
        v1 += 4;
        v2++;
        result = v2;
        if (v1 >= (int32_t)&g945) {
            // break -> 0x4035b9
            break;
        }
        result = v2;
    }
    // 0x4035b9
    if (result == 256) {
        // 0x4035c1
        return -1;
    }
    int32_t v3 = function_4111a0(320); // 0x4035ce
    if (v3 == 0) {
        // 0x4035c1
        return -1;
    }
    // 0x4035e2
    *(int32_t *)(4 * result + (int32_t)&g944) = v3;
    if (a1 == NULL) {
        // 0x403610
        *(char *)v3 = 0;
        // 0x403613
        __asm_rep_stosd_memset((char *)(v3 + 64), 0, 64);
        return result;
    }
    int32_t v4 = (int32_t)a1; // 0x4035e2
    int32_t v5 = 0; // 0x4035f6
    if (*a1 != 0) {
        int32_t v6 = 0; // 0x403603
        v5 = 63;
        while (v6 <= 62) {
            // 0x4035fd
            *(char *)(v6 + v3) = *(char *)(v6 + v4);
            v6++;
            v5 = v6;
            if (*(char *)(v6 + v4) == 0) {
                // break -> 0x40360a
                break;
            }
            v5 = 63;
        }
    }
    // 0x40360a
    *(char *)(v5 + v3) = 0;
    // 0x403613
    __asm_rep_stosd_memset((char *)(v3 + 64), 0, 64);
    return result;
}

// Address range: 0x403630 - 0x4037c6
int32_t function_403630(int32_t a1, int32_t a2) {
    int32_t v1 = *(int32_t *)(4 * a1 + (int32_t)&g944) + 64; // 0x403645
    int32_t v2 = *(int32_t *)v1; // 0x40364b
    int32_t v3 = v2; // 0x40364d
    int32_t v4 = v1; // 0x40364d
    int32_t v5 = 0; // 0x40364d
    int32_t v6 = 0; // 0x40364d
    int32_t v7; // 0x403630
    int32_t v8; // 0x403654
    int32_t v9; // 0x403667
    int32_t v10; // 0x403630
    int32_t v11; // 0x403630
    int32_t v12; // 0x403630
    int32_t v13; // 0x403630
    int32_t v14; // 0x403630
    if (v2 != 0) {
        while (true) {
            // 0x40364f
            if (v5 > 63) {
                // break -> 0x40369f
                break;
            }
            // 0x403654
            v8 = v3;
            int32_t v15 = *(int32_t *)v8; // 0x40365c
            v7 = v15;
            v12 = v8;
            v10 = 0;
            v13 = 0;
            if (v15 == 0) {
                goto lab_0x4036da_2;
            }
            while (true) {
              lab_0x403662:
                // 0x403662
                v11 = v10;
                v14 = v11;
                if (v11 > 63) {
                    // break -> 0x403691
                    break;
                }
                // 0x403667
                v9 = v7;
                int32_t v16 = v9 + 4; // 0x40366b
                int32_t v17 = v16; // 0x403670
                if (*(int32_t *)v16 == 0) {
                    goto lab_0x4036af;
                }
                uint32_t v18 = 0;
                while (v18 <= 15) {
                    // 0x403677
                    v17 += 8;
                    if (*(int32_t *)v17 == 0) {
                        // 0x403683
                        int32_t v19; // 0x40367a
                        int32_t v20 = v19; // 0x403683
                        if (v19 != 16) {
                            goto lab_0x4036af;
                        } else {
                            goto lab_0x403685;
                        }
                    }
                    v18++;
                }
                goto lab_0x403685;
            }
          lab_0x403691:
            // 0x403691
            v13 = v14;
            if (v14 != 64) {
                goto lab_0x4036da_2;
            }
            // 0x403693
            v4 += 4;
            v5++;
            v3 = *(int32_t *)v4;
            if (v3 == 0) {
                // break -> 0x40369f
                break;
            }
        }
        // 0x40369f
        v6 = v5;
        if (v6 == 64) {
            // 0x4036a5
            return 0;
        }
    }
    int32_t v21 = function_4111a0(256); // 0x40373f
    if (v21 == 0) {
        // 0x4036a5
        return 0;
    }
    // 0x403757
    *(int32_t *)(4 * v6 + v1) = v21;
    __asm_rep_stosd_memset((char *)v21, 0, 64);
    int32_t v22 = function_4111a0((int32_t)&g1001); // 0x40376f
    if (v22 == 0) {
      lab_0x4036a5:
        // 0x4036a5
        return 0;
    }
    // 0x403787
    *(int32_t *)v21 = v22;
    int32_t v23 = v22 + 4; // 0x40378e
    int32_t v24 = 16; // 0x403791
    int32_t v25 = v23; // 0x403791
    *(int32_t *)v25 = 0;
    v24--;
    v25 += 8;
    while (v24 != 0) {
        // 0x403793
        *(int32_t *)v25 = 0;
        v24--;
        v25 += 8;
    }
    int32_t result = function_4111a0(a2); // 0x4037a4
    if (result != 0) {
        // 0x4037ba
        *(int32_t *)v22 = result;
        *(int32_t *)v23 = a2;
        return result;
    }
    // 0x4036a5
    return 0;
  lab_0x4036da_2:;
    int32_t v26 = function_4111a0(128); // 0x4036df
    if (v26 == 0) {
        return 0;
    }
    // 0x4036f7
    *(int32_t *)(4 * v13 + v8) = v26;
    int32_t v27 = 15; // 0x403701
    int32_t v28 = v26 + 12; // 0x403701
    goto lab_0x403706;
  lab_0x4036af:;
    int32_t result3 = function_4111a0(a2); // 0x4036b4
    if (result3 != 0) {
        int32_t v30 = v9; // 0x4036ca
        *(int32_t *)v30 = result3;
        *(int32_t *)(v30 + 4) = a2;
        return result3;
    }
    return 0;
  lab_0x403685:;
    int32_t v31 = v12 + 4; // 0x403685
    int32_t v32 = v11 + 1; // 0x403688
    int32_t v33 = *(int32_t *)v31; // 0x403689
    v7 = v33;
    v12 = v31;
    v10 = v32;
    v14 = v32;
    if (v33 == 0) {
        // break -> 0x403691
        goto lab_0x403691;
    }
    goto lab_0x403662;
  lab_0x403706:
    // 0x403706
    *(int32_t *)v28 = 0;
    int32_t v29 = v27 - 1; // 0x40370f
    v27 = v29;
    v28 += 8;
    if (v29 != 0) {
        goto lab_0x403706;
    } else {
        int32_t result2 = function_4111a0(a2); // 0x403717
        if (result2 != 0) {
            // 0x40372d
            *(int32_t *)v26 = result2;
            *(int32_t *)(v26 + 4) = a2;
            return result2;
        }
        goto lab_0x4036a5;
    }
}

// Address range: 0x4037d0 - 0x403813
int32_t function_4037d0(int32_t a1, uint32_t a2) {
    int32_t result = function_403630(a1, a2); // 0x4037e0
    if (result != 0) {
        // 0x4037ef
        __asm_rep_stosd_memset((char *)result, 0, a2 / 4);
        __asm_rep_stosb_memset((char *)(result + (a2 & -4)), 0, a2 & 3);
    }
    // 0x40380b
    return result;
}

// Address range: 0x403820 - 0x4038d6
int32_t function_403820(int32_t a1) {
    // 0x403820
    int32_t v1; // bp-36, 0x403820
    int32_t v2 = &v1; // 0x40383c
    int32_t * v3 = (int32_t *)(v2 + 20); // 0x403845
    int32_t * v4 = (int32_t *)(v2 + 16);
    int32_t * v5 = (int32_t *)(v2 + 28);
    int32_t * v6 = (int32_t *)(v2 - 4);
    int32_t * v7 = (int32_t *)(v2 + 32);
    int32_t v8 = *v3; // 0x403845
    int32_t v9 = *(int32_t *)v8; // 0x403849
    int32_t v10 = v8; // 0x40384d
    int32_t v11; // 0x403820
    int32_t v12; // 0x403820
    int32_t v13; // 0x403820
    int32_t v14; // 0x403820
    int32_t v15; // 0x40385d
    int32_t v16; // 0x40388f
    int32_t v17; // 0x403880
    if (v9 != 0) {
        // 0x40384f
        *v4 = v9;
        *v5 = 64;
        v12 = v9;
        v15 = *(int32_t *)v12;
        v11 = 64;
        if (v15 != 0) {
            // 0x403864
            v17 = 16;
            v14 = v15 + 4;
            if (*(int32_t *)v14 != 0) {
                // 0x403871
                *v6 = *(int32_t *)(v14 - 4);
                function_411250((int32_t)&g1001);
            }
            // 0x40387d
            v17--;
            v13 = v14 + 8;
            while (v17 != 0) {
                // 0x40386c
                v14 = v13;
                if (*(int32_t *)v14 != 0) {
                    // 0x403871
                    *v6 = *(int32_t *)(v14 - 4);
                    function_411250((int32_t)&g1001);
                }
                // 0x40387d
                v17--;
                v13 = v14 + 8;
            }
            // 0x403883
            *v6 = v15;
            function_411250((int32_t)&g1001);
            v11 = *v5;
        }
        // 0x40388c
        v16 = v11 - 1;
        *v5 = v16;
        v12 += 4;
        while (v16 != 0) {
            // 0x40385d
            v15 = *(int32_t *)v12;
            v11 = v16;
            if (v15 != 0) {
                // 0x403864
                v17 = 16;
                v14 = v15 + 4;
                if (*(int32_t *)v14 != 0) {
                    // 0x403871
                    *v6 = *(int32_t *)(v14 - 4);
                    function_411250((int32_t)&g1001);
                }
                // 0x40387d
                v17--;
                v13 = v14 + 8;
                while (v17 != 0) {
                    // 0x40386c
                    v14 = v13;
                    if (*(int32_t *)v14 != 0) {
                        // 0x403871
                        *v6 = *(int32_t *)(v14 - 4);
                        function_411250((int32_t)&g1001);
                    }
                    // 0x40387d
                    v17--;
                    v13 = v14 + 8;
                }
                // 0x403883
                *v6 = v15;
                function_411250((int32_t)&g1001);
                v11 = *v5;
            }
            // 0x40388c
            v16 = v11 - 1;
            *v5 = v16;
            v12 += 4;
        }
        // 0x403895
        *v6 = *v4;
        function_411250((int32_t)&g1001);
        v10 = *v3;
    }
    // 0x4038a2
    *v3 = v10 + 4;
    int32_t v18 = *v7 - 1; // 0x4038a7
    *v7 = v18;
    while (v18 != 0) {
        // 0x403845
        v8 = *v3;
        v9 = *(int32_t *)v8;
        v10 = v8;
        if (v9 != 0) {
            // 0x40384f
            *v4 = v9;
            *v5 = 64;
            v12 = v9;
            v15 = *(int32_t *)v12;
            v11 = 64;
            if (v15 != 0) {
                // 0x403864
                v17 = 16;
                v14 = v15 + 4;
                if (*(int32_t *)v14 != 0) {
                    // 0x403871
                    *v6 = *(int32_t *)(v14 - 4);
                    function_411250((int32_t)&g1001);
                }
                // 0x40387d
                v17--;
                v13 = v14 + 8;
                while (v17 != 0) {
                    // 0x40386c
                    v14 = v13;
                    if (*(int32_t *)v14 != 0) {
                        // 0x403871
                        *v6 = *(int32_t *)(v14 - 4);
                        function_411250((int32_t)&g1001);
                    }
                    // 0x40387d
                    v17--;
                    v13 = v14 + 8;
                }
                // 0x403883
                *v6 = v15;
                function_411250((int32_t)&g1001);
                v11 = *v5;
            }
            // 0x40388c
            v16 = v11 - 1;
            *v5 = v16;
            v12 += 4;
            while (v16 != 0) {
                // 0x40385d
                v15 = *(int32_t *)v12;
                v11 = v16;
                if (v15 != 0) {
                    // 0x403864
                    v17 = 16;
                    v14 = v15 + 4;
                    if (*(int32_t *)v14 != 0) {
                        // 0x403871
                        *v6 = *(int32_t *)(v14 - 4);
                        function_411250((int32_t)&g1001);
                    }
                    // 0x40387d
                    v17--;
                    v13 = v14 + 8;
                    while (v17 != 0) {
                        // 0x40386c
                        v14 = v13;
                        if (*(int32_t *)v14 != 0) {
                            // 0x403871
                            *v6 = *(int32_t *)(v14 - 4);
                            function_411250((int32_t)&g1001);
                        }
                        // 0x40387d
                        v17--;
                        v13 = v14 + 8;
                    }
                    // 0x403883
                    *v6 = v15;
                    function_411250((int32_t)&g1001);
                    v11 = *v5;
                }
                // 0x40388c
                v16 = v11 - 1;
                *v5 = v16;
                v12 += 4;
            }
            // 0x403895
            *v6 = *v4;
            function_411250((int32_t)&g1001);
            v10 = *v3;
        }
        // 0x4038a2
        *v3 = v10 + 4;
        v18 = *v7 - 1;
        *v7 = v18;
    }
    // 0x4038ad
    *v6 = *(int32_t *)(v2 + 24);
    function_411250((int32_t)&g1001);
    int32_t v19 = *(int32_t *)(v2 + 40); // 0x4038b7
    *(int32_t *)(4 * v19 + (int32_t)&g944) = 0;
    return 1;
}

// Address range: 0x4038e0 - 0x403909
int32_t function_4038e0(void) {
    int32_t v1 = 0;
    int32_t v2; // bp-8, 0x4038e0
    if (*(int32_t *)(4 * v1 + (int32_t)&g944) != 0) {
        // 0x4038ef
        *(int32_t *)((int32_t)&v2 - 4) = v1;
        function_403820((int32_t)&g1001);
    }
    int32_t v3 = v1 + 1; // 0x4038f8
    while (v3 != 256) {
        // 0x4038e6
        v1 = v3;
        if (*(int32_t *)(4 * v1 + (int32_t)&g944) != 0) {
            // 0x4038ef
            *(int32_t *)((int32_t)&v2 - 4) = v1;
            function_403820((int32_t)&g1001);
        }
        // 0x4038f8
        v3 = v1 + 1;
    }
    // 0x403901
    return 1;
}

// Address range: 0x403910 - 0x403be7
int32_t function_403910(void) {
    // 0x403910
    if (g45 != 1) {
        // 0x403919
        return 0;
    }
    int32_t v1 = g44;
    if (g612 != 1) {
        if (v1 == 0) {
            // 0x403a91
            g44 = 1;
        }
        int32_t v2 = g619;
        int32_t v3 = g607 + g615; // 0x403acc
        int32_t v4 = v3 - (v3 < v2 ? 0 : v2);
        g609 = v4;
        int32_t v5 = v4 + (int32_t)((0x100000000 * g618 >> 32) * (0x100000000 * g934 >> 32)); // 0x403af3
        g608 = v5;
        if (v5 < v2) {
            int32_t v6 = g614; // 0x403b30
            if (v6 < v5 && v4 <= v6) {
                // 0x403919
                return 0;
            }
        } else {
            int32_t v7 = v5 - v2; // 0x403b07
            g608 = v7;
            int32_t v8 = g614; // 0x403b13
            if (v8 >= v7 != v4 > v8) {
                // 0x403919
                return 0;
            }
        }
        int32_t v9 = *(int32_t *)g938; // 0x403b6c
        g613 = v9;
        if (v9 == 0 != v9 != -0x7787ff6a) {
            // 0x403919
            return 0;
        }
        // 0x403ba9
        g939 = g610;
        g940 = g611;
        uint32_t v10 = (int32_t)g618;
        g941 = (int32_t)g616 / v10;
        g942 = (int32_t)g617 / v10;
        return &g939;
    }
    if (v1 == 0) {
        // 0x403932
        g44 = 1;
    }
    int32_t v11 = g619;
    int32_t v12 = g607 + g615; // 0x40396d
    int32_t v13 = v12 - (v12 < v11 ? 0 : v11);
    g609 = v13;
    int32_t v14 = v13 + (int32_t)((0x100000000 * g618 >> 32) * (0x100000000 * g934 >> 32)); // 0x403994
    g608 = v14;
    if (v14 < v11) {
        int32_t v15 = g614; // 0x4039d1
        if (v15 < v14 && v13 <= v15) {
            // 0x403919
            return 0;
        }
    } else {
        int32_t v16 = v14 - v11; // 0x4039a8
        g608 = v16;
        int32_t v17 = g614; // 0x4039b4
        if (v17 >= v16 != v13 > v17) {
            // 0x403919
            return 0;
        }
    }
    int32_t v18 = *(int32_t *)g943; // 0x403a0d
    g613 = v18;
    if (v18 == 0 != v18 != -0x7787ff6a) {
        // 0x403919
        return 0;
    }
    // 0x403a4a
    g939 = g610;
    g940 = g611;
    uint32_t v19 = (int32_t)g618;
    g941 = (int32_t)g616 / v19;
    g942 = (int32_t)g617 / v19;
    return &g939;
}

// Address range: 0x403bf0 - 0x403ca3
int32_t function_403bf0(void) {
    // 0x403bf0
    if (g45 != 1) {
        // 0x403bf9
        return 0;
    }
    int32_t v1 = g614 + (int32_t)((0x100000000 * g618 >> 32) * (0x100000000 * g934 >> 32));
    g614 = v1;
    if (g612 == 1) {
        // 0x403c1f
        if (g619 > v1) {
            // 0x403bf9
            return 0;
        }
        for (int32_t i = v1; i >= g619; i += -g619) {
            // continue -> 0x403c4b
        }
        // 0x403bf9
        g614 = i;
        // 0x403bf9
        return 0;
    }
    // 0x403c61
    if (g619 > v1) {
        // 0x403bf9
        return 0;
    }
    int32_t v2 = v1 - g619; // 0x403c92
    while (g619 <= v2) {
        // 0x403c8d
        v2 -= g619;
    }
    // 0x403bf9
    g614 = v2;
    // 0x403bf9
    return 0;
}

// Address range: 0x403cb0 - 0x403d1e
int32_t function_403cb0(void) {
    // 0x403cb0
    if (g45 != 1) {
        // 0x403cba
        return 0;
    }
    // 0x403cbe
    g45 = 0;
    if (g930 == NULL) {
        // 0x403cba
        return 0;
    }
    // 0x403cce
    int32_t v1; // bp-4, 0x403cb0
    int32_t * v2 = &v1; // 0x403cd4
    if (g938 != 0) {
        int32_t v3 = g938; // bp-8, 0x403cdb
        g938 = 0;
        v2 = &v3;
    }
    int32_t v4 = (int32_t)v2;
    int32_t v5 = v4; // 0x403cee
    if (g943 != 0) {
        // 0x403cf0
        v5 = v4 - 4;
        *(int32_t *)v5 = g943;
        g943 = 0;
    }
    // 0x403d05
    *(int32_t *)(v5 - 4) = (int32_t)g930;
    g930 = NULL;
    // 0x403cba
    return 0;
}

// Address range: 0x403d20 - 0x40431b
int32_t function_403d20(void) {
    // 0x403d20
    if (g45 == 1) {
        // 0x40430e
        return 0;
    }
    // 0x403da7
    g936 = 4;
    g943 = 0;
    g938 = 0;
    g612 = 0;
    g45 = 0;
    if (DirectSoundCreate(NULL, (struct IDirectSound **)&g930, NULL) != 0 || *g930 != NULL) {
        // 0x40430e
        return 0;
    }
    // 0x40412d
    g612 = 1;
    struct IDirectSound ** v1 = g930; // bp-288, 0x40418f
    if (*g930 != NULL) {
        // 0x40430e
        return 0;
    }
    int32_t v2 = 0; // 0x40419d
    int32_t v3 = (int32_t)&v1;
    int32_t v4 = v3 + 16; // 0x40419f
    int32_t v5 = 4 * v2 + v3;
    int32_t v6 = *(int32_t *)(v5 + 60); // 0x4041a3
    int32_t v7 = *(int32_t *)(v5 + 108); // 0x4041a7
    *(int32_t *)v4 = 0;
    int32_t * v8 = (int32_t *)(v3 + 20); // 0x4041ba
    int32_t * v9 = (int32_t *)(v3 + 24); // 0x4041c1
    *v9 = 0;
    int32_t v10 = v3 + 28; // 0x4041c8
    int32_t * v11 = (int32_t *)v10; // 0x4041c8
    *v11 = 0;
    *(int16_t *)(v3 + 18) = (int16_t)v6;
    *(int16_t *)(v3 + 30) = (int16_t)v7;
    *v8 = *(int32_t *)(v5 + 84);
    int32_t v12 = v7 * v6; // 0x4041df
    *(int16_t *)v4 = 1;
    *(int16_t *)v10 = (int16_t)(((v12 >> 31 & 7) + v12) / 8);
    uint32_t v13 = *v8; // 0x4041fa
    uint32_t v14 = *v11 & 0xffff; // 0x404206
    g618 = v14;
    *v9 = v14 * v13;
    *(int32_t *)(v3 - 4) = v4;
    int32_t v15 = *(int32_t *)g943; // 0x404228
    int32_t v16 = v3 - 8; // 0x40422a
    *(int32_t *)v16 = g943;
    g931 = *(int32_t *)(v5 + 76);
    g933 = v6 - 1;
    g932 = v7;
    g935 = ((v7 >> 31 & 7) + v7) / 8 - 1;
    v2++;
    while (v2 < 6 == (v15 != 0)) {
        // 0x40419f
        v3 = v16;
        v4 = v3 + 16;
        v5 = 4 * v2 + v3;
        v6 = *(int32_t *)(v5 + 60);
        v7 = *(int32_t *)(v5 + 108);
        *(int32_t *)v4 = 0;
        v8 = (int32_t *)(v3 + 20);
        v9 = (int32_t *)(v3 + 24);
        *v9 = 0;
        v10 = v3 + 28;
        v11 = (int32_t *)v10;
        *v11 = 0;
        *(int16_t *)(v3 + 18) = (int16_t)v6;
        *(int16_t *)(v3 + 30) = (int16_t)v7;
        *v8 = *(int32_t *)(v5 + 84);
        v12 = v7 * v6;
        *(int16_t *)v4 = 1;
        *(int16_t *)v10 = (int16_t)(((v12 >> 31 & 7) + v12) / 8);
        v13 = *v8;
        v14 = *v11 & 0xffff;
        g618 = v14;
        *v9 = v14 * v13;
        *(int32_t *)(v3 - 4) = v4;
        v15 = *(int32_t *)g943;
        v16 = v3 - 8;
        *(int32_t *)v16 = g943;
        g931 = *(int32_t *)(v5 + 76);
        g933 = v6 - 1;
        g932 = v7;
        g935 = ((v7 >> 31 & 7) + v7) / 8 - 1;
        v2++;
    }
    if (v15 != 0) {
        // 0x40430e
        return 0;
    }
    int32_t v17 = v3 + 124; // 0x404272
    int32_t * v18 = (int32_t *)v17; // 0x40427f
    *v18 = 20;
    *(int32_t *)(v3 - 12) = v17;
    *(int32_t *)(v3 - 16) = g943;
    if (*(int32_t *)g943 != 0) {
        // 0x40430e
        return 0;
    }
    uint32_t v19 = v13 / 100;
    int32_t v20 = *v18;
    g934 = v19;
    g619 = v20;
    int32_t v21 = v19 * (int32_t)g618;
    int32_t v22 = v21 * (int32_t)g937; // 0x4042af
    int32_t v23 = v20 - v21; // 0x4042c7
    g607 = v23 < v22 ? v23 : v22;
    g614 = 0;
    *(int32_t *)(v3 - 20) = 1;
    *(int32_t *)(v3 - 24) = 0;
    *(int32_t *)(v3 - 28) = 0;
    *(int32_t *)(v3 - 32) = g943;
    g44 = 1;
    g45 = 1;
    return 1;
}

// Address range: 0x404320 - 0x40439b
int32_t function_404320(char * a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = function_4114b0((int32_t)a1, "rb"); // 0x40432f
    if (v1 == 0) {
        // 0x40433d
        return 2000;
    }
    int32_t v2 = a4; // bp-8, 0x40434d
    function_411460(v1, &v2);
    if (function_411310(a2, 1, a3, v1) != a3) {
        // 0x40433d
        return 2010;
    }
    // 0x404387
    function_4112a0(v1);
    return 1;
}

// Address range: 0x4043a0 - 0x404486
int32_t function_4043a0(int32_t a1) {
    // 0x4043a0
    if (function_404500(a1) != 1) {
        // 0x4043b8
        g54 = 2030;
        return 0;
    }
    int32_t v1 = function_4044d0(a1); // 0x4043cc
    if (v1 == 0) {
        // 0x4043da
        g54 = 2040;
        return 0;
    }
    int32_t result = function_403630(0, v1); // 0x4043f0
    if (result == 0) {
        // 0x4043fe
        g54 = 2050;
        return 0;
    }
    int32_t v2 = function_4114b0(a1, "rb"); // 0x404417
    if (v2 == 0) {
        // 0x404425
        g54 = 2000;
        return 0;
    }
    int32_t v3 = 0; // bp-8, 0x40443e
    function_411460(v2, &v3);
    if (v1 == function_411310(result, 1, v1, v2)) {
        // 0x404474
        function_4112a0(v2);
        return result;
    }
    // 0x404461
    g54 = 2010;
    return 0;
}

// Address range: 0x404490 - 0x4044cc
int32_t function_404490(int32_t a1) {
    int32_t v1 = function_411570(a1); // 0x404498
    function_4114d0(a1, 0, 2);
    int32_t result = function_411570(a1); // 0x4044b0
    function_4114d0(a1, v1, 0);
    return result;
}

// Address range: 0x4044d0 - 0x4044ff
int32_t function_4044d0(int32_t a1) {
    int32_t v1 = function_4114b0(a1, g46); // 0x4044dc
    int32_t result = function_404490(v1); // 0x4044e7
    function_4112a0(v1);
    return result;
}

// Address range: 0x404500 - 0x40452b
int32_t function_404500(int32_t a1) {
    int32_t v1 = function_4114b0(a1, g46); // 0x40450a
    if (v1 == 0) {
        // 0x404516
        return 2031;
    }
    // 0x40451c
    function_4112a0(v1);
    return 1;
}

// Address range: 0x404530 - 0x4045dc
int32_t function_404530(void) {
    int32_t v1 = &g622;
    *(int32_t *)v1 = 0;
    int32_t v2 = v1 + 48; // 0x404539
    *(int32_t *)(v1 + 4) = 0;
    *(int32_t *)(v1 + 8) = 0;
    *(int32_t *)(v1 + 12) = 0;
    *(int32_t *)(v1 + 16) = 0;
    *(int32_t *)(v1 + 20) = 0;
    *(int32_t *)(v1 + 24) = 0;
    *(int32_t *)(v1 + 28) = 0;
    *(int32_t *)(v1 + 32) = 0;
    *(int32_t *)(v1 + 36) = 0;
    *(int32_t *)(v1 + 40) = 0;
    *(int32_t *)(v1 + 44) = 0;
    int32_t v3 = &g620; // 0x404562
    while (v2 < (int32_t)&g628) {
        // 0x404537
        v1 = v2;
        *(int32_t *)v1 = 0;
        v2 = v1 + 48;
        *(int32_t *)(v1 + 4) = 0;
        *(int32_t *)(v1 + 8) = 0;
        *(int32_t *)(v1 + 12) = 0;
        *(int32_t *)(v1 + 16) = 0;
        *(int32_t *)(v1 + 20) = 0;
        *(int32_t *)(v1 + 24) = 0;
        *(int32_t *)(v1 + 28) = 0;
        *(int32_t *)(v1 + 32) = 0;
        *(int32_t *)(v1 + 36) = 0;
        *(int32_t *)(v1 + 40) = 0;
        *(int32_t *)(v1 + 44) = 0;
        v3 = &g620;
    }
    *(int32_t *)v3 = 0;
    int32_t v4 = v3 + 48; // 0x404572
    *(int32_t *)(v3 + 4) = 0;
    *(int32_t *)(v3 + 8) = 0;
    *(int32_t *)(v3 + 12) = 0;
    *(int32_t *)(v3 + 16) = 0;
    *(int32_t *)(v3 + 20) = 0;
    *(int32_t *)(v3 + 24) = 0;
    *(int32_t *)(v3 + 28) = 0;
    *(int32_t *)(v3 + 32) = 0;
    *(int32_t *)(v3 + 36) = 0;
    *(int32_t *)(v3 + 40) = 1;
    *(int32_t *)(v3 + 44) = 0;
    v3 = v4;
    int32_t v5 = &g628; // 0x40459b
    while (v4 < (int32_t)&g622) {
        // 0x404570
        *(int32_t *)v3 = 0;
        v4 = v3 + 48;
        *(int32_t *)(v3 + 4) = 0;
        *(int32_t *)(v3 + 8) = 0;
        *(int32_t *)(v3 + 12) = 0;
        *(int32_t *)(v3 + 16) = 0;
        *(int32_t *)(v3 + 20) = 0;
        *(int32_t *)(v3 + 24) = 0;
        *(int32_t *)(v3 + 28) = 0;
        *(int32_t *)(v3 + 32) = 0;
        *(int32_t *)(v3 + 36) = 0;
        *(int32_t *)(v3 + 40) = 1;
        *(int32_t *)(v3 + 44) = 0;
        v3 = v4;
        v5 = &g628;
    }
    *(int32_t *)v5 = 0;
    int32_t v6 = v5 + 48; // 0x4045ab
    *(int32_t *)(v5 + 4) = 0;
    *(int32_t *)(v5 + 8) = 0;
    *(int32_t *)(v5 + 12) = 0;
    *(int32_t *)(v5 + 16) = 0;
    *(int32_t *)(v5 + 20) = 0;
    *(int32_t *)(v5 + 24) = 0;
    *(int32_t *)(v5 + 28) = 0;
    *(int32_t *)(v5 + 32) = 0;
    *(int32_t *)(v5 + 36) = 0;
    *(int32_t *)(v5 + 40) = 2;
    *(int32_t *)(v5 + 44) = 0;
    v5 = v6;
    while (v6 < (int32_t)&g630) {
        // 0x4045a9
        *(int32_t *)v5 = 0;
        v6 = v5 + 48;
        *(int32_t *)(v5 + 4) = 0;
        *(int32_t *)(v5 + 8) = 0;
        *(int32_t *)(v5 + 12) = 0;
        *(int32_t *)(v5 + 16) = 0;
        *(int32_t *)(v5 + 20) = 0;
        *(int32_t *)(v5 + 24) = 0;
        *(int32_t *)(v5 + 28) = 0;
        *(int32_t *)(v5 + 32) = 0;
        *(int32_t *)(v5 + 36) = 0;
        *(int32_t *)(v5 + 40) = 2;
        *(int32_t *)(v5 + 44) = 0;
        v5 = v6;
    }
    // 0x4045d6
    return 1;
}

// Address range: 0x4045e0 - 0x4045fe
int32_t function_4045e0(int32_t a1) {
    if (a1 != 0) {
        // 0x4045f8
        return 2;
    }
    // 0x4045e8
    function_405220();
    function_404c60();
    return 1;
}

// Address range: 0x404600 - 0x404637
int32_t function_404600(int32_t a1, int32_t a2, int32_t result, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9) {
    // 0x404600
    return result;
}

// Address range: 0x404640 - 0x404653
int32_t function_404640(void) {
    // 0x404640
    int32_t v1; // 0x404640
    int32_t v2 = v1;
    return v2 != 0 ? v2 : 0;
}

// Address range: 0x404660 - 0x404666
int32_t function_404660(void) {
    // 0x404660
    int32_t result; // 0x404660
    return result;
}

// Address range: 0x404670 - 0x404683
int32_t function_404670(void) {
    // 0x404670
    int32_t v1; // 0x404670
    int32_t v2 = v1;
    return v2 != 0 ? v2 : 0;
}

// Address range: 0x404690 - 0x40469f
int32_t function_404690(int32_t * a1) {
    // 0x404690
    return (int32_t)a1;
}

// Address range: 0x4046a0 - 0x4046af
int32_t function_4046a0(int32_t result) {
    // 0x4046a0
    return result;
}

// Address range: 0x4046b0 - 0x4046d3
int32_t function_4046b0(int32_t a1, int32_t result, int32_t a3, int32_t a4, int32_t a5) {
    // 0x4046b0
    return result;
}

// Address range: 0x4046e0 - 0x4046ed
int32_t function_4046e0(void) {
    // 0x4046e0
    g661 = 0;
    g675 = false;
    return 0;
}

// Address range: 0x4046f0 - 0x404886
int32_t function_4046f0(void) {
    // 0x4046f0
    int32_t v1; // 0x4046f0
    int32_t v2 = DirectInputCreateA(g604, 768, &g665, 0, v1, 20, 16, 0, 0, 32, 0x6f1d2b61, 0x11cfd5a0, 0x4544c7bf, 0x5453); // 0x40474a
    if (v2 != 0 || *(int32_t *)g665 != 0 || *(int32_t *)g671 != 0) {
        // 0x404753
        return 0;
    }
    // 0x4047d5
    g672 = 1;
    g660 = (char *)&g662;
    __asm_rep_stosd_memset((char *)&g662, -1, 16);
    *(char *)&g663 = 0;
    __asm_rep_stosd_memset((char *)&g667, 0, 64);
    __asm_rep_stosd_memset((char *)&g664, 0, 64);
    for (int32_t i = 0; i < 256; i++) {
        // 0x404835
        *(char *)(i + (int32_t)&g668) = 0;
        *(int32_t *)(4 * i + (int32_t)&g674) = 0;
        *(char *)(i + (int32_t)&g669) = 0;
    }
    // 0x404851
    g666 = &g671;
    g673 = 0;
    g670 = g39;
    g52 = 0;
    g51 = 0;
    return 1;
}

// Address range: 0x404890 - 0x404905
int32_t function_404890(void) {
    int32_t v1 = g671;
    int32_t v2; // 0x404890
    if (g672 != 0) {
        int32_t v3 = v1; // bp-4, 0x40489e
        g672 = 0;
        v2 = &v3;
    }
    int32_t v4 = v2; // 0x4048b5
    if (v1 != 0) {
        int32_t v5 = v1; // bp-8, 0x4048bc
        g671 = 0;
        v4 = &v5;
    }
    int32_t v6 = v4; // 0x4048d3
    if (g665 != 0) {
        // 0x4048d5
        v6 = v4 - 4;
        *(int32_t *)v6 = g665;
        g665 = 0;
    }
    // 0x4048ea
    if (g52 != 0) {
        // 0x4048f3
        *(int32_t *)(v6 - 4) = g51;
        timeKillEvent((int32_t)&g1001);
    }
    // 0x4048ff
    return 1;
}

// Address range: 0x404910 - 0x404a88
int32_t function_404910(void) {
    int32_t v1 = &g674;
    int32_t v2 = 0;
    int32_t * v3; // 0x404936
    uint32_t v4; // 0x40494a
    if (*(char *)(v2 + (int32_t)&g664) == 1) {
        // 0x404936
        v3 = (int32_t *)v1;
        v4 = g39 + *v3 - g670;
        *v3 = v4;
        if (g673 + g666 <= v4) {
            // 0x404956
            *(char *)(v2 + (int32_t)&g667) = 1;
            *v3 = v4 - g673;
        }
    }
    int32_t v5 = v1 + 4; // 0x404964
    int32_t v6 = v2 + 1; // 0x40496e
    while (v5 < (int32_t)&g675) {
        // 0x40492e
        v1 = v5;
        v2 = v6;
        if (*(char *)(v2 + (int32_t)&g664) == 1) {
            // 0x404936
            v3 = (int32_t *)v1;
            v4 = g39 + *v3 - g670;
            *v3 = v4;
            if (g673 + g666 <= v4) {
                // 0x404956
                *(char *)(v2 + (int32_t)&g667) = 1;
                *v3 = v4 - g673;
            }
        }
        // 0x404964
        v5 = v1 + 4;
        v6 = v2 + 1;
    }
    // 0x404970
    if (*(int32_t *)g671 != -0x7ff8ffe2) {
        // 0x4049c3
        g670 = g39;
        // 0x404a7d
        return g39;
    }
    // 0x404991
    g672 = 0;
    if (g671 < 0) {
        // 0x404a7d
        return g671;
    }
    // 0x4049ae
    g672 = 1;
    return g671;
}

// Address range: 0x404a90 - 0x404a9f
int32_t function_404a90(int32_t a1) {
    // 0x404a90
    return (int32_t)*(char *)((a1 & 255) + (int32_t)&g664);
}

// Address range: 0x404aa0 - 0x404aba
int32_t function_404aa0(int32_t a1, int32_t a2) {
    // 0x404aa0
    int32_t v1; // 0x404aa0
    return g661 == 0 ? v1 : a2;
}

// Address range: 0x404ac0 - 0x404afb
int32_t function_404ac0(uint32_t a1) {
    int32_t result = a1; // 0x404ac7
    if (a1 <= 83) {
        char v1 = *(char *)(a1 + (int32_t)&g53); // 0x404ac9
        *g660 = v1;
        result = (int32_t)g660;
        *(char *)(result + 32) = v1;
        char * v2 = g660; // 0x404ade
        char * v3 = v2 != (char *)0x43cd87 ? (char *)((int32_t)v2 + 1) : (char *)&g662;
        g660 = v3;
    }
    // 0x404afa
    return result;
}

// Address range: 0x404b00 - 0x404b29
int32_t function_404b00(void) {
    // 0x404b00
    function_404c30();
    function_403570();
    function_404b40();
    function_4046e0();
    function_406310();
    function_4045e0(0);
    return 1;
}

// Address range: 0x404b30 - 0x404b40
int32_t function_404b30(void) {
    // 0x404b30
    function_404b90();
    function_4038e0();
    return 1;
}

// Address range: 0x404b40 - 0x404b8c
int32_t function_404b40(void) {
    // 0x404b40
    if (g55 == 1) {
        // 0x404b4a
        return 1;
    }
    // 0x404b51
    g55 = 1;
    __asm_rep_stosd_memset((char *)&g678, 0, 200);
    int32_t v1 = 0;
    int32_t v2 = v1 + 1; // 0x404b6c
    *(int16_t *)(2 * v2 + (int32_t)&g677) = (int16_t)v1 + 1;
    while (v2 != 200) {
        // 0x404b69
        v1 = v2;
        v2 = v1 + 1;
        *(int16_t *)(2 * v2 + (int32_t)&g677) = (int16_t)v1 + 1;
    }
    // 0x404b7c
    *(int16_t *)&g680 = 0;
    return 1;
}

// Address range: 0x404b90 - 0x404c2b
int32_t function_404b90(void) {
    // 0x404b90
    if (g55 == 0) {
        // 0x404b9b
        return 1;
    }
    // 0x404ba3
    g55 = 0;
    int32_t v1; // bp-8, 0x404b90
    int32_t * v2 = (int32_t *)((int32_t)&v1 - 4);
    int32_t v3 = 0;
    int32_t * v4 = (int32_t *)(v3 + (int32_t)&g678); // 0x404bb0
    if (*v4 == 1) {
        // 0x404bb9
        if (*(int32_t *)(v3 + (int32_t)&g679) == 0x10000) {
            // 0x404bc1
            *v4 = 0;
            *v2 = *(int32_t *)(v3 + (int32_t)&g676);
        }
    }
    int32_t v5 = v3 + 4; // 0x404bdb
    while (v5 < 800) {
        // 0x404bb0
        v3 = v5;
        v4 = (int32_t *)(v3 + (int32_t)&g678);
        if (*v4 == 1) {
            // 0x404bb9
            if (*(int32_t *)(v3 + (int32_t)&g679) == 0x10000) {
                // 0x404bc1
                *v4 = 0;
                *v2 = *(int32_t *)(v3 + (int32_t)&g676);
            }
        }
        // 0x404bdb
        v5 = v3 + 4;
    }
    int32_t v6 = 0;
    int32_t * v7 = (int32_t *)(v6 + (int32_t)&g678); // 0x404bed
    if (*v7 == 1) {
        // 0x404bf6
        if (*(int32_t *)(v6 + (int32_t)&g679) == 0x20000) {
            // 0x404bfe
            *v7 = 0;
            *v2 = *(int32_t *)(v6 + (int32_t)&g676);
        }
    }
    int32_t v8 = v6 + 4; // 0x404c18
    while (v8 < 800) {
        // 0x404bed
        v6 = v8;
        v7 = (int32_t *)(v6 + (int32_t)&g678);
        if (*v7 == 1) {
            // 0x404bf6
            if (*(int32_t *)(v6 + (int32_t)&g679) == 0x20000) {
                // 0x404bfe
                *v7 = 0;
                *v2 = *(int32_t *)(v6 + (int32_t)&g676);
            }
        }
        // 0x404c18
        v8 = v6 + 4;
    }
    // 0x404b9b
    return 1;
}

// Address range: 0x404c30 - 0x404c52
int32_t function_404c30(void) {
    // 0x404c30
    function_4117a0("\nLisa 2 Development System, %s\n");
    function_4117a0("Copyright (c) UDS, 1995-1996\n\n");
    return 0;
}

// Address range: 0x404c60 - 0x404d15
int32_t function_404c60(void) {
    // 0x404c60
    g644 = 0x404d20;
    g645 = 0x404d30;
    g646 = 0x404d40;
    g647 = 0x404d50;
    g648 = 0x404d60;
    g649 = 0x404e20;
    g650 = 0x405050;
    g651 = 0x404fb0;
    g652 = 0x407000;
    g654 = 0x406860;
    g653 = 0x4070d0;
    g655 = 0x4070f0;
    g656 = 0x407110;
    g657 = 0x406f60;
    g659 = 0x404f10;
    g658 = 0x404f70;
    function_407fe0();
    function_407190();
    function_406fc0();
    return 1;
}

// Address range: 0x404d20 - 0x404d26
int32_t function_404d20(void) {
    // 0x404d20
    return 1;
}

// Address range: 0x404d30 - 0x404d36
int32_t function_404d30(void) {
    // 0x404d30
    return 1;
}

// Address range: 0x404d40 - 0x404d46
int32_t function_404d40(void) {
    // 0x404d40
    return 1;
}

// Address range: 0x404d50 - 0x404d53
int32_t function_404d50(void) {
    // 0x404d50
    return 0;
}

// Address range: 0x404d60 - 0x404e1b
int32_t function_404d60(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5) {
    // 0x404d60
    g56 = a1;
    g682 = a2;
    g694 = a3;
    g697 = a4;
    g696 = a5;
    g691 = 0;
    g681 = 0;
    int32_t v1 = 256 * a3; // 0x404da5
    g692 = 0;
    g685 = 0;
    int32_t v2 = 256 * a4; // 0x404db6
    g693 = a3;
    g683 = v1;
    g695 = a4;
    g686 = v2;
    g923 = 0;
    g921 = 0;
    g922 = a3;
    g920 = a4;
    g926 = 0;
    g919 = 0;
    g927 = v1;
    g924 = v2;
    g928 = a1;
    g925 = a2;
    g918 = a4;
    return 1;
}

// Address range: 0x404e20 - 0x404f01
int32_t function_404e20(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x404e20
    if (g694 < a3 || a1 > -1 == a2 > -1 == a3 > a1 != a4 > a2 || g697 < a4) {
        // 0x404efa
        return 0;
    }
    int32_t v1 = 256 * a1; // 0x404e72
    int32_t v2 = 256 * a2; // 0x404e79
    g691 = a1;
    g681 = v1;
    int32_t v3 = 256 * a3; // 0x404e89
    g692 = a2;
    g685 = v2;
    g693 = a3;
    g683 = v3;
    g695 = a4;
    int32_t v4 = 256 * a4; // 0x404eb0
    g686 = v4;
    g923 = a1;
    g921 = a2;
    g922 = a3;
    g920 = a4;
    g926 = v1;
    g919 = v2;
    g927 = v3;
    g924 = v4;
    return 1;
}

// Address range: 0x404f10 - 0x404f6c
int32_t function_404f10(int32_t a1) {
    // 0x404f10
    *(int32_t *)a1 = g694;
    *(int32_t *)(a1 + 4) = g697;
    *(int32_t *)(a1 + 8) = g696;
    *(int32_t *)(a1 + 32) = 3;
    *(int32_t *)(a1 + 28) = g682;
    *(int32_t *)(a1 + 36) = g56;
    *(int32_t *)(a1 + 12) = g691;
    *(int32_t *)(a1 + 16) = g692;
    *(int32_t *)(a1 + 20) = g693;
    *(int32_t *)(a1 + 24) = g695;
    return 1;
}

// Address range: 0x404f70 - 0x404faf
int32_t function_404f70(int32_t a1) {
    int32_t v1 = *(int32_t *)a1; // 0x404f7c
    int32_t v2 = *(int32_t *)(a1 + 28); // 0x404f7f
    int32_t v3 = *(int32_t *)(a1 + 36); // 0x404f83
    function_404d60(v3, v2, v1, *(int32_t *)(a1 + 4), *(int32_t *)(a1 + 8));
    int32_t v4 = *(int32_t *)(a1 + 16); // 0x404f96
    int32_t v5 = *(int32_t *)(a1 + 12); // 0x404f9c
    function_404e20(v5, v4, *(int32_t *)(a1 + 20), *(int32_t *)(a1 + 24));
    return 1;
}

// Address range: 0x404fb0 - 0x405041
int32_t function_404fb0(int32_t a1, int32_t a2, int32_t a3) {
    // 0x404fb0
    g58 = a2;
    g60 = 0;
    g59 = a1;
    if (a3 == 0) {
        // 0x405028
        g684 = &g58;
        function_405170();
        return 1;
    }
    // 0x404fd9
    int3_t v1; // 0x404fb0
    int3_t v2 = v1 - 1; // 0x404fd9
    __frontend_reg_store_fpr(v2, (float80_t)*(float32_t *)a3);
    __frontend_reg_store_fpr(v2, 65536.0L * __frontend_reg_load_fpr(v2));
    int32_t v3 = __ftol(); // 0x404fe1
    int3_t v4 = v1 - 2; // 0x404fe6
    __frontend_reg_store_fpr(v4, (float80_t)*(float32_t *)(a3 + 4));
    int3_t v5 = v1 - 3; // 0x404fed
    __frontend_reg_store_fpr(v5, (float80_t)v3);
    int3_t v6 = v1 ^ -4; // 0x404ff1
    __frontend_reg_store_fpr(v6, __frontend_reg_load_fpr(v4));
    float80_t v7 = __frontend_reg_load_fpr(v6); // 0x404ff3
    if (fabsl(v7) < 9223372036854775808.0L) {
        __frontend_reg_store_fpr(v6, cosl(v7));
    }
    __frontend_reg_store_fpr(v6, __frontend_reg_load_fpr(v6) * __frontend_reg_load_fpr(v5));
    int32_t v8 = __ftol(); // 0x404ff7
    g687 = v8;
    float80_t v9 = __frontend_reg_load_fpr(v6); // 0x405003
    __frontend_reg_store_fpr(v6, __frontend_reg_load_fpr(v5));
    __frontend_reg_store_fpr(v5, v9);
    float80_t v10 = __frontend_reg_load_fpr(v6); // 0x405005
    if (fabsl(v10) < 9223372036854775808.0L) {
        __frontend_reg_store_fpr(v6, sinl(v10));
    }
    __frontend_reg_store_fpr(v5, __frontend_reg_load_fpr(v6) * __frontend_reg_load_fpr(v5));
    int32_t v11 = __ftol(); // 0x405009
    g688 = v11;
    g689 = v11;
    g60 = &g687;
    g690 = v8;
    // 0x405028
    g684 = &g58;
    function_405170();
    return 1;
}

// Address range: 0x405050 - 0x4050b0
int32_t function_405050(int32_t a1) {
    int32_t v1 = *(int32_t *)a1; // 0x405055
    if (v1 == 0) {
        // 0x4050a9
        return 1;
    }
    int32_t v2 = a1 + 4; // 0x40505e
    int32_t v3; // bp-4, 0x405050
    *(int32_t *)((int32_t)&v3 - 4) = v1;
    function_4050b0();
    int32_t v4 = *(int32_t *)v2; // 0x40506a
    int32_t v5 = v4; // 0x40506d
    int32_t v6 = v2; // 0x40506d
    int32_t v7 = v2; // 0x40506d
    int32_t v8; // 0x40508b
    int32_t v9; // 0x405071
    int32_t v10; // 0x40509c
    if (v4 != 0) {
        g684 = v5;
        if (*(int32_t *)v5 != 0) {
            function_4050c0();
            v8 = g684 + 4 * g57;
            g684 = v8;
            while (*(int32_t *)v8 != 0) {
                // 0x40507e
                function_4050c0();
                v8 = g684 + 4 * g57;
                g684 = v8;
            }
        }
        // 0x40509c
        v9 = v6 + 4;
        v10 = *(int32_t *)v9;
        v5 = v10;
        v6 = v9;
        v7 = v9;
        while (v10 != 0) {
            // 0x40506f
            g684 = v5;
            if (*(int32_t *)v5 != 0) {
                function_4050c0();
                v8 = g684 + 4 * g57;
                g684 = v8;
                while (*(int32_t *)v8 != 0) {
                    // 0x40507e
                    function_4050c0();
                    v8 = g684 + 4 * g57;
                    g684 = v8;
                }
            }
            // 0x40509c
            v9 = v6 + 4;
            v10 = *(int32_t *)v9;
            v5 = v10;
            v6 = v9;
            v7 = v9;
        }
    }
    int32_t v11 = v7 + 4; // 0x4050a1
    int32_t v12 = *(int32_t *)v11; // 0x4050a4
    while (v12 != 0) {
        // 0x40505a
        v2 = v11 + 4;
        *(int32_t *)((int32_t)&v3 - 4) = v12;
        function_4050b0();
        v4 = *(int32_t *)v2;
        v5 = v4;
        v6 = v2;
        v7 = v2;
        if (v4 != 0) {
            g684 = v5;
            if (*(int32_t *)v5 != 0) {
                function_4050c0();
                v8 = g684 + 4 * g57;
                g684 = v8;
                while (*(int32_t *)v8 != 0) {
                    // 0x40507e
                    function_4050c0();
                    v8 = g684 + 4 * g57;
                    g684 = v8;
                }
            }
            // 0x40509c
            v9 = v6 + 4;
            v10 = *(int32_t *)v9;
            v5 = v10;
            v6 = v9;
            v7 = v9;
            while (v10 != 0) {
                // 0x40506f
                g684 = v5;
                if (*(int32_t *)v5 != 0) {
                    function_4050c0();
                    v8 = g684 + 4 * g57;
                    g684 = v8;
                    while (*(int32_t *)v8 != 0) {
                        // 0x40507e
                        function_4050c0();
                        v8 = g684 + 4 * g57;
                        g684 = v8;
                    }
                }
                // 0x40509c
                v9 = v6 + 4;
                v10 = *(int32_t *)v9;
                v5 = v10;
                v6 = v9;
                v7 = v9;
            }
        }
        // 0x4050a1
        v11 = v7 + 4;
        v12 = *(int32_t *)v11;
    }
    // 0x4050a9
    return 1;
}

// Address range: 0x4050b0 - 0x4050b1
int32_t function_4050b0(void) {
    // 0x4050b0
    int32_t result; // 0x4050b0
    return result;
}

// Address range: 0x4050c0 - 0x40516d
int32_t function_4050c0(void) {
    int32_t * v1 = (int32_t *)g684; // 0x4050c5
    g62 = *(int32_t *)*v1;
    g63 = *(int32_t *)(*v1 + 4);
    int32_t * v2 = (int32_t *)(g684 + 4); // 0x4050dd
    g64 = *(int32_t *)*v2;
    g65 = *(int32_t *)(*v2 + 4);
    int32_t * v3 = (int32_t *)(g684 + 8); // 0x4050f7
    g66 = *(int32_t *)*v3;
    g67 = *(int32_t *)(*v3 + 4);
    int32_t * v4 = (int32_t *)(g684 + 12); // 0x405115
    g68 = *(int32_t *)(*v4 + 8);
    g69 = *(int32_t *)(*v4 + 12);
    g70 = *(int32_t *)(*v4 + 16);
    g71 = *(int32_t *)(*v4 + 20);
    g72 = *(int32_t *)(*v4 + 24);
    g73 = *(int32_t *)(*v4 + 28);
    g74 = *(int32_t *)*v4;
    return function_408040(&g61);
}

// Address range: 0x405170 - 0x405217
int32_t function_405170(void) {
    // 0x405170
    g83 = *(int32_t *)g684;
    g84 = *(int32_t *)(g684 + 8);
    int32_t v1 = *(int32_t *)(g684 + 4); // 0x40518a
    int32_t v2; // bp-64, 0x405170
    function_4067e0(&v2, *(int32_t *)v1);
    g75 = *(int32_t *)(v1 + 4);
    g76 = *(int32_t *)(v1 + 8);
    int32_t v3; // 0x405170
    int32_t v4 = 256 * v3 & 0xff00; // 0x4051ba
    g77 = v4;
    int32_t v5 = v3 & 0xff00;
    g78 = v5;
    g81 = v3 & -0x10000;
    g79 = v4 + 256 * v3;
    g80 = v5 + 256 * v3;
    g82 = g929;
    return function_408dc9();
}

// Address range: 0x405220 - 0x4052b2
int32_t function_405220(void) {
    // 0x405220
    g630 = false;
    g631 = 0x4052d0;
    g632 = 0x405900;
    g633 = 0x405bf0;
    g634 = 0x405ce0;
    g635 = 0x405cf0;
    g636 = 0x405d60;
    g637 = 0x405ef0;
    g638 = 0x405fd0;
    g639 = 0x406040;
    g640 = 0x406050;
    g641 = false;
    g642 = 0x4061f0;
    g643 = 0x406250;
    return 1;
}

// Address range: 0x4052c0 - 0x4052c6
int32_t function_4052c0(void) {
    // 0x4052c0
    return 2;
}

// Address range: 0x4052d0 - 0x4058f7
int32_t function_4052d0(void) {
    // 0x4052d0
    function_404530();
    GetSystemMetrics(1);
    int32_t nWidth = GetSystemMetrics(0); // 0x4052f8
    int32_t * windowHandle = CreateWindowExA(0x40000, "Ignition", "Ignition", -0x7ff80000, 0, 0, nWidth, (int32_t)&g1001, &g1001, &g1001, &g1001, &g1001); // 0x405313
    int32_t v1 = (int32_t)windowHandle; // 0x405313
    g605 = v1;
    g38 = v1;
    if (windowHandle == NULL) {
        // 0x405327
        return 0;
    }
    // 0x405334
    UpdateWindow(windowHandle);
    SetFocus((int32_t *)g605);
    if (DirectDrawCreate(NULL, (struct IDirectDraw **)&g708, NULL) != 0 || *g708 != NULL) {
        // 0x405327
        return 0;
    }
    // 0x40539e
    int32_t v2; // 0x4052d0
    struct IDirectDraw ** v3; // bp-268, 0x4052d0
    if (g35 == 0) {
        int32_t * hdc = GetDC(NULL); // 0x4053dd
        int32_t v4 = GetDeviceCaps(hdc, 12); // 0x4053ee
        v3 = (struct IDirectDraw **)14;
        g86 = GetDeviceCaps(hdc, 14) * v4;
        int32_t lprc = 0; // bp-280, 0x405401
        ReleaseDC(NULL, hdc);
        SetWindowLongA((int32_t *)g605, -16, GetWindowLongA((int32_t *)g605, -16) & 0x7f39ffff | 0xc60000);
        struct tagRECT * lpRect = (struct tagRECT *)&lprc; // bp-320, 0x405445
        SetRect((struct tagRECT *)&lprc, 0, 0, 640, 480);
        int32_t v5 = GetWindowLongA((int32_t *)g605, -20); // 0x405455
        GetMenu((int32_t *)g605);
        int32_t dwStyle = GetWindowLongA((int32_t *)g605, -16); // 0x405475
        AdjustWindowRectEx((struct tagRECT *)&lpRect, dwStyle, (bool)&g1001, (int32_t)&g1001);
        int32_t pvParam = 0; // bp-372, 0x40549d
        SetWindowPos((int32_t *)g605, NULL, 0, 0, 0, -20 - v5, 22);
        int32_t hWnd = g605; // 0x4054ae
        int32_t lpRect2 = -2; // bp-408, 0x4054bc
        SetWindowPos((int32_t *)hWnd, (int32_t *)-2, 0, 0, 0, 0, 19);
        SystemParametersInfoA(48, 0, &pvParam, 0);
        GetWindowRect((int32_t *)g605, (struct tagRECT *)&lpRect2);
        int32_t v6 = g605; // bp-464, 0x405517
        SetWindowPos((int32_t *)g605, NULL, 0, hWnd > 0 ? hWnd : 0, 0, 0, 21);
        v2 = &v6;
    } else {
        // 0x4053a7
        v3 = g708;
        v2 = (int32_t)&v3;
        if (g708 != NULL) {
            // 0x405327
            return 0;
        }
    }
    int32_t v7 = v2 + 56; // 0x40551a
    __asm_rep_stosd_memset((char *)v7, 0, 27);
    *(int32_t *)v7 = 108;
    int32_t v8; // 0x4052d0
    if (g35 == 0) {
        // 0x40571c
        *(int32_t *)(v2 - 4) = 0;
        *(int32_t *)(v2 - 8) = (int32_t)&g627;
        *(int32_t *)(v2 + 60) = 1;
        *(int32_t *)(v2 + 160) = 512;
        *(int32_t *)(v2 - 12) = v7;
        int32_t v9 = v2 - 16; // 0x405741
        *(int32_t *)v9 = (int32_t)g708;
        if (*g708 != NULL) {
            // 0x405327
            return 0;
        }
        // 0x405758
        g622 = 1;
        g623 = 1;
        g624 = g47;
        g625 = g48;
        *(int32_t *)(v2 + 44) = 7;
        *(int32_t *)(v2 + 144) = 64;
        *(int32_t *)(v2 + 52) = 640;
        *(int32_t *)(v2 + 48) = 480;
        g626 = g49;
        if (g50 >= 5) {
            // 0x4057b5
            *(int32_t *)(v2 - 20) = 0;
            *(int32_t *)(v2 - 24) = 0;
            *(int32_t *)(v2 - 28) = (int32_t)"The maximum amount of backbuffers is exceeded";
            *(int32_t *)(v2 - 32) = g605;
            MessageBoxA(&g1001, (char *)&g1001, (char *)&g1001, (int32_t)&g1001);
            return 0;
        }
        int32_t v10 = 0; // 0x4057de
        int32_t v11 = &g621; // 0x4057de
        int32_t v12 = v9; // 0x4057de
        if (g50 >= 1) {
            int32_t v13 = v9;
            *(int32_t *)(v13 - 4) = 0;
            *(int32_t *)(v13 - 8) = v11;
            *(int32_t *)(v13 - 12) = v13 + 56;
            int32_t v14 = v13 - 16; // 0x4057fa
            *(int32_t *)v14 = (int32_t)g708;
            while (*g708 == NULL) {
                // 0x405804
                *(int32_t *)(v11 - 44) = 1;
                *(int32_t *)(v11 - 40) = 1;
                *(int32_t *)(v11 - 16) = g47;
                *(int32_t *)(v11 - 12) = g48;
                int32_t v15 = v10 + 1; // 0x405824
                *(int32_t *)(v11 - 8) = g49;
                v10 = v15;
                v11 += 48;
                v12 = v14;
                if (v15 >= g50) {
                    goto lab_0x405830;
                }
                v13 = v14;
                *(int32_t *)(v13 - 4) = 0;
                *(int32_t *)(v13 - 8) = v11;
                *(int32_t *)(v13 - 12) = v13 + 56;
                v14 = v13 - 16;
                *(int32_t *)v14 = (int32_t)g708;
            }
            // 0x405327
            return 0;
        }
      lab_0x405830:
        // 0x405830
        *(int32_t *)(v12 - 4) = 0;
        *(int32_t *)(v12 - 8) = (int32_t)&g85;
        *(int32_t *)(v12 - 12) = 0;
        *(int32_t *)(v12 - 16) = (int32_t)g708;
        if (g708 != NULL) {
            // 0x405327
            return 0;
        }
        // 0x405862
        *(int32_t *)(v12 - 20) = g605;
        *(int32_t *)(v12 - 24) = 0;
        *(int32_t *)(v12 - 28) = g85;
        if (*(int32_t *)g85 != 0) {
            // 0x405327
            return 0;
        }
        // 0x405887
        *(int32_t *)(v12 - 32) = g85;
        int32_t v16 = v12 - 36; // 0x405893
        *(int32_t *)v16 = g627;
        v8 = v16;
        if (*(int32_t *)g627 != 0) {
            // 0x405327
            return 1;
        }
    } else {
        // 0x40553b
        *(int32_t *)(v2 - 4) = 0;
        *(int32_t *)(v2 - 8) = (int32_t)&g627;
        *(int32_t *)(v2 - 12) = v7;
        *(int32_t *)(v2 + 76) = g50;
        int32_t v17 = v2 - 16; // 0x405556
        *(int32_t *)v17 = (int32_t)g708;
        *(int32_t *)(v2 + 60) = 33;
        *(int32_t *)(v2 + 160) = 536;
        if (*g708 != NULL) {
            // 0x405327
            return 0;
        }
        // 0x405580
        g622 = 1;
        g623 = 1;
        g624 = g47;
        g625 = g48;
        g626 = g49;
        if (g50 >= 5) {
            // 0x4055ba
            *(int32_t *)(v2 - 20) = 0;
            *(int32_t *)(v2 - 24) = 0;
            *(int32_t *)(v2 - 28) = (int32_t)"The maximum amount of backbuffers is exceeded";
            *(int32_t *)(v2 - 32) = g605;
            MessageBoxA(&g1001, (char *)&g1001, (char *)&g1001, (int32_t)&g1001);
            return 0;
        }
        // 0x4055dc
        v8 = v17;
        if (g50 >= 1) {
            // 0x4055e5
            *(int32_t *)v2 = g627;
            *(int32_t *)(v2 + 20) = 4;
            int32_t v18 = 0; // 0x4055ff
            int32_t v19 = &g621; // 0x4055ff
            int32_t v20 = v17;
            int32_t v21 = v20 + 36;
            if (v19 != (int32_t)&g621) {
                // 0x40560f
                *(int32_t *)v21 = 16;
            }
            int32_t v22 = v20 + 16; // 0x405613
            int32_t v23 = *(int32_t *)v22; // 0x40561b
            *(int32_t *)(v20 - 4) = v22;
            *(int32_t *)(v20 - 8) = v21;
            int32_t v24 = v20 - 12; // 0x405623
            *(int32_t *)v24 = v23;
            while (*(int32_t *)v23 == 0) {
                // 0x40562f
                *(int32_t *)v19 = *(int32_t *)(v20 + 4);
                *(int32_t *)(v19 - 44) = 1;
                *(int32_t *)(v19 - 40) = 1;
                v18++;
                *(int32_t *)(v19 - 16) = g47;
                *(int32_t *)(v19 - 12) = g48;
                *(int32_t *)(v19 - 8) = g49;
                v19 += 48;
                v8 = v24;
                if (v18 >= g50) {
                    goto lab_0x405661;
                }
                v20 = v24;
                v21 = v20 + 36;
                if (v19 != (int32_t)&g621) {
                    // 0x40560f
                    *(int32_t *)v21 = 16;
                }
                // 0x405613
                v22 = v20 + 16;
                v23 = *(int32_t *)v22;
                *(int32_t *)(v20 - 4) = v22;
                *(int32_t *)(v20 - 8) = v21;
                v24 = v20 - 12;
                *(int32_t *)v24 = v23;
            }
            // 0x4056fa
            *(int32_t *)(v20 - 16) = 0;
            *(int32_t *)(v20 - 20) = 0;
            *(int32_t *)(v20 - 24) = (int32_t)"Backbuffer couldn't be obtained";
            *(int32_t *)(v20 - 28) = g605;
            MessageBoxA(&g1001, (char *)&g1001, (char *)&g1001, (int32_t)&g1001);
            return 0;
        }
    }
  lab_0x405661:
    // 0x405661
    *(int32_t *)(v8 + 60) = 7;
    *(int32_t *)(v8 + 160) = 64;
    int32_t v25 = v8; // 0x40567b
    if (g35 != 0) {
        int32_t v26 = v8; // 0x405688
        if (g702 != 0) {
            // 0x40568a
            v26 = v8 - 4;
            *(int32_t *)v26 = g702;
            g702 = 0;
        }
        // 0x40569f
        *(char *)&g698 = 0;
        *(char *)&g699 = 0;
        *(char *)&g700 = 0;
        int32_t v27 = (int32_t)&g701;
        *(char *)v27 = -1;
        int32_t v28 = v27 + 4; // 0x4056bc
        *(char *)(v27 | 1) = -1;
        *(char *)(v27 | 2) = -1;
        while (v28 < (int32_t)&g702) {
            // 0x4056ba
            v27 = v28;
            *(char *)v27 = -1;
            v28 = v27 + 4;
            *(char *)(v27 | 1) = -1;
            *(char *)(v27 | 2) = -1;
        }
        // 0x4056cc
        *(int32_t *)(v26 - 4) = 0;
        *(int32_t *)(v26 - 8) = (int32_t)&g702;
        *(int32_t *)(v26 - 12) = (int32_t)&g698;
        *(int32_t *)(v26 - 16) = 68;
        *(int32_t *)(v26 - 20) = (int32_t)g708;
        if (g708 != NULL) {
            // 0x405327
            return 0;
        }
        // 0x4058b1
        *(int32_t *)(v26 - 24) = g702;
        int32_t v29 = v26 - 28; // 0x4058bd
        *(int32_t *)v29 = g627;
        v25 = v29;
        if (*(int32_t *)g627 != 0) {
            // 0x405327
            return 0;
        }
    }
    // 0x4058d4
    function_406250();
    *(int32_t *)(v25 - 4) = 5;
    *(int32_t *)(v25 - 8) = g605;
    ShowWindow(&g1001, (int32_t)&g1001);
    return 1;
}

// Address range: 0x405900 - 0x405be9
int32_t function_405900(void) {
    int32_t v1 = &g627;
    int32_t v2; // bp-132, 0x405900
    int32_t v3 = &v2;
    int32_t v4 = v3; // 0x405914
    int32_t * v5; // 0x405916
    int32_t v6; // 0x405916
    int32_t v7; // 0x40591c
    if (g35 != 0) {
        // 0x405916
        v5 = (int32_t *)v1;
        v6 = *v5;
        v4 = v3;
        if (v6 != 0) {
            // 0x40591c
            v7 = v3 - 4;
            *(int32_t *)v7 = v6;
            *v5 = 0;
            *(int32_t *)(v1 - 44) = 0;
            v4 = v7;
        }
    }
    int32_t v8 = v4;
    int32_t v9 = v1 + 48; // 0x405927
    while (v9 < (int32_t)&g629) {
        // 0x40590e
        v1 = v9;
        v3 = v8;
        v4 = v3;
        if (g35 != 0) {
            // 0x405916
            v5 = (int32_t *)v1;
            v6 = *v5;
            v4 = v3;
            if (v6 != 0) {
                // 0x40591c
                v7 = v3 - 4;
                *(int32_t *)v7 = v6;
                *v5 = 0;
                *(int32_t *)(v1 - 44) = 0;
                v4 = v7;
            }
        }
        // 0x405927
        v8 = v4;
        v9 = v1 + 48;
    }
    int32_t v10 = &g629;
    int32_t * v11 = (int32_t *)v10; // 0x405939
    int32_t v12 = *v11; // 0x405939
    int32_t v13 = v8; // 0x40593d
    if (v12 != 0) {
        // 0x40593f
        v13 = v8 - 4;
        *(int32_t *)v13 = v12;
        *v11 = 0;
        *(int32_t *)(v10 - 44) = 0;
    }
    int32_t v14 = v13;
    int32_t v15 = v10 + 48; // 0x40594a
    while (v15 < (int32_t)&g641) {
        // 0x405939
        v10 = v15;
        int32_t v16 = v14;
        v11 = (int32_t *)v10;
        v12 = *v11;
        v13 = v16;
        if (v12 != 0) {
            // 0x40593f
            v13 = v16 - 4;
            *(int32_t *)v13 = v12;
            *v11 = 0;
            *(int32_t *)(v10 - 44) = 0;
        }
        // 0x40594a
        v14 = v13;
        v15 = v10 + 48;
    }
    int32_t v17 = g702; // 0x40595e
    int32_t v18 = v14; // 0x40595c
    if (g35 != 0 && v17 != 0) {
        // 0x405967
        v18 = v14 - 4;
        *(int32_t *)v18 = v17;
        g702 = 0;
    }
    // 0x40597c
    function_404530();
    int32_t v19 = v18; // 0x405988
    if (g35 != 0) {
        // 0x40598a
        *(int32_t *)(v18 - 4) = g49;
        *(int32_t *)(v18 - 8) = g48;
        *(int32_t *)(v18 - 12) = g47;
        v19 = v18 - 16;
        *(int32_t *)v19 = (int32_t)g708;
        if (g708 != NULL) {
            // 0x4059ad
            return 0;
        }
    }
    int32_t v20 = v19 + 24; // 0x4059b7
    __asm_rep_stosd_memset((char *)v20, 0, 27);
    *(int32_t *)v20 = 108;
    int32_t v21 = v19; // 0x4059d2
    if (g35 != 0) {
        // 0x4059d8
        *(int32_t *)(v19 - 4) = 0;
        *(int32_t *)(v19 - 8) = (int32_t)&g627;
        *(int32_t *)(v19 - 12) = v20;
        *(int32_t *)(v19 + 44) = g50;
        int32_t v22 = v19 - 16; // 0x4059f3
        *(int32_t *)v22 = (int32_t)g708;
        *(int32_t *)(v19 + 28) = 33;
        *(int32_t *)(v19 + 128) = 536;
        if (*g708 != NULL) {
            // 0x4059ad
            return 0;
        }
        // 0x405a1a
        g622 = 1;
        g623 = 1;
        g624 = g47;
        g625 = g48;
        g626 = g49;
        if (g50 >= 5) {
            // 0x405a54
            *(int32_t *)(v19 - 20) = 0;
            *(int32_t *)(v19 - 24) = 0;
            *(int32_t *)(v19 - 28) = (int32_t)"The maximum amount of backbuffers is exceeded";
            *(int32_t *)(v19 - 32) = g605;
            MessageBoxA(&g1001, (char *)&g1001, (char *)&g1001, (int32_t)&g1001);
            return 0;
        }
        // 0x405a73
        v21 = v22;
        if (g50 >= 1) {
            // 0x405a7c
            *(int32_t *)v19 = g627;
            *(int32_t *)(v19 + 4) = 4;
            int32_t v23 = 0; // 0x405a96
            int32_t v24 = &g621; // 0x405a96
            int32_t v25 = v22;
            int32_t v26 = v25 + 20;
            if (v24 != (int32_t)&g621) {
                // 0x405aa6
                *(int32_t *)v26 = 16;
            }
            int32_t v27 = v25 + 16; // 0x405aaa
            int32_t v28 = *(int32_t *)v27; // 0x405ab2
            *(int32_t *)(v25 - 4) = v27;
            *(int32_t *)(v25 - 8) = v26;
            int32_t v29 = v25 - 12; // 0x405aba
            *(int32_t *)v29 = v28;
            while (*(int32_t *)v28 == 0) {
                // 0x405ac6
                *(int32_t *)v24 = *(int32_t *)(v25 + 4);
                *(int32_t *)(v24 - 44) = 1;
                *(int32_t *)(v24 - 40) = 1;
                v23++;
                *(int32_t *)(v24 - 16) = g47;
                *(int32_t *)(v24 - 12) = g48;
                *(int32_t *)(v24 - 8) = g49;
                v24 += 48;
                v21 = v29;
                if (g50 <= v23) {
                    goto lab_0x405af8;
                }
                v25 = v29;
                v26 = v25 + 20;
                if (v24 != (int32_t)&g621) {
                    // 0x405aa6
                    *(int32_t *)v26 = 16;
                }
                // 0x405aaa
                v27 = v25 + 16;
                v28 = *(int32_t *)v27;
                *(int32_t *)(v25 - 4) = v27;
                *(int32_t *)(v25 - 8) = v26;
                v29 = v25 - 12;
                *(int32_t *)v29 = v28;
            }
            // 0x405b8a
            *(int32_t *)(v25 - 16) = 0;
            *(int32_t *)(v25 - 20) = 0;
            *(int32_t *)(v25 - 24) = (int32_t)"Backbuffer couldn't be obtained";
            *(int32_t *)(v25 - 28) = g605;
            MessageBoxA(&g1001, (char *)&g1001, (char *)&g1001, (int32_t)&g1001);
            return 0;
        }
    }
  lab_0x405af8:
    // 0x405af8
    *(int32_t *)(v21 + 28) = 7;
    *(int32_t *)(v21 + 128) = 64;
    int32_t v30 = v21; // 0x405b12
    if (g35 != 0) {
        int32_t v31 = v21; // 0x405b1f
        if (g702 != 0) {
            // 0x405b21
            v31 = v21 - 4;
            *(int32_t *)v31 = g702;
            g702 = 0;
        }
        // 0x405b36
        *(char *)&g704 = 0;
        *(char *)&g705 = 0;
        *(char *)&g706 = 0;
        int32_t v32 = (int32_t)&g707;
        *(char *)v32 = -1;
        int32_t v33 = v32 + 4; // 0x405b53
        *(char *)(v32 | 1) = -1;
        *(char *)(v32 | 2) = -1;
        while (v33 < (int32_t)&g708) {
            // 0x405b51
            v32 = v33;
            *(char *)v32 = -1;
            v33 = v32 + 4;
            *(char *)(v32 | 1) = -1;
            *(char *)(v32 | 2) = -1;
        }
        // 0x405b63
        *(int32_t *)(v31 - 4) = 0;
        *(int32_t *)(v31 - 8) = (int32_t)&g702;
        *(int32_t *)(v31 - 12) = (int32_t)&g704;
        *(int32_t *)(v31 - 16) = 68;
        *(int32_t *)(v31 - 20) = (int32_t)g708;
        if (g708 != NULL) {
            // 0x4059ad
            return 0;
        }
        // 0x405ba9
        *(int32_t *)(v31 - 24) = g702;
        int32_t v34 = v31 - 28; // 0x405bb5
        *(int32_t *)v34 = g627;
        v30 = v34;
        if (*(int32_t *)g627 != 0) {
            // 0x4059ad
            return 0;
        }
    }
    // 0x405bc9
    function_406250();
    *(int32_t *)(v30 - 4) = 5;
    *(int32_t *)(v30 - 8) = g605;
    ShowWindow(&g1001, (int32_t)&g1001);
    return 1;
}

// Address range: 0x405bf0 - 0x405cd5
int32_t function_405bf0(void) {
    // 0x405bf0
    int32_t v1; // bp-8, 0x405bf0
    int32_t * v2 = &v1; // 0x405bf9
    if (g35 == 0 && g85 != 0) {
        int32_t v3 = g85; // bp-12, 0x405c09
        v2 = &v3;
    }
    int32_t v4 = &g627;
    int32_t v5 = (int32_t)v2;
    int32_t v6 = v5; // 0x405c1c
    int32_t * v7; // 0x405c1e
    int32_t v8; // 0x405c1e
    int32_t v9; // 0x405c24
    if (g35 == 0) {
        // 0x405c1e
        v7 = (int32_t *)v4;
        v8 = *v7;
        v6 = v5;
        if (v8 != 0) {
            // 0x405c24
            v9 = v5 - 4;
            *(int32_t *)v9 = v8;
            *v7 = 0;
            *(int32_t *)(v4 - 44) = 0;
            v6 = v9;
        }
    }
    int32_t v10 = v6;
    int32_t v11 = v4 + 48; // 0x405c2f
    while (v11 < (int32_t)&g629) {
        v4 = v11;
        v5 = v10;
        v6 = v5;
        if (g35 == 0) {
            // 0x405c1e
            v7 = (int32_t *)v4;
            v8 = *v7;
            v6 = v5;
            if (v8 != 0) {
                // 0x405c24
                v9 = v5 - 4;
                *(int32_t *)v9 = v8;
                *v7 = 0;
                *(int32_t *)(v4 - 44) = 0;
                v6 = v9;
            }
        }
        // 0x405c2f
        v10 = v6;
        v11 = v4 + 48;
    }
    int32_t v12 = &g621;
    int32_t v13 = v10; // 0x405c47
    int32_t v14; // 0x405c49
    int32_t v15; // 0x405c4f
    int32_t * v16; // 0x405c49
    if (g35 == 0) {
        // 0x405c49
        v16 = (int32_t *)v12;
        v14 = *v16;
        v13 = v10;
        if (v14 != 0) {
            // 0x405c4f
            v15 = v10 - 4;
            *(int32_t *)v15 = v14;
            *v16 = 0;
            *(int32_t *)(v12 - 44) = 0;
            v13 = v15;
        }
    }
    int32_t v17 = v12 + 48; // 0x405c5a
    while (v17 < (int32_t)&g627) {
        // 0x405c41
        v12 = v17;
        int32_t v18 = v13;
        v13 = v18;
        if (g35 == 0) {
            // 0x405c49
            v16 = (int32_t *)v12;
            v14 = *v16;
            v13 = v18;
            if (v14 != 0) {
                // 0x405c4f
                v15 = v18 - 4;
                *(int32_t *)v15 = v14;
                *v16 = 0;
                *(int32_t *)(v12 - 44) = 0;
                v13 = v15;
            }
        }
        // 0x405c5a
        v17 = v12 + 48;
    }
    int32_t v19 = &g629;
    int32_t * v20 = (int32_t *)v19; // 0x405c6c
    int32_t v21 = *v20; // 0x405c6c
    int32_t v22 = v13; // 0x405c70
    if (v21 != 0) {
        // 0x405c72
        v22 = v13 - 4;
        *(int32_t *)v22 = v21;
        *v20 = 0;
        *(int32_t *)(v19 - 44) = 0;
    }
    int32_t v23 = v22;
    int32_t v24 = v19 + 48; // 0x405c7d
    while (v24 < (int32_t)&g641) {
        // 0x405c6c
        v19 = v24;
        int32_t v25 = v23;
        v20 = (int32_t *)v19;
        v21 = *v20;
        v22 = v25;
        if (v21 != 0) {
            // 0x405c72
            v22 = v25 - 4;
            *(int32_t *)v22 = v21;
            *v20 = 0;
            *(int32_t *)(v19 - 44) = 0;
        }
        // 0x405c7d
        v23 = v22;
        v24 = v19 + 48;
    }
    int32_t v26 = v23; // 0x405c8f
    if (g35 != 0 && g702 != 0) {
        // 0x405c9a
        v26 = v23 - 4;
        *(int32_t *)v26 = g702;
        g702 = 0;
    }
    // 0x405caf
    if (g708 != NULL) {
        // 0x405cb8
        *(int32_t *)(v26 - 4) = (int32_t)g708;
        g708 = NULL;
    }
    // 0x405ccd
    return 1;
}

// Address range: 0x405ce0 - 0x405ce6
int32_t function_405ce0(void) {
    // 0x405ce0
    return 2;
}

// Address range: 0x405cf0 - 0x405d5c
int32_t function_405cf0(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8) {
    // 0x405cf0
    if (*(int32_t *)a1 == 0 || *(int32_t *)a6 == 0) {
        // 0x405d54
        return 0;
    }
    // 0x405d07
    return *(int32_t *)*(int32_t *)(a6 + 44) == 0;
}

// Address range: 0x405d60 - 0x405ee2
int32_t function_405d60(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, uint32_t a6, int32_t a7, int32_t a8, int32_t a9) {
    // 0x405d60
    if (*(int32_t *)a7 == 0) {
        // 0x405d70
        return 0;
    }
    int32_t * v1 = (int32_t *)(a7 + 12); // 0x405d7e
    int32_t v2 = *v1; // 0x405d7e
    if (v2 != 0) {
        if (v2 == 1) {
            // 0x405da7
            if (function_4061a0(a7) == 0 || function_406050(a7, 3) == 0) {
                // 0x405d70
                return 0;
            }
        }
    } else {
        // 0x405d89
        if (function_406050(a7, 3) == 0) {
            // 0x405d70
            return 0;
        }
    }
    if (a6 >= 1) {
        int32_t v3 = *(int32_t *)(a7 + 24); // 0x405dfa
        int32_t v4 = *(int32_t *)(a7 + 20) + a8 + v3 * a9; // 0x405e0b
        int32_t v5 = -v4 & 3; // 0x405e11
        int32_t v6 = v4 + a5 & 3; // 0x405e20
        int32_t v7 = a5 - v6 - v5; // 0x405e29
        int32_t v8 = (v7 >> 31 & 3) + v7; // 0x405e31
        int32_t v9 = a6; // 0x405e42
        int32_t v10 = a3 + a1 + a4 * a2; // 0x405e42
        int32_t v11 = v4; // 0x405e42
        __asm_rep_movsb_memcpy((char *)v11, (char *)v10, v5);
        int32_t v12 = v11 + v5; // 0x405e5b
        char * v13 = (char *)v12; // 0x405e61
        __asm_rep_movsd_memcpy(v13, v13, v8 >> 2);
        char * v14 = (char *)(v12 + (v8 & -4)); // 0x405e67
        __asm_rep_movsb_memcpy(v14, v14, v6);
        v9--;
        v10 += a2;
        v11 += v3;
        while (v9 != 0) {
            // 0x405e46
            __asm_rep_movsb_memcpy((char *)v11, (char *)v10, v5);
            v12 = v11 + v5;
            v13 = (char *)v12;
            __asm_rep_movsd_memcpy(v13, v13, v8 >> 2);
            v14 = (char *)(v12 + (v8 & -4));
            __asm_rep_movsb_memcpy(v14, v14, v6);
            v9--;
            v10 += a2;
            v11 += v3;
        }
    }
    // 0x405e72
    if (*v1 == v2) {
        // 0x405d70
        return 1;
    }
    int32_t v15 = function_4061a0(a7);
    if (v2 == 0) {
        // 0x405e83
        if (v15 != 0) {
            // 0x405d70
            return 1;
        }
        // 0x405d70
        return 0;
    }
    // 0x405e9a
    if (v15 == 0) {
        // 0x405d70
        return 0;
    }
    // 0x405eb5
    if (function_406050(a7, v2) != 0) {
        // 0x405d70
        return 1;
    }
    // 0x405d70
    return 0;
}

// Address range: 0x405ef0 - 0x405fc2
int32_t function_405ef0(int32_t a1) {
    // 0x405ef0
    if (*(int32_t *)a1 == 0) {
        // 0x405efc
        return 0;
    }
    int32_t * v1 = (int32_t *)(a1 + 12); // 0x405f02
    int32_t v2 = *v1; // 0x405f02
    if (v2 != 0) {
        if (v2 == 1) {
            // 0x405f23
            if (function_4061a0(a1) == 0 || function_406050(a1, 3) == 0) {
                // 0x405efc
                return 0;
            }
        }
    } else {
        // 0x405f09
        if (function_406050(a1, 3) == 0) {
            // 0x405efc
            return 0;
        }
    }
    int32_t * v3 = (int32_t *)(a1 + 32); // 0x405f50
    uint32_t v4 = *v3; // 0x405f50
    if (v4 >= 1) {
        int32_t * v5 = (int32_t *)(a1 + 28); // 0x405f57
        int32_t v6 = *v5;
        int32_t v7 = 0;
        int32_t v8 = 0; // 0x405f5a
        int32_t v9 = v4; // 0x405f5a
        int32_t v10 = v6; // 0x405f5a
        int32_t v11; // 0x405f5c
        int32_t v12; // 0x405f64
        uint32_t v13; // 0x405f6c
        if (v6 >= 1) {
            v11 = *(int32_t *)(a1 + 24);
            v12 = v8 + 1;
            *(int32_t *)(4 * (v11 * v7 + v8) + *(int32_t *)(a1 + 20)) = 0;
            v13 = *v5;
            v8 = v12;
            while (v13 > v12) {
                // 0x405f5c
                v11 = *(int32_t *)(a1 + 24);
                v12 = v8 + 1;
                *(int32_t *)(4 * (v11 * v7 + v8) + *(int32_t *)(a1 + 20)) = 0;
                v13 = *v5;
                v8 = v12;
            }
            // 0x405f71
            v9 = *v3;
            v10 = v13;
        }
        // 0x405f71
        v6 = v10;
        int32_t v14 = v9; // 0x405f72
        int32_t v15 = v7 + 1; // 0x405f71
        while (v14 > v15) {
            // 0x405f55
            v7 = v15;
            v8 = 0;
            v9 = v14;
            v10 = v6;
            if (v6 >= 1) {
                v11 = *(int32_t *)(a1 + 24);
                v12 = v8 + 1;
                *(int32_t *)(4 * (v11 * v7 + v8) + *(int32_t *)(a1 + 20)) = 0;
                v13 = *v5;
                v8 = v12;
                while (v13 > v12) {
                    // 0x405f5c
                    v11 = *(int32_t *)(a1 + 24);
                    v12 = v8 + 1;
                    *(int32_t *)(4 * (v11 * v7 + v8) + *(int32_t *)(a1 + 20)) = 0;
                    v13 = *v5;
                    v8 = v12;
                }
                // 0x405f71
                v9 = *v3;
                v10 = v13;
            }
            // 0x405f71
            v6 = v10;
            v14 = v9;
            v15 = v7 + 1;
        }
    }
    // 0x405f77
    if (*v1 == v2) {
        // 0x405efc
        return 1;
    }
    int32_t v16 = function_4061a0(a1);
    if (v2 == 0) {
        // 0x405f81
        if (v16 != 0) {
            // 0x405efc
            return 1;
        }
        // 0x405efc
        return 0;
    }
    // 0x405f93
    if (v16 == 0) {
        // 0x405efc
        return 0;
    }
    // 0x405fa5
    if (function_406050(a1, v2) != 0) {
        // 0x405efc
        return 1;
    }
    // 0x405efc
    return 0;
}

// Address range: 0x405fd0 - 0x406032
int32_t function_405fd0(int32_t a1) {
    // 0x405fd0
    if (*(int32_t *)(a1 + 40) != 1 || *(int32_t *)a1 == 0) {
        // 0x405fde
        return 0;
    }
    int32_t * v1 = (int32_t *)(a1 + 44); // 0x405ff1
    int32_t v2 = *v1; // bp-16, 0x405ff9
    int32_t v3; // bp-4, 0x405fd0
    if (((int32_t)&v3 & 16) == 0) {
        // 0x405fde
        return 0;
    }
    int32_t v4 = &v2; // 0x406019
    *(int32_t *)(v4 - 4) = 0;
    *(int32_t *)(v4 - 8) = *v1;
    v4 -= 12;
    *(int32_t *)v4 = g627;
    int32_t v5 = *(int32_t *)g627; // 0x40601a
    while (v5 == -0x7789fde4) {
        // 0x40600d
        *(int32_t *)(v4 - 4) = 0;
        *(int32_t *)(v4 - 8) = *v1;
        v4 -= 12;
        *(int32_t *)v4 = g627;
        v5 = *(int32_t *)g627;
    }
    // 0x406026
    return v5 == 0;
}

// Address range: 0x406040 - 0x406046
int32_t function_406040(void) {
    // 0x406040
    return 2;
}

// Address range: 0x406050 - 0x406196
int32_t function_406050(int32_t a1, int32_t a2) {
    // 0x406050
    if (*(int32_t *)a1 == 0) {
        // 0x40605f
        return 0;
    }
    int32_t * v1 = (int32_t *)(a1 + 8); // 0x406068
    int32_t * v2; // 0x406050
    int32_t * v3; // 0x406050
    if (*v1 != 1) {
        // 0x406068
        v2 = (int32_t *)(a1 + 44);
        int32_t v4; // bp-120, 0x406050
        v3 = &v4;
    } else {
        int32_t * v5 = (int32_t *)(a1 + 12); // 0x406075
        if (*v5 == a2) {
            // 0x40605f
            return 1;
        }
        int32_t * v6 = (int32_t *)(a1 + 44);
        int32_t v7 = *v6; // 0x40608a
        int32_t v8 = v7; // bp-128, 0x40608c
        if (v7 != 0) {
            // 0x40605f
            return 0;
        }
        // 0x4060a2
        *v5 = 0;
        v2 = v6;
        v3 = &v8;
    }
    int32_t v9 = (int32_t)v3;
    int32_t v10 = *v2; // 0x4060a9
    int32_t v11 = v9 - 4; // 0x4060ac
    *(int32_t *)v11 = v10;
    int32_t v12 = v11; // 0x4060b7
    if (v10 == -0x7789fe3e) {
        // 0x4060b9
        v12 = v9 - 8;
        *(int32_t *)v12 = *v2;
        *(int32_t *)(a1 + 4) = 1;
    }
    int32_t v13 = v12 + 12; // 0x4060c9
    *(int32_t *)v13 = 108;
    int32_t v14; // 0x406050
    int32_t v15; // 0x406050
    int32_t v16; // 0x406050
    int32_t v17; // 0x406050
    if (a2 != 1) {
        int32_t v18; // 0x406050
        int32_t v19; // 0x406050
        int32_t v20; // 0x406050
        int32_t v21; // 0x406050
        if (a2 != 2) {
            // 0x406125
            if (a2 != 3) {
                // 0x40605f
                return 0;
            }
            int32_t v22 = *v2; // 0x40612a
            *(int32_t *)(v12 - 4) = 0;
            *(int32_t *)(v12 - 8) = 33;
            *(int32_t *)(v12 - 12) = v13;
            *(int32_t *)(v12 - 16) = 0;
            int32_t v23 = v12 - 20; // 0x40613a
            *(int32_t *)v23 = v22;
            int32_t v24 = a1 + 16; // 0x40613e
            *(int32_t *)v24 = 0;
            v18 = v22;
            v19 = *(int32_t *)(v12 + 28);
            v20 = v24;
            v21 = v23;
        } else {
            int32_t v25 = *v2; // 0x406103
            *(int32_t *)(v12 - 4) = 0;
            *(int32_t *)(v12 - 8) = 1;
            *(int32_t *)(v12 - 12) = v13;
            *(int32_t *)(v12 - 16) = 0;
            int32_t v26 = v12 - 20; // 0x406113
            *(int32_t *)v26 = v25;
            int32_t v27 = a1 + 16; // 0x406117
            int32_t v28 = *(int32_t *)(v12 + 28); // 0x40611a
            *(int32_t *)v27 = v28;
            v18 = v25;
            v19 = v28;
            v20 = v27;
            v21 = v26;
        }
        int32_t v29 = a1 + 20;
        *(int32_t *)v29 = v19;
        v14 = v18;
        v16 = v20;
        v15 = v29;
        v17 = v21;
    } else {
        int32_t v30 = *v2; // 0x4060d6
        *(int32_t *)(v12 - 4) = 0;
        *(int32_t *)(v12 - 8) = 17;
        *(int32_t *)(v12 - 12) = v13;
        *(int32_t *)(v12 - 16) = 0;
        int32_t v31 = v12 - 20; // 0x4060e6
        *(int32_t *)v31 = v30;
        int32_t v32 = a1 + 16; // 0x4060ea
        int32_t v33 = a1 + 20; // 0x4060f1
        *(int32_t *)v32 = *(int32_t *)(v12 + 28);
        *(int32_t *)v33 = 0;
        v14 = v30;
        v16 = v32;
        v15 = v33;
        v17 = v31;
    }
    // 0x406150
    if (v14 == 0) {
        // 0x406170
        *(int32_t *)(a1 + 12) = a2;
        *(int32_t *)(a1 + 24) = *(int32_t *)(v17 + 28);
        *v1 = 1;
        return 1;
    }
    // 0x406154
    *(int32_t *)v16 = 0;
    *(int32_t *)v15 = 0;
    *v1 = 0;
    return 0;
}

// Address range: 0x4061a0 - 0x4061e7
int32_t function_4061a0(int32_t a1) {
    // 0x4061a0
    if (*(int32_t *)a1 == 0) {
        // 0x4061aa
        return 0;
    }
    int32_t * v1 = (int32_t *)(a1 + 8); // 0x4061ae
    if (*v1 == 0) {
        // 0x4061aa
        return 1;
    }
    // 0x4061bb
    if (*(int32_t *)*(int32_t *)(a1 + 44) != 0) {
        // 0x4061aa
        return 0;
    }
    // 0x4061d2
    *v1 = 0;
    *(int32_t *)(a1 + 12) = 0;
    return 1;
}

// Address range: 0x4061f0 - 0x406243
int32_t function_4061f0(int32_t a1) {
    // 0x4061f0
    if (g702 == 0) {
        // 0x4061f9
        return 0;
    }
    int32_t v1 = a1; // 0x4061f7
    int32_t v2 = (int32_t)&g703;
    *(char *)v2 = *(char *)v1;
    int32_t v3 = v2 + 4; // 0x40620c
    *(char *)(v2 | 1) = *(char *)(v1 + 1);
    *(char *)(v2 | 2) = *(char *)(v1 + 2);
    v1 += 3;
    while (v3 < (int32_t)&g704) {
        // 0x406205
        v2 = v3;
        *(char *)v2 = *(char *)v1;
        v3 = v2 + 4;
        *(char *)(v2 | 1) = *(char *)(v1 + 1);
        *(char *)(v2 | 2) = *(char *)(v1 + 2);
        v1 += 3;
    }
    // 0x406222
    return *(int32_t *)g702 == 0;
}

// Address range: 0x406250 - 0x406303
int32_t function_406250(void) {
    // 0x406250
    int32_t v1; // bp-12, 0x406250
    int32_t * v2 = &v1; // 0x406260
    int32_t v3 = 0; // 0x406260
    if (g622 == 1) {
        int32_t v4 = g627; // bp-16, 0x406267
        v2 = &v4;
        v3 = 0;
        if (g627 == -0x7789fe3e) {
            int32_t v5 = g627; // bp-20, 0x40627b
            g623 = 1;
            v2 = &v5;
            v3 = 1;
        }
    }
    int32_t v6 = &g621;
    int32_t v7 = (int32_t)v2;
    int32_t v8 = v7; // 0x406294
    int32_t v9 = v3; // 0x406294
    int32_t v10; // 0x4062a8
    int32_t * v11; // 0x406296
    int32_t v12; // 0x406296
    int32_t v13; // 0x406298
    if (*(int32_t *)(v6 - 44) == 1) {
        // 0x406296
        v11 = (int32_t *)v6;
        v12 = *v11;
        v13 = v7 - 4;
        *(int32_t *)v13 = v12;
        v8 = v13;
        v9 = v3;
        if (*(int32_t *)v12 == -0x7789fe3e) {
            // 0x4062a5
            v10 = v7 - 8;
            *(int32_t *)v10 = *v11;
            *(int32_t *)(v6 - 40) = 1;
            v8 = v10;
            v9 = v3 + 1;
        }
    }
    int32_t v14 = v9;
    int32_t v15 = v8;
    int32_t v16 = v6 + 48; // 0x4062b1
    while (v16 < (int32_t)&g627) {
        int32_t v17 = v14;
        v6 = v16;
        v7 = v15;
        v8 = v7;
        v9 = v17;
        if (*(int32_t *)(v6 - 44) == 1) {
            // 0x406296
            v11 = (int32_t *)v6;
            v12 = *v11;
            v13 = v7 - 4;
            *(int32_t *)v13 = v12;
            v8 = v13;
            v9 = v17;
            if (*(int32_t *)v12 == -0x7789fe3e) {
                // 0x4062a5
                v10 = v7 - 8;
                *(int32_t *)v10 = *v11;
                *(int32_t *)(v6 - 40) = 1;
                v8 = v10;
                v9 = v17 + 1;
            }
        }
        // 0x4062b1
        v14 = v9;
        v15 = v8;
        v16 = v6 + 48;
    }
    int32_t v18 = &g629;
    int32_t v19 = v15; // 0x4062c9
    int32_t v20 = v14; // 0x4062c9
    int32_t * v21; // 0x4062cb
    int32_t v22; // 0x4062cb
    int32_t v23; // 0x4062cd
    int32_t v24; // 0x4062dd
    if (*(int32_t *)(v18 - 44) == 1) {
        // 0x4062cb
        v21 = (int32_t *)v18;
        v22 = *v21;
        v23 = v15 - 4;
        *(int32_t *)v23 = v22;
        v19 = v23;
        v20 = v14;
        if (*(int32_t *)v22 == -0x7789fe3e) {
            // 0x4062da
            v24 = v15 - 8;
            *(int32_t *)v24 = *v21;
            *(int32_t *)(v18 - 40) = 1;
            v19 = v24;
            v20 = v14 + 1;
        }
    }
    int32_t v25 = v20;
    int32_t v26 = v18 + 48; // 0x4062e6
    while (v26 < (int32_t)&g641) {
        int32_t v27 = v25;
        v18 = v26;
        int32_t v28 = v19;
        v19 = v28;
        v20 = v27;
        if (*(int32_t *)(v18 - 44) == 1) {
            // 0x4062cb
            v21 = (int32_t *)v18;
            v22 = *v21;
            v23 = v28 - 4;
            *(int32_t *)v23 = v22;
            v19 = v23;
            v20 = v27;
            if (*(int32_t *)v22 == -0x7789fe3e) {
                // 0x4062da
                v24 = v28 - 8;
                *(int32_t *)v24 = *v21;
                *(int32_t *)(v18 - 40) = 1;
                v19 = v24;
                v20 = v27 + 1;
            }
        }
        // 0x4062e6
        v25 = v20;
        v26 = v18 + 48;
    }
    // 0x4062f1
    return v25 >= 0 != v25 != 0;
}

// Address range: 0x406310 - 0x406456
int32_t function_406310(void) {
    // 0x406310
    g748 = 0;
    g749 = 0;
    g750 = 0;
    g751 = 0;
    g757 = 0;
    g758 = 0;
    g759 = 0;
    g760 = 0;
    g775 = 0;
    g776 = 0;
    g777 = 0;
    g778 = 0;
    g762 = 0;
    g763 = 0;
    g764 = 0;
    g765 = 0;
    g752 = 0;
    g753 = 0;
    g754 = 0;
    g755 = 0;
    g744 = 0;
    g745 = 0;
    g746 = 0;
    g747 = 0;
    g771 = 0;
    g772 = 0;
    g773 = 0;
    g774 = 0;
    g767 = 0;
    g768 = 0;
    g769 = 0;
    g770 = 0;
    function_406460();
    function_4065f0();
    function_4066d0();
    function_4069d0();
    function_406630();
    function_406520();
    function_406590();
    return function_406640();
}

// Address range: 0x406460 - 0x40646e
int32_t function_406460(void) {
    // 0x406460
    return function_406f70(&g743);
}

// Address range: 0x406470 - 0x406485
int32_t function_406470(int32_t a1) {
    if (a1 != 0) {
        // 0x40647b
        return function_4111a0(a1);
    }
    // 0x406478
    return 0;
}

// Address range: 0x406490 - 0x406515
int32_t function_406490(int32_t a1) {
    int32_t * v1 = (int32_t *)(a1 + 12); // 0x406498
    int32_t v2 = *v1; // 0x406498
    int32_t * v3 = (int32_t *)(a1 + 8); // 0x40649b
    int32_t v4 = function_4111a0(4 * *v3 + 4000); // 0x4064a6
    *v1 = v4;
    uint32_t v5 = *v3;
    int32_t v6 = v5; // 0x4064b6
    if (v5 >= 1) {
        // 0x4064bc
        *(int32_t *)v4 = *(int32_t *)v2;
        int32_t v7 = *v3;
        v6 = v7;
        if (v7 > 1) {
            int32_t v8 = 4; // 0x4064c4
            int32_t v9 = v2 + 4; // 0x4064c1
            int32_t v10 = 2; // 0x4064c7
            *(int32_t *)(v8 + *v1) = *(int32_t *)v9;
            int32_t v11 = *v3;
            int32_t v12 = v10; // 0x4064cf
            int32_t v13 = v9; // 0x4064cf
            int32_t v14 = v8; // 0x4064cf
            while (v11 > v10) {
                // 0x4064bc
                v8 = v14 + 4;
                v9 = v13 + 4;
                v10 = v12 + 1;
                *(int32_t *)(v8 + *v1) = *(int32_t *)v9;
                v11 = *v3;
                v12 = v10;
                v13 = v9;
                v14 = v8;
            }
            // 0x4064d1
            v6 = v11;
            if (v11 > 0x7ffffc17) {
                // 0x406500
                *v3 = v11 + 1000;
                return function_411250(v2);
            }
        }
    }
    int32_t v15 = 4 * v6; // 0x4064de
    int32_t v16 = v6; // 0x4064de
    v16++;
    *(int32_t *)(*v1 + v15) = 0;
    int32_t v17 = *v3 + 1000;
    v15 += 4;
    while (v17 > v16) {
        // 0x4064e5
        v16++;
        *(int32_t *)(*v1 + v15) = 0;
        v17 = *v3 + 1000;
        v15 += 4;
    }
    // 0x406500
    *v3 = v17;
    return function_411250(v2);
}

// Address range: 0x406520 - 0x406564
int32_t function_406520(void) {
    // 0x406520
    g726 = 0;
    g728 = 0;
    g727 = 0;
    g729 = 0;
    g730 = 0;
    g732 = 0;
    g731 = 0;
    g733 = 0;
    g734 = 0;
    g735 = 0;
    g762 = 1;
    g736 = 0;
    return 0;
}

// Address range: 0x406570 - 0x406582
int32_t function_406570(int32_t a1) {
    int32_t result = 0; // 0x406576
    if (a1 != 0) {
        // 0x406578
        result = function_411250(a1);
    }
    // 0x406581
    return result;
}

// Address range: 0x406590 - 0x40659b
int32_t function_406590(void) {
    // 0x406590
    g752 = 8;
    int32_t result; // 0x406590
    return result;
}

// Address range: 0x4065a0 - 0x4065e8
int32_t function_4065a0(int32_t a1, int32_t a2) {
    // 0x4065a0
    if (a1 == 0) {
        // 0x4065ac
        *(int32_t *)a2 = 0;
        int32_t result; // 0x4065a0
        return result;
    }
    int32_t result2 = 1; // 0x4065b8
    if (*(char *)a1 != 0) {
        int32_t v1 = 0;
        int32_t v2 = v1 + 1; // 0x4065ba
        while (*(char *)(v2 + a1) != 0) {
            // 0x4065ba
            v1 = v2;
            v2 = v1 + 1;
        }
        // 0x4065c1
        result2 = v1 + 2;
    }
    int32_t v3 = function_406470(result2); // 0x4065c3
    *(int32_t *)a2 = v3;
    if (result2 < 1) {
        // 0x4065e5
        return 0;
    }
    int32_t v4 = 0;
    int32_t v5 = v4 + 1; // 0x4065dc
    *(char *)(v4 + v3) = *(char *)(v4 + a1);
    while (v5 != result2) {
        // 0x4065d9
        v4 = v5;
        v5 = v4 + 1;
        *(char *)(v4 + v3) = *(char *)(v4 + a1);
    }
    // 0x4065e5
    return result2;
}

// Address range: 0x4065f0 - 0x40662c
int32_t function_4065f0(void) {
    int32_t v1 = 0; // 0x4065f4
    int3_t v2; // 0x4065f0
    int3_t v3 = v2 - 1; // 0x4065fb
    __frontend_reg_store_fpr(v3, (float80_t)v1);
    __frontend_reg_store_fpr(v3, 2.44140625e-4L * __frontend_reg_load_fpr(v3));
    __frontend_reg_store_fpr(v3, 6.283192L * __frontend_reg_load_fpr(v3));
    float80_t v4 = __frontend_reg_load_fpr(v3); // 0x40660b
    if (fabsl(v4) < 9223372036854775808.0L) {
        __frontend_reg_store_fpr(v3, sinl(v4));
    }
    v1++;
    __frontend_reg_store_fpr(v3, 2147418112.0L * __frontend_reg_load_fpr(v3));
    int32_t result = __ftol(); // 0x406613
    *(int32_t *)(4 * v1 + (int32_t)&g718) = result;
    while (v1 != 0x1000) {
        // 0x4065f6
        v3--;
        __frontend_reg_store_fpr(v3, (float80_t)v1);
        __frontend_reg_store_fpr(v3, 2.44140625e-4L * __frontend_reg_load_fpr(v3));
        __frontend_reg_store_fpr(v3, 6.283192L * __frontend_reg_load_fpr(v3));
        v4 = __frontend_reg_load_fpr(v3);
        if (fabsl(v4) < 9223372036854775808.0L) {
            __frontend_reg_store_fpr(v3, sinl(v4));
        }
        v1++;
        __frontend_reg_store_fpr(v3, 2147418112.0L * __frontend_reg_load_fpr(v3));
        result = __ftol();
        *(int32_t *)(4 * v1 + (int32_t)&g718) = result;
    }
    // 0x406627
    return result;
}

// Address range: 0x406630 - 0x40663b
int32_t function_406630(void) {
    // 0x406630
    g757 = 1;
    int32_t result; // 0x406630
    return result;
}

// Address range: 0x406640 - 0x4066c2
int32_t function_406640(void) {
    // 0x406640
    function_406f70(&g766);
    g709 = "default";
    g711 = 0x3f800000;
    g715 = 0;
    g710 = 0;
    *(char *)&g716 = 0;
    g714 = 0x3ecccccd;
    g713 = 0x3f000000;
    g712 = 0x3dcccccd;
    int32_t result = function_406470(16); // 0x406696
    g717 = result;
    *(int32_t *)result = 12;
    *(int32_t *)(result + 4) = 0;
    *(int32_t *)(result + 8) = 4095;
    *(int32_t *)(result + 12) = 0;
    g775 = 1;
    return result;
}

// Address range: 0x4066d0 - 0x406705
int32_t function_4066d0(void) {
    // 0x4066d0
    g719 = "default";
    g720 = 0;
    g721 = 0;
    g722 = 0;
    g723 = 0;
    g724 = 0;
    g725 = 0;
    g767 = 1;
    return 0;
}

// Address range: 0x406710 - 0x40679f
int32_t function_406710(int32_t a1, int32_t a2) {
    int32_t v1 = (int32_t)&g719; // 0x40671d
    if (a2 > -1 == g769 > a2) {
        int32_t v2 = *(int32_t *)(g770 + 4 * a2) != 0 ? a2 : 0;
        int32_t v3 = *(int32_t *)(4 * v2 + g770); // 0x406739
        v1 = v2 != 0 ? v3 : (int32_t)&g719;
    }
    // 0x406744
    __asm_rep_movsd_memcpy((char *)a1, (char *)v1, 16);
    function_4065a0(*(int32_t *)v1, a1);
    *(int32_t *)(a1 + 24) = *(int32_t *)a1;
    int32_t * v4 = (int32_t *)(a1 + 4); // 0x406771
    int32_t v5 = function_406470(*v4 * *(int32_t *)(a1 + 8)); // 0x406776
    int32_t * v6 = (int32_t *)(a1 + 16); // 0x406781
    *v6 = v5;
    *(int32_t *)(a1 + 20) = *v4;
    int32_t result = function_4067a0(v1, a1); // 0x406789
    *(int32_t *)(a1 + 28) = *v6;
    return result;
}

// Address range: 0x4067a0 - 0x4067dd
int32_t function_4067a0(int32_t result, int32_t a2) {
    int32_t * v1 = (int32_t *)(result + 8); // 0x4067b4
    int32_t v2 = *v1; // 0x4067b4
    if (v2 < 1) {
        // 0x4067d8
        return result;
    }
    int32_t * v3 = (int32_t *)(result + 4); // 0x4067bb
    int32_t v4 = 0; // 0x4067d2
    int32_t v5 = *(int32_t *)(result + 16);
    int32_t v6 = *(int32_t *)(a2 + 16);
    int32_t v7 = *v3; // 0x4067bb
    int32_t v8 = v2; // 0x4067be
    int32_t v9 = v7; // 0x4067be
    int32_t v10; // 0x4067a0
    int32_t v11; // 0x4067c6
    uint32_t v12; // 0x4067c7
    if (v7 >= 1) {
        v10 = 0;
        *(char *)(v10 + v6) = *(char *)(v10 + v5);
        v11 = v10 + 1;
        v12 = *v3;
        while (v12 > v11) {
            // 0x4067c0
            v10 = v11;
            *(char *)(v10 + v6) = *(char *)(v10 + v5);
            v11 = v10 + 1;
            v12 = *v3;
        }
        // 0x4067cc
        v8 = *v1;
        v9 = v12;
    }
    // 0x4067cc
    v4++;
    int32_t v13 = *(int32_t *)(a2 + 20) + v6; // 0x4067d6
    int32_t v14 = *(int32_t *)(result + 20) + v5; // 0x4067d6
    while (v8 > v4) {
        // 0x4067b9
        v5 = v14;
        v6 = v13;
        v7 = v9;
        v9 = v7;
        if (v7 >= 1) {
            v10 = 0;
            *(char *)(v10 + v6) = *(char *)(v10 + v5);
            v11 = v10 + 1;
            v12 = *v3;
            while (v12 > v11) {
                // 0x4067c0
                v10 = v11;
                *(char *)(v10 + v6) = *(char *)(v10 + v5);
                v11 = v10 + 1;
                v12 = *v3;
            }
            // 0x4067cc
            v8 = *v1;
            v9 = v12;
        }
        // 0x4067cc
        v4++;
        v13 = *(int32_t *)(a2 + 20) + v6;
        v14 = *(int32_t *)(result + 20) + v5;
    }
    // 0x4067d8
    return result;
}

// Address range: 0x4067e0 - 0x406852
int32_t function_4067e0(int32_t * a1, int32_t result) {
    if (result == 0 || result >= 0 != g769 > result) {
        // 0x4067ea
        __asm_rep_movsd_memcpy((char *)a1, (char *)&g719, 16);
        return result;
    }
    int32_t v1 = *(int32_t *)(g770 + 4 * result); // 0x40680d
    if (v1 == 0) {
        // 0x406814
        __asm_rep_movsd_memcpy((char *)a1, (char *)&g719, 16);
        return result;
    }
    int32_t v2 = (int32_t)a1;
    __asm_rep_movsd_memcpy((char *)a1, (char *)v1, 16);
    *(int32_t *)(v2 + 24) = 0;
    *(int32_t *)(v2 + 28) = 0;
    return 0;
}

// Address range: 0x406860 - 0x4069a9
int32_t function_406860(int32_t * a1, int32_t a2) {
    // 0x406860
    int32_t v1; // bp-16, 0x406860
    int32_t v2 = &v1; // 0x40686b
    if (a1 == NULL) {
        // 0x406894
        if (a2 > 0 != g769 > a2) {
            // 0x4068f4
            return 0;
        }
        int32_t v3 = 4 * a2; // 0x4068a5
        int32_t v4 = *(int32_t *)(g770 + v3); // 0x4068a5
        if (v4 != 0) {
            int32_t * v5 = (int32_t *)(v2 - 4); // 0x4068ae
            *v5 = *(int32_t *)v4;
            function_406570((int32_t)&g1001);
            *v5 = *(int32_t *)(g770 + v3);
            function_406d90((int32_t)&g1001);
        }
        // 0x4068c8
        if (g767 > a2) {
            // 0x4068d0
            g767 = a2;
        }
        // 0x4068d6
        *(int32_t *)(v2 - 4) = *(int32_t *)(g770 + v3);
        function_406570((int32_t)&g1001);
        *(int32_t *)(g770 + v3) = 0;
        // 0x4068f4
        return 0;
    }
    int32_t * v6 = (int32_t *)(v2 - 4);
    int32_t result; // 0x406860
    if (a2 != 0) {
        // 0x406931
        result = a2;
        if (a2 >= 0 != g769 > a2) {
            // 0x4068f4
            return 0;
        }
    } else {
        int32_t v7 = g767; // 0x406878
        while (g769 <= v7) {
            // 0x406885
            *v6 = (int32_t)&g767;
            function_406490((int32_t)&g1001);
            v7 = g767;
        }
        int32_t v8 = v7 + 1; // 0x406901
        int32_t v9 = v8; // 0x40690a
        if (v8 < g769) {
            int32_t v10 = v8; // 0x406913
            int32_t v11 = g770 + 4 * v8; // 0x406913
            v9 = v10;
            while (*(int32_t *)v11 != 0) {
                // 0x40691e
                v10++;
                v11 += 4;
                v9 = v10;
                if (v10 >= g769) {
                    // break -> 0x40692a
                    break;
                }
                v9 = v10;
            }
        }
        // 0x40692a
        g767 = v9;
        result = v7;
    }
    int32_t v12 = 4 * result; // 0x406940
    int32_t * v13 = (int32_t *)(g770 + v12); // 0x406943
    int32_t v14 = *v13; // 0x406943
    if (v14 != 0) {
        // 0x406957
        *v6 = *(int32_t *)v14;
        function_406570((int32_t)&g1001);
        *v6 = *(int32_t *)(g770 + v12);
        function_406d90((int32_t)&g1001);
    } else {
        // 0x406949
        *v6 = 64;
        *v13 = function_406470((int32_t)&g1001);
    }
    int32_t v15 = *(int32_t *)(g770 + v12); // 0x40697e
    *v6 = v15;
    __asm_rep_movsd_memcpy((char *)v15, (char *)a1, 16);
    *(int32_t *)(v2 - 8) = *(int32_t *)v15;
    function_4065a0((int32_t)&g1001, (int32_t)&g1001);
    *v6 = v15;
    function_406a10((int32_t)&g1001);
    return result;
}

// Address range: 0x4069b0 - 0x4069cf
int32_t function_4069b0(int32_t a1) {
    // 0x4069b0
    function_406570(*(int32_t *)(a1 + 24));
    return function_406570(*(int32_t *)(a1 + 28));
}

// Address range: 0x4069d0 - 0x406a0d
int32_t function_4069d0(void) {
    // 0x4069d0
    g741 = 0;
    g742 = 0;
    g740 = 0;
    g737 = NULL;
    g738 = 0;
    g739 = 0;
    __asm_rep_stosd_memset((char *)&g761, 0, 257);
    g756 = 0;
    return 0;
}

// Address range: 0x406a10 - 0x406b6e
int32_t function_406a10(int32_t a1) {
    int32_t * v1 = (int32_t *)(a1 + 8); // 0x406a1b
    int32_t v2 = *v1;
    int32_t result; // 0x406a10
    if (v2 > 256) {
        // 0x406ae8
        return result;
    }
    int32_t * v3 = (int32_t *)(a1 + 4);
    int32_t v4; // bp-88, 0x406a10
    int32_t v5 = &v4; // 0x406a10
    int32_t v6 = v2; // 0x406ade
    int32_t v7 = *v3; // 0x406a34
    result = v7;
    int32_t * v8; // 0x406a10
    int32_t v9; // 0x406a10
    int32_t v10; // 0x406a10
    int32_t v11; // 0x406a10
    int32_t * v12; // 0x406a10
    int32_t * v13; // 0x406a10
    int32_t * v14; // 0x406a10
    while (v7 <= 256) {
        int32_t v15 = v6;
        v11 = v5;
        int32_t v16 = *(int32_t *)(4 * v15 + (int32_t)&g761); // 0x406a4a
        int32_t v17; // 0x406a10
        if (v16 != 0) {
            // 0x406a62
            v12 = (int32_t *)(v11 - 4);
            int32_t v18 = v11 - 8; // 0x406a6c
            v13 = (int32_t *)v18;
            v14 = (int32_t *)(v11 + 20);
            int32_t v19 = *(int32_t *)(v16 + 4); // 0x406a62
            int32_t * v20 = (int32_t *)(v19 + 12);
            *v12 = *v20;
            *v13 = v7;
            int32_t v21 = function_406d50((int32_t)&g1001, (int32_t)&g1001); // 0x406a6d
            *v14 = v21;
            int32_t v22 = v16; // 0x406a7b
            v8 = v20;
            v9 = v19;
            v10 = v21;
            if (v21 != 0) {
                goto lab_0x406a81_2;
            }
            v22 = *(int32_t *)v22;
            while (v22 != 0) {
                int32_t v23 = *(int32_t *)(v22 + 4); // 0x406a62
                int32_t * v24 = (int32_t *)(v23 + 12);
                *v12 = *v24;
                *v13 = *v3;
                int32_t v25 = function_406d50((int32_t)&g1001, (int32_t)&g1001); // 0x406a6d
                *v14 = v25;
                v8 = v24;
                v9 = v23;
                v10 = v25;
                if (v25 != 0) {
                    goto lab_0x406a81_2;
                }
                v22 = *(int32_t *)v22;
            }
            // 0x406acc
            *v12 = g756;
            *v13 = *v1;
            v17 = v18;
        } else {
            // 0x406a55
            *(int32_t *)(v11 - 4) = g756;
            int32_t v26 = v11 - 8; // 0x406a5b
            *(int32_t *)v26 = v15;
            v17 = v26;
        }
        int32_t v27 = function_406ba0((int32_t)&g1001); // 0x406ad6
        v6 = *v1;
        result = v27;
        if (v6 >= 0 != v6 != 0) {
            // break -> 0x406ae8
            break;
        }
        // 0x406a25
        v5 = v17 + 8;
        result = v27;
        if (v6 > 256) {
            // break -> 0x406ae8
            break;
        }
        v7 = *v3;
        result = v7;
    }
    // 0x406ae8
    return result;
  lab_0x406a81_2:
    // 0x406a81
    *v12 = 24;
    int32_t v28 = function_406470((int32_t)&g1001);
    int32_t * v29 = (int32_t *)(v11 + 16);
    *v29 = v28;
    __asm_rep_movsd_memcpy((char *)v28, (char *)&g737, 6);
    if (v10 != -1) {
        int32_t v30 = *v29; // 0x406b0e
        int32_t * v31 = (int32_t *)(*v14 + 4); // 0x406b12
        int32_t * v32 = (int32_t *)v30; // 0x406b15
        *v32 = *v31;
        *(int32_t *)(v30 + 4) = *v31 + *v3;
        int32_t v33 = *v14; // 0x406b20
        *(int32_t *)(v30 + 8) = *v32 + *(int32_t *)(v9 + 8);
        *v12 = *(int32_t *)(v33 + 20);
        *v13 = v30;
        *(int32_t *)(v11 - 12) = v33;
        function_406b70((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
        goto lab_0x406b3a;
    } else {
        int32_t v34 = *v29; // 0x406aa7
        *(int32_t *)(v34 + 4) = *v3;
        int32_t v35 = *(int32_t *)v34; // 0x406ab1
        *(int32_t *)(v34 + 8) = v35 + *(int32_t *)(v9 + 8);
        int32_t v36 = *v8; // 0x406ab6
        *(int32_t *)(v34 + 20) = v36;
        if (v36 == 0) {
            // 0x406ac3
            *v8 = *v29;
            goto lab_0x406b3a;
        } else {
            // 0x406ac0
            *(int32_t *)(v36 + 16) = v34;
            // 0x406ac3
            *v8 = *v29;
            goto lab_0x406b3a;
        }
    }
  lab_0x406b3a:;
    int32_t v37 = v11 + 24; // 0x406b3a
    __asm_rep_movsd_memcpy((char *)v37, (char *)a1, 16);
    *v12 = a1;
    *v13 = v37;
    *(int32_t *)(a1 + 16) = *(int32_t *)(*v29 + 8);
    *(int32_t *)(a1 + 20) = 256;
    result = function_4067a0((int32_t)&g1001, (int32_t)&g1001);
    return result;
}

// Address range: 0x406b70 - 0x406b91
int32_t function_406b70(int32_t result, int32_t a2, int32_t a3) {
    // 0x406b70
    *(int32_t *)(a2 + 20) = a3;
    *(int32_t *)(a2 + 16) = result;
    if (result != 0) {
        // 0x406b86
        *(int32_t *)(result + 20) = a2;
    }
    if (a3 != 0) {
        // 0x406b8d
        *(int32_t *)(a3 + 16) = a2;
    }
    // 0x406b90
    return result;
}

// Address range: 0x406ba0 - 0x406cb1
int32_t function_406ba0(int32_t a1) {
    // 0x406ba0
    int32_t v1; // bp-20, 0x406ba0
    int32_t v2 = &v1; // 0x406baa
    int32_t * v3 = (int32_t *)(v2 + 24);
    int32_t * v4 = (int32_t *)(v2 - 4);
    int32_t * v5 = (int32_t *)(v2 - 8);
    int32_t v6 = a1; // 0x406baa
    int32_t v7; // 0x406ba0
    int32_t * v8; // 0x406ba0
    int32_t v9; // 0x406bc9
    while (true) {
        int32_t v10 = v6; // 0x406bad
        if (v6 != 0) {
            v7 = v10;
            v8 = (int32_t *)(v7 + 12);
            *v4 = *v8;
            *v5 = *v3;
            v9 = function_406d50((int32_t)&g1001, (int32_t)&g1001);
            if (v9 != 0) {
                // break (via goto) -> 0x406bdc
                goto lab_0x406bdc;
            }
            int32_t v11 = *(int32_t *)(v7 + 20); // 0x406bd7
            while (v11 != 0) {
                // 0x406bc0
                v7 = v11;
                v8 = (int32_t *)(v7 + 12);
                *v4 = *v8;
                *v5 = *v3;
                v9 = function_406d50((int32_t)&g1001, (int32_t)&g1001);
                if (v9 != 0) {
                    // break (via goto) -> 0x406bdc
                    goto lab_0x406bdc;
                }
                // 0x406bd7
                v11 = *(int32_t *)(v7 + 20);
            }
            // 0x406c2f
            function_406cc0();
        } else {
            // 0x406baf
            function_406cc0();
        }
        // 0x406bab
        v6 = g756;
    }
  lab_0x406bdc:
    // 0x406bdc
    *v4 = 24;
    int32_t v12 = function_406470((int32_t)&g1001);
    int32_t * v13 = (int32_t *)(v2 + 16);
    *v13 = v12;
    __asm_rep_movsd_memcpy((char *)v12, (char *)&g737, 6);
    if (v9 != -1) {
        int32_t * v14 = (int32_t *)(v9 + 4); // 0x406c59
        int32_t v15 = *v13; // 0x406c5c
        int32_t * v16 = (int32_t *)v15; // 0x406c60
        *v16 = *v14;
        *(int32_t *)(v15 + 4) = *v3 + *v14;
        *(int32_t *)(v15 + 8) = *(int32_t *)(v7 + 8) + 256 * *v16;
        *v4 = *(int32_t *)(v9 + 20);
        *v5 = v15;
        *(int32_t *)(v2 - 12) = v9;
        function_406b70((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
    } else {
        int32_t v17 = *v13; // 0x406bfd
        *(int32_t *)(v17 + 4) = *v3;
        int32_t v18 = *(int32_t *)v17; // 0x406c0f
        *(int32_t *)(v17 + 8) = 256 * v18 + *(int32_t *)(v7 + 8);
        int32_t v19 = *v8; // 0x406c19
        *(int32_t *)(v17 + 20) = v19;
        if (v19 != 0) {
            // 0x406c23
            *(int32_t *)(v19 + 16) = v17;
        }
        // 0x406c26
        *v8 = *v13;
    }
    // 0x406c87
    *v4 = 8;
    int32_t result = function_406470((int32_t)&g1001); // 0x406c89
    int32_t * v20 = (int32_t *)(4 * *v3 + (int32_t)&g761); // 0x406ca0
    *(int32_t *)result = *v20;
    *(int32_t *)(result + 4) = *v13;
    *v20 = result;
    return result;
}

// Address range: 0x406cc0 - 0x406d15
int32_t function_406cc0(void) {
    int32_t v1 = function_406470(24); // 0x406cca
    __asm_rep_movsd_memcpy((char *)v1, (char *)&g737, 6);
    *(int32_t *)(v1 + 20) = g756;
    int32_t result = function_406d20(0x10000, 0x10000); // 0x406cef
    *(int32_t *)(v1 + 8) = result;
    if (result != 0) {
        // 0x406d03
        *(int32_t *)(result + 16) = v1;
    }
    // 0x406d0b
    g756 = v1;
    return result;
}

// Address range: 0x406d20 - 0x406d4f
int32_t function_406d20(int32_t a1, uint32_t a2) {
    int32_t v1 = a2 + 4;
    int32_t v2 = function_406470(v1 + a1); // 0x406d30
    int32_t v3 = v2 - (v2 + 4) % a2; // 0x406d43
    *(int32_t *)(v3 + a2) = v2;
    return v3 + v1;
}

// Address range: 0x406d50 - 0x406d8e
int32_t function_406d50(uint32_t a1, int32_t a2) {
    // 0x406d50
    if (a2 == 0) {
        // 0x406d59
        return -1;
    }
    // 0x406d60
    if (*(int32_t *)a2 >= a1) {
        // 0x406d59
        return -1;
    }
    int32_t v1 = a2;
    int32_t v2 = *(int32_t *)(v1 + 20); // 0x406d6f
    int32_t v3 = 256; // 0x406d79
    if (v2 != 0) {
        // 0x406d7b
        v3 = *(int32_t *)v2;
    }
    int32_t result = v1; // 0x406d82
    while (v3 - *(int32_t *)(v1 + 4) < a1) {
        // 0x406d84
        result = 0;
        if (v2 == 0) {
            // break -> 0x406d59
            break;
        }
        v1 = v2;
        v2 = *(int32_t *)(v1 + 20);
        v3 = 256;
        if (v2 != 0) {
            // 0x406d7b
            v3 = *(int32_t *)v2;
        }
        // 0x406d7d
        result = v1;
    }
    // 0x406d59
    return result;
}

// Address range: 0x406d90 - 0x406f33
int32_t function_406d90(int32_t a1) {
    int32_t * v1 = (int32_t *)(a1 + 8); // 0x406d98
    int32_t v2 = *v1; // 0x406d98
    if (v2 > 256 || *(int32_t *)(a1 + 4) > 256) {
        // 0x406df9
        int32_t result; // 0x406d90
        return result;
    }
    int32_t v3 = *(int32_t *)(a1 + 16); // 0x406dd3
    int32_t result2 = v3 & -0x10000; // 0x406dda
    if (g756 == 0) {
        // 0x406df9
        return result2;
    }
    int32_t v4 = g756;
    while (*(int32_t *)(v4 + 8) != result2) {
        int32_t v5 = *(int32_t *)(v4 + 20); // 0x406df2
        if (v5 == 0) {
            // 0x406df9
            return result2;
        }
        v4 = v5;
    }
    int32_t * v6 = (int32_t *)(v4 + 12); // 0x406e01
    int32_t v7 = *v6;
    while (*(int32_t *)(v7 + 8) != (v3 & -256)) {
        int32_t v8 = *(int32_t *)(v7 + 20); // 0x406e09
        if (v8 == 0) {
            // 0x406df9
            return result2;
        }
        v7 = v8;
    }
    int32_t * v9 = (int32_t *)(v7 + 12); // 0x406e18
    int32_t v10 = *v9;
    while (*(int32_t *)(v10 + 8) != v3) {
        int32_t v11 = *(int32_t *)(v10 + 20); // 0x406e20
        if (v11 == 0) {
            // 0x406df9
            return result2;
        }
        v10 = v11;
    }
    int32_t v12 = *(int32_t *)(4 * v2 + (int32_t)&g761); // 0x406e37
    int32_t v13 = 0; // 0x406e41
    int32_t v14 = v12; // 0x406e41
    if (*(int32_t *)(v12 + 4) != v7) {
        int32_t v15 = v12;
        int32_t v16 = *(int32_t *)v15; // 0x406e47
        while (v16 != 0) {
            // 0x406e3e
            v13 = v15;
            v14 = v16;
            if (*(int32_t *)(v16 + 4) == v7) {
                goto lab_0x406e56;
            }
            v15 = v16;
            v16 = *(int32_t *)v15;
        }
        // 0x406df9
        return result2;
    }
  lab_0x406e56:;
    int32_t * v17 = (int32_t *)(v10 + 20); // 0x406e56
    int32_t v18 = *v17; // 0x406e56
    int32_t * v19 = (int32_t *)(v10 + 16);
    int32_t v20 = *v19;
    if ((v20 || v18) != 0) {
        if (v20 == 0) {
            // 0x406f12
            *v9 = v18;
        } else {
            // 0x406f0d
            *(int32_t *)(v20 + 20) = v18;
        }
        int32_t v21 = *v17; // 0x406f15
        if (v21 != 0) {
            // 0x406f1c
            *(int32_t *)(v21 + 16) = *v19;
        }
        // 0x406df9
        return function_406570(v10);
    }
    int32_t * v22 = (int32_t *)(v7 + 20); // 0x406e6b
    int32_t v23 = *v22; // 0x406e6b
    int32_t * v24 = (int32_t *)(v7 + 16);
    int32_t v25 = *v24;
    if ((v25 || v23) == 0) {
        // 0x406e78
        function_406f40(result2);
        int32_t * v26 = (int32_t *)(v4 + 16); // 0x406e84
        int32_t v27 = *v26; // 0x406e84
        int32_t * v28 = (int32_t *)(v4 + 20);
        int32_t v29 = *v28;
        if (v27 == 0) {
            // 0x406e95
            g756 = v29;
        } else {
            // 0x406e8e
            *(int32_t *)(v27 + 20) = v29;
        }
        int32_t v30 = *v28; // 0x406e9c
        if (v30 != 0) {
            // 0x406ea2
            *(int32_t *)(v30 + 16) = *v26;
        }
        // 0x406ea8
        function_406570(v4);
    } else {
        if (v25 == 0) {
            // 0x406ebf
            *v6 = v23;
        } else {
            // 0x406eba
            *(int32_t *)(v25 + 20) = v23;
        }
        int32_t v31 = *v22; // 0x406ec2
        if (v31 != 0) {
            // 0x406ec9
            *(int32_t *)(v31 + 16) = *v24;
        }
    }
    int32_t v32 = *(int32_t *)v14;
    if (v13 == 0) {
        // 0x406ee1
        *(int32_t *)(4 * *v1 + (int32_t)&g761) = v32;
    } else {
        // 0x406ed6
        *(int32_t *)v13 = v32;
    }
    // 0x406ef2
    function_406570(v14);
    function_406570(v7);
    // 0x406df9
    return function_406570(v10);
}

// Address range: 0x406f40 - 0x406f51
int32_t function_406f40(int32_t a1) {
    // 0x406f40
    return function_406570(*(int32_t *)(a1 - 4));
}

// Address range: 0x406f60 - 0x406f63
int32_t function_406f60(void) {
    // 0x406f60
    return 0;
}

// Address range: 0x406f70 - 0x406fb8
int32_t function_406f70(int32_t * a1) {
    int32_t v1 = (int32_t)a1;
    int32_t v2 = function_406470(128); // 0x406f7a
    int32_t * v3 = (int32_t *)(v1 + 12); // 0x406f86
    *v3 = v2;
    *(int32_t *)v2 = 0;
    *(int32_t *)(*v3 + 4) = 0;
    int32_t v4 = 8;
    int32_t v5 = v4 + 8; // 0x406f8c
    *(int32_t *)(v4 + *v3) = 0;
    int32_t result = *v3; // 0x406f99
    *(int32_t *)(result + (v4 | 4)) = 0;
    while (v5 < 128) {
        // 0x406f89
        v4 = v5;
        v5 = v4 + 8;
        *(int32_t *)(v4 + *v3) = 0;
        result = *v3;
        *(int32_t *)(result + (v4 | 4)) = 0;
    }
    // 0x406fa2
    *(int32_t *)(v1 + 8) = 15;
    *(int32_t *)(v1 + 4) = 0;
    *a1 = 16;
    return result;
}

// Address range: 0x406fc0 - 0x406ffe
int32_t function_406fc0(void) {
    // 0x406fc0
    g787 = &g780;
    int32_t v1 = &g779; // 0x406fca
    int32_t v2 = &g786; // 0x406fca
    *(int32_t *)v1 = v2;
    v1 += 4;
    *(int32_t *)v2 = 0;
    v2 += 12;
    while (v1 < (int32_t)&g780) {
        // 0x406fd4
        *(int32_t *)v1 = v2;
        v1 += 4;
        *(int32_t *)v2 = 0;
        v2 += 12;
    }
    // 0x406fe9
    function_4067e0(&g780, 0);
    return 1;
}

// Address range: 0x407000 - 0x4070cf
int32_t function_407000(int32_t a1, int32_t a2) {
    int32_t * v1; // 0x407000
    int32_t result; // 0x407000
    if (a2 != 0) {
        int32_t * v2 = (int32_t *)a2;
        int32_t v3 = *v2; // 0x407098
        if (v3 == 0) {
            // 0x407016
            return 0;
        }
        // 0x4070a3
        v1 = v2;
        result = a2;
        if (a1 == 0) {
            // 0x4070ab
            function_406860(NULL, v3);
            *v2 = 0;
            *(int32_t *)g787 = a2;
            g787 += 4;
            return 0;
        }
    } else {
        if (a1 == 0 || g787 == 0x4450b8) {
            // 0x407016
            return 0;
        }
        int32_t v4 = g787 - 4; // 0x40702c
        g787 = v4;
        int32_t v5 = *(int32_t *)v4; // 0x407038
        int32_t * v6 = (int32_t *)v5;
        *v6 = 0;
        v1 = v6;
        result = v5;
    }
    int32_t * v7 = v1;
    g780 = 0;
    g781 = *(int32_t *)(a1 + 4);
    g782 = *(int32_t *)(a1 + 8);
    g783 = *(int32_t *)(a1 + 12);
    g784 = *(int32_t *)(a1 + 16);
    g785 = *(int32_t *)(a1 + 20);
    *v7 = function_406860(&g780, *v7);
    *(int32_t *)(result + 4) = *(int32_t *)(a1 + 24);
    *(int32_t *)(result + 8) = *(int32_t *)(a1 + 28);
    return result;
}

// Address range: 0x4070d0 - 0x4070e8
int32_t function_4070d0(int32_t a1, int32_t a2) {
    // 0x4070d0
    function_406710(a1, a2);
    return 1;
}

// Address range: 0x4070f0 - 0x407103
int32_t function_4070f0(int32_t a1) {
    // 0x4070f0
    function_4069b0(a1);
    return 1;
}

// Address range: 0x407110 - 0x407128
int32_t function_407110(int32_t a1, int32_t a2) {
    // 0x407110
    function_4067e0((int32_t *)a1, a2);
    return 1;
}

// Address range: 0x407130 - 0x407148
int32_t function_407130(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x407130
    return function_408fa4();
}

// Address range: 0x407150 - 0x407170
int32_t function_407150(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5) {
    // 0x407150
    return function_408fca();
}

// Address range: 0x407170 - 0x40718c
int32_t function_407170(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x407170
    return function_40901f();
}

// Address range: 0x407190 - 0x4071e4
int32_t function_407190(void) {
    // 0x407190
    g797 = 0;
    int32_t result; // 0x407190
    if (g87 == 0) {
        // 0x4071a3
        g800 = function_4111a0(0x20d8);
        g801 = function_4111a0(0x20d8);
        int32_t v1 = function_4111a0(0x20d8); // 0x4071cc
        g802 = v1;
        g87 = 1;
        result = v1;
    }
    // 0x4071e3
    return result;
}

// Address range: 0x4071f0 - 0x407905
int32_t function_4071f0(int32_t a1) {
    int32_t v1 = *(int32_t *)(a1 + 4);
    g101 = v1;
    g102 = *(int32_t *)(a1 + 8);
    int32_t v2 = *(int32_t *)(a1 + 12);
    g103 = v2;
    int32_t v3 = *(int32_t *)(a1 + 16); // 0x407212
    g104 = v3;
    int32_t v4 = *(int32_t *)(a1 + 20); // 0x40721a
    g105 = v4;
    int32_t v5 = *(int32_t *)(a1 + 24); // 0x407223
    g106 = v5;
    int32_t v6 = *(int32_t *)(a1 + 28); // 0x40722c
    g107 = v6;
    int32_t v7 = *(int32_t *)(a1 + 32); // 0x407234
    g108 = v7;
    int32_t v8 = *(int32_t *)(a1 + 36); // 0x40723d
    g109 = v8;
    int32_t v9 = *(int32_t *)(a1 + 40); // 0x407246
    g110 = v9;
    g111 = *(int32_t *)(a1 + 44);
    g112 = *(int32_t *)(a1 + 48);
    g796 = *(int32_t *)(a1 + 52);
    g798 = g928;
    int32_t v10; // 0x4071f0
    int32_t v11; // 0x4071f0
    if (v1 > v2) {
        // 0x407282
        g799 = v2;
        g803 = v1;
        v10 = v2;
        v11 = v1;
    } else {
        // 0x407294
        g803 = v2;
        g799 = v1;
        v10 = v1;
        v11 = v2;
    }
    // 0x4072aa
    int32_t v12; // 0x4071f0
    int32_t v13; // 0x4071f0
    if (v4 > v11) {
        // 0x4072bc
        g803 = v4;
        v12 = v10;
        v13 = v4;
    } else {
        // 0x4072c3
        v12 = v10;
        v13 = v11;
        if (v10 > v4) {
            // 0x4072cb
            g799 = v4;
            v12 = v4;
            v13 = v11;
        }
    }
    int32_t v14 = v5; // 0x4072db
    if (v14 > v14) {
        // 0x4072dd
        g106 = v14;
        g102 = v14;
        g105 = v1;
        g112 = v7;
        g108 = v7;
        g101 = v1;
        g111 = v6;
        g107 = v6;
    }
    // 0x407332
    int32_t v15; // 0x4071f0
    int32_t v16; // 0x4071f0
    if (v14 > v3) {
        // 0x40733f
        g104 = v14;
        g102 = v3;
        g103 = v1;
        g110 = v7;
        g108 = v9;
        g101 = v2;
        g109 = v6;
        g107 = v8;
        v15 = v14;
        v16 = v3;
    } else {
        // 0x407396
        v15 = v14;
        v16 = v14;
        if (v14 < v3) {
            // 0x4073a3
            g104 = v14;
            g106 = v3;
            g103 = v1;
            g110 = v7;
            g112 = v9;
            g105 = v2;
            g109 = v6;
            g111 = v8;
            v15 = v3;
            v16 = v14;
        }
    }
    // 0x4073f8
    if (v16 < g919 || v15 > g924 || v13 > g927 || v12 < g926) {
        // 0x407405
        return function_407910(a1);
    }
    // 0x407464
    function_456000();
    function_407130((int32_t)g114, (int32_t)g113, g796, *(int32_t *)(a1 + 56));
    int32_t v17 = function_407f40(g101, g102, g105, g106); // 0x4074a4
    int32_t v18 = function_407f40(g101, g102, g103, g104); // 0x4074c9
    int32_t v19; // bp-16, 0x4071f0
    int32_t v20 = &v19; // 0x4074ce
    g789 = g102;
    g788 = g101;
    g790 = g103;
    g791 = g104;
    g792 = g107;
    g793 = g108;
    g794 = g109;
    g795 = g110;
    if (v17 > v18) {
        // 0x407533
        function_4561c0();
        g788 = g101;
        g789 = g102;
        g790 = g105;
        g791 = g106;
        g792 = g107;
        g793 = g108;
        g794 = g111;
        g795 = g112;
        function_456180();
        g788 = g103;
        g789 = g104;
        g790 = g105;
        g791 = g106;
        g792 = g109;
        g793 = g110;
        g794 = g111;
        g795 = g112;
        function_4561c0();
        g798 += *(int32_t *)g800 * (int32_t)g925;
        int32_t v21 = 0; // 0x407635
        if (*(int32_t *)(g800 + 4) >= 1) {
            int32_t v22 = 0; // 0x4071f0
            int32_t v23 = v22 + g800; // 0x407645
            int32_t v24 = g801 + v22; // 0x407647
            int32_t v25 = *(int32_t *)(v24 + 12); // 0x40764f
            *(int32_t *)(v20 - 4) = v23 + 8;
            int32_t v26 = *(int32_t *)(v23 + 16); // 0x407653
            int32_t v27 = 1; // 0x40765b
            *(int32_t *)(v20 - 8) = v25 >> 8;
            *(int32_t *)(v20 - 12) = *(int32_t *)(v24 + 8) & 0xffff | 0x1000000 * v25;
            *(int32_t *)(v20 - 16) = *(int32_t *)(v24 + 16) + -1 - v26;
            *(int32_t *)(v20 - 20) = v26 + 1 + g798;
            function_407150((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
            g798 += (int32_t)g925;
            int32_t v28 = v27; // 0x407697
            v22 += 12;
            while (*(int32_t *)(g800 + 4) > v27) {
                // 0x407639
                v23 = v22 + g800;
                v24 = g801 + v22;
                v25 = *(int32_t *)(v24 + 12);
                *(int32_t *)(v20 - 4) = v23 + 8;
                v26 = *(int32_t *)(v23 + 16);
                v27 = v28 + 1;
                *(int32_t *)(v20 - 8) = v25 >> 8;
                *(int32_t *)(v20 - 12) = *(int32_t *)(v24 + 8) & 0xffff | 0x1000000 * v25;
                *(int32_t *)(v20 - 16) = *(int32_t *)(v24 + 16) + -1 - v26;
                *(int32_t *)(v20 - 20) = v26 + 1 + g798;
                function_407150((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
                g798 += (int32_t)g925;
                v28 = v27;
                v22 += 12;
            }
            // 0x407699
            v21 = 12 * v27;
        }
        // 0x407699
        if (*(int32_t *)(g802 + 4) < 1) {
            // 0x407719
            return g802;
        }
        int32_t v29 = v21; // 0x4076ae
        int32_t v30 = 0; // 0x4076ae
        int32_t v31 = 0; // 0x4076ae
        int32_t v32 = v30 + g802; // 0x4076c1
        int32_t v33 = g801 + v29; // 0x4076c3
        int32_t v34 = *(int32_t *)(v33 + 12); // 0x4076cb
        *(int32_t *)(v20 - 4) = v32 + 8;
        int32_t v35 = *(int32_t *)(v32 + 16); // 0x4076cf
        v31++;
        *(int32_t *)(v20 - 8) = v34 >> 8;
        *(int32_t *)(v20 - 12) = *(int32_t *)(v33 + 8) & 0xffff | 0x1000000 * v34;
        *(int32_t *)(v20 - 16) = *(int32_t *)(v33 + 16) + -1 - v35;
        *(int32_t *)(v20 - 20) = v35 + 1 + g798;
        function_407150((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
        g798 += (int32_t)g925;
        v29 += 12;
        v30 += 12;
        while (*(int32_t *)(g802 + 4) > v31) {
            // 0x4076b5
            v32 = v30 + g802;
            v33 = g801 + v29;
            v34 = *(int32_t *)(v33 + 12);
            *(int32_t *)(v20 - 4) = v32 + 8;
            v35 = *(int32_t *)(v32 + 16);
            v31++;
            *(int32_t *)(v20 - 8) = v34 >> 8;
            *(int32_t *)(v20 - 12) = *(int32_t *)(v33 + 8) & 0xffff | 0x1000000 * v34;
            *(int32_t *)(v20 - 16) = *(int32_t *)(v33 + 16) + -1 - v35;
            *(int32_t *)(v20 - 20) = v35 + 1 + g798;
            function_407150((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
            g798 += (int32_t)g925;
            v29 += 12;
            v30 += 12;
        }
        // 0x407719
        return g802;
    }
    // 0x40771e
    function_456180();
    g788 = g101;
    g789 = g102;
    g790 = g105;
    g791 = g106;
    g792 = g107;
    g793 = g108;
    g794 = g111;
    g795 = g112;
    function_4561c0();
    g788 = g103;
    g789 = g104;
    g790 = g105;
    g791 = g106;
    g792 = g109;
    g793 = g110;
    g794 = g111;
    g795 = g112;
    function_456180();
    g798 += *(int32_t *)g801 * (int32_t)g925;
    int32_t v36 = 0; // 0x407822
    if (*(int32_t *)(g800 + 4) >= 1) {
        int32_t v37 = 0; // 0x4071f0
        int32_t v38 = v37 + g801; // 0x407830
        int32_t v39 = v37 + g800; // 0x407832
        int32_t v40 = *(int32_t *)(v39 + 12); // 0x40783a
        *(int32_t *)(v20 - 4) = v38 + 8;
        int32_t v41 = *(int32_t *)(v38 + 16); // 0x40783e
        int32_t v42 = 1; // 0x407846
        *(int32_t *)(v20 - 8) = v40 >> 8;
        *(int32_t *)(v20 - 12) = *(int32_t *)(v39 + 8) & 0xffff | 0x1000000 * v40;
        *(int32_t *)(v20 - 16) = *(int32_t *)(v39 + 16) + -1 - v41;
        *(int32_t *)(v20 - 20) = v41 + 1 + g798;
        function_407150((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
        g798 += (int32_t)g925;
        while (*(int32_t *)(g800 + 4) > v42) {
            // 0x407824
            v37 += 12;
            v38 = v37 + g801;
            v39 = v37 + g800;
            v40 = *(int32_t *)(v39 + 12);
            *(int32_t *)(v20 - 4) = v38 + 8;
            v41 = *(int32_t *)(v38 + 16);
            v42++;
            *(int32_t *)(v20 - 8) = v40 >> 8;
            *(int32_t *)(v20 - 12) = *(int32_t *)(v39 + 8) & 0xffff | 0x1000000 * v40;
            *(int32_t *)(v20 - 16) = *(int32_t *)(v39 + 16) + -1 - v41;
            *(int32_t *)(v20 - 20) = v41 + 1 + g798;
            function_407150((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
            g798 += (int32_t)g925;
        }
        // 0x407884
        v36 = 12 * v42;
    }
    // 0x407884
    if (*(int32_t *)(g802 + 4) < 1) {
        // 0x407719
        return g802;
    }
    int32_t v43 = 0; // 0x407895
    int32_t v44 = 0; // 0x407895
    int32_t v45 = v36; // 0x407895
    int32_t v46 = g801 + v45; // 0x4078a8
    int32_t v47 = v44 + g802; // 0x4078aa
    int32_t v48 = *(int32_t *)(v47 + 12); // 0x4078b2
    *(int32_t *)(v20 - 4) = v46 + 8;
    int32_t v49 = *(int32_t *)(v46 + 16); // 0x4078b6
    v43++;
    *(int32_t *)(v20 - 8) = v48 >> 8;
    *(int32_t *)(v20 - 12) = *(int32_t *)(v47 + 8) & 0xffff | 0x1000000 * v48;
    *(int32_t *)(v20 - 16) = *(int32_t *)(v47 + 16) + -1 - v49;
    *(int32_t *)(v20 - 20) = v49 + 1 + g798;
    function_407150((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
    g798 += (int32_t)g925;
    v44 += 12;
    v45 += 12;
    while (*(int32_t *)(g802 + 4) > v43) {
        // 0x40789c
        v46 = g801 + v45;
        v47 = v44 + g802;
        v48 = *(int32_t *)(v47 + 12);
        *(int32_t *)(v20 - 4) = v46 + 8;
        v49 = *(int32_t *)(v46 + 16);
        v43++;
        *(int32_t *)(v20 - 8) = v48 >> 8;
        *(int32_t *)(v20 - 12) = *(int32_t *)(v47 + 8) & 0xffff | 0x1000000 * v48;
        *(int32_t *)(v20 - 16) = *(int32_t *)(v47 + 16) + -1 - v49;
        *(int32_t *)(v20 - 20) = v49 + 1 + g798;
        function_407150((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
        g798 += (int32_t)g925;
        v44 += 12;
        v45 += 12;
    }
    // 0x407719
    return g802;
}

// Address range: 0x407910 - 0x407f31
int32_t function_407910(int32_t a1) {
    // 0x407910
    if (g106 < g919) {
        // 0x407ca9
        return g919;
    }
    // 0x407925
    if (g102 > g924) {
        // 0x407ca9
        return g924;
    }
    // 0x407936
    if (g799 > g927) {
        // 0x407ca9
        return g927;
    }
    // 0x407947
    if (g803 < g926) {
        // 0x407ca9
        return g926;
    }
    // 0x407958
    int32_t v1; // bp-16, 0x407910
    int32_t v2 = &v1; // 0x40791e
    function_456000();
    int32_t v3 = *(int32_t *)(a1 + 56); // 0x407967
    function_407130((int32_t)g114, (int32_t)g113, g796, v3);
    int32_t v4 = function_407f40(g103, g104, g105, g106); // 0x40799c
    int32_t v5 = function_407f40(g101, g102, g103, g104); // 0x4079c1
    g805 = g102;
    g804 = g101;
    g806 = g103;
    g807 = g104;
    g808 = g107;
    g809 = g108;
    g810 = g109;
    g811 = g110;
    if (v4 > v5) {
        // 0x407a2b
        function_456640();
        g804 = g101;
        g805 = g102;
        g806 = g105;
        g807 = g106;
        g808 = g107;
        g809 = g108;
        g810 = g111;
        g811 = g112;
        function_456520();
        g804 = g103;
        g805 = g104;
        g806 = g105;
        g807 = g106;
        g808 = g109;
        g809 = g110;
        g810 = g111;
        g811 = g112;
        function_456640();
        g798 += *(int32_t *)g800 * (int32_t)g925;
        int32_t v6 = 0; // 0x407b2d
        if (*(int32_t *)(g800 + 4) >= 1) {
            int32_t * v7 = (int32_t *)(v2 - 4);
            int32_t * v8 = (int32_t *)(v2 - 8);
            int32_t * v9 = (int32_t *)(v2 - 12);
            int32_t * v10 = (int32_t *)(v2 - 16);
            int32_t v11 = 0;
            int32_t v12 = v11 + g800; // 0x407b3b
            int32_t v13 = *(int32_t *)(v12 + 16); // 0x407b3d
            int32_t v14; // 0x407b4e
            int32_t v15; // 0x407b50
            int32_t v16; // 0x407b90
            int32_t v17; // 0x407b93
            if (g923 > v13) {
                // 0x407b48
                v14 = g801 + v11;
                v15 = *(int32_t *)(v14 + 12);
                *v7 = v15 >> 8;
                *v8 = *(int32_t *)(v14 + 8) & 0xffff | 0x1000000 * v15;
                *v9 = *(int32_t *)(v14 + 16) - g923;
                *v10 = g798 + g923;
                function_407170((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
            } else {
                // 0x407b87
                v16 = g801 + v11;
                *v7 = v12 + 8;
                v17 = *(int32_t *)(v16 + 12);
                *v8 = v17 >> 8;
                *v9 = *(int32_t *)(v16 + 8) & 0xffff | 0x1000000 * v17;
                *v10 = *(int32_t *)(v16 + 16) + -1 - v13;
                *(int32_t *)(v2 - 20) = v13 + 1 + g798;
                function_407150((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
            }
            int32_t v18 = 1; // 0x407bca
            g798 += (int32_t)g925;
            int32_t v19 = v18; // 0x407bd9
            int32_t v20 = v11 + 12; // 0x407bd9
            while (*(int32_t *)(g800 + 4) > v18) {
                // 0x407b35
                v11 = v20;
                v12 = v11 + g800;
                v13 = *(int32_t *)(v12 + 16);
                if (g923 > v13) {
                    // 0x407b48
                    v14 = g801 + v11;
                    v15 = *(int32_t *)(v14 + 12);
                    *v7 = v15 >> 8;
                    *v8 = *(int32_t *)(v14 + 8) & 0xffff | 0x1000000 * v15;
                    *v9 = *(int32_t *)(v14 + 16) - g923;
                    *v10 = g798 + g923;
                    function_407170((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
                } else {
                    // 0x407b87
                    v16 = g801 + v11;
                    *v7 = v12 + 8;
                    v17 = *(int32_t *)(v16 + 12);
                    *v8 = v17 >> 8;
                    *v9 = *(int32_t *)(v16 + 8) & 0xffff | 0x1000000 * v17;
                    *v10 = *(int32_t *)(v16 + 16) + -1 - v13;
                    *(int32_t *)(v2 - 20) = v13 + 1 + g798;
                    function_407150((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
                }
                // 0x407bc2
                v18 = v19 + 1;
                g798 += (int32_t)g925;
                v19 = v18;
                v20 = v11 + 12;
            }
            // 0x407bdf
            v6 = 12 * v18;
        }
        // 0x407bdf
        if (*(int32_t *)(g802 + 4) < 1) {
            // 0x407ca9
            return g802;
        }
        int32_t * v21 = (int32_t *)(v2 - 4);
        int32_t * v22 = (int32_t *)(v2 - 8);
        int32_t * v23 = (int32_t *)(v2 - 12);
        int32_t * v24 = (int32_t *)(v2 - 16);
        int32_t v25 = 0; // 0x407bf4
        int32_t v26 = 0; // 0x407bf4
        int32_t v27 = v25 + g802; // 0x407c01
        int32_t v28 = *(int32_t *)(v27 + 16); // 0x407c03
        int32_t v29; // 0x407c14
        int32_t v30; // 0x407c16
        int32_t v31; // 0x407c56
        int32_t v32; // 0x407c59
        if (g923 > v28) {
            // 0x407c0e
            v29 = g801 + v6;
            v30 = *(int32_t *)(v29 + 12);
            *v21 = v30 >> 8;
            *v22 = *(int32_t *)(v29 + 8) & 0xffff | 0x1000000 * v30;
            *v23 = *(int32_t *)(v29 + 16) - g923;
            *v24 = g798 + g923;
            function_407170((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
        } else {
            // 0x407c4d
            v31 = g801 + v6;
            *v21 = v27 + 8;
            v32 = *(int32_t *)(v31 + 12);
            *v22 = v32 >> 8;
            *v23 = *(int32_t *)(v31 + 8) & 0xffff | 0x1000000 * v32;
            *v24 = *(int32_t *)(v31 + 16) + -1 - v28;
            *(int32_t *)(v2 - 20) = v28 + 1 + g798;
            function_407150((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
        }
        // 0x407c89
        g798 += (int32_t)g925;
        v26++;
        int32_t v33 = v6 + 12; // 0x407ca3
        v25 += 12;
        while (*(int32_t *)(g802 + 4) > v26) {
            int32_t v34 = v33;
            v27 = v25 + g802;
            v28 = *(int32_t *)(v27 + 16);
            if (g923 > v28) {
                // 0x407c0e
                v29 = g801 + v34;
                v30 = *(int32_t *)(v29 + 12);
                *v21 = v30 >> 8;
                *v22 = *(int32_t *)(v29 + 8) & 0xffff | 0x1000000 * v30;
                *v23 = *(int32_t *)(v29 + 16) - g923;
                *v24 = g798 + g923;
                function_407170((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
            } else {
                // 0x407c4d
                v31 = g801 + v34;
                *v21 = v27 + 8;
                v32 = *(int32_t *)(v31 + 12);
                *v22 = v32 >> 8;
                *v23 = *(int32_t *)(v31 + 8) & 0xffff | 0x1000000 * v32;
                *v24 = *(int32_t *)(v31 + 16) + -1 - v28;
                *(int32_t *)(v2 - 20) = v28 + 1 + g798;
                function_407150((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
            }
            // 0x407c89
            g798 += (int32_t)g925;
            v26++;
            v33 = v34 + 12;
            v25 += 12;
        }
        // 0x407ca9
        return g802;
    }
    // 0x407cae
    function_456520();
    g804 = g101;
    g805 = g102;
    g806 = g105;
    g807 = g106;
    g808 = g107;
    g809 = g108;
    g810 = g111;
    g811 = g112;
    function_456640();
    g804 = g103;
    g805 = g104;
    g806 = g105;
    g807 = g106;
    g808 = g109;
    g809 = g110;
    g810 = g111;
    g811 = g112;
    function_456520();
    g798 += *(int32_t *)g801 * (int32_t)g925;
    int32_t v35 = 0; // 0x407db2
    if (*(int32_t *)(g800 + 4) >= 1) {
        int32_t * v36 = (int32_t *)(v2 - 4);
        int32_t * v37 = (int32_t *)(v2 - 8);
        int32_t * v38 = (int32_t *)(v2 - 12);
        int32_t * v39 = (int32_t *)(v2 - 16);
        int32_t v40 = 0;
        int32_t v41 = v40 + g801; // 0x407dbe
        int32_t v42 = *(int32_t *)(v41 + 16); // 0x407dc0
        int32_t v43; // 0x407dd1
        int32_t v44; // 0x407dd3
        int32_t v45; // 0x407e13
        int32_t v46; // 0x407e16
        if (g923 > v42) {
            // 0x407dcb
            v43 = v40 + g800;
            v44 = *(int32_t *)(v43 + 12);
            *v36 = v44 >> 8;
            *v37 = *(int32_t *)(v43 + 8) & 0xffff | 0x1000000 * v44;
            *v38 = *(int32_t *)(v43 + 16) - g923;
            *v39 = g798 + g923;
            function_407170((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
        } else {
            // 0x407e0a
            v45 = v40 + g800;
            *v36 = v41 + 8;
            v46 = *(int32_t *)(v45 + 12);
            *v37 = v46 >> 8;
            *v38 = *(int32_t *)(v45 + 8) & 0xffff | 0x1000000 * v46;
            *v39 = *(int32_t *)(v45 + 16) + -1 - v42;
            *(int32_t *)(v2 - 20) = v42 + 1 + g798;
            function_407150((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
        }
        int32_t v47 = 1; // 0x407e4d
        g798 += (int32_t)g925;
        while (*(int32_t *)(g800 + 4) > v47) {
            // 0x407e45
            v40 += 12;
            v41 = v40 + g801;
            v42 = *(int32_t *)(v41 + 16);
            if (g923 > v42) {
                // 0x407dcb
                v43 = v40 + g800;
                v44 = *(int32_t *)(v43 + 12);
                *v36 = v44 >> 8;
                *v37 = *(int32_t *)(v43 + 8) & 0xffff | 0x1000000 * v44;
                *v38 = *(int32_t *)(v43 + 16) - g923;
                *v39 = g798 + g923;
                function_407170((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
            } else {
                // 0x407e0a
                v45 = v40 + g800;
                *v36 = v41 + 8;
                v46 = *(int32_t *)(v45 + 12);
                *v37 = v46 >> 8;
                *v38 = *(int32_t *)(v45 + 8) & 0xffff | 0x1000000 * v46;
                *v39 = *(int32_t *)(v45 + 16) + -1 - v42;
                *(int32_t *)(v2 - 20) = v42 + 1 + g798;
                function_407150((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
            }
            // 0x407e45
            v47++;
            g798 += (int32_t)g925;
        }
        // 0x407e62
        v35 = 12 * v47;
    }
    // 0x407e62
    if (*(int32_t *)(g802 + 4) < 1) {
        // 0x407ca9
        return g802;
    }
    int32_t * v48 = (int32_t *)(v2 - 4);
    int32_t * v49 = (int32_t *)(v2 - 8);
    int32_t * v50 = (int32_t *)(v2 - 12);
    int32_t * v51 = (int32_t *)(v2 - 16);
    int32_t v52 = 0; // 0x407e77
    int32_t v53 = v35; // 0x407e77
    int32_t v54 = 0;
    int32_t v55 = g801 + v53; // 0x407e84
    int32_t v56 = *(int32_t *)(v55 + 16); // 0x407e86
    int32_t v57; // 0x407e97
    int32_t v58; // 0x407e99
    int32_t v59; // 0x407ed9
    int32_t v60; // 0x407edc
    if (g923 > v56) {
        // 0x407e91
        v57 = v54 + g802;
        v58 = *(int32_t *)(v57 + 12);
        *v48 = v58 >> 8;
        *v49 = *(int32_t *)(v57 + 8) & 0xffff | 0x1000000 * v58;
        *v50 = *(int32_t *)(v57 + 16) - g923;
        *v51 = g798 + g923;
        function_407170((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
    } else {
        // 0x407ed0
        v59 = v54 + g802;
        *v48 = v55 + 8;
        v60 = *(int32_t *)(v59 + 12);
        *v49 = v60 >> 8;
        *v50 = *(int32_t *)(v59 + 8) & 0xffff | 0x1000000 * v60;
        *v51 = *(int32_t *)(v59 + 16) + -1 - v56;
        *(int32_t *)(v2 - 20) = v56 + 1 + g798;
        function_407150((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
    }
    // 0x407f0c
    g798 += (int32_t)g925;
    v52++;
    int32_t v61 = v54 + 12; // 0x407f26
    v53 += 12;
    while (*(int32_t *)(g802 + 4) > v52) {
        // 0x407e7e
        v54 = v61;
        v55 = g801 + v53;
        v56 = *(int32_t *)(v55 + 16);
        if (g923 > v56) {
            // 0x407e91
            v57 = v54 + g802;
            v58 = *(int32_t *)(v57 + 12);
            *v48 = v58 >> 8;
            *v49 = *(int32_t *)(v57 + 8) & 0xffff | 0x1000000 * v58;
            *v50 = *(int32_t *)(v57 + 16) - g923;
            *v51 = g798 + g923;
            function_407170((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
        } else {
            // 0x407ed0
            v59 = v54 + g802;
            *v48 = v55 + 8;
            v60 = *(int32_t *)(v59 + 12);
            *v49 = v60 >> 8;
            *v50 = *(int32_t *)(v59 + 8) & 0xffff | 0x1000000 * v60;
            *v51 = *(int32_t *)(v59 + 16) + -1 - v56;
            *(int32_t *)(v2 - 20) = v56 + 1 + g798;
            function_407150((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
        }
        // 0x407f0c
        g798 += (int32_t)g925;
        v52++;
        v61 = v54 + 12;
        v53 += 12;
    }
    // 0x407ca9
    return g802;
}

// Address range: 0x407f40 - 0x407f75
int32_t function_407f40(uint32_t a1, int32_t a2, uint32_t a3, int32_t a4) {
    int32_t result; // 0x407f40
    if (a2 != a4) {
        int32_t v1 = 256 * (a1 - a3); // 0x407f6d
        result = (0x100000000 * (int64_t)(v1 >> 31) | (int64_t)v1) / (int64_t)(a2 - a4);
    } else {
        // 0x407f4d
        result = -0x7fff0000;
        if (a1 <= a3) {
            // 0x407f5c
            return 0x7fff0000;
        }
    }
    // 0x407f5c
    return result;
}

// Address range: 0x407f80 - 0x407f94
int32_t function_407f80(int32_t a1, int32_t a2, int32_t a3) {
    // 0x407f80
    return function_4090b8();
}

// Address range: 0x407fa0 - 0x407fc0
int32_t function_407fa0(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5) {
    // 0x407fa0
    return function_4090d8();
}

// Address range: 0x407fc0 - 0x407fdc
int32_t function_407fc0(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x407fc0
    return function_40914e();
}

// Address range: 0x407fe0 - 0x408034
int32_t function_407fe0(void) {
    // 0x407fe0
    g821 = 0;
    int32_t result; // 0x407fe0
    if (g88 == 0) {
        // 0x407ff3
        g824 = function_4111a0(0x20d8);
        g825 = function_4111a0(0x20d8);
        int32_t v1 = function_4111a0(0x20d8); // 0x40801c
        g826 = v1;
        g88 = 1;
        result = v1;
    }
    // 0x408033
    return result;
}

// Address range: 0x408040 - 0x40874d
int32_t function_408040(int32_t * a1) {
    int32_t v1 = (int32_t)a1;
    int32_t v2 = *(int32_t *)(v1 + 4);
    g101 = v2;
    g102 = *(int32_t *)(v1 + 8);
    int32_t v3 = *(int32_t *)(v1 + 12);
    g103 = v3;
    int32_t v4 = *(int32_t *)(v1 + 16); // 0x408062
    g104 = v4;
    int32_t v5 = *(int32_t *)(v1 + 20);
    g105 = v5;
    int32_t v6 = *(int32_t *)(v1 + 24); // 0x408073
    g106 = v6;
    int32_t v7 = *(int32_t *)(v1 + 28); // 0x40807c
    g107 = v7;
    int32_t v8 = *(int32_t *)(v1 + 32); // 0x408084
    g108 = v8;
    int32_t v9 = *(int32_t *)(v1 + 36); // 0x40808d
    g109 = v9;
    int32_t v10 = *(int32_t *)(v1 + 40); // 0x408096
    g110 = v10;
    g111 = *(int32_t *)(v1 + 44);
    g112 = *(int32_t *)(v1 + 48);
    g820 = *(int32_t *)(v1 + 52);
    g822 = g928;
    int32_t v11 = v3 < v2 ? v3 : v2;
    int32_t v12 = v3 < v2 ? v2 : v3;
    g827 = v12;
    g823 = v11;
    int32_t v13; // 0x408040
    int32_t v14; // 0x408040
    if (v5 > v12) {
        // 0x408108
        g827 = v5;
        v13 = v11;
        v14 = v5;
    } else {
        // 0x40810f
        v13 = v11;
        v14 = v12;
        if (v11 > v5) {
            // 0x408117
            g823 = v5;
            v13 = v5;
            v14 = v12;
        }
    }
    int32_t v15 = v6; // 0x408127
    if (v15 > v15) {
        // 0x408129
        g106 = v15;
        g102 = v15;
        g105 = v2;
        g112 = v8;
        g108 = v8;
        g101 = v2;
        g111 = v7;
        g107 = v7;
    }
    // 0x40817e
    int32_t v16; // 0x408040
    int32_t v17; // 0x408040
    if (v15 > v4) {
        // 0x40818b
        g104 = v15;
        g102 = v4;
        g103 = v2;
        g110 = v8;
        g108 = v10;
        g101 = v3;
        g109 = v7;
        g107 = v9;
        v16 = v15;
        v17 = v4;
    } else {
        // 0x4081e2
        v16 = v15;
        v17 = v15;
        if (v15 < v4) {
            // 0x4081ef
            g104 = v15;
            g106 = v4;
            g103 = v2;
            g110 = v8;
            g112 = v10;
            g105 = v3;
            g109 = v7;
            g111 = v9;
            v16 = v4;
            v17 = v15;
        }
    }
    // 0x408244
    if (v17 < g919 || v16 > g924 || v14 > g927 || g926 > v13) {
        // 0x408251
        int32_t v18; // 0x408040
        return function_408750(v1, v18, v18, v18, v18);
    }
    // 0x4082b0
    function_456000();
    function_407f80((int32_t)g114, (int32_t)g113, g820);
    int32_t v19 = function_408d70(g101, g102, g105, g106); // 0x4082ec
    int32_t v20 = function_408d70(g101, g102, g103, g104); // 0x408311
    int32_t v21; // bp-16, 0x408040
    int32_t v22 = &v21; // 0x408316
    g813 = g102;
    g812 = g101;
    g814 = g103;
    g815 = g104;
    g816 = g107;
    g817 = g108;
    g818 = g109;
    g819 = g110;
    if (v19 > v20) {
        // 0x40837b
        function_4561c0();
        g812 = g101;
        g813 = g102;
        g814 = g105;
        g815 = g106;
        g816 = g107;
        g817 = g108;
        g818 = g111;
        g819 = g112;
        function_456180();
        g812 = g103;
        g813 = g104;
        g814 = g105;
        g815 = g106;
        g816 = g109;
        g817 = g110;
        g818 = g111;
        g819 = g112;
        function_4561c0();
        g822 += *(int32_t *)g824 * (int32_t)g925;
        int32_t v23 = 0; // 0x40847d
        if (*(int32_t *)(g824 + 4) >= 1) {
            int32_t v24 = 0; // 0x408040
            int32_t v25 = v24 + g824; // 0x40848d
            int32_t v26 = g825 + v24; // 0x40848f
            int32_t v27 = *(int32_t *)(v26 + 12); // 0x408497
            *(int32_t *)(v22 - 4) = v25 + 8;
            int32_t v28 = *(int32_t *)(v25 + 16); // 0x40849b
            int32_t v29 = 1; // 0x4084a3
            *(int32_t *)(v22 - 8) = v27 >> 8;
            *(int32_t *)(v22 - 12) = *(int32_t *)(v26 + 8) & 0xffff | 0x1000000 * v27;
            *(int32_t *)(v22 - 16) = *(int32_t *)(v26 + 16) + -1 - v28;
            *(int32_t *)(v22 - 20) = v28 + 1 + g822;
            function_407fa0((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
            g822 += (int32_t)g925;
            int32_t v30 = v29; // 0x4084df
            v24 += 12;
            while (*(int32_t *)(g824 + 4) > v29) {
                // 0x408481
                v25 = v24 + g824;
                v26 = g825 + v24;
                v27 = *(int32_t *)(v26 + 12);
                *(int32_t *)(v22 - 4) = v25 + 8;
                v28 = *(int32_t *)(v25 + 16);
                v29 = v30 + 1;
                *(int32_t *)(v22 - 8) = v27 >> 8;
                *(int32_t *)(v22 - 12) = *(int32_t *)(v26 + 8) & 0xffff | 0x1000000 * v27;
                *(int32_t *)(v22 - 16) = *(int32_t *)(v26 + 16) + -1 - v28;
                *(int32_t *)(v22 - 20) = v28 + 1 + g822;
                function_407fa0((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
                g822 += (int32_t)g925;
                v30 = v29;
                v24 += 12;
            }
            // 0x4084e1
            v23 = 12 * v29;
        }
        // 0x4084e1
        if (*(int32_t *)(g826 + 4) < 1) {
            // 0x408561
            return g826;
        }
        int32_t v31 = v23; // 0x4084f6
        int32_t v32 = 0; // 0x4084f6
        int32_t v33 = 0; // 0x4084f6
        int32_t v34 = v32 + g826; // 0x408509
        int32_t v35 = g825 + v31; // 0x40850b
        int32_t v36 = *(int32_t *)(v35 + 12); // 0x408513
        *(int32_t *)(v22 - 4) = v34 + 8;
        int32_t v37 = *(int32_t *)(v34 + 16); // 0x408517
        v33++;
        *(int32_t *)(v22 - 8) = v36 >> 8;
        *(int32_t *)(v22 - 12) = *(int32_t *)(v35 + 8) & 0xffff | 0x1000000 * v36;
        *(int32_t *)(v22 - 16) = *(int32_t *)(v35 + 16) + -1 - v37;
        *(int32_t *)(v22 - 20) = v37 + 1 + g822;
        function_407fa0((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
        g822 += (int32_t)g925;
        v31 += 12;
        v32 += 12;
        while (*(int32_t *)(g826 + 4) > v33) {
            // 0x4084fd
            v34 = v32 + g826;
            v35 = g825 + v31;
            v36 = *(int32_t *)(v35 + 12);
            *(int32_t *)(v22 - 4) = v34 + 8;
            v37 = *(int32_t *)(v34 + 16);
            v33++;
            *(int32_t *)(v22 - 8) = v36 >> 8;
            *(int32_t *)(v22 - 12) = *(int32_t *)(v35 + 8) & 0xffff | 0x1000000 * v36;
            *(int32_t *)(v22 - 16) = *(int32_t *)(v35 + 16) + -1 - v37;
            *(int32_t *)(v22 - 20) = v37 + 1 + g822;
            function_407fa0((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
            g822 += (int32_t)g925;
            v31 += 12;
            v32 += 12;
        }
        // 0x408561
        return g826;
    }
    // 0x408566
    function_456180();
    g812 = g101;
    g813 = g102;
    g814 = g105;
    g815 = g106;
    g816 = g107;
    g817 = g108;
    g818 = g111;
    g819 = g112;
    function_4561c0();
    g812 = g103;
    g813 = g104;
    g814 = g105;
    g815 = g106;
    g816 = g109;
    g817 = g110;
    g818 = g111;
    g819 = g112;
    function_456180();
    g822 += *(int32_t *)g825 * (int32_t)g925;
    int32_t v38 = 0; // 0x40866a
    if (*(int32_t *)(g824 + 4) >= 1) {
        int32_t v39 = 0; // 0x408040
        int32_t v40 = v39 + g825; // 0x408678
        int32_t v41 = v39 + g824; // 0x40867a
        int32_t v42 = *(int32_t *)(v41 + 12); // 0x408682
        *(int32_t *)(v22 - 4) = v40 + 8;
        int32_t v43 = *(int32_t *)(v40 + 16); // 0x408686
        int32_t v44 = 1; // 0x40868e
        *(int32_t *)(v22 - 8) = v42 >> 8;
        *(int32_t *)(v22 - 12) = *(int32_t *)(v41 + 8) & 0xffff | 0x1000000 * v42;
        *(int32_t *)(v22 - 16) = *(int32_t *)(v41 + 16) + -1 - v43;
        *(int32_t *)(v22 - 20) = v43 + 1 + g822;
        function_407fa0((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
        g822 += (int32_t)g925;
        while (*(int32_t *)(g824 + 4) > v44) {
            // 0x40866c
            v39 += 12;
            v40 = v39 + g825;
            v41 = v39 + g824;
            v42 = *(int32_t *)(v41 + 12);
            *(int32_t *)(v22 - 4) = v40 + 8;
            v43 = *(int32_t *)(v40 + 16);
            v44++;
            *(int32_t *)(v22 - 8) = v42 >> 8;
            *(int32_t *)(v22 - 12) = *(int32_t *)(v41 + 8) & 0xffff | 0x1000000 * v42;
            *(int32_t *)(v22 - 16) = *(int32_t *)(v41 + 16) + -1 - v43;
            *(int32_t *)(v22 - 20) = v43 + 1 + g822;
            function_407fa0((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
            g822 += (int32_t)g925;
        }
        // 0x4086cc
        v38 = 12 * v44;
    }
    // 0x4086cc
    if (*(int32_t *)(g826 + 4) < 1) {
        // 0x408561
        return g826;
    }
    int32_t v45 = 0; // 0x4086dd
    int32_t v46 = 0; // 0x4086dd
    int32_t v47 = v38; // 0x4086dd
    int32_t v48 = g825 + v47; // 0x4086f0
    int32_t v49 = v46 + g826; // 0x4086f2
    int32_t v50 = *(int32_t *)(v49 + 12); // 0x4086fa
    *(int32_t *)(v22 - 4) = v48 + 8;
    int32_t v51 = *(int32_t *)(v48 + 16); // 0x4086fe
    v45++;
    *(int32_t *)(v22 - 8) = v50 >> 8;
    *(int32_t *)(v22 - 12) = *(int32_t *)(v49 + 8) & 0xffff | 0x1000000 * v50;
    *(int32_t *)(v22 - 16) = *(int32_t *)(v49 + 16) + -1 - v51;
    *(int32_t *)(v22 - 20) = v51 + 1 + g822;
    function_407fa0((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
    g822 += (int32_t)g925;
    v46 += 12;
    v47 += 12;
    while (*(int32_t *)(g826 + 4) > v45) {
        // 0x4086e4
        v48 = g825 + v47;
        v49 = v46 + g826;
        v50 = *(int32_t *)(v49 + 12);
        *(int32_t *)(v22 - 4) = v48 + 8;
        v51 = *(int32_t *)(v48 + 16);
        v45++;
        *(int32_t *)(v22 - 8) = v50 >> 8;
        *(int32_t *)(v22 - 12) = *(int32_t *)(v49 + 8) & 0xffff | 0x1000000 * v50;
        *(int32_t *)(v22 - 16) = *(int32_t *)(v49 + 16) + -1 - v51;
        *(int32_t *)(v22 - 20) = v51 + 1 + g822;
        function_407fa0((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
        g822 += (int32_t)g925;
        v46 += 12;
        v47 += 12;
    }
    // 0x408561
    return g826;
}

// Address range: 0x408750 - 0x408d69
int32_t function_408750(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5) {
    // 0x408750
    if (g106 < g919) {
        // 0x408ae1
        return g919;
    }
    // 0x408765
    if (g102 > g924) {
        // 0x408ae1
        return g924;
    }
    // 0x408776
    if (g823 > g927) {
        // 0x408ae1
        return g927;
    }
    // 0x408787
    if (g926 > g827) {
        // 0x408ae1
        return g827;
    }
    // 0x408798
    int32_t v1; // bp-16, 0x408750
    int32_t v2 = &v1; // 0x40875e
    function_456000();
    function_407f80((int32_t)g114, (int32_t)g113, g820);
    int32_t v3 = function_408d70(g103, g104, g105, g106); // 0x4087d4
    int32_t v4 = function_408d70(g101, g102, g103, g104); // 0x4087f9
    g829 = g102;
    g828 = g101;
    g830 = g103;
    g831 = g104;
    g832 = g107;
    g833 = g108;
    g834 = g109;
    g835 = g110;
    if (v3 > v4) {
        // 0x408863
        function_456640();
        g828 = g101;
        g829 = g102;
        g830 = g105;
        g831 = g106;
        g832 = g107;
        g833 = g108;
        g834 = g111;
        g835 = g112;
        function_456520();
        g828 = g103;
        g829 = g104;
        g830 = g105;
        g831 = g106;
        g832 = g109;
        g833 = g110;
        g834 = g111;
        g835 = g112;
        function_456640();
        g822 += *(int32_t *)g824 * (int32_t)g925;
        int32_t v5 = 0; // 0x408965
        if (*(int32_t *)(g824 + 4) >= 1) {
            int32_t * v6 = (int32_t *)(v2 - 4);
            int32_t * v7 = (int32_t *)(v2 - 8);
            int32_t * v8 = (int32_t *)(v2 - 12);
            int32_t * v9 = (int32_t *)(v2 - 16);
            int32_t v10 = 0;
            int32_t v11 = v10 + g824; // 0x408973
            int32_t v12 = *(int32_t *)(v11 + 16); // 0x408975
            int32_t v13; // 0x408986
            int32_t v14; // 0x408988
            int32_t v15; // 0x4089c8
            int32_t v16; // 0x4089cb
            if (g923 > v12) {
                // 0x408980
                v13 = g825 + v10;
                v14 = *(int32_t *)(v13 + 12);
                *v6 = v14 >> 8;
                *v7 = *(int32_t *)(v13 + 8) & 0xffff | 0x1000000 * v14;
                *v8 = *(int32_t *)(v13 + 16) - g923;
                *v9 = g822 + g923;
                function_407fc0((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
            } else {
                // 0x4089bf
                v15 = g825 + v10;
                *v6 = v11 + 8;
                v16 = *(int32_t *)(v15 + 12);
                *v7 = v16 >> 8;
                *v8 = *(int32_t *)(v15 + 8) & 0xffff | 0x1000000 * v16;
                *v9 = *(int32_t *)(v15 + 16) + -1 - v12;
                *(int32_t *)(v2 - 20) = v12 + 1 + g822;
                function_407fa0((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
            }
            int32_t v17 = 1; // 0x408a02
            g822 += (int32_t)g925;
            int32_t v18 = v17; // 0x408a11
            int32_t v19 = v10 + 12; // 0x408a11
            while (*(int32_t *)(g824 + 4) > v17) {
                // 0x40896d
                v10 = v19;
                v11 = v10 + g824;
                v12 = *(int32_t *)(v11 + 16);
                if (g923 > v12) {
                    // 0x408980
                    v13 = g825 + v10;
                    v14 = *(int32_t *)(v13 + 12);
                    *v6 = v14 >> 8;
                    *v7 = *(int32_t *)(v13 + 8) & 0xffff | 0x1000000 * v14;
                    *v8 = *(int32_t *)(v13 + 16) - g923;
                    *v9 = g822 + g923;
                    function_407fc0((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
                } else {
                    // 0x4089bf
                    v15 = g825 + v10;
                    *v6 = v11 + 8;
                    v16 = *(int32_t *)(v15 + 12);
                    *v7 = v16 >> 8;
                    *v8 = *(int32_t *)(v15 + 8) & 0xffff | 0x1000000 * v16;
                    *v9 = *(int32_t *)(v15 + 16) + -1 - v12;
                    *(int32_t *)(v2 - 20) = v12 + 1 + g822;
                    function_407fa0((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
                }
                // 0x4089fa
                v17 = v18 + 1;
                g822 += (int32_t)g925;
                v18 = v17;
                v19 = v10 + 12;
            }
            // 0x408a17
            v5 = 12 * v17;
        }
        // 0x408a17
        if (*(int32_t *)(g826 + 4) < 1) {
            // 0x408ae1
            return g826;
        }
        int32_t * v20 = (int32_t *)(v2 - 4);
        int32_t * v21 = (int32_t *)(v2 - 8);
        int32_t * v22 = (int32_t *)(v2 - 12);
        int32_t * v23 = (int32_t *)(v2 - 16);
        int32_t v24 = 0; // 0x408a2c
        int32_t v25 = 0; // 0x408a2c
        int32_t v26 = v24 + g826; // 0x408a39
        int32_t v27 = *(int32_t *)(v26 + 16); // 0x408a3b
        int32_t v28; // 0x408a4c
        int32_t v29; // 0x408a4e
        int32_t v30; // 0x408a8e
        int32_t v31; // 0x408a91
        if (g923 > v27) {
            // 0x408a46
            v28 = g825 + v5;
            v29 = *(int32_t *)(v28 + 12);
            *v20 = v29 >> 8;
            *v21 = *(int32_t *)(v28 + 8) & 0xffff | 0x1000000 * v29;
            *v22 = *(int32_t *)(v28 + 16) - g923;
            *v23 = g822 + g923;
            function_407fc0((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
        } else {
            // 0x408a85
            v30 = g825 + v5;
            *v20 = v26 + 8;
            v31 = *(int32_t *)(v30 + 12);
            *v21 = v31 >> 8;
            *v22 = *(int32_t *)(v30 + 8) & 0xffff | 0x1000000 * v31;
            *v23 = *(int32_t *)(v30 + 16) + -1 - v27;
            *(int32_t *)(v2 - 20) = v27 + 1 + g822;
            function_407fa0((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
        }
        // 0x408ac1
        g822 += (int32_t)g925;
        v25++;
        int32_t v32 = v5 + 12; // 0x408adb
        v24 += 12;
        while (*(int32_t *)(g826 + 4) > v25) {
            int32_t v33 = v32;
            v26 = v24 + g826;
            v27 = *(int32_t *)(v26 + 16);
            if (g923 > v27) {
                // 0x408a46
                v28 = g825 + v33;
                v29 = *(int32_t *)(v28 + 12);
                *v20 = v29 >> 8;
                *v21 = *(int32_t *)(v28 + 8) & 0xffff | 0x1000000 * v29;
                *v22 = *(int32_t *)(v28 + 16) - g923;
                *v23 = g822 + g923;
                function_407fc0((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
            } else {
                // 0x408a85
                v30 = g825 + v33;
                *v20 = v26 + 8;
                v31 = *(int32_t *)(v30 + 12);
                *v21 = v31 >> 8;
                *v22 = *(int32_t *)(v30 + 8) & 0xffff | 0x1000000 * v31;
                *v23 = *(int32_t *)(v30 + 16) + -1 - v27;
                *(int32_t *)(v2 - 20) = v27 + 1 + g822;
                function_407fa0((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
            }
            // 0x408ac1
            g822 += (int32_t)g925;
            v25++;
            v32 = v33 + 12;
            v24 += 12;
        }
        // 0x408ae1
        return g826;
    }
    // 0x408ae6
    function_456520();
    g828 = g101;
    g829 = g102;
    g830 = g105;
    g831 = g106;
    g832 = g107;
    g833 = g108;
    g834 = g111;
    g835 = g112;
    function_456640();
    g828 = g103;
    g829 = g104;
    g830 = g105;
    g831 = g106;
    g832 = g109;
    g833 = g110;
    g834 = g111;
    g835 = g112;
    function_456520();
    g822 += *(int32_t *)g825 * (int32_t)g925;
    int32_t v34 = 0; // 0x408bea
    if (*(int32_t *)(g824 + 4) >= 1) {
        int32_t * v35 = (int32_t *)(v2 - 4);
        int32_t * v36 = (int32_t *)(v2 - 8);
        int32_t * v37 = (int32_t *)(v2 - 12);
        int32_t * v38 = (int32_t *)(v2 - 16);
        int32_t v39 = 0;
        int32_t v40 = v39 + g825; // 0x408bf6
        int32_t v41 = *(int32_t *)(v40 + 16); // 0x408bf8
        int32_t v42; // 0x408c09
        int32_t v43; // 0x408c0b
        int32_t v44; // 0x408c4b
        int32_t v45; // 0x408c4e
        if (g923 > v41) {
            // 0x408c03
            v42 = v39 + g824;
            v43 = *(int32_t *)(v42 + 12);
            *v35 = v43 >> 8;
            *v36 = *(int32_t *)(v42 + 8) & 0xffff | 0x1000000 * v43;
            *v37 = *(int32_t *)(v42 + 16) - g923;
            *v38 = g822 + g923;
            function_407fc0((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
        } else {
            // 0x408c42
            v44 = v39 + g824;
            *v35 = v40 + 8;
            v45 = *(int32_t *)(v44 + 12);
            *v36 = v45 >> 8;
            *v37 = *(int32_t *)(v44 + 8) & 0xffff | 0x1000000 * v45;
            *v38 = *(int32_t *)(v44 + 16) + -1 - v41;
            *(int32_t *)(v2 - 20) = v41 + 1 + g822;
            function_407fa0((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
        }
        int32_t v46 = 1; // 0x408c85
        g822 += (int32_t)g925;
        while (*(int32_t *)(g824 + 4) > v46) {
            // 0x408c7d
            v39 += 12;
            v40 = v39 + g825;
            v41 = *(int32_t *)(v40 + 16);
            if (g923 > v41) {
                // 0x408c03
                v42 = v39 + g824;
                v43 = *(int32_t *)(v42 + 12);
                *v35 = v43 >> 8;
                *v36 = *(int32_t *)(v42 + 8) & 0xffff | 0x1000000 * v43;
                *v37 = *(int32_t *)(v42 + 16) - g923;
                *v38 = g822 + g923;
                function_407fc0((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
            } else {
                // 0x408c42
                v44 = v39 + g824;
                *v35 = v40 + 8;
                v45 = *(int32_t *)(v44 + 12);
                *v36 = v45 >> 8;
                *v37 = *(int32_t *)(v44 + 8) & 0xffff | 0x1000000 * v45;
                *v38 = *(int32_t *)(v44 + 16) + -1 - v41;
                *(int32_t *)(v2 - 20) = v41 + 1 + g822;
                function_407fa0((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
            }
            // 0x408c7d
            v46++;
            g822 += (int32_t)g925;
        }
        // 0x408c9a
        v34 = 12 * v46;
    }
    // 0x408c9a
    if (*(int32_t *)(g826 + 4) < 1) {
        // 0x408ae1
        return g826;
    }
    int32_t * v47 = (int32_t *)(v2 - 4);
    int32_t * v48 = (int32_t *)(v2 - 8);
    int32_t * v49 = (int32_t *)(v2 - 12);
    int32_t * v50 = (int32_t *)(v2 - 16);
    int32_t v51 = 0; // 0x408caf
    int32_t v52 = v34; // 0x408caf
    int32_t v53 = 0;
    int32_t v54 = g825 + v52; // 0x408cbc
    int32_t v55 = *(int32_t *)(v54 + 16); // 0x408cbe
    int32_t v56; // 0x408ccf
    int32_t v57; // 0x408cd1
    int32_t v58; // 0x408d11
    int32_t v59; // 0x408d14
    if (g923 > v55) {
        // 0x408cc9
        v56 = v53 + g826;
        v57 = *(int32_t *)(v56 + 12);
        *v47 = v57 >> 8;
        *v48 = *(int32_t *)(v56 + 8) & 0xffff | 0x1000000 * v57;
        *v49 = *(int32_t *)(v56 + 16) - g923;
        *v50 = g822 + g923;
        function_407fc0((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
    } else {
        // 0x408d08
        v58 = v53 + g826;
        *v47 = v54 + 8;
        v59 = *(int32_t *)(v58 + 12);
        *v48 = v59 >> 8;
        *v49 = *(int32_t *)(v58 + 8) & 0xffff | 0x1000000 * v59;
        *v50 = *(int32_t *)(v58 + 16) + -1 - v55;
        *(int32_t *)(v2 - 20) = v55 + 1 + g822;
        function_407fa0((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
    }
    // 0x408d44
    g822 += (int32_t)g925;
    v51++;
    int32_t v60 = v53 + 12; // 0x408d5e
    v52 += 12;
    while (*(int32_t *)(g826 + 4) > v51) {
        // 0x408cb6
        v53 = v60;
        v54 = g825 + v52;
        v55 = *(int32_t *)(v54 + 16);
        if (g923 > v55) {
            // 0x408cc9
            v56 = v53 + g826;
            v57 = *(int32_t *)(v56 + 12);
            *v47 = v57 >> 8;
            *v48 = *(int32_t *)(v56 + 8) & 0xffff | 0x1000000 * v57;
            *v49 = *(int32_t *)(v56 + 16) - g923;
            *v50 = g822 + g923;
            function_407fc0((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
        } else {
            // 0x408d08
            v58 = v53 + g826;
            *v47 = v54 + 8;
            v59 = *(int32_t *)(v58 + 12);
            *v48 = v59 >> 8;
            *v49 = *(int32_t *)(v58 + 8) & 0xffff | 0x1000000 * v59;
            *v50 = *(int32_t *)(v58 + 16) + -1 - v55;
            *(int32_t *)(v2 - 20) = v55 + 1 + g822;
            function_407fa0((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
        }
        // 0x408d44
        g822 += (int32_t)g925;
        v51++;
        v60 = v53 + 12;
        v52 += 12;
    }
    // 0x408ae1
    return g826;
}

// Address range: 0x408d70 - 0x408da5
int32_t function_408d70(uint32_t a1, int32_t a2, uint32_t a3, int32_t a4) {
    int32_t result; // 0x408d70
    if (a2 != a4) {
        int32_t v1 = 256 * (a1 - a3); // 0x408d9d
        result = (0x100000000 * (int64_t)(v1 >> 31) | (int64_t)v1) / (int64_t)(a2 - a4);
    } else {
        // 0x408d7d
        result = -0x7fff0000;
        if (a1 <= a3) {
            // 0x408d8c
            return 0x7fff0000;
        }
    }
    // 0x408d8c
    return result;
}

// Address range: 0x408da8 - 0x408dc9
int32_t function_408da8(void) {
    // 0x408da8
    function_407fe0();
    function_407190();
    int32_t result; // 0x408da8
    return result;
}

// Address range: 0x408dc9 - 0x408fa3
int32_t function_408dc9(void) {
    // 0x408dc9
    int32_t result; // 0x408dc9
    int32_t * v1 = (int32_t *)(result + 12); // 0x408dca
    if (*v1 != 0) {
        int32_t v2 = *(int32_t *)(result + 4); // 0x408dd0
        g94 = *(int32_t *)v2;
        g95 = *(int32_t *)(v2 + 4);
        g92 = *(int32_t *)(result + 8);
        g93 = *v1;
        function_4091f8();
        return result;
    }
    int32_t * v3 = (int32_t *)(result + 8); // 0x408dfe
    int32_t v4 = *v3; // 0x408dfe
    int32_t * v5 = (int32_t *)(v4 + 12); // 0x408e01
    int32_t v6 = *(int32_t *)(v4 + 24); // 0x408e07
    int32_t v7 = (*v5 & -256 | (int32_t)*(char *)(v4 + 9)) + v6; // 0x408e07
    char * v8 = (char *)v7; // 0x408e0a
    g89 = v8;
    int32_t v9 = (*(int32_t *)(v4 + 16) >> 8) - (*(int32_t *)(v4 + 8) >> 8); // 0x408e1c
    g90 = v9;
    int32_t v10 = (*(int32_t *)(v4 + 20) >> 8) - (*v5 >> 8); // 0x408e30
    g91 = v10;
    int32_t v11 = *(int32_t *)(result + 4); // 0x408e38
    int32_t v12 = *(int32_t *)(v11 + 4) - *(int32_t *)(v4 + 4) >> 8; // 0x408e48
    char * v13 = v8; // 0x408e51
    int32_t v14 = v10; // 0x408e51
    if (v12 < v12) {
        uint32_t v15 = 0; // 0x408e55
        v14 = v10 - v15;
        g91 = v14;
        if (v10 <= v15) {
            // 0x408f7c
            return result;
        }
        // 0x408e67
        v13 = (char *)(256 * v15 + v7);
        g89 = v13;
    }
    int32_t v16 = v12 + v14; // 0x408e78
    int32_t v17 = v14; // 0x408e84
    if (v16 > g920) {
        uint32_t v18 = v16 - g920; // 0x408e7e
        v17 = v14 - v18;
        g91 = v17;
        if (v14 <= v18) {
            // 0x408f7c
            return result;
        }
    }
    int32_t v19 = *(int32_t *)v11 - *(int32_t *)v4 >> 8; // 0x408e45
    char * v20 = v13; // 0x408e98
    int32_t v21 = v9; // 0x408e98
    if (v19 > v19) {
        uint32_t v22 = 0; // 0x408e9c
        v21 = v9 - v22;
        g90 = v21;
        if (v9 <= v22) {
            // 0x408f7c
            return result;
        }
        // 0x408eae
        v20 = (char *)(v22 + (int32_t)v13);
        g89 = v20;
    }
    int32_t v23 = v19 + v21; // 0x408ebc
    int32_t v24 = v21; // 0x408ec8
    if (v23 > g922) {
        uint32_t v25 = v23 - g922; // 0x408ec2
        v24 = v21 - v25;
        g90 = v24;
        if (v21 <= v25) {
            // 0x408f7c
            return result;
        }
    }
    int32_t v26 = g925;
    int32_t v27 = *(int32_t *)(*v3 + 28); // 0x408eea
    int32_t v28 = v26; // 0x408eff
    int32_t v29 = v24; // 0x408eff
    int32_t v30 = v27; // 0x408eff
    int32_t v31 = v27; // 0x408eff
    int32_t v32 = v17; // 0x408eff
    int32_t v33 = (int32_t)v20; // 0x408eff
    int32_t v34 = v12 * v26 + v19 + g928; // 0x408eff
    int32_t v35; // 0x408dc9
    int32_t v36; // 0x408dc9
    int32_t v37; // 0x408dc9
    int32_t v38; // 0x408dc9
    int32_t v39; // 0x408dc9
    int32_t v40; // 0x408dc9
    int32_t v41; // 0x408dc9
    int32_t v42; // 0x408dc9
    int32_t v43; // 0x408dc9
    int32_t v44; // 0x408dc9
    int32_t v45; // 0x408dc9
    int32_t v46; // 0x408dc9
    int32_t v47; // 0x408dc9
    while (true) {
      lab_0x408f01:
        // 0x408f01
        v43 = v34;
        v47 = v33;
        int32_t v48 = v31;
        int32_t v49 = v30;
        int32_t v50 = v29;
        int32_t v51 = v50 - 6; // 0x408f01
        if (v50 < 6) {
            int32_t v52 = v50 - 2; // 0x408f7e
            int32_t v53 = v50 - 1;
            if (v52 < 0) {
                // 0x408f98
                v35 = v28;
                v46 = v49;
                v41 = v48;
                if (v53 < 0) {
                    goto lab_0x408f66;
                } else {
                    unsigned char v54 = *(char *)v43; // 0x408f9b
                    unsigned char v55 = *(char *)v47; // 0x408f9d
                    int32_t v56 = v49 & -0x10000 | (int32_t)v54 | 256 * (int32_t)v55; // 0x408f9d
                    v38 = 256 * (int32_t)*(char *)v56;
                    v45 = v56;
                    v40 = v48;
                    goto lab_0x408f64;
                }
            } else {
                unsigned char v57 = *(char *)(v53 + v43); // 0x408f83
                unsigned char v58 = *(char *)(v47 + v52); // 0x408f87
                unsigned char v59 = *(char *)(v53 + v47); // 0x408f8a
                int32_t v60 = v48 & -0x10000 | (int32_t)v57 | 256 * (int32_t)v59; // 0x408f8a
                unsigned char v61 = *(char *)(v43 + v52); // 0x408f8e
                v36 = v43 + 5;
                v37 = 256 * (int32_t)*(char *)v60;
                v42 = v51;
                v44 = 256 * (int32_t)v58 | v49 & -0x10000 | (int32_t)v61;
                v39 = v60;
                goto lab_0x408f4a;
            }
        } else {
            int32_t v62 = v43 + 5;
            unsigned char v63 = *(char *)(v62 + v51); // 0x408f06
            int32_t v64 = v47 + v51;
            unsigned char v65 = *(char *)(v64 + 4); // 0x408f0a
            unsigned char v66 = *(char *)(v64 + 5); // 0x408f0e
            int32_t v67 = v48 & -0x10000 | (int32_t)v63 | 256 * (int32_t)v66; // 0x408f0e
            unsigned char v68 = *(char *)(v50 - 2 + v43); // 0x408f12
            int32_t v69 = 256 * (int32_t)*(char *)v67; // 0x408f16
            int32_t v70 = v51; // 0x408f16
            int32_t v71 = 256 * (int32_t)v65 | v49 & -0x10000 | (int32_t)v68; // 0x408f16
            int32_t v72 = v70 + v43;
            unsigned char v73 = *(char *)(v72 + 3); // 0x408f18
            int32_t v74 = v67 & -0x10000; // 0x408f18
            unsigned char v75 = *(char *)v71; // 0x408f1c
            int32_t v76 = v70 + v47;
            unsigned char v77 = *(char *)(v76 + 3); // 0x408f1e
            int32_t v78 = v72 + 2; // 0x408f22
            unsigned char v79 = *(char *)v78; // 0x408f22
            int32_t v80 = v71 & -0x10000; // 0x408f22
            unsigned char v81 = *(char *)(v76 + 2); // 0x408f29
            unsigned char v82 = *(char *)(v74 | (int32_t)v73 | 256 * (int32_t)v77); // 0x408f2d
            unsigned char v83 = *(char *)(v80 | (int32_t)v79 | 256 * (int32_t)v81); // 0x408f33
            unsigned char v84 = *(char *)(v76 + 1); // 0x408f38
            int32_t v85 = v74 | (int32_t)*(char *)(v72 + 1) | 256 * (int32_t)v84; // 0x408f38
            *(int32_t *)v78 = 256 * (int32_t)v82 | 0x10000 * (v69 | (int32_t)v75) | (int32_t)v83;
            unsigned char v86 = *(char *)v76; // 0x408f40
            v71 = v80 | (int32_t)*(char *)v72 | 256 * (int32_t)v86;
            v70 -= 4;
            v69 = 256 * (int32_t)*(char *)v85;
            v36 = v62;
            v37 = v69;
            v42 = v70;
            v44 = v71;
            v39 = v85;
            while (v70 >= 0) {
                // 0x408f18
                v72 = v70 + v43;
                v73 = *(char *)(v72 + 3);
                v74 = v85 & -0x10000;
                v75 = *(char *)v71;
                v76 = v70 + v47;
                v77 = *(char *)(v76 + 3);
                v78 = v72 + 2;
                v79 = *(char *)v78;
                v80 = v71 & -0x10000;
                v81 = *(char *)(v76 + 2);
                v82 = *(char *)(v74 | (int32_t)v73 | 256 * (int32_t)v77);
                v83 = *(char *)(v80 | (int32_t)v79 | 256 * (int32_t)v81);
                v84 = *(char *)(v76 + 1);
                v85 = v74 | (int32_t)*(char *)(v72 + 1) | 256 * (int32_t)v84;
                *(int32_t *)v78 = 256 * (int32_t)v82 | 0x10000 * (v69 | (int32_t)v75) | (int32_t)v83;
                v86 = *(char *)v76;
                v71 = v80 | (int32_t)*(char *)v72 | 256 * (int32_t)v86;
                v70 -= 4;
                v69 = 256 * (int32_t)*(char *)v85;
                v36 = v62;
                v37 = v69;
                v42 = v70;
                v44 = v71;
                v39 = v85;
            }
            goto lab_0x408f4a;
        }
    }
  lab_0x408f7c:
    // 0x408f7c
    return result;
  lab_0x408f4a:
    // 0x408f4a
    *(char *)(v42 + v36) = (char)(v37 / 256);
    v38 = 256 * (int32_t)*(char *)v44;
    v45 = v44;
    v40 = v39;
    if (v42 >= 0xfffffffd) {
        int32_t v87; // 0x408dc9
        unsigned char v88 = *(char *)(v87 + v47); // 0x408f55
        int32_t v89; // 0x408dc9
        int32_t v90; // 0x408f58
        *(char *)(v90 + v87) = (char)(v89 / 256);
        unsigned char v91 = *(char *)(v87 + v43); // 0x408f5c
        int32_t v92; // 0x408dc9
        int32_t v93 = 256 * (int32_t)v88 | v92 & -0x10000 | (int32_t)v91; // 0x408f5c
        int32_t v94 = v87 - 1; // 0x408f5f
        int32_t v95 = 256 * (int32_t)*(char *)v93; // 0x408f60
        v89 = v95;
        v87 = v94;
        v92 = v93;
        v38 = v95;
        v45 = v93;
        int32_t v96; // 0x408dc9
        v40 = v96;
        // 0x408f55
        while (v94 >= 0) {
            int32_t v97 = v92;
            int32_t v98 = v87;
            uint32_t v99 = v89;
            v88 = *(char *)(v98 + v47);
            *(char *)(v90 + v98) = (char)(v99 / 256);
            v91 = *(char *)(v98 + v43);
            v93 = 256 * (int32_t)v88 | v97 & -0x10000 | (int32_t)v91;
            v94 = v98 - 1;
            unsigned char v100 = *(char *)v93; // 0x408f60
            v95 = 256 * (int32_t)v100;
            v89 = v95;
            v87 = v94;
            v92 = v93;
            v38 = v95;
            v45 = v93;
            v40 = v96;
        }
    }
    goto lab_0x408f64;
  lab_0x408f66:
    // 0x408f66
    v32--;
    if (v32 == 0) {
        // break -> 0x408f7c
        goto lab_0x408f7c;
    }
    // 0x408f66
    v28 = v35;
    v29 = g90;
    v30 = v46;
    v31 = v41;
    v33 = v47 + 256;
    v34 = v35 + v43;
    goto lab_0x408f01;
  lab_0x408f64:
    // 0x408f64
    *(char *)v43 = (char)(v38 / 256);
    v35 = g925;
    v46 = v45;
    v41 = v40;
    goto lab_0x408f66;
}

// Address range: 0x408fa4 - 0x408fca
int32_t function_408fa4(void) {
    // 0x408fa4
    int32_t v1; // 0x408fa4
    uint32_t v2 = -v1; // 0x408fac
    uint32_t result = -v1 / 256; // 0x408fae
    g96 = v2 / 0x10000;
    g97 = result & 0xffff | 0x10000 * v2;
    return result;
}

// Address range: 0x408fca - 0x40901f
int32_t function_408fca(void) {
    // 0x408fca
    int32_t v1; // 0x408fca
    unsigned char v2 = *(char *)(v1 + 4); // 0x408fd3
    int32_t v3 = g98 & -0x10000; // 0x408fd3
    g100 = *(char *)(v3 | 256 * v1 & 0xff00 | (int32_t)v2);
    int32_t v4 = v1 - 1; // 0x408ff4
    int32_t v5 = g99; // 0x408ff5
    int32_t v6 = v4; // 0x408ff5
    if (v4 >= 0) {
        int32_t v7 = g99; // 0x409000
        int32_t v8 = v4; // 0x409007
        int32_t v9 = v3 | v1 & 0xffff;
        int32_t v10; // 0x408fca
        int32_t v11 = v10 + g97; // 0x408ff7
        int32_t v12 = v11 & 0xff00 | v9 & -0x10000 | v9 + (int32_t)g96 + (int32_t)(v11 < v10) & 255; // 0x408ffb
        char * v13 = (char *)(v8 + v1); // 0x408ffd
        unsigned char v14 = *(char *)v12; // 0x409000
        v7 = v7 & -0x10000 | (int32_t)*v13 | 256 * (int32_t)v14;
        *v13 = *(char *)v7;
        v8--;
        v10 = v11;
        v5 = v7;
        v6 = v8;
        while (v8 >= 0) {
            // 0x408ff7
            v9 = v12;
            v11 = v10 + g97;
            v12 = v11 & 0xff00 | v9 & -0x10000 | v9 + (int32_t)g96 + (int32_t)(v11 < v10) & 255;
            v13 = (char *)(v8 + v1);
            v14 = *(char *)v12;
            v7 = v7 & -0x10000 | (int32_t)*v13 | 256 * (int32_t)v14;
            *v13 = *(char *)v7;
            v8--;
            v10 = v11;
            v5 = v7;
            v6 = v8;
        }
    }
    int32_t result = v5; // 0x40900d
    if (v6 >= 0xffffffff) {
        char * v15 = (char *)(v6 + v1); // 0x409015
        result = 256 * (int32_t)g100 | v5 & -0x10000 | (int32_t)*v15;
        *v15 = *(char *)result;
    }
    // 0x40901d
    return result;
}

// Address range: 0x40901f - 0x409054
int32_t function_40901f(void) {
    // 0x40901f
    int32_t v1; // 0x40901f
    int32_t v2 = v1 - 1; // 0x40903c
    if (v2 < 0) {
        // 0x409052
        return g99;
    }
    int32_t v3 = v2; // 0x40904f
    int32_t result = g99; // 0x409047
    int32_t v4 = g98 & -0x10000 | v1 & 0xffff;
    int32_t v5; // 0x40901f
    int32_t v6 = v5 + g97; // 0x40903f
    int32_t v7 = v4 & -0x10000 | v6 & 0xff00 | v4 + (int32_t)g96 + (int32_t)(v6 < v5) & 255; // 0x409043
    unsigned char v8 = *(char *)v7; // 0x409045
    char * v9 = (char *)(v3 + v1); // 0x409047
    result = 256 * (int32_t)v8 | result & -0x10000 | (int32_t)*v9;
    *v9 = *(char *)result;
    v3--;
    v5 = v6;
    while (v3 >= 0) {
        // 0x40903f
        v4 = v7;
        v6 = v5 + g97;
        v7 = v4 & -0x10000 | v6 & 0xff00 | v4 + (int32_t)g96 + (int32_t)(v6 < v5) & 255;
        v8 = *(char *)v7;
        v9 = (char *)(v3 + v1);
        result = 256 * (int32_t)v8 | result & -0x10000 | (int32_t)*v9;
        *v9 = *(char *)result;
        v3--;
        v5 = v6;
    }
    // 0x409052
    return result;
}

// Address range: 0x4090a8 - 0x4090ac
int32_t function_4090a8(void) {
    // 0x4090a8
    int32_t result; // 0x4090a8
    return result;
}

// Address range: 0x4090b8 - 0x4090d8
int32_t function_4090b8(void) {
    // 0x4090b8
    int32_t v1; // 0x4090b8
    uint32_t v2 = -v1; // 0x4090ba
    uint32_t result = -v1 / 256; // 0x4090bc
    g154 = v2 / 0x10000;
    g155 = result & 0xffff | 0x10000 * v2;
    return result;
}

// Address range: 0x4090d8 - 0x40914e
int32_t function_4090d8(void) {
    // 0x4090d8
    int32_t v1; // 0x4090d8
    unsigned char v2 = *(char *)(v1 + 4); // 0x4090e1
    int32_t v3 = g156 & -0x10000; // 0x4090e1
    g157 = *(char *)(v3 | 256 * v1 & 0xff00 | (int32_t)v2);
    int32_t v4 = v3 | v1 & 0xffff; // 0x4090ee
    int32_t v5 = g154; // 0x4090f1
    int32_t v6 = v1 - 4; // 0x4090fd
    int32_t v7 = v6; // 0x409100
    int32_t v8 = v4; // 0x409100
    int32_t v9 = v6; // 0x409100
    int32_t v10; // 0x4090d8
    int32_t v11; // 0x4090d8
    if (v6 >= 0) {
        int32_t v12; // 0x4090d8
        uint32_t v13 = v12 + g155; // 0x409102
        int32_t v14 = v4 & -0x10000; // 0x409104
        int32_t v15 = v4 + v5 + (int32_t)(v13 < v12); // 0x409106
        unsigned char v16 = *(char *)(v13 & 0xff00 | v14 | v15 & 255); // 0x409108
        uint32_t v17 = v13 + g155; // 0x40910a
        int32_t v18 = v15 + v5 + (int32_t)(v17 < v13); // 0x40910e
        uint32_t v19 = v17 + g155; // 0x409110
        unsigned char v20 = *(char *)(v17 & 0xff00 | v14 | v18 & 255); // 0x409112
        int32_t v21 = (int32_t)(v19 < v17) + v5 + v18; // 0x409116
        int32_t v22 = v19 + g155; // 0x40911a
        unsigned char v23 = *(char *)(v19 & 0xff00 | v14 | v21 & 255); // 0x40911c
        int32_t v24 = v22 & 0xff00 | v14 | (int32_t)(v22 < v19) + v5 + v21 & 255; // 0x409120
        unsigned char v25 = *(char *)v24; // 0x409122
        int32_t v26 = 256 * (int32_t)v23 | (int32_t)v25 | llvm_bswap_i32(256 * (int32_t)v20 | (int32_t)v16); // 0x409122
        *(int32_t *)(v7 + v1) = v26;
        v7 -= 4;
        v12 = v22;
        v10 = v26;
        v8 = v24;
        v9 = v7;
        v11 = v22;
        while (v7 >= 0) {
            // 0x409102
            v13 = v12 + g155;
            v14 = v24 & -0x10000;
            v15 = v24 + v5 + (int32_t)(v13 < v12);
            v16 = *(char *)(v13 & 0xff00 | v14 | v15 & 255);
            v17 = v13 + g155;
            v18 = v15 + v5 + (int32_t)(v17 < v13);
            v19 = v17 + g155;
            v20 = *(char *)(v17 & 0xff00 | v14 | v18 & 255);
            v21 = (int32_t)(v19 < v17) + v5 + v18;
            v22 = v19 + g155;
            v23 = *(char *)(v19 & 0xff00 | v14 | v21 & 255);
            v24 = v22 & 0xff00 | v14 | (int32_t)(v22 < v19) + v5 + v21 & 255;
            v25 = *(char *)v24;
            v26 = 256 * (int32_t)v23 | (int32_t)v25 | llvm_bswap_i32(256 * (int32_t)v20 | (int32_t)v16);
            *(int32_t *)(v7 + v1) = v26;
            v7 -= 4;
            v12 = v22;
            v10 = v26;
            v8 = v24;
            v9 = v7;
            v11 = v22;
        }
    }
    int32_t v27 = v9 + 3; // 0x40912c
    int32_t v28 = v10; // 0x40912f
    int32_t v29 = v27; // 0x40912f
    int32_t v30 = v10; // 0x40912f
    int32_t v31 = v27; // 0x40912f
    if (v27 >= 0) {
        int32_t v32 = v8;
        int32_t v33 = v11 + g155; // 0x409131
        int32_t v34 = v33 & 0xff00 | v32 & -0x10000 | v32 + v5 + (int32_t)(v33 < v11) & 255; // 0x409135
        unsigned char v35 = *(char *)v34; // 0x409137
        v28 = v28 & -256 | (int32_t)v35;
        *(char *)(v29 + v1) = v35;
        v29--;
        v30 = v28;
        v31 = v29;
        while (v29 >= 0) {
            uint32_t v36 = v33;
            v32 = v34;
            v33 = v36 + g155;
            v34 = v33 & 0xff00 | v32 & -0x10000 | v32 + v5 + (int32_t)(v33 < v36) & 255;
            v35 = *(char *)v34;
            v28 = v28 & -256 | (int32_t)v35;
            *(char *)(v29 + v1) = v35;
            v29--;
            v30 = v28;
            v31 = v29;
        }
    }
    int32_t result = v30; // 0x409142
    if (v31 >= 0xffffffff) {
        // 0x409144
        *(char *)(v31 + v1) = g157;
        result = v30 & -256 | (int32_t)g157;
    }
    // 0x40914c
    return result;
}

// Address range: 0x40914e - 0x4091aa
int32_t function_40914e(void) {
    // 0x40914e
    int32_t v1; // 0x40914e
    int32_t v2 = g156 & -0x10000 | v1 & 0xffff; // 0x409157
    int32_t v3 = g154; // 0x40915a
    int32_t v4 = v1 - 4; // 0x409166
    int32_t v5 = v4; // 0x409169
    int32_t v6 = v2; // 0x409169
    int32_t v7 = v4; // 0x409169
    int32_t result; // 0x40914e
    int32_t v8; // 0x40914e
    if (v4 >= 0) {
        int32_t v9; // 0x40914e
        uint32_t v10 = v9 + g155; // 0x40916b
        int32_t v11 = v2 & -0x10000; // 0x40916d
        int32_t v12 = v2 + v3 + (int32_t)(v10 < v9); // 0x40916f
        uint32_t v13 = v10 + g155; // 0x409171
        unsigned char v14 = *(char *)(v11 | v10 & 0xff00 | v12 & 255); // 0x409173
        int32_t v15 = v12 + v3 + (int32_t)(v13 < v10); // 0x409177
        uint32_t v16 = v13 + g155; // 0x409179
        unsigned char v17 = *(char *)(v13 & 0xff00 | v11 | v15 & 255); // 0x40917b
        int32_t v18 = (int32_t)(v16 < v13) + v3 + v15; // 0x40917f
        int32_t v19 = v16 + g155; // 0x409183
        unsigned char v20 = *(char *)(v16 & 0xff00 | v11 | v18 & 255); // 0x409185
        int32_t v21 = v19 & 0xff00 | v11 | (int32_t)(v19 < v16) + v3 + v18 & 255; // 0x409189
        unsigned char v22 = *(char *)v21; // 0x40918b
        int32_t v23 = 256 * (int32_t)v20 | (int32_t)v22 | llvm_bswap_i32(256 * (int32_t)v17 | (int32_t)v14); // 0x40918b
        *(int32_t *)(v5 + v1) = v23;
        v5 -= 4;
        v9 = v19;
        v8 = v19;
        v6 = v21;
        v7 = v5;
        result = v23;
        while (v5 >= 0) {
            // 0x40916b
            v10 = v9 + g155;
            v11 = v21 & -0x10000;
            v12 = v21 + v3 + (int32_t)(v10 < v9);
            v13 = v10 + g155;
            v14 = *(char *)(v11 | v10 & 0xff00 | v12 & 255);
            v15 = v12 + v3 + (int32_t)(v13 < v10);
            v16 = v13 + g155;
            v17 = *(char *)(v13 & 0xff00 | v11 | v15 & 255);
            v18 = (int32_t)(v16 < v13) + v3 + v15;
            v19 = v16 + g155;
            v20 = *(char *)(v16 & 0xff00 | v11 | v18 & 255);
            v21 = v19 & 0xff00 | v11 | (int32_t)(v19 < v16) + v3 + v18 & 255;
            v22 = *(char *)v21;
            v23 = 256 * (int32_t)v20 | (int32_t)v22 | llvm_bswap_i32(256 * (int32_t)v17 | (int32_t)v14);
            *(int32_t *)(v5 + v1) = v23;
            v5 -= 4;
            v9 = v19;
            v8 = v19;
            v6 = v21;
            v7 = v5;
            result = v23;
        }
    }
    int32_t v24 = v7 + 3; // 0x409195
    int32_t v25 = v24; // 0x409198
    if (v24 < 0) {
        // 0x4091a8
        return result;
    }
    int32_t result2 = result; // 0x409198
    int32_t v26 = v6;
    int32_t v27 = v8 + g155; // 0x40919a
    int32_t v28 = v26 & -0x10000 | v27 & 0xff00 | v26 + v3 + (int32_t)(v27 < v8) & 255; // 0x40919e
    unsigned char v29 = *(char *)v28; // 0x4091a0
    result2 = result2 & -256 | (int32_t)v29;
    *(char *)(v25 + v1) = v29;
    v25--;
    while (v25 >= 0) {
        // 0x40919a
        v26 = v28;
        uint32_t v30 = v27;
        v27 = v30 + g155;
        v28 = v26 & -0x10000 | v27 & 0xff00 | v26 + v3 + (int32_t)(v27 < v30) & 255;
        v29 = *(char *)v28;
        result2 = result2 & -256 | (int32_t)v29;
        *(char *)(v25 + v1) = v29;
        v25--;
    }
    // 0x4091a8
    return result2;
}

// Address range: 0x4091eb - 0x4091ef
int32_t function_4091eb(void) {
    // 0x4091eb
    int32_t result; // 0x4091eb
    return result;
}

// Address range: 0x4091f8 - 0x40946f
int32_t function_4091f8(void) {
    // 0x4091f8
    int32_t v1; // 0x4091f8
    int32_t v2 = *(int32_t *)(v1 + 4); // 0x4091f9
    int32_t * v3 = (int32_t *)(v2 + 12); // 0x4091fc
    g166 = *v3;
    int32_t * v4 = (int32_t *)(v2 + 20); // 0x409204
    g167 = *v4 - 16;
    int32_t * v5 = (int32_t *)(v2 + 8); // 0x40920f
    g168 = *v5;
    int32_t * v6 = (int32_t *)(v2 + 16); // 0x409217
    g169 = *v6 - 16;
    g170 = *(int32_t *)(v2 + 28);
    g171 = *(int32_t *)(v2 + 24);
    int32_t v7 = *(int32_t *)(v1 + 8); // 0x409232
    int32_t * v8 = (int32_t *)v2; // 0x409235
    int32_t * v9 = (int32_t *)v7; // 0x40923a
    uint64_t v10 = (int64_t)*v9 * (int64_t)-*v8; // 0x40923c
    int32_t v11 = (int32_t)v10 / 0x10000 | 0x10000 * (int32_t)(v10 / 0x100000000); // 0x409241
    g158 = v11;
    int32_t * v12 = (int32_t *)(v2 + 4); // 0x409249
    int32_t * v13 = (int32_t *)(v7 + 8); // 0x40924e
    uint64_t v14 = (int64_t)*v13 * (int64_t)-*v12; // 0x409251
    int32_t v15 = ((int32_t)v14 / 0x10000 | 0x10000 * (int32_t)(v14 / 0x100000000)) + v11;
    g158 = v15;
    int32_t * v16 = (int32_t *)(v7 + 4); // 0x409264
    uint64_t v17 = (int64_t)*v16 * (int64_t)-*v8; // 0x409267
    int32_t v18 = (int32_t)v17 / 0x10000 | 0x10000 * (int32_t)(v17 / 0x100000000); // 0x40926c
    g159 = v18;
    int32_t * v19 = (int32_t *)(v7 + 12); // 0x409279
    uint64_t v20 = (int64_t)*v19 * (int64_t)-*v12; // 0x40927c
    int32_t v21 = ((int32_t)v20 / 0x10000 | 0x10000 * (int32_t)(v20 / 0x100000000)) + v18;
    g159 = v21;
    int64_t v22 = (int64_t)(*v6 - 16 - *v5); // 0x409296
    uint64_t v23 = v22 * (int64_t)*v16; // 0x409296
    int32_t v24 = (int32_t)v23 / 0x10000 | 0x10000 * (int32_t)(v23 / 0x100000000);
    g161 = v24;
    uint64_t v25 = (int64_t)*v9 * v22; // 0x4092a5
    int32_t v26 = (int32_t)v25 / 0x10000 | 0x10000 * (int32_t)(v25 / 0x100000000);
    g160 = v26;
    int64_t v27 = (int64_t)(*v4 - 16 - *v3); // 0x4092be
    uint64_t v28 = v27 * (int64_t)*v19; // 0x4092be
    int32_t v29 = ((int32_t)v28 / 0x10000 | 0x10000 * (int32_t)(v28 / 0x100000000)) + v21;
    g163 = v29;
    int32_t v30 = v29 + v24;
    g165 = v30;
    int32_t v31 = v24 + v21;
    g161 = v31;
    uint64_t v32 = (int64_t)*v13 * v27; // 0x4092ef
    int32_t v33 = ((int32_t)v32 / 0x10000 | 0x10000 * (int32_t)(v32 / 0x100000000)) + v15;
    g162 = v33;
    int32_t v34 = v33 + v26;
    g164 = v34;
    int32_t v35 = v26 + v15;
    g160 = v35;
    int32_t * v36 = (int32_t *)(v1 + 12); // 0x409322
    int32_t v37 = *v36 + v15;
    g158 = v37;
    int32_t * v38 = (int32_t *)(v1 + 16); // 0x40932f
    int32_t v39 = *v38 + v21;
    g159 = v39;
    int32_t v40 = *v36 + v35;
    g160 = v40;
    int32_t v41 = *v38 + v31;
    g161 = v41;
    int32_t v42 = *v36 + v33;
    g162 = v42;
    int32_t v43 = *v38 + v29;
    g163 = v43;
    g164 = *v36 + v34;
    g165 = *v38 + v30;
    g173 = v37;
    g174 = v39;
    g175 = v40;
    g176 = v41;
    g177 = v42;
    g178 = v43;
    g180 = g166;
    g182 = g166;
    g184 = g167;
    g179 = g168;
    g183 = g168;
    g181 = g169;
    g185 = g171;
    g186 = g170;
    function_4071f0((int32_t)&g172);
    g173 = g160;
    g174 = g161;
    g175 = g162;
    g176 = g163;
    g177 = g164;
    g178 = g165;
    g180 = g166;
    g182 = g167;
    g184 = g167;
    g179 = g169;
    g183 = g169;
    g181 = g168;
    g185 = g171;
    g186 = g170;
    function_4071f0((int32_t)&g172);
    return &g172;
}

// Address range: 0x409470 - 0x409476
int32_t function_409470(struct _TYPEDEF_GUID * lpGUID, struct IDirectDraw ** lplpDD, int32_t * pUnkOuter) {
    // 0x409470
    return DirectDrawCreate(lpGUID, lplpDD, pUnkOuter);
}

// Address range: 0x409476 - 0x40947c
int32_t function_409476(struct _TYPEDEF_GUID * pcGuidDevice, struct IDirectSound ** ppDS, int32_t * pUnkOuter) {
    // 0x409476
    return DirectSoundCreate(pcGuidDevice, ppDS, pUnkOuter);
}

// Address range: 0x40a0a4 - 0x40a0a7
int32_t function_40a0a4(void) {
    // 0x40a0a4
    int32_t result; // 0x40a0a4
    return result;
}

// Address range: 0x40a0a9 - 0x40a0ac
int32_t function_40a0a9(void) {
    // 0x40a0a9
    int32_t result; // 0x40a0a9
    return result;
}

// Address range: 0x40a0b4 - 0x40a0b5
int32_t function_40a0b4(void) {
    // 0x40a0b4
    int32_t result; // 0x40a0b4
    return result;
}

// Address range: 0x40a0b9 - 0x40a0ba
int32_t function_40a0b9(void) {
    // 0x40a0b9
    int32_t result; // 0x40a0b9
    return result;
}

// Address range: 0x40a124 - 0x40a127
int32_t function_40a124(int32_t a1) {
    // 0x40a124
    int32_t result; // 0x40a124
    return result;
}

// Address range: 0x40a129 - 0x40a12c
int32_t function_40a129(int32_t a1) {
    // 0x40a129
    int32_t result; // 0x40a129
    return result;
}

// Address range: 0x40a134 - 0x40a135
int32_t function_40a134(int32_t a1) {
    // 0x40a134
    int32_t result; // 0x40a134
    return result;
}

// Address range: 0x40a139 - 0x40a13a
int32_t function_40a139(int32_t a1) {
    // 0x40a139
    int32_t result; // 0x40a139
    return result;
}

// Address range: 0x40a314 - 0x40a319
int32_t function_40a314(void) {
    // 0x40a314
    return function_c40a319();
}

// Address range: 0x40a319 - 0x40a31e
int32_t function_40a319(void) {
    // 0x40a319
    int32_t result; // 0x40a319
    return result;
}

// Address range: 0x40a324 - 0x40a32b
int32_t function_40a324(void) {
    // 0x40a324
    return function_c000000();
}

// Address range: 0x40a334 - 0x40a494
int32_t function_40a334(void) {
    // 0x40a334
    int32_t v1; // 0x40a334
    int32_t v2 = v1;
    *(char *)v2 = 2 * (char)v2;
    int32_t v3 = v2 & 20 | 235; // 0x40a338
    int32_t v4 = v2 & -256; // 0x40a338
    int32_t v5 = v3 | v4; // 0x40a338
    char * v6 = (char *)v5; // 0x40a33a
    unsigned char v7 = (char)v3; // 0x40a33a
    *v6 = *v6 + v7;
    int32_t v8 = 8 * v1; // 0x40a347
    char * v9 = (char *)(v1 + v8); // 0x40a347
    int32_t v10; // 0x40a334
    *v9 = *v9 + (char)v10;
    *v6 = *v6 + v7;
    char * v11 = (char *)(v8 + 0x8000); // 0x40a357
    *v11 = *v11 + (char)v10;
    *v6 = *v6 + v7;
    char * v12 = (char *)(v8 + v1); // 0x40a367
    *v12 = *v12 + (char)v10;
    *v6 = *v6 + v7;
    char * v13 = (char *)(v8 + v1); // 0x40a377
    *v13 = *v13 + (char)v10;
    *v6 = *v6 + v7;
    int32_t v14 = 8 * v1; // 0x40a387
    char * v15 = (char *)(v5 + v14); // 0x40a387
    *v15 = *v15 + (char)v10;
    *v6 = *v6 + v7;
    char * v16 = (char *)(v10 + v14); // 0x40a397
    *v16 = *v16 + (char)v10;
    *v6 = *v6 + v7;
    char * v17 = (char *)(v1 + v14); // 0x40a3a7
    *v17 = *v17 + (char)v10;
    *v6 = *v6 + v7;
    char * v18 = (char *)(v1 + v14); // 0x40a3b7
    *v18 = *v18 + (char)v10;
    *v6 = *v6 + v7;
    char * v19 = (char *)(v1 + v14); // 0x40a3c7
    *v19 = *v19 + (char)v10;
    *v6 = *v6 + v7;
    char * v20 = (char *)(v14 + 0x8000); // 0x40a3d7
    *v20 = *v20 + (char)v10;
    *v6 = *v6 + v7;
    char * v21 = (char *)(9 * v1); // 0x40a3e7
    *v21 = *v21 + (char)v10;
    *v6 = *v6 + v7;
    char * v22 = (char *)(v14 + v1); // 0x40a3f7
    *v22 = *v22 + (char)v10;
    *v6 = *v6 + v7;
    int32_t v23 = 8 * v1; // 0x40a407
    char * v24 = (char *)(v5 + v23); // 0x40a407
    *v24 = *v24 + (char)v10;
    *v6 = *v6 + v7;
    char * v25 = (char *)(v10 + v23); // 0x40a417
    *v25 = *v25 + (char)v10;
    *v6 = *v6 + v7;
    char * v26 = (char *)(v1 + v23); // 0x40a427
    *v26 = *v26 + (char)v10;
    *v6 = *v6 + v7;
    char * v27 = (char *)(v1 + v23); // 0x40a437
    *v27 = *v27 + (char)v10;
    *v6 = *v6 + v7;
    char * v28 = (char *)(v1 + v23); // 0x40a447
    *v28 = *v28 + (char)v10;
    *v6 = *v6 + v7;
    char * v29 = (char *)(v23 + 0x8000); // 0x40a457
    *v29 = *v29 + (char)v10;
    *v6 = *v6 + v7;
    char * v30 = (char *)(v1 + v23); // 0x40a467
    *v30 = *v30 + (char)v10;
    *v6 = *v6 + v7;
    char * v31 = (char *)(9 * v1); // 0x40a477
    *v31 = *v31 + (char)v10;
    char v32 = *v6; // 0x40a47a
    unsigned char v33 = v32 + (char)(-1 - v32 < v7); // 0x40a480
    unsigned char v34 = v33 + v7; // 0x40a482
    char v35 = v34 + 2 * v7 + (char)(v34 < v33); // 0x40a486
    *v6 = v35;
    unsigned char v36 = v35 + v7; // 0x40a488
    int32_t result = v4 | (int32_t)v36; // 0x40a488
    char * v37 = (char *)result; // 0x40a48a
    *v37 = v36 + *v37;
    *(char *)v10 = v36 + *(char *)&v10;
    *v37 = v36 + *v37;
    *(char *)v10 = *(char *)&v10 + v36;
    *v37 = *v37 + v36;
    return result;
}

// Address range: 0x40a498 - 0x40a49e
int32_t function_40a498(int32_t a1, int32_t a2, int32_t * a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, int32_t a9, int32_t a10, int32_t a11, int32_t a12, int32_t a13, int32_t a14) {
    // 0x40a498
    return DirectInputCreateA(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

// Address range: 0x40a4a0 - 0x40a519
int32_t function_40a4a0(int32_t a1, int32_t a2) {
    // 0x40a4a0
    int32_t v1; // 0x40a4a0
    if (v1 > 600 || v1 > 1400) {
        // 0x40a50e
        return -1;
    }
    // 0x40a4b0
    g205 = v1;
    int32_t v2 = &g207; // 0x40a4c1
    uint32_t v3 = 1;
    *(int32_t *)v2 = 0x10000 / v3 - 1;
    int32_t v4 = v3 + 1; // 0x40a4dc
    v2 += 4;
    while (v3 != 0x3a9a) {
        // 0x40a4c6
        v3 = v4;
        *(int32_t *)v2 = 0x10000 / v3 - 1;
        v4 = v3 + 1;
        v2 += 4;
    }
    // 0x40a4de
    int32_t v5; // 0x40a4a0
    if (g208 != 0) {
        // 0x40a4e9
        int32_t v6; // bp-32, 0x40a4a0
        int32_t v7 = &v6; // 0x40a4de
        int32_t * v8 = (int32_t *)(v7 - 4); // 0x40a4e9
        int32_t * v9 = (int32_t *)(v7 - 8); // 0x40a4ea
        int32_t * v10 = (int32_t *)(v7 - 12); // 0x40a4eb
        int32_t v11 = &g208; // 0x40a4f3
        int32_t v12; // 0x40a4a0
        *v8 = v12;
        int32_t v13; // 0x40a4a0
        *v9 = v13;
        int32_t v14; // 0x40a4a0
        *v10 = v14;
        *(int32_t *)(v7 - 16) = v11;
        int32_t v15 = *v8; // 0x40a4f2
        v11 += 4;
        v5 = v15;
        while (*(int32_t *)v11 != 0) {
            // 0x40a4e9
            *v8 = v15;
            *(int32_t *)(v7 - 16) = v11;
            v15 = *v8;
            v11 += 4;
            v5 = v15;
        }
    }
    int16_t v16 = 600; // 0x40a4ff
    int32_t v17 = 0; // 0x40a4ff
    int32_t v18 = &g206; // 0x40a4ff
    *(int32_t *)v18 = v17;
    v16--;
    v17 += v5;
    v18 += 4;
    while (v16 != 0) {
        // 0x40a503
        *(int32_t *)v18 = v17;
        v16--;
        v17 += v5;
        v18 += 4;
    }
    // 0x40a50e
    return 0;
}

// Address range: 0x40a519 - 0x40a5ca
int32_t function_40a519(void) {
    // 0x40a519
    int32_t result; // 0x40a519
    g187 = *(int32_t *)(result + 4);
    g188 = *(int32_t *)(result + 12);
    int32_t v1 = *(int32_t *)(result + 16); // 0x40a539
    int32_t v2 = *(int32_t *)(result + 20); // 0x40a53c
    g189 = v1;
    g190 = v2;
    g193 = v1;
    int32_t v3 = 256 * v1; // 0x40a54f
    g194 = v2;
    int32_t v4 = 256 * v2; // 0x40a558
    g197 = v3;
    g198 = v4;
    g201 = v3;
    g202 = v4;
    int32_t v5 = *(int32_t *)(result + 24); // 0x40a571
    int32_t v6 = *(int32_t *)(result + 28); // 0x40a574
    g191 = v5;
    g192 = v6;
    int32_t v7 = v5 + 1; // 0x40a582
    int32_t v8 = v6 + 1; // 0x40a583
    g195 = v7;
    int32_t v9 = 256 * v7; // 0x40a589
    g196 = v8;
    g203 = v9;
    int32_t v10 = 256 * v8; // 0x40a598
    g199 = v9 - 1;
    g204 = v10;
    g200 = v10 - 1;
    return result;
}

// Address range: 0x40a5ca - 0x40a5d1
int32_t function_40a5ca(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6, int32_t a7) {
    // 0x40a5ca
    return -1;
}

// Address range: 0x40a5d1 - 0x40a5d8
int32_t function_40a5d1(void) {
    // 0x40a5d1
    return function_410a20();
}

// Address range: 0x40a5d8 - 0x40a5e5
int32_t function_40a5d8(void) {
    // 0x40a5d8
    int32_t result; // 0x40a5d8
    function_40d750(result);
    return result;
}

// Address range: 0x40a5e5 - 0x40a5f2
int32_t function_40a5e5(void) {
    // 0x40a5e5
    int32_t result; // 0x40a5e5
    function_40b390(result);
    return result;
}

// Address range: 0x40a5f2 - 0x40a5f9
int32_t function_40a5f2(void) {
    // 0x40a5f2
    return function_40f9dc();
}

// Address range: 0x40a5f9 - 0x40a606
int32_t function_40a5f9(void) {
    // 0x40a5f9
    int32_t result; // 0x40a5f9
    function_40cde0(result);
    return result;
}

// Address range: 0x40a608 - 0x40a61f
int32_t function_40a608(void) {
    // 0x40a608
    int32_t result; // 0x40a608
    g216 = result + 1;
    g217 = 1 - result;
    return result;
}

// Address range: 0x40a61f - 0x40abfa
int32_t function_40a61f(void) {
    // 0x40a61f
    int32_t v1; // 0x40a61f
    int32_t v2 = *(int32_t *)(v1 + 4) >> 8; // 0x40a625
    int32_t v3 = *(int32_t *)(v1 + 16) >> 8; // 0x40a628
    int32_t v4 = *(int32_t *)(v1 + 32); // 0x40a62b
    int32_t v5 = *(int32_t *)(v1 + 36); // 0x40a62e
    int32_t v6 = v2 > v3 ? v4 : v5;
    int32_t v7 = v2 > v3 ? v5 : v4;
    int32_t v8 = v6 - v7; // 0x40a637
    int64_t v9 = v8; // 0x40a639
    g215 = v9;
    int16_t v10 = v7; // 0x40a63f
    g222 = v10;
    g214 = *(int32_t *)(v1 + 28);
    int32_t v11 = *(int32_t *)(v1 + 8) >> 8; // 0x40a654
    int32_t v12 = *(int32_t *)(v1 + 20) >> 8; // 0x40a657
    int32_t v13 = v2 > v3 ? v2 : v3;
    int32_t v14 = v2 > v3 ? v11 : v12;
    int32_t v15 = v2 > v3 ? v12 : v11;
    int32_t v16 = v2 > v3 ? v3 : v2;
    int16_t v17 = v10; // 0x40a667
    int64_t v18 = v9; // 0x40a667
    int32_t v19 = v13; // 0x40a667
    int32_t v20 = v15; // 0x40a667
    if (v16 < v16) {
        // 0x40a89c
        g211 = v13;
        g212 = v14;
        v19 = 0x10000 * v13 >> 16;
        int32_t v21 = v19 + 1; // 0x40a8c5
        int64_t v22 = (int32_t)(0x100000000 * (int64_t)(v21 - v16) / (int64_t)(v21 - (0x10000 * v16 >> 16))) / 2;
        g213 = v22;
        v20 = v14 - (int32_t)(v22 * (int64_t)(2 * (v14 - v15)) / 0x100000000);
        g210 = v20;
        g209 = g189;
        int32_t v23 = v22 * (int64_t)(2 * v8) / 0x100000000; // 0x40a91e
        v18 = v23;
        g215 = v18;
        v17 = v6 - v23;
        g222 = v17;
    }
    int32_t v24 = v20;
    int64_t v25 = v18; // 0x40a673
    int32_t v26 = v14; // 0x40a673
    int32_t v27 = v16; // 0x40a673
    if (v19 > v19) {
        // 0x40a7fc
        g209 = v16;
        g210 = v24;
        v27 = 0x10000 * v16 >> 16;
        int64_t v28 = (int32_t)(0x100000000 * (int64_t)(v19 + 1 - v27) / (int64_t)((0x10000 * v19 >> 16) + 1 - v27)) / 2;
        g213 = v28;
        v26 = v24 + (int32_t)(v28 * (int64_t)(2 * (v14 - v24)) / 0x100000000);
        g212 = v26;
        g211 = g191;
        v25 = v28 * (int64_t)(2 * (int32_t)v18) >> 32;
        g215 = v25;
    }
    // 0x40a679
    int64_t v29; // 0x40a61f
    int32_t v30; // 0x40a61f
    int32_t v31; // 0x40a61f
    int32_t v32; // 0x40a61f
    int32_t v33; // 0x40a61f
    if (v26 < v24) {
        int64_t v34 = v25; // 0x40a69c
        int32_t v35 = v19; // 0x40a69c
        int32_t v36 = v24; // 0x40a69c
        int32_t v37 = v27; // 0x40a69c
        if (v24 > g192) {
            int16_t v38 = v19;
            g211 = v38;
            g212 = v26;
            int32_t v39 = 1 - v26;
            int64_t v40 = (int32_t)(0x100000000 * (int64_t)(g192 + v39) / (int64_t)(v39 + v24)) / 2;
            g213 = v40;
            v35 = 0x10000 * v19 >> 16;
            int16_t v41 = v38 - (int16_t)(v40 * (int64_t)(2 * (v35 - (0x10000 * v27 >> 16))) / 0x100000000);
            g209 = v41;
            g210 = g192;
            int32_t v42 = v25; // 0x40aa67
            int32_t v43 = v40 * (int64_t)(2 * v42) / 0x100000000; // 0x40aa74
            v34 = v43;
            g215 = v34;
            g222 = v42 + (int32_t)v17 - v43;
            v36 = g192;
            v37 = v41;
        }
        int32_t v44 = v36;
        v29 = v34;
        v32 = v35;
        v33 = v26;
        v31 = v44;
        v30 = v37;
        if (v26 < g190) {
            int16_t v45 = v37;
            g209 = v45;
            g210 = v44;
            int64_t v46 = (int32_t)(0x100000000 * (int64_t)(v44 + 1 - g190) / (int64_t)(1 - v26 + v44)) / 2;
            g213 = v46;
            int32_t v47 = 0x10000 * v37 >> 16;
            int16_t v48 = (int16_t)(v46 * (int64_t)(2 * ((0x10000 * v35 >> 16) - v47)) / 0x100000000) + v45;
            g211 = v48;
            g212 = g190;
            int64_t v49 = v46 * (int64_t)(2 * (int32_t)v34) >> 32; // 0x40a9cc
            g215 = v49;
            v29 = v49;
            v32 = v48;
            v33 = g190;
            v31 = v44;
            v30 = v47;
        }
    } else {
        int64_t v50 = v25; // 0x40a683
        int32_t v51 = v19; // 0x40a683
        int32_t v52 = v26; // 0x40a683
        int32_t v53 = v27; // 0x40a683
        if (v26 > g192) {
            int16_t v54 = v27;
            g209 = v54;
            g210 = v24;
            int32_t v55 = 1 - v24;
            int64_t v56 = (int32_t)(0x100000000 * (int64_t)(v55 + g192) / (int64_t)(v55 + v26)) / 2;
            g213 = v56;
            v53 = 0x10000 * v27 >> 16;
            int16_t v57 = (int16_t)(v56 * (int64_t)(2 * ((0x10000 * v19 >> 16) - v53)) / 0x100000000) + v54;
            g211 = v57;
            g212 = g192;
            v50 = v56 * (int64_t)(2 * (int32_t)v25) >> 32;
            g215 = v50;
            v51 = v57;
            v52 = g192;
        }
        // 0x40a689
        v29 = v50;
        v32 = v51;
        v33 = v52;
        v31 = v24;
        v30 = v53;
        if (v24 < g190) {
            int16_t v58 = v51;
            g211 = v58;
            g212 = v52;
            int32_t v59 = v52 + 1;
            int64_t v60 = (int32_t)(0x100000000 * (int64_t)(v59 - g190) / (int64_t)(v59 - v24)) / 2;
            g213 = v60;
            int32_t v61 = 0x10000 * v51 >> 16;
            int16_t v62 = v58 - (int16_t)(v60 * (int64_t)(2 * (v61 - (0x10000 * v53 >> 16))) / 0x100000000);
            g209 = v62;
            g210 = g190;
            int32_t v63 = v50; // 0x40abbd
            int32_t v64 = v60 * (int64_t)(2 * v63) / 0x100000000; // 0x40abca
            int64_t v65 = v64; // 0x40abd0
            g215 = v65;
            g222 = v63 + (int32_t)v17 - v64;
            v29 = v65;
            v32 = v61;
            v33 = v52;
            v31 = g190;
            v30 = v62;
        }
    }
    int64_t v66 = v29; // 0x40a7bc
    int32_t v67 = v33 - v31; // 0x40a6bf
    int32_t v68 = v32 - v30 + 1; // 0x40a6c1
    if (v67 < 0) {
        int32_t v69 = 1 - v67; // 0x40a765
        if (v68 > v69) {
            uint16_t v70 = (int16_t)v69;
            g219 = v70;
            g221 = (0x100000000 * (int64_t)((int32_t)v66 >> 31) | v66 & 0xffffffff) / (int64_t)v68;
            uint16_t v71 = (int16_t)v68;
            g220 = v71 / v70;
            uint32_t v72 = 0x10000 * (int32_t)(v71 % v70) / (v69 & 0xffff); // 0x40a7da
            g218 = v72;
            return v72 & 0xffff | v68 & -0x10000;
        }
        // 0x40a76a
        g221 = (0x100000000 * (int64_t)((int32_t)v66 >> 31) | v66 & 0xffffffff) / (int64_t)v69;
        uint16_t v73 = (int16_t)v69;
        uint16_t v74 = (int16_t)v68;
        g220 = v73 / v74;
        g219 = v74;
        uint32_t v75 = 0x10000 * (int32_t)(v73 % v74) / (v68 & 0xffff); // 0x40a791
        g218 = v75;
        return v75 & 0xffff | v69 & -0x10000;
    }
    int32_t v76 = v67 + 1; // 0x40a6cb
    if (v68 > v76) {
        uint16_t v77 = (int16_t)v76;
        g219 = v77;
        g221 = (0x100000000 * (int64_t)((int32_t)v66 >> 31) | v66 & 0xffffffff) / (int64_t)v68;
        uint16_t v78 = (int16_t)v68;
        g220 = v78 / v77;
        uint32_t v79 = 0x10000 * (int32_t)(v78 % v77) / (v76 & 0xffff); // 0x40a741
        g218 = v79;
        return v79 & 0xffff | v68 & -0x10000;
    }
    // 0x40a6d0
    g221 = (0x100000000 * (int64_t)((int32_t)v66 >> 31) | v66 & 0xffffffff) / (int64_t)v76;
    uint16_t v80 = (int16_t)v76;
    uint16_t v81 = (int16_t)v68;
    g220 = v80 / v81;
    uint32_t v82 = 0x10000 * (int32_t)(v80 % v81) / (v68 & 0xffff); // 0x40a6f0
    g219 = v81;
    g218 = v82;
    return v82 & 0xffff | v76 & -0x10000;
}

// Address range: 0x40abfa - 0x40ac4c
int32_t function_40abfa(void) {
    int32_t v1 = g222;
    int32_t v2; // 0x40abfa
    uint16_t v3 = (int16_t)v2; // 0x40ac00
    uint16_t v4 = g218 + v3; // 0x40ac00
    int32_t v5; // 0x40abfa
    int32_t v6 = v5; // 0x40ac07
    int32_t v7 = v1; // 0x40ac07
    int32_t v8; // 0x40abfa
    int32_t v9 = v8; // 0x40ac07
    char * v10; // 0x40ac0b
    if (v4 < v3) {
        // 0x40ac09
        v6 = v1 & 0xff00 | v5 & -0x10000;
        v10 = (char *)v8;
        *v10 = *(char *)(v6 | (int32_t)*v10);
        v7 = g221 + (int16_t)v1;
        v9 = v8 + (int32_t)g205;
    }
    // 0x40ac1e
    int32_t v11; // 0x40abfa
    int32_t v12 = v11 & -0x10000 | (int32_t)g220; // 0x40ac1e
    int32_t v13 = v7 & 0xff00 | v6 & -0x10000; // 0x40ac24
    char * v14 = (char *)v9; // 0x40ac26
    *v14 = *(char *)(v13 | (int32_t)*v14);
    int32_t v15 = g221 + (int16_t)v7; // 0x40ac2c
    int32_t v16 = v9 + (int32_t)g205; // 0x40ac33
    uint16_t v17 = (int16_t)v12 - 1; // 0x40ac39
    int32_t result = v12 & -0x10000 | (int32_t)v17; // 0x40ac39
    v12 = result;
    int32_t v18 = v13; // 0x40ac3b
    int32_t v19 = v15; // 0x40ac3b
    int32_t v20 = v16; // 0x40ac3b
    while (v17 != 0) {
        // 0x40ac24
        v13 = v19 & 0xff00 | v18 & -0x10000;
        v14 = (char *)v20;
        *v14 = *(char *)(v13 | (int32_t)*v14);
        v15 = g221 + (int16_t)v19;
        v16 = v20 + (int32_t)g205;
        v17 = (int16_t)v12 - 1;
        result = v12 & -0x10000 | (int32_t)v17;
        v12 = result;
        v18 = v13;
        v19 = v15;
        v20 = v16;
    }
    int16_t v21 = g219 - 1; // 0x40ac3e
    g219 = v21;
    while (v21 != 0) {
        int32_t v22 = v16 + 1;
        v1 = v15;
        int32_t v23 = v13;
        v3 = (int16_t)(int32_t)v4;
        v4 = g218 + v3;
        v6 = v23;
        v7 = v1;
        v9 = v22;
        if (v4 < v3) {
            // 0x40ac09
            v6 = v1 & 0xff00 | v23 & -0x10000;
            v10 = (char *)v22;
            *v10 = *(char *)(v6 | (int32_t)*v10);
            v7 = g221 + (int16_t)v1;
            v9 = v22 + (int32_t)g205;
        }
        // 0x40ac1e
        v12 = result & -0x10000 | (int32_t)g220;
        v13 = v7 & 0xff00 | v6 & -0x10000;
        v14 = (char *)v9;
        *v14 = *(char *)(v13 | (int32_t)*v14);
        v15 = g221 + (int16_t)v7;
        v16 = v9 + (int32_t)g205;
        v17 = (int16_t)v12 - 1;
        result = v12 & -0x10000 | (int32_t)v17;
        v12 = result;
        v18 = v13;
        v19 = v15;
        v20 = v16;
        while (v17 != 0) {
            // 0x40ac24
            v13 = v19 & 0xff00 | v18 & -0x10000;
            v14 = (char *)v20;
            *v14 = *(char *)(v13 | (int32_t)*v14);
            v15 = g221 + (int16_t)v19;
            v16 = v20 + (int32_t)g205;
            v17 = (int16_t)v12 - 1;
            result = v12 & -0x10000 | (int32_t)v17;
            v12 = result;
            v18 = v13;
            v19 = v15;
            v20 = v16;
        }
        // 0x40ac3d
        v21 = g219 - 1;
        g219 = v21;
    }
    // 0x40ac47
    return result;
}

// Address range: 0x40ac4c - 0x40ac93
int32_t function_40ac4c(void) {
    int32_t v1 = g222;
    int32_t v2; // 0x40ac4c
    uint16_t v3 = (int16_t)v2; // 0x40ac52
    uint16_t v4 = g218 + v3; // 0x40ac52
    int32_t v5; // 0x40ac4c
    int32_t v6 = v5; // 0x40ac59
    int32_t v7 = v1; // 0x40ac59
    int32_t v8; // 0x40ac4c
    int32_t v9 = v8; // 0x40ac59
    char * v10; // 0x40ac5d
    if (v4 < v3) {
        // 0x40ac5b
        v6 = v1 & 0xff00 | v5 & -0x10000;
        v10 = (char *)v8;
        *v10 = *(char *)(v6 | (int32_t)*v10);
        v7 = g221 + (int16_t)v1;
        v9 = v8 + (int32_t)g205;
    }
    int32_t v11 = v7 & 0xff00 | v6 & -0x10000; // 0x40ac70
    char * v12 = (char *)v9; // 0x40ac72
    *v12 = *(char *)(v11 | (int32_t)*v12);
    int16_t v13 = g219 - 1; // 0x40ac85
    g219 = v13;
    while (v13 != 0) {
        int32_t v14 = g216 + v9;
        v1 = g221 + (int16_t)v7;
        int32_t v15 = v11;
        v3 = (int16_t)(int32_t)v4;
        v4 = g218 + v3;
        v6 = v15;
        v7 = v1;
        v9 = v14;
        if (v4 < v3) {
            // 0x40ac5b
            v6 = v1 & 0xff00 | v15 & -0x10000;
            v10 = (char *)v14;
            *v10 = *(char *)(v6 | (int32_t)*v10);
            v7 = g221 + (int16_t)v1;
            v9 = v14 + (int32_t)g205;
        }
        // 0x40ac70
        v11 = v7 & 0xff00 | v6 & -0x10000;
        v12 = (char *)v9;
        *v12 = *(char *)(v11 | (int32_t)*v12);
        v13 = g219 - 1;
        g219 = v13;
    }
    // 0x40ac8e
    int32_t result; // 0x40ac4c
    return result;
}

// Address range: 0x40ac93 - 0x40acef
int32_t function_40ac93(void) {
    int32_t v1 = g222;
    int32_t v2; // 0x40ac93
    uint16_t v3 = (int16_t)v2; // 0x40ac99
    uint16_t v4 = g218 + v3; // 0x40ac99
    int32_t v5; // 0x40ac93
    int32_t v6 = v5; // 0x40aca0
    int32_t v7 = v1; // 0x40aca0
    int32_t v8; // 0x40ac93
    int32_t v9 = v8; // 0x40aca0
    char * v10; // 0x40aca4
    if (v4 < v3) {
        // 0x40aca2
        v6 = v1 & 0xff00 | v5 & -0x10000;
        v10 = (char *)v8;
        *v10 = *(char *)(v6 | (int32_t)*v10);
        v7 = g221 + (int16_t)v1;
        v9 = v8 + (int32_t)g205;
    }
    int32_t v11 = v6 & -0x10000; // 0x40acb7
    char * v12 = (char *)v9; // 0x40acb9
    *v12 = *(char *)(v7 & 0xff00 | v11 | (int32_t)*v12);
    int16_t v13 = g221 + (int16_t)v7; // 0x40acbf
    int32_t v14 = v9 + (int32_t)g205; // 0x40acc6
    char * v15 = (char *)v14; // 0x40acce
    int32_t v16 = v11 | (int32_t)(v13 & -256); // 0x40acce
    *v15 = *(char *)(v16 | (int32_t)*v15);
    int16_t v17 = g219 - 1; // 0x40ace1
    g219 = v17;
    while (v17 != 0) {
        int32_t v18 = g216 + v14;
        v1 = g221 + v13;
        int32_t v19 = v16;
        v3 = (int16_t)(int32_t)v4;
        v4 = g218 + v3;
        v6 = v19;
        v7 = v1;
        v9 = v18;
        if (v4 < v3) {
            // 0x40aca2
            v6 = v1 & 0xff00 | v19 & -0x10000;
            v10 = (char *)v18;
            *v10 = *(char *)(v6 | (int32_t)*v10);
            v7 = g221 + (int16_t)v1;
            v9 = v18 + (int32_t)g205;
        }
        // 0x40acb7
        v11 = v6 & -0x10000;
        v12 = (char *)v9;
        *v12 = *(char *)(v7 & 0xff00 | v11 | (int32_t)*v12);
        v13 = g221 + (int16_t)v7;
        v14 = v9 + (int32_t)g205;
        v15 = (char *)v14;
        v16 = v11 | (int32_t)(v13 & -256);
        *v15 = *(char *)(v16 | (int32_t)*v15);
        v17 = g219 - 1;
        g219 = v17;
    }
    // 0x40acea
    int32_t result; // 0x40ac93
    return result;
}

// Address range: 0x40acef - 0x40ad60
int32_t function_40acef(void) {
    int32_t v1 = g222;
    int32_t v2; // 0x40acef
    uint16_t v3 = (int16_t)v2; // 0x40acf5
    uint16_t v4 = g218 + v3; // 0x40acf5
    int32_t v5; // 0x40acef
    int32_t v6 = v5; // 0x40acfc
    int32_t v7 = v1; // 0x40acfc
    int32_t v8; // 0x40acef
    int32_t v9 = v8; // 0x40acfc
    char * v10; // 0x40ad00
    if (v4 < v3) {
        // 0x40acfe
        v6 = v1 & 0xff00 | v5 & -0x10000;
        v10 = (char *)v8;
        *v10 = *(char *)(v6 | (int32_t)*v10);
        v7 = g221 + (int16_t)v1;
        v9 = v8 + (int32_t)g205;
    }
    int32_t v11 = v6 & -0x10000; // 0x40ad13
    char * v12 = (char *)v9; // 0x40ad15
    *v12 = *(char *)(v7 & 0xff00 | v11 | (int32_t)*v12);
    int16_t v13 = g221 + (int16_t)v7; // 0x40ad1b
    int32_t v14 = v9 + (int32_t)g205; // 0x40ad22
    char * v15 = (char *)v14; // 0x40ad2a
    *v15 = *(char *)(v11 | (int32_t)(v13 & -256) | (int32_t)*v15);
    int16_t v16 = g221 + v13; // 0x40ad30
    int32_t v17 = v14 + (int32_t)g205; // 0x40ad37
    char * v18 = (char *)v17; // 0x40ad3f
    int32_t v19 = v11 | (int32_t)(v16 & -256); // 0x40ad3f
    *v18 = *(char *)(v19 | (int32_t)*v18);
    int16_t v20 = g219 - 1; // 0x40ad52
    g219 = v20;
    while (v20 != 0) {
        int32_t v21 = g216 + v17;
        v1 = g221 + v16;
        int32_t v22 = v19;
        v3 = (int16_t)(int32_t)v4;
        v4 = g218 + v3;
        v6 = v22;
        v7 = v1;
        v9 = v21;
        if (v4 < v3) {
            // 0x40acfe
            v6 = v1 & 0xff00 | v22 & -0x10000;
            v10 = (char *)v21;
            *v10 = *(char *)(v6 | (int32_t)*v10);
            v7 = g221 + (int16_t)v1;
            v9 = v21 + (int32_t)g205;
        }
        // 0x40ad13
        v11 = v6 & -0x10000;
        v12 = (char *)v9;
        *v12 = *(char *)(v7 & 0xff00 | v11 | (int32_t)*v12);
        v13 = g221 + (int16_t)v7;
        v14 = v9 + (int32_t)g205;
        v15 = (char *)v14;
        *v15 = *(char *)(v11 | (int32_t)(v13 & -256) | (int32_t)*v15);
        v16 = g221 + v13;
        v17 = v14 + (int32_t)g205;
        v18 = (char *)v17;
        v19 = v11 | (int32_t)(v16 & -256);
        *v18 = *(char *)(v19 | (int32_t)*v18);
        v20 = g219 - 1;
        g219 = v20;
    }
    // 0x40ad5b
    int32_t result; // 0x40acef
    return result;
}

// Address range: 0x40ad60 - 0x40ade6
int32_t function_40ad60(void) {
    int32_t v1 = g222;
    int32_t v2; // 0x40ad60
    uint16_t v3 = (int16_t)v2; // 0x40ad66
    uint16_t v4 = g218 + v3; // 0x40ad66
    int32_t v5; // 0x40ad60
    int32_t v6 = v5; // 0x40ad6d
    int32_t v7 = v1; // 0x40ad6d
    int32_t v8; // 0x40ad60
    int32_t v9 = v8; // 0x40ad6d
    char * v10; // 0x40ad71
    if (v4 < v3) {
        // 0x40ad6f
        v6 = v1 & 0xff00 | v5 & -0x10000;
        v10 = (char *)v8;
        *v10 = *(char *)(v6 | (int32_t)*v10);
        v7 = g221 + (int16_t)v1;
        v9 = v8 + (int32_t)g205;
    }
    int32_t v11 = v6 & -0x10000; // 0x40ad84
    char * v12 = (char *)v9; // 0x40ad86
    *v12 = *(char *)(v7 & 0xff00 | v11 | (int32_t)*v12);
    int16_t v13 = g221 + (int16_t)v7; // 0x40ad8c
    int32_t v14 = v9 + (int32_t)g205; // 0x40ad93
    char * v15 = (char *)v14; // 0x40ad9b
    *v15 = *(char *)(v11 | (int32_t)(v13 & -256) | (int32_t)*v15);
    int16_t v16 = g221 + v13; // 0x40ada1
    int32_t v17 = v14 + (int32_t)g205; // 0x40ada8
    char * v18 = (char *)v17; // 0x40adb0
    *v18 = *(char *)(v11 | (int32_t)(v16 & -256) | (int32_t)*v18);
    int16_t v19 = g221 + v16; // 0x40adb6
    int32_t v20 = v17 + (int32_t)g205; // 0x40adbd
    char * v21 = (char *)v20; // 0x40adc5
    int32_t v22 = v11 | (int32_t)(v19 & -256); // 0x40adc5
    *v21 = *(char *)(v22 | (int32_t)*v21);
    int16_t v23 = g219 - 1; // 0x40add8
    g219 = v23;
    while (v23 != 0) {
        int32_t v24 = g216 + v20;
        v1 = g221 + v19;
        int32_t v25 = v22;
        v3 = (int16_t)(int32_t)v4;
        v4 = g218 + v3;
        v6 = v25;
        v7 = v1;
        v9 = v24;
        if (v4 < v3) {
            // 0x40ad6f
            v6 = v1 & 0xff00 | v25 & -0x10000;
            v10 = (char *)v24;
            *v10 = *(char *)(v6 | (int32_t)*v10);
            v7 = g221 + (int16_t)v1;
            v9 = v24 + (int32_t)g205;
        }
        // 0x40ad84
        v11 = v6 & -0x10000;
        v12 = (char *)v9;
        *v12 = *(char *)(v7 & 0xff00 | v11 | (int32_t)*v12);
        v13 = g221 + (int16_t)v7;
        v14 = v9 + (int32_t)g205;
        v15 = (char *)v14;
        *v15 = *(char *)(v11 | (int32_t)(v13 & -256) | (int32_t)*v15);
        v16 = g221 + v13;
        v17 = v14 + (int32_t)g205;
        v18 = (char *)v17;
        *v18 = *(char *)(v11 | (int32_t)(v16 & -256) | (int32_t)*v18);
        v19 = g221 + v16;
        v20 = v17 + (int32_t)g205;
        v21 = (char *)v20;
        v22 = v11 | (int32_t)(v19 & -256);
        *v21 = *(char *)(v22 | (int32_t)*v21);
        v23 = g219 - 1;
        g219 = v23;
    }
    // 0x40ade1
    int32_t result; // 0x40ad60
    return result;
}

// Address range: 0x40ade6 - 0x40ae33
int32_t function_40ade6(void) {
    int32_t v1 = g222;
    int32_t v2; // 0x40ade6
    uint16_t v3 = (int16_t)v2; // 0x40adec
    uint16_t v4 = g218 + v3; // 0x40adec
    int32_t v5; // 0x40ade6
    int32_t v6 = v5; // 0x40adf3
    int32_t v7 = v1; // 0x40adf3
    int32_t v8; // 0x40ade6
    int32_t v9 = v8; // 0x40adf3
    char * v10; // 0x40adf7
    if (v4 < v3) {
        // 0x40adf5
        v6 = v1 & 0xff00 | v5 & -0x10000;
        v10 = (char *)v8;
        *v10 = *(char *)(v6 | (int32_t)*v10);
        v7 = g221 + (int16_t)v1;
        v9 = v8 + 1;
    }
    // 0x40ae05
    int32_t v11; // 0x40ade6
    int32_t v12 = v11 & -0x10000 | (int32_t)g220; // 0x40ae05
    int32_t v13 = v7 & 0xff00 | v6 & -0x10000; // 0x40ae0b
    char * v14 = (char *)v9; // 0x40ae0d
    *v14 = *(char *)(v13 | (int32_t)*v14);
    int32_t v15 = g221 + (int16_t)v7; // 0x40ae13
    int32_t v16 = v9 + 1; // 0x40ae1a
    uint16_t v17 = (int16_t)v12 - 1; // 0x40ae1b
    int32_t result = v12 & -0x10000 | (int32_t)v17; // 0x40ae1b
    v12 = result;
    int32_t v18 = v13; // 0x40ae1d
    int32_t v19 = v15; // 0x40ae1d
    int32_t v20 = v16; // 0x40ae1d
    while (v17 != 0) {
        // 0x40ae0b
        v13 = v19 & 0xff00 | v18 & -0x10000;
        v14 = (char *)v20;
        *v14 = *(char *)(v13 | (int32_t)*v14);
        v15 = g221 + (int16_t)v19;
        v16 = v20 + 1;
        v17 = (int16_t)v12 - 1;
        result = v12 & -0x10000 | (int32_t)v17;
        v12 = result;
        v18 = v13;
        v19 = v15;
        v20 = v16;
    }
    int16_t v21 = g219 - 1; // 0x40ae25
    g219 = v21;
    while (v21 != 0) {
        int32_t v22 = v16 + (int32_t)g205;
        v1 = v15;
        int32_t v23 = v13;
        v3 = (int16_t)(int32_t)v4;
        v4 = g218 + v3;
        v6 = v23;
        v7 = v1;
        v9 = v22;
        if (v4 < v3) {
            // 0x40adf5
            v6 = v1 & 0xff00 | v23 & -0x10000;
            v10 = (char *)v22;
            *v10 = *(char *)(v6 | (int32_t)*v10);
            v7 = g221 + (int16_t)v1;
            v9 = v22 + 1;
        }
        // 0x40ae05
        v12 = result & -0x10000 | (int32_t)g220;
        v13 = v7 & 0xff00 | v6 & -0x10000;
        v14 = (char *)v9;
        *v14 = *(char *)(v13 | (int32_t)*v14);
        v15 = g221 + (int16_t)v7;
        v16 = v9 + 1;
        v17 = (int16_t)v12 - 1;
        result = v12 & -0x10000 | (int32_t)v17;
        v12 = result;
        v18 = v13;
        v19 = v15;
        v20 = v16;
        while (v17 != 0) {
            // 0x40ae0b
            v13 = v19 & 0xff00 | v18 & -0x10000;
            v14 = (char *)v20;
            *v14 = *(char *)(v13 | (int32_t)*v14);
            v15 = g221 + (int16_t)v19;
            v16 = v20 + 1;
            v17 = (int16_t)v12 - 1;
            result = v12 & -0x10000 | (int32_t)v17;
            v12 = result;
            v18 = v13;
            v19 = v15;
            v20 = v16;
        }
        // 0x40ae1f
        v21 = g219 - 1;
        g219 = v21;
    }
    // 0x40ae2e
    return result;
}

// Address range: 0x40ae33 - 0x40ae75
int32_t function_40ae33(void) {
    int32_t v1 = g222;
    int32_t v2; // 0x40ae33
    uint16_t v3 = (int16_t)v2; // 0x40ae39
    uint16_t v4 = g218 + v3; // 0x40ae39
    int32_t v5; // 0x40ae33
    int32_t v6 = v5; // 0x40ae40
    int32_t v7 = v1; // 0x40ae40
    int32_t v8; // 0x40ae33
    int32_t v9 = v8; // 0x40ae40
    char * v10; // 0x40ae44
    if (v4 < v3) {
        // 0x40ae42
        v6 = v1 & 0xff00 | v5 & -0x10000;
        v10 = (char *)v8;
        *v10 = *(char *)(v6 | (int32_t)*v10);
        v7 = g221 + (int16_t)v1;
        v9 = v8 + 1;
    }
    int32_t v11 = v7 & 0xff00 | v6 & -0x10000; // 0x40ae52
    char * v12 = (char *)v9; // 0x40ae54
    *v12 = *(char *)(v11 | (int32_t)*v12);
    int16_t v13 = g219 - 1; // 0x40ae67
    g219 = v13;
    while (v13 != 0) {
        int32_t v14 = g216 + v9;
        v1 = g221 + (int16_t)v7;
        int32_t v15 = v11;
        v3 = (int16_t)(int32_t)v4;
        v4 = g218 + v3;
        v6 = v15;
        v7 = v1;
        v9 = v14;
        if (v4 < v3) {
            // 0x40ae42
            v6 = v1 & 0xff00 | v15 & -0x10000;
            v10 = (char *)v14;
            *v10 = *(char *)(v6 | (int32_t)*v10);
            v7 = g221 + (int16_t)v1;
            v9 = v14 + 1;
        }
        // 0x40ae52
        v11 = v7 & 0xff00 | v6 & -0x10000;
        v12 = (char *)v9;
        *v12 = *(char *)(v11 | (int32_t)*v12);
        v13 = g219 - 1;
        g219 = v13;
    }
    // 0x40ae70
    int32_t result; // 0x40ae33
    return result;
}

// Address range: 0x40ae75 - 0x40aec7
int32_t function_40ae75(void) {
    int32_t v1 = g222;
    int32_t v2; // 0x40ae75
    uint16_t v3 = (int16_t)v2; // 0x40ae7b
    uint16_t v4 = g218 + v3; // 0x40ae7b
    int32_t v5; // 0x40ae75
    int32_t v6 = v5; // 0x40ae82
    int32_t v7 = v1; // 0x40ae82
    int32_t v8; // 0x40ae75
    int32_t v9 = v8; // 0x40ae82
    char * v10; // 0x40ae86
    if (v4 < v3) {
        // 0x40ae84
        v6 = v1 & 0xff00 | v5 & -0x10000;
        v10 = (char *)v8;
        *v10 = *(char *)(v6 | (int32_t)*v10);
        v7 = g221 + (int16_t)v1;
        v9 = v8 + 1;
    }
    int32_t v11 = v6 & -0x10000; // 0x40ae94
    char * v12 = (char *)v9; // 0x40ae96
    *v12 = *(char *)(v7 & 0xff00 | v11 | (int32_t)*v12);
    int16_t v13 = g221 + (int16_t)v7; // 0x40ae9c
    int32_t v14 = v9 + 1; // 0x40aea3
    char * v15 = (char *)v14; // 0x40aea6
    int32_t v16 = v11 | (int32_t)(v13 & -256); // 0x40aea6
    *v15 = *(char *)(v16 | (int32_t)*v15);
    int16_t v17 = g219 - 1; // 0x40aeb9
    g219 = v17;
    while (v17 != 0) {
        int32_t v18 = g216 + v14;
        v1 = g221 + v13;
        int32_t v19 = v16;
        v3 = (int16_t)(int32_t)v4;
        v4 = g218 + v3;
        v6 = v19;
        v7 = v1;
        v9 = v18;
        if (v4 < v3) {
            // 0x40ae84
            v6 = v1 & 0xff00 | v19 & -0x10000;
            v10 = (char *)v18;
            *v10 = *(char *)(v6 | (int32_t)*v10);
            v7 = g221 + (int16_t)v1;
            v9 = v18 + 1;
        }
        // 0x40ae94
        v11 = v6 & -0x10000;
        v12 = (char *)v9;
        *v12 = *(char *)(v7 & 0xff00 | v11 | (int32_t)*v12);
        v13 = g221 + (int16_t)v7;
        v14 = v9 + 1;
        v15 = (char *)v14;
        v16 = v11 | (int32_t)(v13 & -256);
        *v15 = *(char *)(v16 | (int32_t)*v15);
        v17 = g219 - 1;
        g219 = v17;
    }
    // 0x40aec2
    int32_t result; // 0x40ae75
    return result;
}

// Address range: 0x40aec7 - 0x40af29
int32_t function_40aec7(void) {
    int32_t v1 = g222;
    int32_t v2; // 0x40aec7
    uint16_t v3 = (int16_t)v2; // 0x40aecd
    uint16_t v4 = g218 + v3; // 0x40aecd
    int32_t v5; // 0x40aec7
    int32_t v6 = v5; // 0x40aed4
    int32_t v7 = v1; // 0x40aed4
    int32_t v8; // 0x40aec7
    int32_t v9 = v8; // 0x40aed4
    char * v10; // 0x40aed8
    if (v4 < v3) {
        // 0x40aed6
        v6 = v1 & 0xff00 | v5 & -0x10000;
        v10 = (char *)v8;
        *v10 = *(char *)(v6 | (int32_t)*v10);
        v7 = g221 + (int16_t)v1;
        v9 = v8 + 1;
    }
    int32_t v11 = v6 & -0x10000; // 0x40aee6
    char * v12 = (char *)v9; // 0x40aee8
    *v12 = *(char *)(v7 & 0xff00 | v11 | (int32_t)*v12);
    int16_t v13 = g221 + (int16_t)v7; // 0x40aeee
    char * v14 = (char *)(v9 + 1); // 0x40aef8
    *v14 = *(char *)(v11 | (int32_t)*v14 | (int32_t)(v13 & -256));
    int16_t v15 = g221 + v13; // 0x40aefe
    int32_t v16 = v9 + 2; // 0x40af05
    char * v17 = (char *)v16; // 0x40af08
    int32_t v18 = v11 | (int32_t)(v15 & -256); // 0x40af08
    *v17 = *(char *)(v18 | (int32_t)*v17);
    int16_t v19 = g219 - 1; // 0x40af1b
    g219 = v19;
    while (v19 != 0) {
        int32_t v20 = g216 + v16;
        v1 = g221 + v15;
        int32_t v21 = v18;
        v3 = (int16_t)(int32_t)v4;
        v4 = g218 + v3;
        v6 = v21;
        v7 = v1;
        v9 = v20;
        if (v4 < v3) {
            // 0x40aed6
            v6 = v1 & 0xff00 | v21 & -0x10000;
            v10 = (char *)v20;
            *v10 = *(char *)(v6 | (int32_t)*v10);
            v7 = g221 + (int16_t)v1;
            v9 = v20 + 1;
        }
        // 0x40aee6
        v11 = v6 & -0x10000;
        v12 = (char *)v9;
        *v12 = *(char *)(v7 & 0xff00 | v11 | (int32_t)*v12);
        v13 = g221 + (int16_t)v7;
        v14 = (char *)(v9 + 1);
        *v14 = *(char *)(v11 | (int32_t)*v14 | (int32_t)(v13 & -256));
        v15 = g221 + v13;
        v16 = v9 + 2;
        v17 = (char *)v16;
        v18 = v11 | (int32_t)(v15 & -256);
        *v17 = *(char *)(v18 | (int32_t)*v17);
        v19 = g219 - 1;
        g219 = v19;
    }
    // 0x40af24
    int32_t result; // 0x40aec7
    return result;
}

// Address range: 0x40af29 - 0x40af9b
int32_t function_40af29(void) {
    int32_t v1 = g222;
    int32_t v2; // 0x40af29
    uint16_t v3 = (int16_t)v2; // 0x40af2f
    uint16_t v4 = g218 + v3; // 0x40af2f
    int32_t v5; // 0x40af29
    int32_t v6 = v5; // 0x40af36
    int32_t v7 = v1; // 0x40af36
    int32_t v8; // 0x40af29
    int32_t v9 = v8; // 0x40af36
    char * v10; // 0x40af3a
    if (v4 < v3) {
        // 0x40af38
        v6 = v1 & 0xff00 | v5 & -0x10000;
        v10 = (char *)v8;
        *v10 = *(char *)(v6 | (int32_t)*v10);
        v7 = g221 + (int16_t)v1;
        v9 = v8 + 1;
    }
    int32_t v11 = v6 & -0x10000; // 0x40af48
    char * v12 = (char *)v9; // 0x40af4a
    *v12 = *(char *)(v7 & 0xff00 | v11 | (int32_t)*v12);
    int16_t v13 = g221 + (int16_t)v7; // 0x40af50
    char * v14 = (char *)(v9 + 1); // 0x40af5a
    *v14 = *(char *)(v11 | (int32_t)*v14 | (int32_t)(v13 & -256));
    int16_t v15 = g221 + v13; // 0x40af60
    char * v16 = (char *)(v9 + 2); // 0x40af6a
    *v16 = *(char *)(v11 | (int32_t)*v16 | (int32_t)(v15 & -256));
    int16_t v17 = g221 + v15; // 0x40af70
    int32_t v18 = v9 + 3; // 0x40af77
    char * v19 = (char *)v18; // 0x40af7a
    int32_t v20 = v11 | (int32_t)(v17 & -256); // 0x40af7a
    *v19 = *(char *)(v20 | (int32_t)*v19);
    int16_t v21 = g219 - 1; // 0x40af8d
    g219 = v21;
    while (v21 != 0) {
        int32_t v22 = g216 + v18;
        v1 = g221 + v17;
        int32_t v23 = v20;
        v3 = (int16_t)(int32_t)v4;
        v4 = g218 + v3;
        v6 = v23;
        v7 = v1;
        v9 = v22;
        if (v4 < v3) {
            // 0x40af38
            v6 = v1 & 0xff00 | v23 & -0x10000;
            v10 = (char *)v22;
            *v10 = *(char *)(v6 | (int32_t)*v10);
            v7 = g221 + (int16_t)v1;
            v9 = v22 + 1;
        }
        // 0x40af48
        v11 = v6 & -0x10000;
        v12 = (char *)v9;
        *v12 = *(char *)(v7 & 0xff00 | v11 | (int32_t)*v12);
        v13 = g221 + (int16_t)v7;
        v14 = (char *)(v9 + 1);
        *v14 = *(char *)(v11 | (int32_t)*v14 | (int32_t)(v13 & -256));
        v15 = g221 + v13;
        v16 = (char *)(v9 + 2);
        *v16 = *(char *)(v11 | (int32_t)*v16 | (int32_t)(v15 & -256));
        v17 = g221 + v15;
        v18 = v9 + 3;
        v19 = (char *)v18;
        v20 = v11 | (int32_t)(v17 & -256);
        *v19 = *(char *)(v20 | (int32_t)*v19);
        v21 = g219 - 1;
        g219 = v21;
    }
    // 0x40af96
    int32_t result; // 0x40af29
    return result;
}

// Address range: 0x40af9b - 0x40afed
int32_t function_40af9b(void) {
    int32_t v1 = g222;
    int32_t v2; // 0x40af9b
    uint16_t v3 = (int16_t)v2; // 0x40afa1
    uint16_t v4 = g218 + v3; // 0x40afa1
    int32_t v5; // 0x40af9b
    int32_t v6 = v5; // 0x40afa8
    int32_t v7 = v1; // 0x40afa8
    int32_t v8; // 0x40af9b
    int32_t v9 = v8; // 0x40afa8
    char * v10; // 0x40afac
    if (v4 < v3) {
        // 0x40afaa
        v6 = v1 & 0xff00 | v5 & -0x10000;
        v10 = (char *)v8;
        *v10 = *(char *)(v6 | (int32_t)*v10);
        v7 = g221 + (int16_t)v1;
        v9 = v8 - (int32_t)g205;
    }
    // 0x40afbf
    int32_t v11; // 0x40af9b
    int32_t v12 = v11 & -0x10000 | (int32_t)g220; // 0x40afbf
    int32_t v13 = v7 & 0xff00 | v6 & -0x10000; // 0x40afc5
    char * v14 = (char *)v9; // 0x40afc7
    *v14 = *(char *)(v13 | (int32_t)*v14);
    int32_t v15 = g221 + (int16_t)v7; // 0x40afcd
    int32_t v16 = v9 - (int32_t)g205; // 0x40afd4
    uint16_t v17 = (int16_t)v12 - 1; // 0x40afda
    int32_t result = v12 & -0x10000 | (int32_t)v17; // 0x40afda
    v12 = result;
    int32_t v18 = v13; // 0x40afdc
    int32_t v19 = v15; // 0x40afdc
    int32_t v20 = v16; // 0x40afdc
    while (v17 != 0) {
        // 0x40afc5
        v13 = v19 & 0xff00 | v18 & -0x10000;
        v14 = (char *)v20;
        *v14 = *(char *)(v13 | (int32_t)*v14);
        v15 = g221 + (int16_t)v19;
        v16 = v20 - (int32_t)g205;
        v17 = (int16_t)v12 - 1;
        result = v12 & -0x10000 | (int32_t)v17;
        v12 = result;
        v18 = v13;
        v19 = v15;
        v20 = v16;
    }
    int16_t v21 = g219 - 1; // 0x40afdf
    g219 = v21;
    while (v21 != 0) {
        int32_t v22 = v16 + 1;
        v1 = v15;
        int32_t v23 = v13;
        v3 = (int16_t)(int32_t)v4;
        v4 = g218 + v3;
        v6 = v23;
        v7 = v1;
        v9 = v22;
        if (v4 < v3) {
            // 0x40afaa
            v6 = v1 & 0xff00 | v23 & -0x10000;
            v10 = (char *)v22;
            *v10 = *(char *)(v6 | (int32_t)*v10);
            v7 = g221 + (int16_t)v1;
            v9 = v22 - (int32_t)g205;
        }
        // 0x40afbf
        v12 = result & -0x10000 | (int32_t)g220;
        v13 = v7 & 0xff00 | v6 & -0x10000;
        v14 = (char *)v9;
        *v14 = *(char *)(v13 | (int32_t)*v14);
        v15 = g221 + (int16_t)v7;
        v16 = v9 - (int32_t)g205;
        v17 = (int16_t)v12 - 1;
        result = v12 & -0x10000 | (int32_t)v17;
        v12 = result;
        v18 = v13;
        v19 = v15;
        v20 = v16;
        while (v17 != 0) {
            // 0x40afc5
            v13 = v19 & 0xff00 | v18 & -0x10000;
            v14 = (char *)v20;
            *v14 = *(char *)(v13 | (int32_t)*v14);
            v15 = g221 + (int16_t)v19;
            v16 = v20 - (int32_t)g205;
            v17 = (int16_t)v12 - 1;
            result = v12 & -0x10000 | (int32_t)v17;
            v12 = result;
            v18 = v13;
            v19 = v15;
            v20 = v16;
        }
        // 0x40afde
        v21 = g219 - 1;
        g219 = v21;
    }
    // 0x40afe8
    return result;
}

// Address range: 0x40afed - 0x40b034
int32_t function_40afed(void) {
    int32_t v1 = g222;
    int32_t v2; // 0x40afed
    uint16_t v3 = (int16_t)v2; // 0x40aff3
    uint16_t v4 = g218 + v3; // 0x40aff3
    int32_t v5; // 0x40afed
    int32_t v6 = v5; // 0x40affa
    int32_t v7 = v1; // 0x40affa
    int32_t v8; // 0x40afed
    int32_t v9 = v8; // 0x40affa
    char * v10; // 0x40affe
    if (v4 < v3) {
        // 0x40affc
        v6 = v1 & 0xff00 | v5 & -0x10000;
        v10 = (char *)v8;
        *v10 = *(char *)(v6 | (int32_t)*v10);
        v7 = g221 + (int16_t)v1;
        v9 = v8 - (int32_t)g205;
    }
    int32_t v11 = v7 & 0xff00 | v6 & -0x10000; // 0x40b011
    char * v12 = (char *)v9; // 0x40b013
    *v12 = *(char *)(v11 | (int32_t)*v12);
    int16_t v13 = g219 - 1; // 0x40b026
    g219 = v13;
    while (v13 != 0) {
        int32_t v14 = g217 + v9;
        v1 = g221 + (int16_t)v7;
        int32_t v15 = v11;
        v3 = (int16_t)(int32_t)v4;
        v4 = g218 + v3;
        v6 = v15;
        v7 = v1;
        v9 = v14;
        if (v4 < v3) {
            // 0x40affc
            v6 = v1 & 0xff00 | v15 & -0x10000;
            v10 = (char *)v14;
            *v10 = *(char *)(v6 | (int32_t)*v10);
            v7 = g221 + (int16_t)v1;
            v9 = v14 - (int32_t)g205;
        }
        // 0x40b011
        v11 = v7 & 0xff00 | v6 & -0x10000;
        v12 = (char *)v9;
        *v12 = *(char *)(v11 | (int32_t)*v12);
        v13 = g219 - 1;
        g219 = v13;
    }
    // 0x40b02f
    int32_t result; // 0x40afed
    return result;
}

// Address range: 0x40b034 - 0x40b090
int32_t function_40b034(void) {
    int32_t v1 = g222;
    int32_t v2; // 0x40b034
    uint16_t v3 = (int16_t)v2; // 0x40b03a
    uint16_t v4 = g218 + v3; // 0x40b03a
    int32_t v5; // 0x40b034
    int32_t v6 = v5; // 0x40b041
    int32_t v7 = v1; // 0x40b041
    int32_t v8; // 0x40b034
    int32_t v9 = v8; // 0x40b041
    char * v10; // 0x40b045
    if (v4 < v3) {
        // 0x40b043
        v6 = v1 & 0xff00 | v5 & -0x10000;
        v10 = (char *)v8;
        *v10 = *(char *)(v6 | (int32_t)*v10);
        v7 = g221 + (int16_t)v1;
        v9 = v8 - (int32_t)g205;
    }
    int32_t v11 = v6 & -0x10000; // 0x40b058
    char * v12 = (char *)v9; // 0x40b05a
    *v12 = *(char *)(v7 & 0xff00 | v11 | (int32_t)*v12);
    int16_t v13 = g221 + (int16_t)v7; // 0x40b060
    int32_t v14 = v9 - (int32_t)g205; // 0x40b067
    char * v15 = (char *)v14; // 0x40b06f
    int32_t v16 = v11 | (int32_t)(v13 & -256); // 0x40b06f
    *v15 = *(char *)(v16 | (int32_t)*v15);
    int16_t v17 = g219 - 1; // 0x40b082
    g219 = v17;
    while (v17 != 0) {
        int32_t v18 = g217 + v14;
        v1 = g221 + v13;
        int32_t v19 = v16;
        v3 = (int16_t)(int32_t)v4;
        v4 = g218 + v3;
        v6 = v19;
        v7 = v1;
        v9 = v18;
        if (v4 < v3) {
            // 0x40b043
            v6 = v1 & 0xff00 | v19 & -0x10000;
            v10 = (char *)v18;
            *v10 = *(char *)(v6 | (int32_t)*v10);
            v7 = g221 + (int16_t)v1;
            v9 = v18 - (int32_t)g205;
        }
        // 0x40b058
        v11 = v6 & -0x10000;
        v12 = (char *)v9;
        *v12 = *(char *)(v7 & 0xff00 | v11 | (int32_t)*v12);
        v13 = g221 + (int16_t)v7;
        v14 = v9 - (int32_t)g205;
        v15 = (char *)v14;
        v16 = v11 | (int32_t)(v13 & -256);
        *v15 = *(char *)(v16 | (int32_t)*v15);
        v17 = g219 - 1;
        g219 = v17;
    }
    // 0x40b08b
    int32_t result; // 0x40b034
    return result;
}

// Address range: 0x40b090 - 0x40b101
int32_t function_40b090(void) {
    int32_t v1 = g222;
    int32_t v2; // 0x40b090
    uint16_t v3 = (int16_t)v2; // 0x40b096
    uint16_t v4 = g218 + v3; // 0x40b096
    int32_t v5; // 0x40b090
    int32_t v6 = v5; // 0x40b09d
    int32_t v7 = v1; // 0x40b09d
    int32_t v8; // 0x40b090
    int32_t v9 = v8; // 0x40b09d
    char * v10; // 0x40b0a1
    if (v4 < v3) {
        // 0x40b09f
        v6 = v1 & 0xff00 | v5 & -0x10000;
        v10 = (char *)v8;
        *v10 = *(char *)(v6 | (int32_t)*v10);
        v7 = g221 + (int16_t)v1;
        v9 = v8 - (int32_t)g205;
    }
    int32_t v11 = v6 & -0x10000; // 0x40b0b4
    char * v12 = (char *)v9; // 0x40b0b6
    *v12 = *(char *)(v7 & 0xff00 | v11 | (int32_t)*v12);
    int16_t v13 = g221 + (int16_t)v7; // 0x40b0bc
    int32_t v14 = v9 - (int32_t)g205; // 0x40b0c3
    char * v15 = (char *)v14; // 0x40b0cb
    *v15 = *(char *)(v11 | (int32_t)(v13 & -256) | (int32_t)*v15);
    int16_t v16 = g221 + v13; // 0x40b0d1
    int32_t v17 = v14 - (int32_t)g205; // 0x40b0d8
    char * v18 = (char *)v17; // 0x40b0e0
    int32_t v19 = v11 | (int32_t)(v16 & -256); // 0x40b0e0
    *v18 = *(char *)(v19 | (int32_t)*v18);
    int16_t v20 = g219 - 1; // 0x40b0f3
    g219 = v20;
    while (v20 != 0) {
        int32_t v21 = g217 + v17;
        v1 = g221 + v16;
        int32_t v22 = v19;
        v3 = (int16_t)(int32_t)v4;
        v4 = g218 + v3;
        v6 = v22;
        v7 = v1;
        v9 = v21;
        if (v4 < v3) {
            // 0x40b09f
            v6 = v1 & 0xff00 | v22 & -0x10000;
            v10 = (char *)v21;
            *v10 = *(char *)(v6 | (int32_t)*v10);
            v7 = g221 + (int16_t)v1;
            v9 = v21 - (int32_t)g205;
        }
        // 0x40b0b4
        v11 = v6 & -0x10000;
        v12 = (char *)v9;
        *v12 = *(char *)(v7 & 0xff00 | v11 | (int32_t)*v12);
        v13 = g221 + (int16_t)v7;
        v14 = v9 - (int32_t)g205;
        v15 = (char *)v14;
        *v15 = *(char *)(v11 | (int32_t)(v13 & -256) | (int32_t)*v15);
        v16 = g221 + v13;
        v17 = v14 - (int32_t)g205;
        v18 = (char *)v17;
        v19 = v11 | (int32_t)(v16 & -256);
        *v18 = *(char *)(v19 | (int32_t)*v18);
        v20 = g219 - 1;
        g219 = v20;
    }
    // 0x40b0fc
    int32_t result; // 0x40b090
    return result;
}

// Address range: 0x40b101 - 0x40b187
int32_t function_40b101(void) {
    int32_t v1 = g222;
    int32_t v2; // 0x40b101
    uint16_t v3 = (int16_t)v2; // 0x40b107
    uint16_t v4 = g218 + v3; // 0x40b107
    int32_t v5; // 0x40b101
    int32_t v6 = v5; // 0x40b10e
    int32_t v7 = v1; // 0x40b10e
    int32_t v8; // 0x40b101
    int32_t v9 = v8; // 0x40b10e
    char * v10; // 0x40b112
    if (v4 < v3) {
        // 0x40b110
        v6 = v1 & 0xff00 | v5 & -0x10000;
        v10 = (char *)v8;
        *v10 = *(char *)(v6 | (int32_t)*v10);
        v7 = g221 + (int16_t)v1;
        v9 = v8 - (int32_t)g205;
    }
    int32_t v11 = v6 & -0x10000; // 0x40b125
    char * v12 = (char *)v9; // 0x40b127
    *v12 = *(char *)(v7 & 0xff00 | v11 | (int32_t)*v12);
    int16_t v13 = g221 + (int16_t)v7; // 0x40b12d
    int32_t v14 = v9 - (int32_t)g205; // 0x40b134
    char * v15 = (char *)v14; // 0x40b13c
    *v15 = *(char *)(v11 | (int32_t)(v13 & -256) | (int32_t)*v15);
    int16_t v16 = g221 + v13; // 0x40b142
    int32_t v17 = v14 - (int32_t)g205; // 0x40b149
    char * v18 = (char *)v17; // 0x40b151
    *v18 = *(char *)(v11 | (int32_t)(v16 & -256) | (int32_t)*v18);
    int16_t v19 = g221 + v16; // 0x40b157
    int32_t v20 = v17 - (int32_t)g205; // 0x40b15e
    char * v21 = (char *)v20; // 0x40b166
    int32_t v22 = v11 | (int32_t)(v19 & -256); // 0x40b166
    *v21 = *(char *)(v22 | (int32_t)*v21);
    int16_t v23 = g219 - 1; // 0x40b179
    g219 = v23;
    while (v23 != 0) {
        int32_t v24 = g217 + v20;
        v1 = g221 + v19;
        int32_t v25 = v22;
        v3 = (int16_t)(int32_t)v4;
        v4 = g218 + v3;
        v6 = v25;
        v7 = v1;
        v9 = v24;
        if (v4 < v3) {
            // 0x40b110
            v6 = v1 & 0xff00 | v25 & -0x10000;
            v10 = (char *)v24;
            *v10 = *(char *)(v6 | (int32_t)*v10);
            v7 = g221 + (int16_t)v1;
            v9 = v24 - (int32_t)g205;
        }
        // 0x40b125
        v11 = v6 & -0x10000;
        v12 = (char *)v9;
        *v12 = *(char *)(v7 & 0xff00 | v11 | (int32_t)*v12);
        v13 = g221 + (int16_t)v7;
        v14 = v9 - (int32_t)g205;
        v15 = (char *)v14;
        *v15 = *(char *)(v11 | (int32_t)(v13 & -256) | (int32_t)*v15);
        v16 = g221 + v13;
        v17 = v14 - (int32_t)g205;
        v18 = (char *)v17;
        *v18 = *(char *)(v11 | (int32_t)(v16 & -256) | (int32_t)*v18);
        v19 = g221 + v16;
        v20 = v17 - (int32_t)g205;
        v21 = (char *)v20;
        v22 = v11 | (int32_t)(v19 & -256);
        *v21 = *(char *)(v22 | (int32_t)*v21);
        v23 = g219 - 1;
        g219 = v23;
    }
    // 0x40b182
    int32_t result; // 0x40b101
    return result;
}

// Address range: 0x40b187 - 0x40b1d4
int32_t function_40b187(void) {
    int32_t v1 = g222;
    int32_t v2; // 0x40b187
    uint16_t v3 = (int16_t)v2; // 0x40b18d
    uint16_t v4 = g218 + v3; // 0x40b18d
    int32_t v5; // 0x40b187
    int32_t v6 = v5; // 0x40b194
    int32_t v7 = v1; // 0x40b194
    int32_t v8; // 0x40b187
    int32_t v9 = v8; // 0x40b194
    char * v10; // 0x40b198
    if (v4 < v3) {
        // 0x40b196
        v6 = v1 & 0xff00 | v5 & -0x10000;
        v10 = (char *)v8;
        *v10 = *(char *)(v6 | (int32_t)*v10);
        v7 = g221 + (int16_t)v1;
        v9 = v8 + 1;
    }
    // 0x40b1a6
    int32_t v11; // 0x40b187
    int32_t v12 = v11 & -0x10000 | (int32_t)g220; // 0x40b1a6
    int32_t v13 = v7 & 0xff00 | v6 & -0x10000; // 0x40b1ac
    char * v14 = (char *)v9; // 0x40b1ae
    *v14 = *(char *)(v13 | (int32_t)*v14);
    int32_t v15 = g221 + (int16_t)v7; // 0x40b1b4
    int32_t v16 = v9 + 1; // 0x40b1bb
    uint16_t v17 = (int16_t)v12 - 1; // 0x40b1bc
    int32_t result = v12 & -0x10000 | (int32_t)v17; // 0x40b1bc
    v12 = result;
    int32_t v18 = v13; // 0x40b1be
    int32_t v19 = v15; // 0x40b1be
    int32_t v20 = v16; // 0x40b1be
    while (v17 != 0) {
        // 0x40b1ac
        v13 = v19 & 0xff00 | v18 & -0x10000;
        v14 = (char *)v20;
        *v14 = *(char *)(v13 | (int32_t)*v14);
        v15 = g221 + (int16_t)v19;
        v16 = v20 + 1;
        v17 = (int16_t)v12 - 1;
        result = v12 & -0x10000 | (int32_t)v17;
        v12 = result;
        v18 = v13;
        v19 = v15;
        v20 = v16;
    }
    int16_t v21 = g219 - 1; // 0x40b1c6
    g219 = v21;
    while (v21 != 0) {
        int32_t v22 = v16 - (int32_t)g205;
        v1 = v15;
        int32_t v23 = v13;
        v3 = (int16_t)(int32_t)v4;
        v4 = g218 + v3;
        v6 = v23;
        v7 = v1;
        v9 = v22;
        if (v4 < v3) {
            // 0x40b196
            v6 = v1 & 0xff00 | v23 & -0x10000;
            v10 = (char *)v22;
            *v10 = *(char *)(v6 | (int32_t)*v10);
            v7 = g221 + (int16_t)v1;
            v9 = v22 + 1;
        }
        // 0x40b1a6
        v12 = result & -0x10000 | (int32_t)g220;
        v13 = v7 & 0xff00 | v6 & -0x10000;
        v14 = (char *)v9;
        *v14 = *(char *)(v13 | (int32_t)*v14);
        v15 = g221 + (int16_t)v7;
        v16 = v9 + 1;
        v17 = (int16_t)v12 - 1;
        result = v12 & -0x10000 | (int32_t)v17;
        v12 = result;
        v18 = v13;
        v19 = v15;
        v20 = v16;
        while (v17 != 0) {
            // 0x40b1ac
            v13 = v19 & 0xff00 | v18 & -0x10000;
            v14 = (char *)v20;
            *v14 = *(char *)(v13 | (int32_t)*v14);
            v15 = g221 + (int16_t)v19;
            v16 = v20 + 1;
            v17 = (int16_t)v12 - 1;
            result = v12 & -0x10000 | (int32_t)v17;
            v12 = result;
            v18 = v13;
            v19 = v15;
            v20 = v16;
        }
        // 0x40b1c0
        v21 = g219 - 1;
        g219 = v21;
    }
    // 0x40b1cf
    return result;
}

// Address range: 0x40b1d4 - 0x40b216
int32_t function_40b1d4(void) {
    int32_t v1 = g222;
    int32_t v2; // 0x40b1d4
    uint16_t v3 = (int16_t)v2; // 0x40b1da
    uint16_t v4 = g218 + v3; // 0x40b1da
    int32_t v5; // 0x40b1d4
    int32_t v6 = v5; // 0x40b1e1
    int32_t v7 = v1; // 0x40b1e1
    int32_t v8; // 0x40b1d4
    int32_t v9 = v8; // 0x40b1e1
    char * v10; // 0x40b1e5
    if (v4 < v3) {
        // 0x40b1e3
        v6 = v1 & 0xff00 | v5 & -0x10000;
        v10 = (char *)v8;
        *v10 = *(char *)(v6 | (int32_t)*v10);
        v7 = g221 + (int16_t)v1;
        v9 = v8 + 1;
    }
    int32_t v11 = v7 & 0xff00 | v6 & -0x10000; // 0x40b1f3
    char * v12 = (char *)v9; // 0x40b1f5
    *v12 = *(char *)(v11 | (int32_t)*v12);
    int16_t v13 = g219 - 1; // 0x40b208
    g219 = v13;
    while (v13 != 0) {
        int32_t v14 = g217 + v9;
        v1 = g221 + (int16_t)v7;
        int32_t v15 = v11;
        v3 = (int16_t)(int32_t)v4;
        v4 = g218 + v3;
        v6 = v15;
        v7 = v1;
        v9 = v14;
        if (v4 < v3) {
            // 0x40b1e3
            v6 = v1 & 0xff00 | v15 & -0x10000;
            v10 = (char *)v14;
            *v10 = *(char *)(v6 | (int32_t)*v10);
            v7 = g221 + (int16_t)v1;
            v9 = v14 + 1;
        }
        // 0x40b1f3
        v11 = v7 & 0xff00 | v6 & -0x10000;
        v12 = (char *)v9;
        *v12 = *(char *)(v11 | (int32_t)*v12);
        v13 = g219 - 1;
        g219 = v13;
    }
    // 0x40b211
    int32_t result; // 0x40b1d4
    return result;
}

// Address range: 0x40b216 - 0x40b268
int32_t function_40b216(void) {
    int32_t v1 = g222;
    int32_t v2; // 0x40b216
    uint16_t v3 = (int16_t)v2; // 0x40b21c
    uint16_t v4 = g218 + v3; // 0x40b21c
    int32_t v5; // 0x40b216
    int32_t v6 = v5; // 0x40b223
    int32_t v7 = v1; // 0x40b223
    int32_t v8; // 0x40b216
    int32_t v9 = v8; // 0x40b223
    char * v10; // 0x40b227
    if (v4 < v3) {
        // 0x40b225
        v6 = v1 & 0xff00 | v5 & -0x10000;
        v10 = (char *)v8;
        *v10 = *(char *)(v6 | (int32_t)*v10);
        v7 = g221 + (int16_t)v1;
        v9 = v8 + 1;
    }
    int32_t v11 = v6 & -0x10000; // 0x40b235
    char * v12 = (char *)v9; // 0x40b237
    *v12 = *(char *)(v7 & 0xff00 | v11 | (int32_t)*v12);
    int16_t v13 = g221 + (int16_t)v7; // 0x40b23d
    int32_t v14 = v9 + 1; // 0x40b244
    char * v15 = (char *)v14; // 0x40b247
    int32_t v16 = v11 | (int32_t)(v13 & -256); // 0x40b247
    *v15 = *(char *)(v16 | (int32_t)*v15);
    int16_t v17 = g219 - 1; // 0x40b25a
    g219 = v17;
    while (v17 != 0) {
        int32_t v18 = g217 + v14;
        v1 = g221 + v13;
        int32_t v19 = v16;
        v3 = (int16_t)(int32_t)v4;
        v4 = g218 + v3;
        v6 = v19;
        v7 = v1;
        v9 = v18;
        if (v4 < v3) {
            // 0x40b225
            v6 = v1 & 0xff00 | v19 & -0x10000;
            v10 = (char *)v18;
            *v10 = *(char *)(v6 | (int32_t)*v10);
            v7 = g221 + (int16_t)v1;
            v9 = v18 + 1;
        }
        // 0x40b235
        v11 = v6 & -0x10000;
        v12 = (char *)v9;
        *v12 = *(char *)(v7 & 0xff00 | v11 | (int32_t)*v12);
        v13 = g221 + (int16_t)v7;
        v14 = v9 + 1;
        v15 = (char *)v14;
        v16 = v11 | (int32_t)(v13 & -256);
        *v15 = *(char *)(v16 | (int32_t)*v15);
        v17 = g219 - 1;
        g219 = v17;
    }
    // 0x40b263
    int32_t result; // 0x40b216
    return result;
}

// Address range: 0x40b268 - 0x40b2ca
int32_t function_40b268(void) {
    int32_t v1 = g222;
    int32_t v2; // 0x40b268
    uint16_t v3 = (int16_t)v2; // 0x40b26e
    uint16_t v4 = g218 + v3; // 0x40b26e
    int32_t v5; // 0x40b268
    int32_t v6 = v5; // 0x40b275
    int32_t v7 = v1; // 0x40b275
    int32_t v8; // 0x40b268
    int32_t v9 = v8; // 0x40b275
    char * v10; // 0x40b279
    if (v4 < v3) {
        // 0x40b277
        v6 = v1 & 0xff00 | v5 & -0x10000;
        v10 = (char *)v8;
        *v10 = *(char *)(v6 | (int32_t)*v10);
        v7 = g221 + (int16_t)v1;
        v9 = v8 + 1;
    }
    int32_t v11 = v6 & -0x10000; // 0x40b287
    char * v12 = (char *)v9; // 0x40b289
    *v12 = *(char *)(v7 & 0xff00 | v11 | (int32_t)*v12);
    int16_t v13 = g221 + (int16_t)v7; // 0x40b28f
    char * v14 = (char *)(v9 + 1); // 0x40b299
    *v14 = *(char *)(v11 | (int32_t)*v14 | (int32_t)(v13 & -256));
    int16_t v15 = g221 + v13; // 0x40b29f
    int32_t v16 = v9 + 2; // 0x40b2a6
    char * v17 = (char *)v16; // 0x40b2a9
    int32_t v18 = v11 | (int32_t)(v15 & -256); // 0x40b2a9
    *v17 = *(char *)(v18 | (int32_t)*v17);
    int16_t v19 = g219 - 1; // 0x40b2bc
    g219 = v19;
    while (v19 != 0) {
        int32_t v20 = g217 + v16;
        v1 = g221 + v15;
        int32_t v21 = v18;
        v3 = (int16_t)(int32_t)v4;
        v4 = g218 + v3;
        v6 = v21;
        v7 = v1;
        v9 = v20;
        if (v4 < v3) {
            // 0x40b277
            v6 = v1 & 0xff00 | v21 & -0x10000;
            v10 = (char *)v20;
            *v10 = *(char *)(v6 | (int32_t)*v10);
            v7 = g221 + (int16_t)v1;
            v9 = v20 + 1;
        }
        // 0x40b287
        v11 = v6 & -0x10000;
        v12 = (char *)v9;
        *v12 = *(char *)(v7 & 0xff00 | v11 | (int32_t)*v12);
        v13 = g221 + (int16_t)v7;
        v14 = (char *)(v9 + 1);
        *v14 = *(char *)(v11 | (int32_t)*v14 | (int32_t)(v13 & -256));
        v15 = g221 + v13;
        v16 = v9 + 2;
        v17 = (char *)v16;
        v18 = v11 | (int32_t)(v15 & -256);
        *v17 = *(char *)(v18 | (int32_t)*v17);
        v19 = g219 - 1;
        g219 = v19;
    }
    // 0x40b2c5
    int32_t result; // 0x40b268
    return result;
}

// Address range: 0x40b2ca - 0x40b33c
int32_t function_40b2ca(void) {
    int32_t v1 = g222;
    int32_t v2; // 0x40b2ca
    uint16_t v3 = (int16_t)v2; // 0x40b2d0
    uint16_t v4 = g218 + v3; // 0x40b2d0
    int32_t v5; // 0x40b2ca
    int32_t v6 = v5; // 0x40b2d7
    int32_t v7 = v1; // 0x40b2d7
    int32_t v8; // 0x40b2ca
    int32_t v9 = v8; // 0x40b2d7
    char * v10; // 0x40b2db
    if (v4 < v3) {
        // 0x40b2d9
        v6 = v1 & 0xff00 | v5 & -0x10000;
        v10 = (char *)v8;
        *v10 = *(char *)(v6 | (int32_t)*v10);
        v7 = g221 + (int16_t)v1;
        v9 = v8 + 1;
    }
    int32_t v11 = v6 & -0x10000; // 0x40b2e9
    char * v12 = (char *)v9; // 0x40b2eb
    *v12 = *(char *)(v7 & 0xff00 | v11 | (int32_t)*v12);
    int16_t v13 = g221 + (int16_t)v7; // 0x40b2f1
    char * v14 = (char *)(v9 + 1); // 0x40b2fb
    *v14 = *(char *)(v11 | (int32_t)*v14 | (int32_t)(v13 & -256));
    int16_t v15 = g221 + v13; // 0x40b301
    char * v16 = (char *)(v9 + 2); // 0x40b30b
    *v16 = *(char *)(v11 | (int32_t)*v16 | (int32_t)(v15 & -256));
    int16_t v17 = g221 + v15; // 0x40b311
    int32_t v18 = v9 + 3; // 0x40b318
    char * v19 = (char *)v18; // 0x40b31b
    int32_t v20 = v11 | (int32_t)(v17 & -256); // 0x40b31b
    *v19 = *(char *)(v20 | (int32_t)*v19);
    int16_t v21 = g219 - 1; // 0x40b32e
    g219 = v21;
    while (v21 != 0) {
        int32_t v22 = g217 + v18;
        v1 = g221 + v17;
        int32_t v23 = v20;
        v3 = (int16_t)(int32_t)v4;
        v4 = g218 + v3;
        v6 = v23;
        v7 = v1;
        v9 = v22;
        if (v4 < v3) {
            // 0x40b2d9
            v6 = v1 & 0xff00 | v23 & -0x10000;
            v10 = (char *)v22;
            *v10 = *(char *)(v6 | (int32_t)*v10);
            v7 = g221 + (int16_t)v1;
            v9 = v22 + 1;
        }
        // 0x40b2e9
        v11 = v6 & -0x10000;
        v12 = (char *)v9;
        *v12 = *(char *)(v7 & 0xff00 | v11 | (int32_t)*v12);
        v13 = g221 + (int16_t)v7;
        v14 = (char *)(v9 + 1);
        *v14 = *(char *)(v11 | (int32_t)*v14 | (int32_t)(v13 & -256));
        v15 = g221 + v13;
        v16 = (char *)(v9 + 2);
        *v16 = *(char *)(v11 | (int32_t)*v16 | (int32_t)(v15 & -256));
        v17 = g221 + v15;
        v18 = v9 + 3;
        v19 = (char *)v18;
        v20 = v11 | (int32_t)(v17 & -256);
        *v19 = *(char *)(v20 | (int32_t)*v19);
        v21 = g219 - 1;
        g219 = v21;
    }
    // 0x40b337
    int32_t result; // 0x40b2ca
    return result;
}

// Address range: 0x40b340 - 0x40b383
int32_t function_40b340(void) {
    // 0x40b340
    g845 = 0;
    int32_t result; // 0x40b340
    if (g262 == 0) {
        // 0x40b354
        g946 = function_4111a0(0x2588);
        int32_t v1 = function_4111a0(3208); // 0x40b36b
        g945 = v1;
        g262 = 1;
        result = v1;
    }
    // 0x40b382
    return result;
}

// Address range: 0x40b390 - 0x40bcfb
int32_t function_40b390(int32_t a1) {
    int32_t v1 = a1 + 4; // 0x40b39a
    int32_t v2 = *(int32_t *)v1; // 0x40b39a
    int32_t v3 = a1 + 12; // 0x40b39d
    int32_t v4 = *(int32_t *)v3; // 0x40b39d
    int32_t v5 = v2 > v4 ? v2 : v4;
    g850 = v5;
    int32_t v6 = *(int32_t *)(v2 > v4 ? v3 : v1);
    g848 = v6;
    int32_t v7 = *(int32_t *)(a1 + 20); // 0x40b3cb
    int32_t v8; // 0x40b390
    int32_t v9; // 0x40b390
    if (v5 < v7) {
        // 0x40b3d2
        g850 = v7;
        v8 = v7;
        v9 = v6;
    } else {
        // 0x40b3d9
        v8 = v5;
        v9 = v6;
        if (v6 > v7) {
            // 0x40b3e3
            g848 = v7;
            v8 = v5;
            v9 = v7;
        }
    }
    // 0x40b3e8
    g849 = 1;
    g844 = 3;
    g846 = 5;
    int32_t v10 = 5; // 0x40b412
    int32_t v11 = 1; // 0x40b412
    if (*(int32_t *)(a1 + 24) < *(int32_t *)(a1 + 8)) {
        // 0x40b414
        g849 = 5;
        g846 = 1;
        v10 = 1;
        v11 = 5;
    }
    int32_t v12 = *(int32_t *)(a1 + 16); // 0x40b427
    int32_t v13; // 0x40b390
    int32_t v14; // 0x40b390
    int32_t v15; // 0x40b390
    if (*(int32_t *)(4 * v11 + v1) > v12) {
        // 0x40b432
        g849 = 3;
        g844 = v11;
        v15 = v11;
        v13 = v10;
        v14 = 3;
    } else {
        // 0x40b443
        v15 = 3;
        v13 = v10;
        v14 = v11;
        if (*(int32_t *)(4 * v10 + v1) < v12) {
            // 0x40b451
            g846 = 3;
            g844 = v10;
            v15 = v10;
            v13 = 3;
            v14 = v11;
        }
    }
    int32_t v16 = 4 * v14; // 0x40b469
    int32_t v17 = 4 * v13; // 0x40b472
    int32_t * v18 = (int32_t *)(v16 + v1); // 0x40b47b
    int32_t v19 = *v18; // 0x40b47b
    int32_t * v20 = (int32_t *)(v17 + v1); // 0x40b480
    int32_t v21 = *v20; // 0x40b480
    if ((g204 - v21 | v9 - g201 || g203 - v8 || v19 - g202) >= 0) {
        int32_t v22 = 4 * v15; // 0x40b4bd
        g431 = *(int32_t *)(v16 + a1);
        g432 = *v18;
        g433 = *(int32_t *)(v22 + a1);
        g434 = *(int32_t *)(v22 + v1);
        g435 = *(int32_t *)(v17 + a1);
        g436 = *v20;
        int32_t v23 = *(int32_t *)(a1 + 28); // 0x40b4f6
        int32_t v24 = v23 - 4;
        g437 = *(int32_t *)(v24 + v16);
        g438 = *(int32_t *)(v23 + v16);
        int32_t v25 = *(int32_t *)(v24 + v22); // 0x40b50b
        g439 = v25;
        g440 = *(int32_t *)(v23 + v22);
        g441 = *(int32_t *)(v24 + v17);
        g442 = *(int32_t *)(v23 + v17);
        g847 = g187;
        function_456b20();
        int32_t v26 = g448; // 0x40b54e
        g445 = *(int32_t *)(a1 + 32);
        g430 = *(int32_t *)(a1 + 36);
        g836 = g431;
        g837 = g432;
        g838 = g433;
        g839 = g434;
        if (v26 >= 1) {
            // 0x40b599
            function_456cb0();
            g838 = g435;
            g839 = g436;
            g840 = g437;
            g841 = g438;
            g842 = g441;
            g843 = g442;
            function_456c70();
            int32_t v27 = g945;
            int32_t v28 = *(int32_t *)v27 * (int32_t)g205 + g847; // 0x40b62f
            g847 = v28;
            function_410cbe(v27, v28, v26, v27 + 8, v25, v22);
            g847 = v28;
            g836 = g433;
            g837 = g434;
            function_456cb0();
            int32_t v29 = *(int32_t *)(g945 + 4); // 0x40b6b8
            int32_t result = g945 + 8; // 0x40b6cf
            function_410cbe(*(int32_t *)(v27 + 4), v29, g946, result, v25, v22);
            return result;
        }
        // 0x40b702
        g840 = g437;
        g841 = g438;
        g842 = g439;
        g843 = g440;
        function_456c70();
        g838 = g435;
        g839 = g436;
        function_456cb0();
        int32_t v30 = *(int32_t *)g945 * (int32_t)g205 + g847; // 0x40b798
        g847 = v30;
        function_410cbe(g946, v30, v26, g945 + 8, v25, v22);
        g847 = v30;
        g836 = g433;
        g837 = g434;
        g840 = g439;
        g841 = g440;
        g842 = g441;
        g843 = g442;
        function_456c70();
        int32_t result2 = 4 * *(int32_t *)(g946 + 4) + 8 + g945; // 0x40b85d
        function_410cbe(g945, *(int32_t *)(g946 + 4), v26, result2, v25, v22);
        return result2;
    }
    int32_t result3 = v8 - g201; // 0x40b8bd
    if ((g204 - v19 | result3 || g203 - v9 || v21 - g202) < 0) {
        // 0x40bcf4
        return result3;
    }
    int32_t v31 = 4 * v15; // 0x40b8d0
    g431 = *(int32_t *)(v16 + a1);
    g432 = *v18;
    g433 = *(int32_t *)(v31 + a1);
    g434 = *(int32_t *)(v31 + v1);
    g435 = *(int32_t *)(v17 + a1);
    g436 = *v20;
    int32_t v32 = *(int32_t *)(a1 + 28); // 0x40b909
    int32_t v33 = v32 - 4;
    g437 = *(int32_t *)(v33 + v16);
    g438 = *(int32_t *)(v32 + v16);
    int32_t v34 = *(int32_t *)(v33 + v31); // 0x40b91e
    g439 = v34;
    g440 = *(int32_t *)(v32 + v31);
    g441 = *(int32_t *)(v33 + v17);
    g442 = *(int32_t *)(v32 + v17);
    g847 = g187;
    function_456b20();
    uint32_t v35 = (int32_t)g448; // 0x40b961
    g445 = *(int32_t *)(a1 + 32);
    g430 = *(int32_t *)(a1 + 36);
    g836 = g431;
    g837 = g432;
    g838 = g433;
    g839 = g434;
    if (v35 >= 1) {
        // 0x40b9ac
        function_456e00();
        g836 = g431;
        g837 = g432;
        g838 = g435;
        g839 = g436;
        g840 = g437;
        g841 = g438;
        g842 = g441;
        g843 = g442;
        function_456ce0();
        int32_t v36 = g945;
        int32_t v37 = *(int32_t *)v36 * (int32_t)g205 + g847; // 0x40ba58
        g847 = v37;
        function_410cbe(v36, v37, v35, v36 + 8, v34, v31);
        g847 = v37;
        g836 = g433;
        g837 = g434;
        g838 = g435;
        g839 = g436;
        function_456e00();
        int32_t v38 = *(int32_t *)(g945 + 4); // 0x40baf7
        int32_t result4 = g945 + 8; // 0x40bb0e
        function_410cbe(*(int32_t *)(v36 + 4), v38, g946, result4, v34, v31);
        return result4;
    }
    // 0x40bb41
    g840 = g437;
    g841 = g438;
    g842 = g439;
    g843 = g440;
    function_456ce0();
    g836 = g431;
    g837 = g432;
    g838 = g435;
    g839 = g436;
    function_456e00();
    int32_t v39 = *(int32_t *)g945 * (int32_t)g205 + g847; // 0x40bbed
    g847 = v39;
    function_410cbe(g946, v39, v35, g945 + 8, v34, v31);
    g847 = v39;
    g836 = g433;
    g837 = g434;
    g838 = g435;
    g839 = g436;
    g840 = g439;
    g841 = g440;
    g842 = g441;
    g843 = g442;
    function_456ce0();
    int32_t result5 = 4 * *(int32_t *)(g946 + 4) + 8 + g945; // 0x40bcc8
    function_410cbe(g945, *(int32_t *)(g946 + 4), v35, result5, v34, v31);
    // 0x40bcf4
    return result5;
}

// Address range: 0x40bcfc - 0x40bd4e
int32_t function_40bcfc(void) {
    // 0x40bcfc
    int32_t v1; // 0x40bcfc
    int32_t v2 = *(int32_t *)(v1 + 4); // 0x40bcfc
    int32_t v3 = *(int32_t *)(v1 + 8); // 0x40bcff
    int32_t result = v2; // 0x40bd08
    if (!((v2 < g197 | v2 > g199)) && v3 >= g198 && v3 <= g200) {
        int32_t v4 = *(int32_t *)(4 * (v3 >> 8) + (int32_t)&g206); // 0x40bd28
        result = v4 + (v2 >> 8) + g187;
        unsigned char v5 = *(char *)(v1 + 16); // 0x40bd39
        unsigned char v6 = *(char *)(v1 + 21); // 0x40bd3c
        char v7 = *(char *)((256 * (int32_t)v5 | (int32_t)v6) + g188); // 0x40bd45
        *(char *)result = v7;
    }
    // 0x40bd49
    return result;
}

// Address range: 0x40bd50 - 0x40bd5f
int32_t function_40bd50(void) {
    // 0x40bd50
    g250 = (int32_t)&g207 >> 2;
    int32_t result; // 0x40bd50
    return result;
}

// Address range: 0x40bd5f - 0x40c64d
int32_t function_40bd5f(void) {
    // 0x40bd5f
    int32_t v1; // 0x40bd5f
    int32_t v2 = v1 + 16; // 0x40bd5f
    int32_t v3 = v1 + 4; // 0x40bd62
    int32_t v4 = *(int32_t *)(v1 + 20); // 0x40bd65
    int32_t v5 = v1 + 28; // 0x40bd68
    int32_t v6 = *(int32_t *)(v1 + 8); // 0x40bd6b
    int32_t v7 = *(int32_t *)(v1 + 32);
    int32_t v8; // 0x40bd5f
    int32_t v9; // 0x40bd5f
    int32_t v10; // 0x40bd5f
    if (v4 < v6) {
        // 0x40bd83
        v9 = v3;
        v10 = v5;
        v8 = v2;
        if (v7 <= v6) {
            // 0x40bd8d
            v9 = v7 > v4 ? v5 : v2;
            v10 = v3;
            v8 = v7 > v4 ? v2 : v5;
        }
    } else {
        // 0x40bd70
        v9 = v2;
        v10 = v5;
        v8 = v3;
        if (v4 >= v7) {
            // 0x40bd75
            v9 = v6 < v7 ? v5 : v3;
            v10 = v2;
            v8 = v6 < v7 ? v3 : v5;
        }
    }
    int32_t v11 = *(int32_t *)v8; // 0x40bd9c
    int32_t v12 = v11 >> 8; // 0x40bd9e
    g223 = v12;
    int32_t v13 = *(int32_t *)(v8 + 4) >> 8;
    g224 = v13;
    int32_t v14 = *(int32_t *)v9; // 0x40bdae
    int32_t v15 = v14 >> 8; // 0x40bdb0
    g225 = v15;
    int32_t v16 = *(int32_t *)(v9 + 4) >> 8; // 0x40bdb9
    g226 = v16;
    int32_t v17 = *(int32_t *)v10; // 0x40bdc2
    int32_t v18 = v17 >> 8; // 0x40bdc4
    g227 = v18;
    int32_t v19 = *(int32_t *)(v10 + 4) >> 8; // 0x40bdcd
    g228 = v19;
    int32_t result = v19 - v13;
    if (result > 0x3a98) {
        // 0x40c25f
        return result;
    }
    int32_t v20; // 0x40bd5f
    if (v11 < -0x7d0000) {
        // 0x40be19
        g223 = -0x7d00;
        v20 = -0x7d00;
    } else {
        // 0x40bdf0
        v20 = v12;
        if (v11 > 0x7d00ff) {
            // 0x40be21
            g223 = 0x7d00;
            v20 = 0x7d00;
        }
    }
    // 0x40bdf7
    int32_t v21; // 0x40bd5f
    if (v14 < -0x7d0000) {
        // 0x40be29
        g225 = -0x7d00;
        v21 = -0x7d00;
    } else {
        // 0x40be00
        v21 = v15;
        if (v14 > 0x7d00ff) {
            // 0x40be31
            g225 = 0x7d00;
            v21 = 0x7d00;
        }
    }
    // 0x40be07
    int32_t v22; // 0x40bd5f
    if (v17 < -0x7d0000) {
        // 0x40be39
        g227 = -0x7d00;
        v22 = -0x7d00;
    } else {
        // 0x40be10
        v22 = v18;
        if (v17 > 0x7d00ff) {
            // 0x40be41
            g227 = 0x7d00;
            v22 = 0x7d00;
        }
    }
    // 0x40be49
    int32_t v23; // 0x40bd5f
    int32_t v24; // 0x40bd5f
    int32_t v25; // 0x40bd5f
    int32_t v26; // 0x40bd5f
    int32_t v27; // 0x40bd5f
    int32_t v28; // 0x40bd5f
    int32_t v29; // 0x40bd5f
    int32_t v30; // 0x40bd5f
    int32_t v31; // 0x40bd5f
    int32_t v32; // 0x40bd5f
    int32_t v33; // 0x40bd5f
    int32_t v34; // 0x40bd5f
    int32_t v35; // 0x40bd5f
    int32_t v36; // 0x40bd5f
    int32_t v37; // 0x40bd5f
    int32_t v38; // 0x40bd5f
    int32_t v39; // 0x40bd5f
    int32_t result3; // 0x40bd5f
    int32_t v40; // 0x40bd5f
    int32_t result5; // 0x40bd5f
    unsigned char v41; // 0x40c0be
    int32_t v42; // 0x40bd5f
    int16_t v43; // 0x40c0ca
    int32_t v44; // 0x40be88
    if (v19 == v13) {
        int32_t v45 = v21 < v20 ? (int32_t)&g223 : (int32_t)&g225;
        int32_t v46 = v21 < v20 ? (int32_t)&g225 : (int32_t)&g223;
        uint32_t v47 = *(int32_t *)v45; // 0x40c383
        int32_t v48 = v22; // 0x40c385
        int32_t v49 = v46; // 0x40c385
        if (v22 <= v47) {
            int32_t v50 = *(int32_t *)v46; // 0x40c387
            v49 = v22 > v50 ? v46 : (int32_t)&g227;
            v48 = v47;
        }
        // 0x40c38f
        g248 = v48;
        int32_t v51 = *(int32_t *)v49; // 0x40c394
        g245 = v51;
        int32_t v52 = *(int32_t *)(v49 + 4); // 0x40c39b
        g240 = v52;
        g243 = 0;
        v37 = v48;
        v38 = v51;
        v29 = 0;
        v39 = v52;
        v30 = g241;
        v31 = g242;
        result3 = v52;
        goto lab_0x40c4ff;
    } else {
        if (v16 == v13) {
            int32_t v53 = v21 < v20 ? (int32_t)&g223 : (int32_t)&g225;
            int32_t v54 = v21 < v20 ? (int32_t)&g225 : (int32_t)&g223;
            int32_t * v55 = (int32_t *)(v54 + 4); // 0x40c3ba
            int32_t v56 = *v55; // 0x40c3ba
            g240 = v56;
            int32_t v57 = v19 - *v55; // 0x40c3c5
            g243 = v57;
            int32_t * v58 = (int32_t *)v54; // 0x40c3ce
            int32_t v59 = *v58; // 0x40c3ce
            g245 = v59;
            int32_t v60 = *(int32_t *)v53; // 0x40c3d5
            g248 = v60;
            int32_t v61 = v22 - v60;
            int32_t v62 = g250 + v57; // 0x40c3e0
            int32_t v63; // 0x40bd5f
            if (v61 < 1) {
                // 0x40c405
                *(int16_t *)&g247 = -1;
                v63 = *(int32_t *)(4 * v62) * (v61 - 1);
            } else {
                // 0x40c3eb
                *(int16_t *)&g247 = 0;
                int32_t v64 = *(int32_t *)(4 * v62) * (v61 + 1); // 0x40c3f5
                g247 += v64;
                v63 = v64;
            }
            // 0x40c417
            g242 = v63;
            int32_t v65 = v22 - *v58; // 0x40c41e
            int32_t v66; // 0x40bd5f
            if (v65 >= 0) {
                // 0x40c43f
                *(int16_t *)&g244 = 0;
                v66 = *(int32_t *)(4 * v62) * (v65 + 1);
            } else {
                // 0x40c425
                *(int16_t *)&g244 = -1;
                int32_t v67 = *(int32_t *)(4 * v62) * (v65 - 1); // 0x40c42f
                g244 += v67;
                v66 = v67;
            }
            // 0x40c451
            g241 = v66;
            v37 = v60;
            v38 = v59;
            v29 = v57;
            v39 = v56;
            v30 = v66;
            v31 = v63;
            result3 = v66;
            goto lab_0x40c4ff;
        } else {
            if (v19 == v16) {
                int32_t v68 = v22 < v21 ? (int32_t)&g225 : (int32_t)&g227;
                g240 = v13;
                int32_t v69 = *(int32_t *)(v68 + 4) - v13; // 0x40c46e
                g243 = v69;
                g245 = v20;
                g248 = v20;
                int32_t v70 = *(int32_t *)v68 - v20;
                int32_t v71 = g250 + v69; // 0x40c487
                int32_t v72; // 0x40bd5f
                if (v70 < 1) {
                    // 0x40c4ac
                    *(int16_t *)&g247 = -1;
                    v72 = *(int32_t *)(4 * v71) * (v70 - 1);
                } else {
                    // 0x40c492
                    *(int16_t *)&g247 = 0;
                    int32_t v73 = *(int32_t *)(4 * v71) * (v70 + 1); // 0x40c49c
                    g247 += v73;
                    v72 = v73;
                }
                int32_t v74 = v22 < v21 ? (int32_t)&g227 : (int32_t)&g225;
                g242 = v72;
                int32_t v75 = *(int32_t *)v74 - v20; // 0x40c4c5
                int32_t v76; // 0x40bd5f
                if (v75 >= 0) {
                    // 0x40c4e6
                    *(int16_t *)&g244 = 0;
                    v76 = *(int32_t *)(4 * v71) * (v75 + 1);
                } else {
                    // 0x40c4cc
                    *(int16_t *)&g244 = -1;
                    int32_t v77 = *(int32_t *)(4 * v71) * (v75 - 1); // 0x40c4d6
                    g244 += v77;
                    v76 = v77;
                }
                // 0x40c4f8
                g241 = v76;
                v37 = v20;
                v38 = v20;
                v29 = v69;
                v39 = v13;
                v30 = v76;
                v31 = v72;
                result3 = v76;
                goto lab_0x40c4ff;
            } else {
                // 0x40be6a
                g240 = v13;
                g229 = v16;
                int32_t v78 = v16 - v13; // 0x40be7d
                g243 = v78;
                v44 = v19 - v16;
                g230 = v44;
                g245 = v20;
                g248 = v20;
                int32_t v79 = v22 - v20;
                int32_t * v80 = (int32_t *)(4 * (g250 + result)); // 0x40beac
                int32_t v81 = (v79 * v78 * *v80 + 0x8000 >> 16) + v20; // 0x40bec3
                if (v81 < v21) {
                    // 0x40becd
                    g234 = v81;
                    int32_t v82; // 0x40bd5f
                    if (v79 < 1) {
                        // 0x40bef8
                        *(int16_t *)&g244 = -1;
                        *(int16_t *)&g233 = -1;
                        int32_t v83 = *v80 * (v79 - 1); // 0x40bf0b
                        g244 += v83;
                        g233 += v83;
                        v82 = v83;
                    } else {
                        // 0x40bedb
                        *(int16_t *)&g244 = 0;
                        *(int16_t *)&g233 = 0;
                        v82 = *v80 * (v79 + 1);
                    }
                    int64_t v84 = v82; // 0x40bf1f
                    g241 = v84;
                    g231 = v84;
                    int32_t v85 = g250 + v78; // 0x40bf2f
                    int32_t v86 = v21 - v20; // 0x40bf37
                    int32_t v87; // 0x40bd5f
                    if (v86 >= 0) {
                        int32_t v88 = *(int32_t *)(4 * v85) * (v86 + 1); // 0x40bf53
                        *(int16_t *)&g247 = 0;
                        g247 += v88;
                        v87 = v88;
                    } else {
                        // 0x40bf3e
                        *(int16_t *)&g247 = -1;
                        v87 = *(int32_t *)(4 * v85) * (v86 - 1);
                    }
                    // 0x40bf6a
                    g242 = v87;
                    g237 = v21;
                    int32_t v89 = g250 + v44; // 0x40bf7c
                    int32_t v90 = v22 - v21; // 0x40bf84
                    int32_t v91; // 0x40bd5f
                    if (v90 < 1) {
                        // 0x40bfa5
                        *(int16_t *)&g236 = -1;
                        v91 = *(int32_t *)(4 * v89) * (v90 - 1);
                    } else {
                        // 0x40bf8b
                        *(int16_t *)&g236 = 0;
                        int32_t v92 = *(int32_t *)(4 * v89) * (v90 + 1); // 0x40bf95
                        g236 += v92;
                        v91 = v92;
                    }
                    // 0x40bfb7
                    g232 = v91;
                    v23 = v82;
                    v25 = v91;
                    v26 = v82;
                    v27 = v87;
                } else {
                    // 0x40bfc1
                    g237 = v81;
                    int32_t v93; // 0x40bd5f
                    if (v79 >= 0) {
                        // 0x40bfec
                        *(int16_t *)&g247 = 0;
                        int32_t v94 = *v80 * (v79 + 1); // 0x40bff6
                        *(int16_t *)&g236 = 0;
                        g247 += v94;
                        g236 += v94;
                        v93 = v94;
                    } else {
                        // 0x40bfcf
                        *(int16_t *)&g247 = -1;
                        *(int16_t *)&g236 = -1;
                        v93 = *v80 * (v79 - 1);
                    }
                    int64_t v95 = v93; // 0x40c013
                    g242 = v95;
                    g232 = v95;
                    int32_t v96 = g250 + v78; // 0x40c023
                    int32_t v97 = v21 - v20; // 0x40c02b
                    int32_t v98; // 0x40bd5f
                    if (v97 < 1) {
                        int32_t v99 = *(int32_t *)(4 * v96) * (v97 - 1); // 0x40c047
                        *(int16_t *)&g244 = -1;
                        g244 += v99;
                        v98 = v99;
                    } else {
                        // 0x40c032
                        *(int16_t *)&g244 = 0;
                        v98 = *(int32_t *)(4 * v96) * (v97 + 1);
                    }
                    // 0x40c05e
                    g241 = v98;
                    g234 = v21;
                    int32_t v100 = g250 + v44; // 0x40c070
                    int32_t v101 = v22 - v21; // 0x40c078
                    int32_t v102; // 0x40bd5f
                    if (v101 >= 0) {
                        // 0x40c099
                        *(int16_t *)&g233 = 0;
                        v102 = *(int32_t *)(4 * v100) * (v101 + 1);
                    } else {
                        int32_t v103 = *(int32_t *)(4 * v100) * (v101 - 1); // 0x40c080
                        *(int16_t *)&g233 = -1;
                        g233 += v103;
                        v102 = v103;
                    }
                    // 0x40c0ab
                    g231 = v102;
                    v23 = v102;
                    v25 = v93;
                    v26 = v98;
                    v27 = v93;
                }
                unsigned char v104 = *(char *)(v1 + 45); // 0x40c0b2
                unsigned char v105 = *(char *)(v1 + 40); // 0x40c0b5
                v41 = *(char *)((256 * (int32_t)v105 | (int32_t)v104) + g188);
                int32_t v106 = v41; // 0x40c0be
                v42 = 256 * v106 | v106;
                int32_t v107 = llvm_bswap_i32(v42) | v42; // 0x40c0c8
                v43 = v42;
                g239 = v43;
                *(int16_t *)&g246 = 0;
                *(int16_t *)&g249 = 0;
                v28 = v78;
                v40 = v107;
                v33 = v13;
                if (g190 > v13) {
                    int32_t v108 = g190 - v13;
                    int32_t v109 = v78 - v108; // 0x40c2a5
                    g243 = v109;
                    v34 = g190;
                    v32 = v23;
                    v24 = v25;
                    v35 = v16;
                    v36 = v44;
                    result5 = v107;
                    if (v109 < 0) {
                        goto lab_0x40c191;
                    } else {
                        // 0x40c2b1
                        g247 += v108 * v27;
                        int32_t v110 = v108 * v26; // 0x40c2be
                        g244 += v110;
                        g240 = g190;
                        v28 = v109;
                        v40 = v110;
                        v33 = g190;
                        goto lab_0x40c0ff;
                    }
                } else {
                    goto lab_0x40c0ff;
                }
            }
        }
    }
  lab_0x40c5b4:
    // 0x40c5b4
    g247 += v31;
    g244 += v30;
    int32_t v111 = (int32_t)g243 - 1; // 0x40c5c6
    g243 = v111;
    int32_t v112; // 0x40c56c
    int32_t result2 = v112; // 0x40c5cc
    if (v111 < 0) {
        return result2;
    }
    int32_t v113 = g248; // 0x40bd5f
    int32_t v114 = g245; // 0x40bd5f
    int32_t v115; // 0x40bd5f
    int32_t v116 = v115 + (int32_t)g205; // 0x40bd5f
    goto lab_0x40c56e;
  lab_0x40c5ec:;
    // 0x40c5ec
    int16_t v124; // 0x40bd5f
    int32_t v122; // 0x40bd5f
    int32_t v123; // 0x40bd5f
    int32_t v125; // 0x40bd5f
    if (g191 < v124) {
        goto lab_0x40c5b4;
    } else {
        // 0x40c5f5
        v122 = g191;
        v123 = v125;
        goto lab_0x40c58c;
    }
  lab_0x40c58c:;
    int32_t v126 = v123;
    int32_t v127 = v122 - v126; // 0x40c58c
    unsigned char v128; // 0x40c562
    int32_t v129; // 0x40bd5f
    if ((int16_t)v127 < 0) {
        goto lab_0x40c5b4;
    } else {
        int32_t v130 = v126 + v115; // 0x40c58e
        int32_t v131 = v127 - 3; // 0x40c596
        int32_t v132 = v131; // 0x40c599
        int32_t v133 = v131; // 0x40c599
        if (v131 >= 0) {
            *(int32_t *)(v132 + v130) = v112;
            int32_t v134 = v132 - 4; // 0x40c59e
            v132 = v134;
            v133 = v134;
            while (v134 >= 0) {
                // 0x40c59b
                *(int32_t *)(v132 + v130) = v112;
                v134 = v132 - 4;
                v132 = v134;
                v133 = v134;
            }
        }
        int32_t v135 = v133;
        if (v135 < -2) {
            if (v135 == -3) {
                // 0x40c5b0
                *(char *)(v130 + 3 + v135) = v128;
                goto lab_0x40c5b4;
            } else {
                goto lab_0x40c5b4;
            }
        } else {
            // 0x40c5ab
            *(int16_t *)v130 = (int16_t)v129;
            // 0x40c5b0
            *(char *)(v130 + 3 + v135) = v128;
            goto lab_0x40c5b4;
        }
    }
  lab_0x40c251:;
    int32_t v136 = g230 - 1; // 0x40c257
    g230 = v136;
    int32_t v137; // 0x40bd5f
    int32_t v138 = v137 + (int32_t)g205; // 0x40c25d
    int32_t v139; // 0x40c1f2
    result2 = v139;
    if (v136 < 0) {
        // break -> 0x40c25f
        goto lab_0x40c25f_2;
    }
    goto lab_0x40c1f7;
  lab_0x40c30f:;
    // 0x40c30f
    int16_t v145; // 0x40bd5f
    int32_t v143; // 0x40bd5f
    int32_t v144; // 0x40bd5f
    int32_t v146; // 0x40bd5f
    if (g191 < v145) {
        goto lab_0x40c251;
    } else {
        // 0x40c31c
        v143 = g191;
        v144 = v146;
        goto lab_0x40c229;
    }
  lab_0x40c229:;
    int32_t v147 = v144;
    int32_t v148 = v143 - v147; // 0x40c229
    char v149; // 0x40bd5f
    if ((int16_t)v148 < 0) {
        goto lab_0x40c251;
    } else {
        int32_t v150 = v147 + v137; // 0x40c22b
        int32_t v151 = v148 - 3; // 0x40c233
        int32_t v152 = v151; // 0x40c236
        int32_t v153 = v151; // 0x40c236
        if (v151 >= 0) {
            *(int32_t *)(v152 + v150) = v139;
            int32_t v154 = v152 - 4; // 0x40c23b
            v152 = v154;
            v153 = v154;
            while (v154 >= 0) {
                // 0x40c238
                *(int32_t *)(v152 + v150) = v139;
                v154 = v152 - 4;
                v152 = v154;
                v153 = v154;
            }
        }
        int32_t v155 = v153;
        if (v155 < -2) {
            if (v155 == -3) {
                // 0x40c24d
                *(char *)(v150 + 3 + v155) = v149;
                goto lab_0x40c251;
            } else {
                goto lab_0x40c251;
            }
        } else {
            // 0x40c248
            *(int16_t *)v150 = g239;
            // 0x40c24d
            *(char *)(v150 + 3 + v155) = v149;
            goto lab_0x40c251;
        }
    }
  lab_0x40c177:
    // 0x40c177
    g247 += v27;
    g244 += v26;
    int32_t v156 = (int32_t)g243 - 1; // 0x40c189
    g243 = v156;
    if (v156 < 0) {
        // break -> 0x40c191
        goto lab_0x40c191_2;
    }
    int32_t v157 = g248; // 0x40bd5f
    int32_t v158 = g245; // 0x40bd5f
    int32_t v159; // 0x40bd5f
    int32_t v160 = v159 + (int32_t)g205; // 0x40bd5f
    goto lab_0x40c129;
  lab_0x40c285:;
    // 0x40c285
    int16_t v168; // 0x40bd5f
    int32_t v166; // 0x40bd5f
    int32_t v167; // 0x40bd5f
    int32_t v169; // 0x40bd5f
    if (g191 < v168) {
        goto lab_0x40c177;
    } else {
        // 0x40c292
        v166 = g191;
        v167 = v169;
        goto lab_0x40c14f;
    }
  lab_0x40c14f:;
    int32_t v170 = v167;
    int32_t v171 = v166 - v170; // 0x40c14f
    int32_t v172; // 0x40c124
    if ((int16_t)v171 < 0) {
        goto lab_0x40c177;
    } else {
        int32_t v173 = v170 + v159; // 0x40c151
        int32_t v174 = v171 - 3; // 0x40c159
        int32_t v175 = v174; // 0x40c15c
        int32_t v176 = v174; // 0x40c15c
        if (v174 >= 0) {
            *(int32_t *)(v175 + v173) = v172;
            int32_t v177 = v175 - 4; // 0x40c161
            v175 = v177;
            v176 = v177;
            while (v177 >= 0) {
                // 0x40c15e
                *(int32_t *)(v175 + v173) = v172;
                v177 = v175 - 4;
                v175 = v177;
                v176 = v177;
            }
        }
        int32_t v178 = v176;
        if (v178 < -2) {
            if (v178 == -3) {
                // 0x40c173
                *(char *)(v173 + 3 + v178) = v41;
                goto lab_0x40c177;
            } else {
                goto lab_0x40c177;
            }
        } else {
            // 0x40c16e
            *(int16_t *)v173 = v43;
            // 0x40c173
            *(char *)(v173 + 3 + v178) = v41;
            goto lab_0x40c177;
        }
    }
  lab_0x40c4ff:
    // 0x40c4ff
    *(int16_t *)&g246 = 0;
    *(int16_t *)&g249 = 0;
    int32_t v179 = v29; // 0x40c529
    int32_t result4 = result3; // 0x40c529
    int32_t v180 = v39; // 0x40c529
    if (g190 > v39) {
        int32_t v181 = g190 - v39;
        int32_t v182 = v29 - v181; // 0x40c605
        g243 = v182;
        if (v182 < 0) {
            // 0x40c25f
            return result3;
        }
        // 0x40c60d
        g247 += v181 * v31;
        int32_t v183 = v181 * v30; // 0x40c61a
        g244 += v183;
        g240 = g190;
        v179 = v182;
        result4 = v183;
        v180 = g190;
    }
    int32_t v184 = v180 + v179; // 0x40c52f
    if (g192 < v184) {
        int32_t v185 = g192 - v184 + v179; // 0x40c63a
        g243 = v185;
        if (v185 < 0) {
            // 0x40c25f
            return result4;
        }
    }
    unsigned char v186 = *(char *)(v1 + 45); // 0x40c556
    unsigned char v187 = *(char *)(v1 + 40); // 0x40c559
    v128 = *(char *)((256 * (int32_t)v187 | (int32_t)v186) + g188);
    int32_t v188 = v128; // 0x40c562
    v129 = 256 * v188 | v188;
    v112 = llvm_bswap_i32(v129) | v129;
    v113 = v37;
    v114 = v38;
    v116 = g187 + *(int32_t *)(4 * v180 + (int32_t)&g206);
    while (true) {
      lab_0x40c56e:
        // 0x40c56e
        v115 = v116;
        int32_t v117 = v114; // 0x40c56e
        int32_t v118 = v113; // 0x40c574
        int16_t v119 = v117;
        if (g189 > v119) {
            int16_t v120 = v118; // 0x40c5db
            if (g189 > v120) {
                goto lab_0x40c5b4;
            } else {
                int32_t v121 = g189; // 0x40c5dd
                v122 = v118;
                v123 = v121;
                v124 = g189;
                v125 = v121;
                if (g191 < v120) {
                    goto lab_0x40c5ec;
                } else {
                    goto lab_0x40c58c;
                }
            }
        } else {
            // 0x40c583
            v122 = v118;
            v123 = v117;
            v124 = v119;
            v125 = v117;
            if (g191 < (int16_t)v118) {
                goto lab_0x40c5ec;
            } else {
                goto lab_0x40c58c;
            }
        }
    }
  lab_0x40c25f_2:
    // 0x40c25f
    return result2;
  lab_0x40c0ff:;
    int32_t v189 = v33 + v28; // 0x40c0ff
    if (g192 < v189) {
        int32_t v190 = g192 - v189 + v28; // 0x40c2de
        g243 = v190;
        v34 = g190;
        v32 = v23;
        v24 = v25;
        v35 = v16;
        v36 = v44;
        result5 = v40;
        if (v190 < 0) {
            goto lab_0x40c191;
        } else {
            goto lab_0x40c111;
        }
    } else {
        goto lab_0x40c111;
    }
  lab_0x40c191:;
    int32_t v191 = v36 - 1; // 0x40c191
    g230 = v191;
    int32_t v192 = v35 + 1;
    g229 = v192;
    *(int16_t *)&g235 = 0;
    *(int16_t *)&g238 = 0;
    int32_t v193 = v191; // 0x40c1c7
    int32_t result6 = result5; // 0x40c1c7
    int32_t v194 = v192; // 0x40c1c7
    if (v34 > v192) {
        int32_t v195 = v34 - v192;
        int32_t v196 = v191 - v195; // 0x40c32f
        g230 = v196;
        if (v196 < 0) {
            // 0x40c25f
            return result5;
        }
        // 0x40c33b
        g236 += v195 * v24;
        int32_t v197 = v195 * v32; // 0x40c348
        g233 += v197;
        g229 = v34;
        v193 = v196;
        result6 = v197;
        v194 = v34;
    }
    int32_t v198 = v194 + v193; // 0x40c1cd
    if (g192 < v198) {
        int32_t v199 = g192 - v198 + v193; // 0x40c368
        g230 = v199;
        if (v199 < 0) {
            // 0x40c25f
            return result6;
        }
    }
    // 0x40c1df
    v139 = g239;
    v149 = g239;
    v138 = g187 + *(int32_t *)(4 * v194 + (int32_t)&g206);
    while (true) {
      lab_0x40c1f7:
        // 0x40c1f7
        v137 = v138;
        g236 += v24;
        g233 += v32;
        int16_t v140 = g234;
        if (g189 > v140) {
            int16_t v141 = g237; // 0x40c2f6
            if (g189 > v141) {
                goto lab_0x40c251;
            } else {
                int32_t v142 = g189; // 0x40c2fc
                v143 = g237;
                v144 = v142;
                v145 = g189;
                v146 = v142;
                if (g191 < v141) {
                    goto lab_0x40c30f;
                } else {
                    goto lab_0x40c229;
                }
            }
        } else {
            // 0x40c21c
            v143 = g237;
            v144 = g234;
            v145 = v140;
            v146 = g234;
            if (g191 < (int16_t)g237) {
                goto lab_0x40c30f;
            } else {
                goto lab_0x40c229;
            }
        }
    }
    int32_t result7 = result2;
    return result7;
  lab_0x40c111:
    // 0x40c111
    v172 = 0x10000 * v42 >> 16;
    v157 = v20;
    v158 = v20;
    v160 = g187 + *(int32_t *)(4 * v33 + (int32_t)&g206);
    while (true) {
      lab_0x40c129:
        // 0x40c129
        v159 = v160;
        int32_t v161 = v158; // 0x40c129
        int32_t v162 = v157; // 0x40c12f
        int16_t v163 = v161;
        if (g189 > v163) {
            int16_t v164 = v162; // 0x40c26c
            if (g189 > v164) {
                goto lab_0x40c177;
            } else {
                int32_t v165 = g189; // 0x40c272
                v166 = v162;
                v167 = v165;
                v168 = g189;
                v169 = v165;
                if (g191 < v164) {
                    goto lab_0x40c285;
                } else {
                    goto lab_0x40c14f;
                }
            }
        } else {
            // 0x40c142
            v166 = v162;
            v167 = v161;
            v168 = v163;
            v169 = v161;
            if (g191 < (int16_t)v162) {
                goto lab_0x40c285;
            } else {
                goto lab_0x40c14f;
            }
        }
    }
  lab_0x40c191_2:
    // 0x40c191
    v34 = g190;
    v32 = g231;
    v24 = g232;
    v35 = g229;
    v36 = g230;
    result5 = v172;
    goto lab_0x40c191;
}

// Address range: 0x40c650 - 0x40c9db
int32_t function_40c650(void) {
    // 0x40c650
    g323 = 0.0f;
    int32_t v1 = g967 - g957; // 0x40c66c
    if (v1 != 0) {
        // 0x40c670
        g323 = (float80_t)(g966 - g956) / (float80_t)v1;
    }
    // 0x40c695
    g324 = 0.0f;
    int32_t v2 = g962 - g957; // 0x40c6aa
    if (v2 != 0) {
        // 0x40c6ae
        g324 = (float80_t)(g961 - g956) / (float80_t)v2;
    }
    // 0x40c6d3
    g977 = 0;
    int32_t v3 = g967 - g962; // 0x40c6e8
    int32_t v4 = g966 - g961;
    if (v3 != 0) {
        // 0x40c6ec
        g977 = (float32_t)((float80_t)v4 / (float80_t)v3);
    }
    // 0x40c711
    g329 = g969 - g959;
    g330 = g970 - g960;
    int32_t v5 = g968 - g958; // 0x40c740
    g333 = v5;
    g331 = g964 - g959;
    g332 = g965 - g960;
    int32_t v6 = g963 - g958; // 0x40c76a
    g334 = v6;
    g952 = g969 - g964;
    g953 = g970 - g965;
    int32_t v7 = g968 - g963; // 0x40c7a0
    g947 = v7;
    int32_t v8 = g966 - g956; // 0x40c7ac
    int32_t v9 = v8 >= 0 ? v8 : g956 - g966;
    int32_t v10 = v1 >= 0 ? v1 : g957 - g967;
    int32_t v11 = g961 - g956; // 0x40c7e1
    int32_t v12 = v11 >= 0 ? v11 : g956 - g961;
    int32_t v13 = v2 >= 0 ? v2 : g957 - g962;
    int32_t v14 = v4 >= 0 ? v4 : g961 - g966;
    int32_t v15 = v3 >= 0 ? v3 : g962 - g967;
    float80_t v16 = g958; // 0x40c83f
    float80_t v17 = g968; // 0x40c845
    float80_t v18 = v9 > v10 ? v9 : v10; // 0x40c855
    float80_t v19 = v12 > v13 ? v12 : v13; // 0x40c85d
    float80_t v20 = g963; // 0x40c867
    float80_t v21 = v14 > v15 ? v14 : v15; // 0x40c87f
    g325 = v18 / v16 * v17;
    g327 = v19 / v16 * v20;
    g980 = (float32_t)(v21 / v20 * v17);
    g326 = (float80_t)-v5 / v16;
    g328 = (float80_t)-v6 / v16;
    g979 = (float32_t)((float80_t)-v7 / v20);
    if (g967 != g957) {
        // 0x40c900
        g314 = v18 / (float80_t)v1;
    }
    if (g962 != g957) {
        // 0x40c921
        g317 = v19 / (float80_t)v2;
    }
    if (g967 != g962) {
        // 0x40c942
        g978 = v21 / (float80_t)v3;
    }
    // 0x40c954
    g948 = v2;
    g950 = g975 - g974;
    g949 = v3;
    g335 = 0;
    int32_t v22 = g976 - g975; // 0x40c993
    g951 = v22;
    int32_t v23; // 0x40c650
    if ((v23 & 0x4100) != 0) {
        // 0x40c9a1
        g335 = 1;
    }
    if (v2 == 0) {
        // 0x40c9af
        g335 = g961 < g956;
    }
    // 0x40c9d3
    return v22 & -0x10000 | v23 & 0xffff;
}

// Address range: 0x40c9e0 - 0x40cb69
int32_t function_40c9e0(int32_t a1) {
    int32_t v1 = 2; // 0x40c9fa
    int32_t v2 = a1 + 24; // 0x40c9fa
    int32_t v3 = 1;
    int32_t v4 = 1;
    int32_t v5 = *(int32_t *)v2; // 0x40c9fd
    int32_t v6 = *(int32_t *)(12 * v3 + a1) > v5 ? v1 : v3;
    int32_t v7 = *(int32_t *)(12 * v4 + a1) < v5 ? v1 : v4;
    v1++;
    v2 += 12;
    while (v1 != 4) {
        // 0x40c9fd
        v3 = v6;
        v4 = v7;
        v5 = *(int32_t *)v2;
        v6 = *(int32_t *)(12 * v3 + a1) > v5 ? v1 : v3;
        v7 = *(int32_t *)(12 * v4 + a1) < v5 ? v1 : v4;
        v1++;
        v2 += 12;
    }
    int32_t v8 = a1 + 8; // 0x40c9e7
    int32_t v9 = v6 - v7; // 0x40ca20
    int32_t v10 = v7 + v6 != 3 ? v9 >= 0 ? v9 : v7 - v6 : 3;
    int32_t v11 = 12 * v6; // 0x40ca3b
    int32_t v12 = v11 + v8; // 0x40ca3b
    int32_t v13 = *(int32_t *)(v12 - 12);
    int32_t v14 = 12 * v10; // 0x40ca46
    int32_t v15 = v14 + v8; // 0x40ca46
    g956 = v13;
    int32_t v16 = *(int32_t *)(v15 - 12);
    g961 = v16;
    int32_t v17 = 12 * v7; // 0x40ca59
    int32_t v18 = v17 + a1;
    int32_t v19 = *(int32_t *)(v18 - 4);
    g966 = v19;
    int32_t v20 = *(int32_t *)(v11 + a1);
    g957 = v20;
    int32_t v21 = *(int32_t *)(v14 + a1);
    g962 = v21;
    int32_t v22 = *(int32_t *)v18;
    g967 = v22;
    int32_t result = *(int32_t *)(v12 - 4);
    g958 = result;
    g963 = *(int32_t *)(v15 - 4);
    g968 = *(int32_t *)(a1 + 4 + v17);
    int32_t v23 = 8 * v6; // 0x40ca9f
    int32_t v24 = a1 + 36; // 0x40ca9f
    int32_t v25 = *(int32_t *)(v23 + v24);
    g959 = v25;
    int32_t v26 = 8 * v10; // 0x40caa8
    g964 = *(int32_t *)(v26 + v24);
    int32_t v27 = 8 * v7; // 0x40cab2
    g969 = *(int32_t *)(v27 + v24);
    int32_t v28 = a1 + 40; // 0x40cabc
    int32_t v29 = *(int32_t *)(v23 + v28);
    g960 = v29;
    g965 = *(int32_t *)(v26 + v28);
    g970 = *(int32_t *)(v27 + v28);
    g971 = v13 >> 8;
    g972 = v16 >> 8;
    g973 = v19 >> 8;
    g974 = v20 >> 8;
    g975 = v21 >> 8;
    g339 = v13;
    g976 = v22 >> 8;
    g340 = v20;
    g341 = result;
    g342 = v25;
    g343 = v29;
    return result;
}

// Address range: 0x40cb70 - 0x40cdda
int32_t function_40cb70(void) {
    int32_t v1 = g202 - g957; // 0x40cb81
    g954 = v1;
    int32_t v2 = v1 >= 0 ? v1 : 0;
    int32_t v3 = g967 - g204; // 0x40cb98
    int32_t v4 = v3 >= 0 ? v3 : 0;
    g955 = v4;
    int32_t v5 = g948; // 0x40cbac
    int32_t result; // 0x40cb70
    int32_t v6; // 0x40cb70
    int32_t v7; // 0x40cb70
    int32_t v8; // 0x40cb70
    if (v5 > v2) {
        int32_t v9 = g949; // 0x40cbbf
        result = v4;
        v6 = v9;
        v7 = v5;
        v8 = v2;
        if (g950 != 0) {
            // 0x40cbcd
            g954 = v2;
            int32_t v10; // 0x40cb70
            if (v2 != 0) {
                // 0x40cbf7
                g954 = v2;
                v10 = v2 + 256;
            } else {
                // 0x40cbe4
                v10 = 256 - (g957 & 255);
            }
            int32_t v11 = v9 < v4 ? v5 - v4 + v9 : v5;
            g312 = v10;
            g315 = v10;
            float80_t v12 = v10; // 0x40cc0f
            g948 = v11;
            g316 = v12 * (float80_t)g317;
            g313 = v12 * (float80_t)g314;
            g318 = g956;
            g319 = g957;
            g320 = g958;
            g311 = v11;
            g321 = g959;
            g322 = g960;
            function_40e9cc();
            result = g955;
            v6 = g949;
            v7 = g948;
            v8 = g954;
        }
    } else {
        // 0x40cc90
        result = v4;
        v6 = g949;
        v7 = v5;
        v8 = v2;
    }
    // 0x40cc96
    g954 = v8;
    if (v6 < result) {
        // 0x40cdd3
        return result;
    }
    // 0x40cca9
    if (g951 == 0) {
        // 0x40cdd3
        return 0;
    }
    // 0x40ccb6
    g317 = g978;
    int32_t v13 = g962 & 255; // 0x40ccca
    int32_t v14 = v13 != 0 ? 256 - v13 : 0;
    int32_t v15 = v14 + v7; // 0x40cce1
    g954 = v8;
    g315 = v14;
    g312 = v15;
    int32_t v16 = v15; // 0x40ccf7
    int32_t v17 = v14; // 0x40ccf7
    if (v8 > v7) {
        // 0x40ccf9
        v16 = v8 + 256;
        v17 = 256 - v7 + v8;
    }
    // 0x40cd09
    g312 = v16;
    g315 = v17;
    g313 = (float80_t)v16 * (float80_t)g314;
    g316 = (float80_t)g978 * (float80_t)v17;
    int32_t v18 = v6 - result; // 0x40cd49
    g318 = g961;
    g949 = v18;
    g319 = g962;
    g320 = g963;
    g321 = g964;
    g324 = g977;
    g322 = g965;
    g331 = g952;
    g332 = g953;
    g334 = g947;
    g327 = g980;
    g328 = g979;
    g948 = v18;
    g311 = v18;
    // 0x40cdd3
    return function_40e9cc();
}

// Address range: 0x40cde0 - 0x40ce20
int32_t function_40cde0(int32_t a1) {
    // 0x40cde0
    g338 = 0;
    if (*(int32_t *)a1 == 21) {
        // 0x40cdf3
        g338 = 1;
        g337 = *(int32_t *)(a1 + 68);
    }
    // 0x40ce05
    g336 = *(int32_t *)(a1 + 4);
    function_40c9e0(a1);
    function_40c650();
    return function_40cb70();
}

// Address range: 0x40ce20 - 0x40ce37
int32_t function_40ce20(void) {
    // 0x40ce20
    int32_t result; // 0x40ce20
    g257 = result + 1;
    g258 = 1 - result;
    return result;
}

// Address range: 0x40ce37 - 0x40d318
int32_t function_40ce37(void) {
    // 0x40ce37
    int32_t v1; // 0x40ce37
    unsigned char v2 = *(char *)(v1 + 33); // 0x40ce39
    unsigned char v3 = *(char *)(v1 + 28); // 0x40ce3c
    char v4 = *(char *)((256 * (int32_t)v3 | (int32_t)v2) + g188); // 0x40ce45
    *(char *)&g256 = v4;
    int32_t v5 = *(int32_t *)(v1 + 4) >> 8; // 0x40ce53
    int32_t v6 = *(int32_t *)(v1 + 8) >> 8; // 0x40ce56
    int32_t v7 = *(int32_t *)(v1 + 16) >> 8; // 0x40ce5f
    int32_t v8 = *(int32_t *)(v1 + 20) >> 8; // 0x40ce62
    int32_t v9 = v5 > v7 ? v5 : v7;
    int32_t v10 = v5 > v7 ? v6 : v8;
    int32_t v11 = v5 > v7 ? v8 : v6;
    int32_t v12 = v5 > v7 ? v7 : v5;
    int32_t v13 = v9; // 0x40ce72
    int32_t v14 = v11; // 0x40ce72
    if (v12 < v12) {
        // 0x40d055
        g253 = v9;
        g254 = v10;
        v13 = 0x10000 * v9 >> 16;
        int32_t v15 = v13 + 1; // 0x40d07e
        int64_t v16 = (int32_t)(0x100000000 * (int64_t)(v15 - v12) / (int64_t)(v15 - (0x10000 * v12 >> 16))) / 2;
        g255 = v16;
        int32_t v17 = v10 - v11; // 0x40d0a2
        v14 = v17 - (int32_t)(v16 * (int64_t)(2 * v17) / 0x100000000) + v11;
        g252 = v14;
        g251 = g189;
    }
    int32_t v18 = v14;
    int32_t v19 = v10; // 0x40ce7e
    int32_t v20 = v12; // 0x40ce7e
    if (v13 > v13) {
        // 0x40cfc8
        g251 = v12;
        g252 = v18;
        v20 = 0x10000 * v12 >> 16;
        int64_t v21 = (int32_t)(0x100000000 * (int64_t)(v13 + 1 - v20) / (int64_t)((0x10000 * v13 >> 16) + 1 - v20)) / 2;
        g255 = v21;
        v19 = v18 + (int32_t)(v21 * (int64_t)(2 * (v10 - v18)) / 0x100000000);
        g254 = v19;
        g253 = g191;
    }
    // 0x40ce84
    int32_t v22; // 0x40ce37
    int32_t v23; // 0x40ce37
    int32_t v24; // 0x40ce37
    int32_t v25; // 0x40ce37
    if (v19 < v18) {
        int32_t v26 = v13; // 0x40cea7
        int32_t v27 = v18; // 0x40cea7
        int32_t v28 = v20; // 0x40cea7
        if (v18 > g192) {
            int16_t v29 = v13;
            g253 = v29;
            g254 = v19;
            int32_t v30 = 1 - v19;
            int64_t v31 = (int32_t)(0x100000000 * (int64_t)(g192 + v30) / (int64_t)(v30 + v18)) / 2;
            g255 = v31;
            v26 = 0x10000 * v13 >> 16;
            int16_t v32 = v29 - (int16_t)(v31 * (int64_t)(2 * (v26 - (0x10000 * v20 >> 16))) / 0x100000000); // 0x40d1ca
            g251 = v32;
            g252 = g192;
            v27 = g192;
            v28 = v32;
        }
        int32_t v33 = v27;
        v24 = v26;
        v25 = v19;
        v23 = v33;
        v22 = v28;
        if (v19 < g190) {
            int16_t v34 = v28;
            g251 = v34;
            g252 = v33;
            int64_t v35 = (int32_t)(0x100000000 * (int64_t)(v33 + 1 - g190) / (int64_t)(1 - v19 + v33)) / 2;
            g255 = v35;
            int32_t v36 = 0x10000 * v28 >> 16; // 0x40d12d
            int16_t v37 = (int16_t)(v35 * (int64_t)(2 * ((0x10000 * v26 >> 16) - v36)) / 0x100000000) + v34; // 0x40d13b
            g253 = v37;
            g254 = g190;
            v24 = v37;
            v25 = g190;
            v23 = v33;
            v22 = v36;
        }
    } else {
        int32_t v38 = v13; // 0x40ce8e
        int32_t v39 = v19; // 0x40ce8e
        int32_t v40 = v20; // 0x40ce8e
        if (v19 > g192) {
            int16_t v41 = v20;
            g251 = v41;
            g252 = v18;
            int32_t v42 = 1 - v18;
            int64_t v43 = (int32_t)(0x100000000 * (int64_t)(v42 + g192) / (int64_t)(v42 + v19)) / 2;
            g255 = v43;
            v40 = 0x10000 * v20 >> 16;
            int16_t v44 = (int16_t)(v43 * (int64_t)(2 * ((0x10000 * v13 >> 16) - v40)) / 0x100000000) + v41; // 0x40d257
            g253 = v44;
            g254 = g192;
            v38 = v44;
            v39 = g192;
        }
        // 0x40ce94
        v24 = v38;
        v25 = v39;
        v23 = v18;
        v22 = v40;
        if (v18 < g190) {
            int16_t v45 = v38;
            g253 = v45;
            g254 = v39;
            int32_t v46 = v39 + 1;
            int64_t v47 = (int32_t)(0x100000000 * (int64_t)(v46 - g190) / (int64_t)(v46 - v18)) / 2;
            g255 = v47;
            int32_t v48 = 0x10000 * v38 >> 16;
            int16_t v49 = v45 - (int16_t)(v47 * (int64_t)(2 * (v48 - (0x10000 * v40 >> 16))) / 0x100000000); // 0x40d2e6
            g251 = v49;
            g252 = g190;
            v24 = v48;
            v25 = v39;
            v23 = g190;
            v22 = v49;
        }
    }
    int32_t v50 = v25 - v23; // 0x40ceca
    int32_t v51 = v24 - v22 + 1; // 0x40cecc
    if (v50 < 0) {
        int32_t v52 = 1 - v50; // 0x40cf4e
        if (v51 > v52) {
            uint16_t v53 = (int16_t)v52;
            g260 = v53;
            uint16_t v54 = (int16_t)v51;
            g261 = v54 / v53;
            uint32_t v55 = 0x10000 * (int32_t)(v54 % v53) / (v52 & 0xffff); // 0x40cfa6
            g259 = v55;
            return v55 & 0xffff | v51 & -0x10000;
        }
        uint16_t v56 = (int16_t)v52;
        uint16_t v57 = (int16_t)v51;
        g261 = v56 / v57;
        g260 = v57;
        uint32_t v58 = 0x10000 * (int32_t)(v56 % v57) / (v51 & 0xffff); // 0x40cf6a
        g259 = v58;
        return v58 & 0xffff | v52 & -0x10000;
    }
    int32_t v59 = v50 + 1; // 0x40ced2
    if (v51 > v59) {
        uint16_t v60 = (int16_t)v59;
        g260 = v60;
        uint16_t v61 = (int16_t)v51;
        g261 = v61 / v60;
        uint32_t v62 = 0x10000 * (int32_t)(v61 % v60) / (v59 & 0xffff); // 0x40cf2a
        g259 = v62;
        return v62 & 0xffff | v51 & -0x10000;
    }
    uint16_t v63 = (int16_t)v59;
    uint16_t v64 = (int16_t)v51;
    g261 = v63 / v64;
    uint32_t v65 = 0x10000 * (int32_t)(v63 % v64) / (v51 & 0xffff); // 0x40cee7
    g260 = v64;
    g259 = v65;
    return v65 & 0xffff | v59 & -0x10000;
}

// Address range: 0x40d318 - 0x40d34b
int32_t function_40d318(void) {
    // 0x40d318
    int32_t v1; // 0x40d318
    char v2 = v1 / 256;
    int32_t v3; // 0x40d318
    if (g259 > -1 - (int16_t)v1) {
        // 0x40d321
        *(char *)v1 = v2;
        v3 = v1 + (int32_t)g205;
    }
    int16_t v4 = g261; // 0x40d329
    int32_t v5 = v3; // 0x40d329
    *(char *)v5 = v2;
    v4--;
    v5 += (int32_t)g205;
    while (v4 != 0) {
        // 0x40d330
        *(char *)v5 = v2;
        v4--;
        v5 += (int32_t)g205;
    }
    int16_t v6 = g260 - 1; // 0x40d33d
    g260 = v6;
    int32_t result; // 0x40d318
    if (v6 != 0) {
        result = function_40d318();
    }
    // 0x40d346
    return result;
}

// Address range: 0x40d34b - 0x40d372
int32_t function_40d34b(void) {
    // 0x40d34b
    int32_t v1; // 0x40d34b
    char v2 = v1 / 256;
    int32_t v3; // 0x40d34b
    if (g259 > -1 - (int16_t)v1) {
        // 0x40d354
        *(char *)v1 = v2;
        v3 = v1 + (int32_t)g205;
    }
    // 0x40d35c
    *(char *)v3 = v2;
    int16_t v4 = g260 - 1; // 0x40d364
    g260 = v4;
    int32_t result; // 0x40d34b
    if (v4 != 0) {
        result = function_40d34b();
    }
    // 0x40d36d
    return result;
}

// Address range: 0x40d372 - 0x40d39e
int32_t function_40d372(void) {
    int32_t result = g205; // 0x40d372
    int32_t v1; // 0x40d372
    char v2 = (uint32_t)v1 / 256;
    int32_t v3; // 0x40d372
    uint16_t v4 = (int16_t)v3; // 0x40d377
    uint16_t v5 = g259 + v4; // 0x40d377
    int32_t v6; // 0x40d372
    int32_t v7 = v6; // 0x40d37e
    if (v5 < v4) {
        // 0x40d380
        *(char *)v6 = v2;
        v7 = v6 + result;
    }
    // 0x40d384
    *(char *)v7 = v2;
    int32_t v8 = v7 + result; // 0x40d386
    *(char *)v8 = v2;
    int16_t v9 = g260 - 1; // 0x40d390
    g260 = v9;
    while (v9 != 0) {
        int32_t v10 = g257 + v8;
        v4 = (int16_t)(int32_t)v5;
        v5 = g259 + v4;
        v7 = v10;
        if (v5 < v4) {
            // 0x40d380
            *(char *)v10 = v2;
            v7 = v10 + result;
        }
        // 0x40d384
        *(char *)v7 = v2;
        v8 = v7 + result;
        *(char *)v8 = v2;
        v9 = g260 - 1;
        g260 = v9;
    }
    // 0x40d399
    return result;
}

// Address range: 0x40d39e - 0x40d3ce
int32_t function_40d39e(void) {
    int32_t result = g205; // 0x40d39e
    int32_t v1; // 0x40d39e
    char v2 = (uint32_t)v1 / 256;
    int32_t v3; // 0x40d39e
    uint16_t v4 = (int16_t)v3; // 0x40d3a3
    uint16_t v5 = g259 + v4; // 0x40d3a3
    int32_t v6; // 0x40d39e
    int32_t v7 = v6; // 0x40d3aa
    if (v5 < v4) {
        // 0x40d3ac
        *(char *)v6 = v2;
        v7 = v6 + result;
    }
    // 0x40d3b0
    *(char *)v7 = v2;
    int32_t v8 = v7 + result; // 0x40d3b2
    *(char *)v8 = v2;
    int32_t v9 = v8 + result; // 0x40d3b6
    *(char *)v9 = v2;
    int16_t v10 = g260 - 1; // 0x40d3c0
    g260 = v10;
    while (v10 != 0) {
        int32_t v11 = g257 + v9;
        v4 = (int16_t)(int32_t)v5;
        v5 = g259 + v4;
        v7 = v11;
        if (v5 < v4) {
            // 0x40d3ac
            *(char *)v11 = v2;
            v7 = v11 + result;
        }
        // 0x40d3b0
        *(char *)v7 = v2;
        v8 = v7 + result;
        *(char *)v8 = v2;
        v9 = v8 + result;
        *(char *)v9 = v2;
        v10 = g260 - 1;
        g260 = v10;
    }
    // 0x40d3c9
    return result;
}

// Address range: 0x40d3ce - 0x40d402
int32_t function_40d3ce(void) {
    int32_t result = g205; // 0x40d3ce
    int32_t v1; // 0x40d3ce
    char v2 = (uint32_t)v1 / 256;
    int32_t v3; // 0x40d3ce
    uint16_t v4 = (int16_t)v3; // 0x40d3d3
    uint16_t v5 = g259 + v4; // 0x40d3d3
    int32_t v6; // 0x40d3ce
    int32_t v7 = v6; // 0x40d3da
    if (v5 < v4) {
        // 0x40d3dc
        *(char *)v6 = v2;
        v7 = v6 + result;
    }
    // 0x40d3e0
    *(char *)v7 = v2;
    int32_t v8 = v7 + result; // 0x40d3e2
    *(char *)v8 = v2;
    int32_t v9 = v8 + result; // 0x40d3e6
    *(char *)v9 = v2;
    int32_t v10 = v9 + result; // 0x40d3ea
    *(char *)v10 = v2;
    int16_t v11 = g260 - 1; // 0x40d3f4
    g260 = v11;
    while (v11 != 0) {
        int32_t v12 = g257 + v10;
        v4 = (int16_t)(int32_t)v5;
        v5 = g259 + v4;
        v7 = v12;
        if (v5 < v4) {
            // 0x40d3dc
            *(char *)v12 = v2;
            v7 = v12 + result;
        }
        // 0x40d3e0
        *(char *)v7 = v2;
        v8 = v7 + result;
        *(char *)v8 = v2;
        v9 = v8 + result;
        *(char *)v9 = v2;
        v10 = v9 + result;
        *(char *)v10 = v2;
        v11 = g260 - 1;
        g260 = v11;
    }
    // 0x40d3fd
    return result;
}

// Address range: 0x40d402 - 0x40d430
int32_t function_40d402(void) {
    // 0x40d402
    int32_t v1; // 0x40d402
    char v2 = v1 / 256;
    int32_t v3; // 0x40d402
    if (g259 > -1 - (int16_t)v1) {
        // 0x40d40b
        *(char *)v1 = v2;
        v3 = v1 + 1;
    }
    int16_t v4 = g261; // 0x40d40e
    int32_t v5 = v3; // 0x40d40e
    *(char *)v5 = v2;
    v4--;
    v5++;
    while (v4 != 0) {
        // 0x40d415
        *(char *)v5 = v2;
        v4--;
        v5++;
    }
    int16_t v6 = g260 - 1; // 0x40d422
    g260 = v6;
    int32_t result; // 0x40d402
    if (v6 != 0) {
        result = function_40d402();
    }
    // 0x40d42b
    return result;
}

// Address range: 0x40d430 - 0x40d46a
int32_t function_40d430(void) {
    // 0x40d430
    int32_t v1; // 0x40d430
    uint32_t v2 = v1;
    uint32_t v3 = v2 / 256; // 0x40d430
    int32_t result = g257 + 1; // 0x40d437
    while (true) {
        // 0x40d438
        int32_t v4; // 0x40d430
        int32_t v5 = v4;
        int32_t v6; // 0x40d430
        uint16_t v7 = (int16_t)v6; // 0x40d438
        uint16_t v8 = g259 + v7; // 0x40d438
        int32_t v9; // 0x40d430
        if (v8 >= v7) {
            // 0x40d454
            *(char *)v5 = (char)v3;
            int16_t v10 = g260 - 1; // 0x40d45c
            g260 = v10;
            v9 = g257 + v5;
            if (v10 == 0) {
                // break -> 0x40d44f
                break;
            }
        } else {
            // 0x40d441
            *(int16_t *)v5 = (int16_t)(v3 & 255 | v2 & 0xff00);
            int16_t v11 = g260 - 1; // 0x40d446
            g260 = v11;
            v9 = v5 + result;
            if (v11 == 0) {
                // break -> 0x40d44f
                break;
            }
        }
        // 0x40d438
        v6 = v8;
        v4 = v9;
    }
    // 0x40d44f
    return result;
}

// Address range: 0x40d46a - 0x40d4aa
int32_t function_40d46a(void) {
    // 0x40d46a
    int32_t result; // 0x40d46a
    uint32_t v1 = result;
    uint32_t v2 = v1 / 256; // 0x40d46a
    int16_t v3 = v2 & 255 | v1 & 0xff00;
    while (true) {
        // 0x40d46c
        int32_t v4; // 0x40d46a
        int32_t v5 = v4;
        int32_t v6; // 0x40d46a
        uint16_t v7 = (int16_t)v6; // 0x40d46c
        uint16_t v8 = g259 + v7; // 0x40d46c
        int32_t v9; // 0x40d46a
        if (v8 >= v7) {
            // 0x40d492
            *(int16_t *)v5 = v3;
            int16_t v10 = g260 - 1; // 0x40d49c
            g260 = v10;
            v9 = v5 + 1 + g257;
            if (v10 == 0) {
                // break -> 0x40d48d
                break;
            }
        } else {
            // 0x40d475
            *(char *)v5 = (char)v2;
            *(int16_t *)(v5 + 1) = v3;
            int16_t v11 = g260 - 1; // 0x40d484
            g260 = v11;
            v9 = v5 + 2 + g257;
            if (v11 == 0) {
                // break -> 0x40d48d
                break;
            }
        }
        // 0x40d46c
        v6 = v8;
        v4 = v9;
    }
    // 0x40d48d
    return result;
}

// Address range: 0x40d4aa - 0x40d4d4
int32_t function_40d4aa(void) {
    // 0x40d4aa
    int32_t result; // 0x40d4aa
    uint32_t v1 = result;
    uint32_t v2 = v1 / 256; // 0x40d4aa
    char v3 = v2;
    int32_t v4; // 0x40d4aa
    uint16_t v5 = (int16_t)v4; // 0x40d4ac
    uint16_t v6 = g259 + v5; // 0x40d4ac
    int32_t v7; // 0x40d4aa
    int32_t v8 = v7; // 0x40d4b3
    if (v6 < v5) {
        // 0x40d4b5
        *(char *)v7 = v3;
        v8 = v7 + 1;
    }
    // 0x40d4b8
    *(int16_t *)v8 = (int16_t)(v2 & 255 | v1 & 0xff00);
    int32_t v9 = v8 + 2; // 0x40d4bb
    *(char *)v9 = v3;
    int16_t v10 = g260 - 1; // 0x40d4c6
    g260 = v10;
    while (v10 != 0) {
        int32_t v11 = g257 + v9;
        v5 = (int16_t)(int32_t)v6;
        v6 = g259 + v5;
        v8 = v11;
        if (v6 < v5) {
            // 0x40d4b5
            *(char *)v11 = v3;
            v8 = v11 + 1;
        }
        // 0x40d4b8
        *(int16_t *)v8 = (int16_t)(v2 & 255 | v1 & 0xff00);
        v9 = v8 + 2;
        *(char *)v9 = v3;
        v10 = g260 - 1;
        g260 = v10;
    }
    // 0x40d4cf
    return result;
}

// Address range: 0x40d4d4 - 0x40d501
int32_t function_40d4d4(void) {
    // 0x40d4d4
    int32_t v1; // 0x40d4d4
    uint32_t v2 = v1;
    uint32_t v3 = v2 / 256; // 0x40d4d4
    int32_t result = (int32_t)g205 + 4; // 0x40d4db
    int16_t v4 = v3 & 255 | v2 & 0xff00; // 0x40d4ea
    int32_t v5; // 0x40d4d4
    uint16_t v6 = (int16_t)v5; // 0x40d4de
    uint16_t v7 = g259 + v6; // 0x40d4de
    int32_t v8; // 0x40d4d4
    int32_t v9 = v8; // 0x40d4e5
    if (v7 < v6) {
        // 0x40d4e7
        *(char *)v8 = (char)v3;
        v9 = v8 + 1;
    }
    // 0x40d4ea
    *(int16_t *)v9 = v4;
    *(int16_t *)(v9 + 2) = v4;
    int16_t v10 = g260 - 1; // 0x40d4f3
    g260 = v10;
    while (v10 != 0) {
        int32_t v11 = v9 + result;
        v6 = (int16_t)(int32_t)v7;
        v7 = g259 + v6;
        v9 = v11;
        if (v7 < v6) {
            // 0x40d4e7
            *(char *)v11 = (char)v3;
            v9 = v11 + 1;
        }
        // 0x40d4ea
        *(int16_t *)v9 = v4;
        *(int16_t *)(v9 + 2) = v4;
        v10 = g260 - 1;
        g260 = v10;
    }
    // 0x40d4fc
    return result;
}

// Address range: 0x40d501 - 0x40d534
int32_t function_40d501(void) {
    // 0x40d501
    int32_t v1; // 0x40d501
    char v2 = v1 / 256;
    int32_t v3; // 0x40d501
    if (g259 > -1 - (int16_t)v1) {
        // 0x40d50a
        *(char *)v1 = v2;
        v3 = v1 - (int32_t)g205;
    }
    int16_t v4 = g261; // 0x40d512
    int32_t v5 = v3; // 0x40d512
    *(char *)v5 = v2;
    v4--;
    v5 -= (int32_t)g205;
    while (v4 != 0) {
        // 0x40d519
        *(char *)v5 = v2;
        v4--;
        v5 -= (int32_t)g205;
    }
    int16_t v6 = g260 - 1; // 0x40d526
    g260 = v6;
    int32_t result; // 0x40d501
    if (v6 != 0) {
        result = function_40d501();
    }
    // 0x40d52f
    return result;
}

// Address range: 0x40d534 - 0x40d55b
int32_t function_40d534(void) {
    // 0x40d534
    int32_t v1; // 0x40d534
    char v2 = v1 / 256;
    int32_t v3; // 0x40d534
    if (g259 > -1 - (int16_t)v1) {
        // 0x40d53d
        *(char *)v1 = v2;
        v3 = v1 - (int32_t)g205;
    }
    // 0x40d545
    *(char *)v3 = v2;
    int16_t v4 = g260 - 1; // 0x40d54d
    g260 = v4;
    int32_t result; // 0x40d534
    if (v4 != 0) {
        result = function_40d534();
    }
    // 0x40d556
    return result;
}

// Address range: 0x40d55b - 0x40d587
int32_t function_40d55b(void) {
    int32_t result = g205; // 0x40d55b
    int32_t v1; // 0x40d55b
    char v2 = (uint32_t)v1 / 256;
    int32_t v3; // 0x40d55b
    uint16_t v4 = (int16_t)v3; // 0x40d560
    uint16_t v5 = g259 + v4; // 0x40d560
    int32_t v6; // 0x40d55b
    int32_t v7 = v6; // 0x40d567
    if (v5 < v4) {
        // 0x40d569
        *(char *)v6 = v2;
        v7 = v6 - result;
    }
    // 0x40d56d
    *(char *)v7 = v2;
    int32_t v8 = v7 - result; // 0x40d56f
    *(char *)v8 = v2;
    int16_t v9 = g260 - 1; // 0x40d579
    g260 = v9;
    while (v9 != 0) {
        int32_t v10 = g258 + v8;
        v4 = (int16_t)(int32_t)v5;
        v5 = g259 + v4;
        v7 = v10;
        if (v5 < v4) {
            // 0x40d569
            *(char *)v10 = v2;
            v7 = v10 - result;
        }
        // 0x40d56d
        *(char *)v7 = v2;
        v8 = v7 - result;
        *(char *)v8 = v2;
        v9 = g260 - 1;
        g260 = v9;
    }
    // 0x40d582
    return result;
}

// Address range: 0x40d587 - 0x40d5b7
int32_t function_40d587(void) {
    int32_t result = g205; // 0x40d587
    int32_t v1; // 0x40d587
    char v2 = (uint32_t)v1 / 256;
    int32_t v3; // 0x40d587
    uint16_t v4 = (int16_t)v3; // 0x40d58c
    uint16_t v5 = g259 + v4; // 0x40d58c
    int32_t v6; // 0x40d587
    int32_t v7 = v6; // 0x40d593
    if (v5 < v4) {
        // 0x40d595
        *(char *)v6 = v2;
        v7 = v6 - result;
    }
    // 0x40d599
    *(char *)v7 = v2;
    int32_t v8 = v7 - result; // 0x40d59b
    *(char *)v8 = v2;
    int32_t v9 = v8 - result; // 0x40d59f
    *(char *)v9 = v2;
    int16_t v10 = g260 - 1; // 0x40d5a9
    g260 = v10;
    while (v10 != 0) {
        int32_t v11 = g258 + v9;
        v4 = (int16_t)(int32_t)v5;
        v5 = g259 + v4;
        v7 = v11;
        if (v5 < v4) {
            // 0x40d595
            *(char *)v11 = v2;
            v7 = v11 - result;
        }
        // 0x40d599
        *(char *)v7 = v2;
        v8 = v7 - result;
        *(char *)v8 = v2;
        v9 = v8 - result;
        *(char *)v9 = v2;
        v10 = g260 - 1;
        g260 = v10;
    }
    // 0x40d5b2
    return result;
}

// Address range: 0x40d5b7 - 0x40d5eb
int32_t function_40d5b7(void) {
    int32_t result = g205; // 0x40d5b7
    int32_t v1; // 0x40d5b7
    char v2 = (uint32_t)v1 / 256;
    int32_t v3; // 0x40d5b7
    uint16_t v4 = (int16_t)v3; // 0x40d5bc
    uint16_t v5 = g259 + v4; // 0x40d5bc
    int32_t v6; // 0x40d5b7
    int32_t v7 = v6; // 0x40d5c3
    if (v5 < v4) {
        // 0x40d5c5
        *(char *)v6 = v2;
        v7 = v6 - result;
    }
    // 0x40d5c9
    *(char *)v7 = v2;
    int32_t v8 = v7 - result; // 0x40d5cb
    *(char *)v8 = v2;
    int32_t v9 = v8 - result; // 0x40d5cf
    *(char *)v9 = v2;
    int32_t v10 = v9 - result; // 0x40d5d3
    *(char *)v10 = v2;
    int16_t v11 = g260 - 1; // 0x40d5dd
    g260 = v11;
    while (v11 != 0) {
        int32_t v12 = g258 + v10;
        v4 = (int16_t)(int32_t)v5;
        v5 = g259 + v4;
        v7 = v12;
        if (v5 < v4) {
            // 0x40d5c5
            *(char *)v12 = v2;
            v7 = v12 - result;
        }
        // 0x40d5c9
        *(char *)v7 = v2;
        v8 = v7 - result;
        *(char *)v8 = v2;
        v9 = v8 - result;
        *(char *)v9 = v2;
        v10 = v9 - result;
        *(char *)v10 = v2;
        v11 = g260 - 1;
        g260 = v11;
    }
    // 0x40d5e6
    return result;
}

// Address range: 0x40d5eb - 0x40d619
int32_t function_40d5eb(void) {
    // 0x40d5eb
    int32_t v1; // 0x40d5eb
    char v2 = v1 / 256;
    int32_t v3; // 0x40d5eb
    if (g259 > -1 - (int16_t)v1) {
        // 0x40d5f4
        *(char *)v1 = v2;
        v3 = v1 + 1;
    }
    int16_t v4 = g261; // 0x40d5f7
    int32_t v5 = v3; // 0x40d5f7
    *(char *)v5 = v2;
    v4--;
    v5++;
    while (v4 != 0) {
        // 0x40d5fe
        *(char *)v5 = v2;
        v4--;
        v5++;
    }
    int16_t v6 = g260 - 1; // 0x40d60b
    g260 = v6;
    int32_t result; // 0x40d5eb
    if (v6 != 0) {
        result = function_40d5eb();
    }
    // 0x40d614
    return result;
}

// Address range: 0x40d619 - 0x40d658
int32_t function_40d619(void) {
    // 0x40d619
    int32_t v1; // 0x40d619
    uint32_t v2 = v1;
    uint32_t v3 = v2 / 256; // 0x40d619
    int32_t result = 2 - (int32_t)g205; // 0x40d620
    while (true) {
        // 0x40d626
        int32_t v4; // 0x40d619
        int32_t v5 = v4;
        int32_t v6; // 0x40d619
        uint16_t v7 = (int16_t)v6; // 0x40d626
        uint16_t v8 = g259 + v7; // 0x40d626
        int32_t v9; // 0x40d619
        if (v8 >= v7) {
            // 0x40d642
            *(char *)v5 = (char)v3;
            int16_t v10 = g260 - 1; // 0x40d64a
            g260 = v10;
            v9 = g258 + v5;
            if (v10 == 0) {
                // break -> 0x40d63d
                break;
            }
        } else {
            // 0x40d62f
            *(int16_t *)v5 = (int16_t)(v3 & 255 | v2 & 0xff00);
            int16_t v11 = g260 - 1; // 0x40d634
            g260 = v11;
            v9 = v5 + result;
            if (v11 == 0) {
                // break -> 0x40d63d
                break;
            }
        }
        // 0x40d626
        v6 = v8;
        v4 = v9;
    }
    // 0x40d63d
    return result;
}

// Address range: 0x40d658 - 0x40d684
int32_t function_40d658(void) {
    // 0x40d658
    int32_t v1; // 0x40d658
    uint32_t v2 = v1;
    uint32_t v3 = v2 / 256; // 0x40d658
    int32_t result = 2 - (int32_t)g205; // 0x40d65f
    int32_t v4; // 0x40d658
    uint16_t v5 = (int16_t)v4; // 0x40d665
    uint16_t v6 = g259 + v5; // 0x40d665
    int32_t v7; // 0x40d658
    int32_t v8 = v7; // 0x40d66c
    if (v6 < v5) {
        // 0x40d66e
        *(char *)v7 = (char)v3;
        v8 = v7 + 1;
    }
    // 0x40d671
    *(int16_t *)v8 = (int16_t)(v3 & 255 | v2 & 0xff00);
    int16_t v9 = g260 - 1; // 0x40d676
    g260 = v9;
    while (v9 != 0) {
        int32_t v10 = v8 + result;
        v5 = (int16_t)(int32_t)v6;
        v6 = g259 + v5;
        v8 = v10;
        if (v6 < v5) {
            // 0x40d66e
            *(char *)v10 = (char)v3;
            v8 = v10 + 1;
        }
        // 0x40d671
        *(int16_t *)v8 = (int16_t)(v3 & 255 | v2 & 0xff00);
        v9 = g260 - 1;
        g260 = v9;
    }
    // 0x40d67f
    return result;
}

// Address range: 0x40d684 - 0x40d6cd
int32_t function_40d684(void) {
    // 0x40d684
    int32_t v1; // 0x40d684
    uint32_t v2 = v1;
    uint32_t v3 = v2 / 256; // 0x40d684
    int32_t result = 4 - (int32_t)g205; // 0x40d68b
    int16_t v4 = v3 & 255 | v2 & 0xff00;
    while (true) {
        // 0x40d691
        int32_t v5; // 0x40d684
        int32_t v6 = v5;
        int32_t v7; // 0x40d684
        uint16_t v8 = (int16_t)v7; // 0x40d691
        uint16_t v9 = g259 + v8; // 0x40d691
        *(int16_t *)v6 = v4;
        int32_t v10 = v6 + 2;
        int32_t v11; // 0x40d684
        if (v9 >= v8) {
            // 0x40d6b1
            *(char *)v10 = (char)v3;
            int16_t v12 = g260 - 1; // 0x40d6bf
            g260 = v12;
            v11 = g258 + v10;
            if (v12 == 0) {
                // break -> 0x40d6ac
                break;
            }
        } else {
            // 0x40d69a
            *(int16_t *)v10 = v4;
            int16_t v13 = g260 - 1; // 0x40d6a3
            g260 = v13;
            v11 = v6 + result;
            if (v13 == 0) {
                // break -> 0x40d6ac
                break;
            }
        }
        // 0x40d691
        v7 = v9;
        v5 = v11;
    }
    // 0x40d6ac
    return result;
}

// Address range: 0x40d6cd - 0x40d6f9
int32_t function_40d6cd(void) {
    // 0x40d6cd
    int32_t result; // 0x40d6cd
    uint32_t v1 = result;
    uint32_t v2 = v1 / 256; // 0x40d6cd
    int16_t v3 = v2 & 255 | v1 & 0xff00; // 0x40d6db
    int32_t v4; // 0x40d6cd
    uint16_t v5 = (int16_t)v4; // 0x40d6cf
    uint16_t v6 = g259 + v5; // 0x40d6cf
    int32_t v7; // 0x40d6cd
    int32_t v8 = v7; // 0x40d6d6
    if (v6 < v5) {
        // 0x40d6d8
        *(char *)v7 = (char)v2;
        v8 = v7 + 1;
    }
    // 0x40d6db
    *(int16_t *)v8 = v3;
    *(int16_t *)(v8 + 2) = v3;
    int16_t v9 = g260 - 1; // 0x40d6eb
    g260 = v9;
    while (v9 != 0) {
        int32_t v10 = v8 + 3 + g258;
        v5 = (int16_t)(int32_t)v6;
        v6 = g259 + v5;
        v8 = v10;
        if (v6 < v5) {
            // 0x40d6d8
            *(char *)v10 = (char)v2;
            v8 = v10 + 1;
        }
        // 0x40d6db
        *(int16_t *)v8 = v3;
        *(int16_t *)(v8 + 2) = v3;
        v9 = g260 - 1;
        g260 = v9;
    }
    // 0x40d6f4
    return result;
}

// Address range: 0x40d700 - 0x40d743
int32_t function_40d700(void) {
    // 0x40d700
    g860 = 0;
    int32_t result; // 0x40d700
    if (g262 == 0) {
        // 0x40d714
        g946 = function_4111a0(0x2588);
        int32_t v1 = function_4111a0(3208); // 0x40d72b
        g945 = v1;
        g262 = 1;
        result = v1;
    }
    // 0x40d742
    return result;
}

// Address range: 0x40d750 - 0x40e0a9
int32_t function_40d750(int32_t a1) {
    int32_t v1 = a1 + 4; // 0x40d75a
    int32_t v2 = *(int32_t *)v1; // 0x40d75a
    int32_t v3 = a1 + 12; // 0x40d75d
    int32_t v4 = *(int32_t *)v3; // 0x40d75d
    int32_t v5 = v2 > v4 ? v2 : v4;
    g865 = v5;
    int32_t v6 = *(int32_t *)(v2 > v4 ? v3 : v1);
    g863 = v6;
    int32_t v7 = *(int32_t *)(a1 + 20); // 0x40d78b
    int32_t v8; // 0x40d750
    int32_t v9; // 0x40d750
    if (v5 < v7) {
        // 0x40d792
        g865 = v7;
        v8 = v7;
        v9 = v6;
    } else {
        // 0x40d799
        v8 = v5;
        v9 = v6;
        if (v6 > v7) {
            // 0x40d7a3
            g863 = v7;
            v8 = v5;
            v9 = v7;
        }
    }
    // 0x40d7a8
    g864 = 1;
    g859 = 3;
    g861 = 5;
    int32_t v10 = 5; // 0x40d7d2
    int32_t v11 = 1; // 0x40d7d2
    if (*(int32_t *)(a1 + 24) < *(int32_t *)(a1 + 8)) {
        // 0x40d7d4
        g864 = 5;
        g861 = 1;
        v10 = 1;
        v11 = 5;
    }
    int32_t v12 = *(int32_t *)(a1 + 16); // 0x40d7e7
    int32_t v13; // 0x40d750
    int32_t v14; // 0x40d750
    int32_t v15; // 0x40d750
    if (*(int32_t *)(4 * v11 + v1) > v12) {
        // 0x40d7f2
        g864 = 3;
        g859 = v11;
        v15 = v11;
        v13 = v10;
        v14 = 3;
    } else {
        // 0x40d803
        v15 = 3;
        v13 = v10;
        v14 = v11;
        if (*(int32_t *)(4 * v10 + v1) < v12) {
            // 0x40d811
            g861 = 3;
            g859 = v10;
            v15 = v10;
            v13 = 3;
            v14 = v11;
        }
    }
    int32_t v16 = 4 * v14; // 0x40d829
    int32_t v17 = 4 * v13; // 0x40d832
    int32_t * v18 = (int32_t *)(v16 + v1); // 0x40d83b
    int32_t v19 = *v18; // 0x40d83b
    int32_t * v20 = (int32_t *)(v17 + v1); // 0x40d840
    int32_t v21 = *v20; // 0x40d840
    if ((g204 - v21 | v9 - g201 || g203 - v8 || v19 - g202) >= 0) {
        int32_t v22 = 4 * v15; // 0x40d87d
        g431 = *(int32_t *)(v16 + a1);
        g432 = *v18;
        g433 = *(int32_t *)(v22 + a1);
        g434 = *(int32_t *)(v22 + v1);
        g435 = *(int32_t *)(v17 + a1);
        g436 = *v20;
        int32_t v23 = *(int32_t *)(a1 + 28); // 0x40d8b6
        int32_t v24 = v23 - 4;
        g437 = *(int32_t *)(v24 + v16);
        g438 = *(int32_t *)(v23 + v16);
        int32_t v25 = *(int32_t *)(v24 + v22); // 0x40d8cb
        g439 = v25;
        g440 = *(int32_t *)(v23 + v22);
        int32_t v26 = *(int32_t *)(v24 + v17); // 0x40d8e2
        g441 = v26;
        g442 = *(int32_t *)(v23 + v17);
        g862 = g187;
        function_456b20();
        g445 = *(int32_t *)(a1 + 32);
        g852 = g432;
        g853 = g433;
        g851 = g431;
        g854 = g434;
        if ((int32_t)g448 >= 1) {
            // 0x40d950
            function_456cb0();
            g853 = g435;
            g854 = g436;
            g855 = g437;
            g856 = g438;
            g857 = g441;
            g858 = g442;
            function_456c70();
            int32_t v27 = g945;
            int32_t v28 = *(int32_t *)v27 * (int32_t)g205 + g862; // 0x40d9e6
            g862 = v28;
            function_410d5c(v27, v28, v26, v27 + 8, v25, v22);
            g862 = v28;
            g851 = g433;
            g852 = g434;
            function_456cb0();
            int32_t v29 = *(int32_t *)(g945 + 4); // 0x40da6f
            int32_t result = g945 + 8; // 0x40da86
            function_410d5c(*(int32_t *)(v27 + 4), v29, g946, result, v25, v22);
            return result;
        }
        // 0x40dab9
        g855 = g437;
        g856 = g438;
        g857 = g439;
        g858 = g440;
        function_456c70();
        g853 = g435;
        g854 = g436;
        function_456cb0();
        int32_t v30 = *(int32_t *)g945 * (int32_t)g205 + g862; // 0x40db4f
        g862 = v30;
        function_410d5c(g946, v30, v26, g945 + 8, v25, v22);
        g862 = v30;
        g851 = g433;
        g852 = g434;
        g855 = g439;
        g856 = g440;
        g857 = g441;
        g858 = g442;
        function_456c70();
        int32_t result2 = 4 * *(int32_t *)(g946 + 4) + 8 + g945; // 0x40dc14
        function_410d5c(g945, *(int32_t *)(g946 + 4), v26, result2, v25, v22);
        return result2;
    }
    int32_t result3 = v8 - g201; // 0x40dc74
    if ((g204 - v19 | result3 || g203 - v9 || v21 - g202) < 0) {
        // 0x40e0a2
        return result3;
    }
    int32_t v31 = 4 * v15; // 0x40dc87
    g431 = *(int32_t *)(v16 + a1);
    g432 = *v18;
    g433 = *(int32_t *)(v31 + a1);
    g434 = *(int32_t *)(v31 + v1);
    g435 = *(int32_t *)(v17 + a1);
    g436 = *v20;
    int32_t v32 = *(int32_t *)(a1 + 28); // 0x40dcc0
    int32_t v33 = v32 - 4;
    g437 = *(int32_t *)(v33 + v16);
    g438 = *(int32_t *)(v32 + v16);
    int32_t v34 = *(int32_t *)(v33 + v31); // 0x40dcd5
    g439 = v34;
    g440 = *(int32_t *)(v32 + v31);
    int32_t v35 = *(int32_t *)(v33 + v17); // 0x40dcec
    g441 = v35;
    g442 = *(int32_t *)(v32 + v17);
    g862 = g187;
    function_456b20();
    g445 = *(int32_t *)(a1 + 32);
    g852 = g432;
    g853 = g433;
    g851 = g431;
    g854 = g434;
    if ((int32_t)g448 >= 1) {
        // 0x40dd5a
        function_456e00();
        g851 = g431;
        g852 = g432;
        g853 = g435;
        g854 = g436;
        g855 = g437;
        g856 = g438;
        g857 = g441;
        g858 = g442;
        function_456ce0();
        int32_t v36 = g945;
        int32_t v37 = *(int32_t *)v36 * (int32_t)g205 + g862; // 0x40de06
        g862 = v37;
        function_410d5c(v36, v37, v35, v36 + 8, v34, v31);
        g862 = v37;
        g851 = g433;
        g852 = g434;
        g853 = g435;
        g854 = g436;
        function_456e00();
        int32_t v38 = *(int32_t *)(g945 + 4); // 0x40dea5
        int32_t result4 = g945 + 8; // 0x40debc
        function_410d5c(*(int32_t *)(v36 + 4), v38, g946, result4, v34, v31);
        return result4;
    }
    // 0x40deef
    g855 = g437;
    g856 = g438;
    g857 = g439;
    g858 = g440;
    function_456ce0();
    g851 = g431;
    g852 = g432;
    g853 = g435;
    g854 = g436;
    function_456e00();
    int32_t v39 = *(int32_t *)g945 * (int32_t)g205 + g862; // 0x40df9b
    g862 = v39;
    function_410d5c(g946, v39, v35, g945 + 8, v34, v31);
    g862 = v39;
    g851 = g433;
    g852 = g434;
    g853 = g435;
    g854 = g436;
    g855 = g439;
    g856 = g440;
    g857 = g441;
    g858 = g442;
    function_456ce0();
    int32_t result5 = 4 * *(int32_t *)(g946 + 4) + 8 + g945; // 0x40e076
    function_410d5c(g945, *(int32_t *)(g946 + 4), v35, result5, v34, v31);
    // 0x40e0a2
    return result5;
}

// Address range: 0x40e0ac - 0x40e0bb
int32_t function_40e0ac(void) {
    // 0x40e0ac
    g299 = (int32_t)&g207 >> 2;
    int32_t result; // 0x40e0ac
    return result;
}

// Address range: 0x40e0bb - 0x40e79b
int32_t function_40e0bb(void) {
    int32_t v1 = &g263; // 0x40e0c3
    int32_t v2; // 0x40e0bb
    int32_t v3 = v2 + 4; // 0x40e0c3
    for (int32_t i = 3; i > 0; i--) {
        int32_t v4 = *(int32_t *)v3; // 0x40e0c8
        int32_t v5 = v4 > -0x3e8001 ? v4 >> 8 : -0x3e80;
        *(int32_t *)v1 = v5 < 0x3e80 ? v5 : 0x3e80;
        int32_t v6 = *(int32_t *)(v3 + 4); // 0x40e0e7
        int32_t v7 = v6 > -0x3e8001 ? v6 >> 8 : -0x3e80;
        *(int32_t *)(v1 + 4) = v7 < 0x3e80 ? v7 : 0x3e80;
        *(int32_t *)(v1 + 8) = *(int32_t *)(v3 + 8);
        *(int32_t *)(v1 + 12) = *(int32_t *)(v3 + 12);
        v3 += 16;
        v1 += 16;
    }
    // 0x40e11d
    *(int32_t *)v1 = *(int32_t *)v3;
    int32_t v8; // 0x40e0bb
    int32_t v9; // 0x40e0bb
    int32_t v10; // 0x40e0bb
    if (g266 < g264) {
        // 0x40e14c
        v9 = &g263;
        v10 = &g267;
        v8 = &g265;
        if (g268 <= g264) {
            // 0x40e156
            v9 = &g267;
            v10 = &g263;
            v8 = &g265;
            if (g268 <= g266) {
                // 0x40e15d
                v9 = &g265;
                v10 = &g263;
                v8 = &g267;
            }
        }
    } else {
        // 0x40e139
        v9 = &g265;
        v10 = &g267;
        v8 = &g263;
        if (g266 >= g268) {
            // 0x40e13e
            v9 = &g267;
            v10 = &g265;
            v8 = &g263;
            if (g264 >= g268) {
                // 0x40e148
                v9 = &g263;
                v10 = &g265;
                v8 = &g267;
            }
        }
    }
    int32_t * v11 = (int32_t *)(v8 + 4); // 0x40e171
    int32_t v12 = *v11; // 0x40e171
    int32_t * v13 = (int32_t *)(v10 + 4); // 0x40e174
    int32_t v14 = *v13; // 0x40e174
    if (v12 == v14) {
        int32_t v15 = *(int32_t *)v8; // 0x40e568
        int32_t v16 = *(int32_t *)v9; // 0x40e56a
        int32_t v17 = v15 > v16 ? v8 : v9;
        int32_t v18 = v15 > v16 ? v9 : v8;
        int32_t v19 = *(int32_t *)v10; // 0x40e570
        uint32_t v20 = *(int32_t *)v17; // 0x40e575
        int32_t v21 = v19; // 0x40e577
        int32_t v22 = v18; // 0x40e577
        int32_t v23 = v10; // 0x40e577
        if (v19 <= v20) {
            // 0x40e579
            v22 = v19 > *(int32_t *)v18 ? v18 : v10;
            v21 = v20;
            v23 = v17;
        }
        // 0x40e584
        g293 = v21;
        g290 = (int16_t)*(int32_t *)v22;
        g297 = *(int32_t *)(v22 + 4);
        g288 = 0;
        g296 = (int64_t)(256 * *(int32_t *)(v23 + 12));
        g295 = 256 * *(int32_t *)(v22 + 12);
        return function_40e79b();
    }
    int32_t * v24 = (int32_t *)(v9 + 4); // 0x40e17d
    int32_t v25 = *v24; // 0x40e17d
    if (v12 == v25) {
        int32_t v26 = *(int32_t *)v8; // 0x40e5c1
        int32_t v27 = *(int32_t *)v9; // 0x40e5c3
        int32_t v28 = v26 > v27 ? v8 : v9;
        int32_t v29 = v26 > v27 ? v9 : v8;
        int32_t * v30 = (int32_t *)(v29 + 4); // 0x40e5c9
        g297 = *v30;
        int32_t v31 = *v13 - *v30; // 0x40e5d4
        g288 = v31;
        int32_t * v32 = (int32_t *)(v29 + 12); // 0x40e5dd
        g295 = 256 * *v32;
        int32_t * v33 = (int32_t *)(v28 + 12); // 0x40e5e8
        g296 = (int64_t)(256 * *v33);
        int32_t * v34 = (int32_t *)v29; // 0x40e5f3
        g290 = (int16_t)*v34;
        int32_t v35 = *(int32_t *)v28; // 0x40e5fa
        g293 = v35;
        int32_t * v36 = (int32_t *)v10; // 0x40e601
        int32_t v37 = *v36 - v35;
        int32_t v38 = g299 + v31; // 0x40e605
        int32_t v39; // 0x40e0bb
        if (v37 < 1) {
            // 0x40e62a
            *(int16_t *)&g292 = -1;
            v39 = *(int32_t *)(4 * v38) * (v37 - 1);
        } else {
            // 0x40e610
            *(int16_t *)&g292 = 0;
            int32_t v40 = *(int32_t *)(4 * v38) * (v37 + 1); // 0x40e61a
            g292 += v40;
            v39 = v40;
        }
        // 0x40e63c
        g285 = v39;
        int32_t v41 = *v36 - *v34; // 0x40e643
        int32_t * v42; // 0x40e0bb
        int32_t v43; // 0x40e0bb
        if (v41 >= 0) {
            // 0x40e664
            *(int16_t *)&g289 = 0;
            int32_t * v44 = (int32_t *)(4 * v38);
            v42 = v44;
            v43 = *v44 * (v41 + 1);
        } else {
            // 0x40e64a
            *(int16_t *)&g289 = -1;
            int32_t * v45 = (int32_t *)(4 * v38);
            int32_t v46 = *v45 * (v41 - 1); // 0x40e654
            g289 += v46;
            v42 = v45;
            v43 = v46;
        }
        // 0x40e676
        g284 = v43;
        int32_t * v47 = (int32_t *)(v10 + 12); // 0x40e67b
        g286 = (int64_t)((*v47 - *v32) * *v42 >> 8);
        g287 = (int64_t)((*v47 - *v33) * *v42 >> 8);
        return function_40e79b();
    }
    if (v25 == v14) {
        int32_t v48 = *(int32_t *)v9; // 0x40e6b2
        int32_t v49 = *(int32_t *)v10; // 0x40e6b4
        int32_t v50 = v48 > v49 ? v9 : v10;
        int32_t * v51 = (int32_t *)(v8 + 12); // 0x40e6ba
        int32_t v52 = 256 * *v51; // 0x40e6bd
        g295 = v52;
        g296 = v52;
        g297 = *v11;
        int32_t v53 = *(int32_t *)(v50 + 4) - *v11; // 0x40e6d5
        g288 = v53;
        int32_t * v54 = (int32_t *)v8; // 0x40e6de
        int32_t v55 = *v54; // 0x40e6de
        int16_t v56 = v55; // 0x40e6e0
        g290 = v56;
        g293 = v56;
        int32_t v57 = *(int32_t *)v50 - v55;
        int32_t v58 = g299 + v53; // 0x40e6ee
        int32_t v59; // 0x40e0bb
        if (v57 < 1) {
            // 0x40e713
            *(int16_t *)&g292 = -1;
            v59 = *(int32_t *)(4 * v58) * (v57 - 1);
        } else {
            // 0x40e6f9
            *(int16_t *)&g292 = 0;
            int32_t v60 = *(int32_t *)(4 * v58) * (v57 + 1); // 0x40e703
            g292 += v60;
            v59 = v60;
        }
        int32_t v61 = v48 > v49 ? v10 : v9;
        g285 = v59;
        int32_t v62 = *(int32_t *)v61 - *v54; // 0x40e72c
        int32_t * v63; // 0x40e0bb
        int32_t v64; // 0x40e0bb
        if (v62 >= 0) {
            // 0x40e74d
            *(int16_t *)&g289 = 0;
            int32_t * v65 = (int32_t *)(4 * v58);
            v63 = v65;
            v64 = *v65 * (v62 + 1);
        } else {
            // 0x40e733
            *(int16_t *)&g289 = -1;
            int32_t * v66 = (int32_t *)(4 * v58);
            int32_t v67 = *v66 * (v62 - 1); // 0x40e73d
            g289 += v67;
            v63 = v66;
            v64 = v67;
        }
        // 0x40e75f
        g284 = v64;
        int32_t v68 = *v63; // 0x40e76a
        g286 = (int64_t)((*(int32_t *)(v61 + 12) - *v51) * v68 >> 8);
        int32_t v69 = *v63; // 0x40e780
        g287 = (int64_t)((*(int32_t *)(v50 + 12) - *v51) * v69 >> 8);
        return function_40e79b();
    }
    // 0x40e192
    g297 = v12;
    g269 = *v24;
    int32_t v70 = *v24 - *v11; // 0x40e1a5
    g288 = v70;
    int32_t v71 = *v13 - *v24; // 0x40e1b0
    g270 = v71;
    int32_t * v72 = (int32_t *)v8; // 0x40e1b8
    int16_t v73 = (int16_t)*v72; // 0x40e1ba
    g290 = v73;
    g293 = v73;
    int32_t * v74 = (int32_t *)(v8 + 12); // 0x40e1c4
    int32_t v75 = 256 * *v74; // 0x40e1c7
    g295 = v75;
    g296 = v75;
    int32_t * v76 = (int32_t *)v10; // 0x40e1e0
    int32_t v77 = *v72; // 0x40e1e2
    int32_t v78 = 4 * (*v13 - *v11 + g299); // 0x40e1e4
    int32_t * v79 = (int32_t *)v78; // 0x40e1e4
    int32_t v80 = (*v79 * v70 * (*v76 - v77) + 0x8000 >> 16) + v77; // 0x40e1fb
    int32_t * v81 = (int32_t *)v9; // 0x40e1fd
    if (v80 < *v81) {
        // 0x40e205
        g274 = v80;
        int32_t * v82 = (int32_t *)(v10 + 12); // 0x40e20a
        int32_t v83 = *v74; // 0x40e20d
        int32_t * v84 = (int32_t *)(v78 - 4); // 0x40e210
        g279 = (*v84 * v70 * (*v82 - v83) >> 8) + 256 * v83;
        int32_t v85 = *v76 - *v72; // 0x40e233
        int32_t v86; // 0x40e0bb
        int16_t v87; // 0x40e0bb
        if (v85 < 1) {
            int32_t v88 = *v79 * (v85 - 1); // 0x40e258
            *(int16_t *)&g289 = -1;
            g273 = -1;
            g289 += v88;
            v86 = v88;
            v87 = (int16_t)v88 - 1;
        } else {
            // 0x40e23a
            *(int16_t *)&g289 = 0;
            v86 = *v79 * (v85 + 1);
            v87 = 0;
        }
        // 0x40e27e
        g273 = v87;
        g284 = v86;
        g271 = v86;
        int32_t v89 = (*v82 - *v74) * *v84 >> 8; // 0x40e296
        g286 = v89;
        g277 = v89;
        int32_t v90 = g299 + v70; // 0x40e2a9
        int32_t v91 = *v81 - *v72; // 0x40e2b1
        int32_t v92; // 0x40e0bb
        int32_t v93; // 0x40e0bb
        if (v91 >= 0) {
            int32_t v94 = 4 * v90;
            int32_t v95 = *(int32_t *)v94 * (v91 + 1); // 0x40e2cd
            *(int16_t *)&g292 = 0;
            g292 += v95;
            v92 = v94;
            v93 = v95;
        } else {
            int32_t v96 = 4 * v90;
            *(int16_t *)&g292 = -1;
            v92 = v96;
            v93 = *(int32_t *)v96 * (v91 - 1);
        }
        // 0x40e2e4
        g285 = v93;
        int32_t * v97 = (int32_t *)(v9 + 12); // 0x40e2e9
        int32_t v98 = *(int32_t *)(v92 - 4); // 0x40e2ef
        g287 = (int64_t)((*v97 - *v74) * v98 >> 8);
        g280 = 256 * *v97;
        g276 = *v81;
        int32_t v99 = g299 + v71; // 0x40e317
        int32_t v100 = *v76 - *v81; // 0x40e31f
        int32_t v101; // 0x40e0bb
        int32_t v102; // 0x40e0bb
        int16_t v103; // 0x40e0bb
        if (v100 < 1) {
            int32_t v104 = 4 * v99;
            v101 = v104;
            v102 = *(int32_t *)v104 * (v100 - 1);
            v103 = -1;
        } else {
            // 0x40e326
            g275 = 0;
            int32_t v105 = 4 * v99;
            int32_t v106 = *(int32_t *)v105 * (v100 + 1); // 0x40e330
            v101 = v105;
            v102 = v106;
            v103 = v106;
        }
        // 0x40e352
        g275 = v103;
        g272 = v102;
        g278 = (*v82 - *v97) * *(int32_t *)(v101 - 4) >> 8;
    } else {
        // 0x40e372
        g276 = v80;
        int32_t * v107 = (int32_t *)(v10 + 12); // 0x40e377
        int32_t v108 = *v74; // 0x40e37a
        g280 = (*v79 * v70 * (*v107 - v108) >> 8) + 256 * v108;
        int32_t v109 = *v76 - *v72; // 0x40e3a0
        int32_t v110; // 0x40e0bb
        int16_t v111; // 0x40e0bb
        if (v109 >= 0) {
            // 0x40e3c4
            *(int16_t *)&g292 = 0;
            int32_t v112 = *v79 * (v109 + 1); // 0x40e3ce
            g275 = 0;
            g292 += v112;
            v110 = v112;
            v111 = v112;
        } else {
            // 0x40e3a7
            *(int16_t *)&g292 = -1;
            v110 = *v79 * (v109 - 1);
            v111 = -1;
        }
        // 0x40e3eb
        g275 = v111;
        g285 = v110;
        g272 = v110;
        int32_t v113 = (*v107 - *v74) * *(int32_t *)(v78 - 4) >> 8; // 0x40e403
        g287 = v113;
        g278 = v113;
        int32_t v114 = g299 + v70; // 0x40e416
        int32_t v115 = *v81 - *v72; // 0x40e41e
        int32_t v116; // 0x40e0bb
        int32_t v117; // 0x40e0bb
        if (v115 < 1) {
            int32_t v118 = 4 * v114;
            int32_t v119 = *(int32_t *)v118 * (v115 - 1); // 0x40e43a
            *(int16_t *)&g289 = -1;
            g289 += v119;
            v116 = v118;
            v117 = v119;
        } else {
            int32_t v120 = 4 * v114;
            *(int16_t *)&g289 = 0;
            v116 = v120;
            v117 = *(int32_t *)v120 * (v115 + 1);
        }
        // 0x40e451
        g284 = v117;
        int32_t * v121 = (int32_t *)(v9 + 12); // 0x40e456
        int32_t v122 = *(int32_t *)(v116 - 4); // 0x40e45c
        g286 = (int64_t)((*v121 - *v74) * v122 >> 8);
        g279 = 256 * *v121;
        g274 = *v81;
        int32_t v123 = g299 + v71; // 0x40e484
        int32_t v124 = *v76 - *v81; // 0x40e48c
        int32_t v125; // 0x40e0bb
        int32_t v126; // 0x40e0bb
        int16_t v127; // 0x40e0bb
        if (v124 >= 0) {
            int32_t v128 = 4 * v123;
            v125 = v128;
            v126 = *(int32_t *)v128 * (v124 + 1);
            v127 = 0;
        } else {
            int32_t v129 = 4 * v123;
            int32_t v130 = *(int32_t *)v129 * (v124 - 1); // 0x40e494
            v125 = v129;
            v126 = v130;
            v127 = (int16_t)v130 - 1;
        }
        // 0x40e4bf
        g273 = v127;
        g271 = v126;
        g277 = (*v107 - *v121) * *(int32_t *)(v125 - 4) >> 8;
    }
    // 0x40e4da
    function_40e79b();
    g297 = g269;
    g288 = g270;
    g290 = g274;
    g293 = g276;
    g284 = g271;
    g285 = g272;
    *(int16_t *)&g289 = g273;
    *(int16_t *)&g292 = g275;
    g286 = g277;
    g287 = g278;
    g295 = g279;
    g296 = g280;
    return function_40e79b();
}

// Address range: 0x40e79b - 0x40e980
int32_t function_40e79b(void) {
    // 0x40e79b
    *(int16_t *)&g291 = 0;
    *(int16_t *)&g294 = 0;
    int32_t v1 = g297; // 0x40e7ad
    int32_t v2; // 0x40e79b
    int32_t v3; // 0x40e79b
    int32_t result2; // 0x40e79b
    if (g190 > v1) {
        int32_t v4 = g190 - v1;
        int32_t v5 = (int32_t)g288 - v4; // 0x40e7c3
        g288 = v5;
        if (v5 < 0) {
            // 0x40e97f
            int32_t result; // 0x40e79b
            return result;
        }
        // 0x40e7cf
        g292 += v4 * (int32_t)g285;
        g289 += v4 * (int32_t)g284;
        g295 += v4 * (int32_t)g286;
        int32_t v6 = v4 * (int32_t)g287; // 0x40e7fe
        g296 = v6 + (int32_t)g296;
        g297 = g190;
        v2 = v5;
        result2 = v6;
        v3 = g190;
    } else {
        // 0x40e79b
        v2 = g288;
        v3 = v1;
    }
    int32_t v7 = v3 + v2; // 0x40e813
    if (g192 < v7) {
        int32_t v8 = g192 - v7 + v2; // 0x40e827
        g288 = v8;
        if (v8 < 0) {
            // 0x40e97f
            return result2;
        }
    }
    // 0x40e833
    g283 = 0;
    g281 = 0;
    g282 = v3 * (int32_t)g205;
    int32_t v9 = g293;
    int16_t v10 = g290;
    uint32_t v11 = v9 - (int32_t)v10; // 0x40e86a
    int16_t v12 = g189; // 0x40e88f
    int32_t v13 = g191;
    int32_t v14 = g296; // 0x40e857
    int32_t v15 = &g298; // 0x40e857
    int32_t v16; // 0x40e79b
    int32_t v17; // 0x40e79b
    while (true) {
      lab_0x40e85c:
        // 0x40e85c
        v17 = v15;
        int32_t * v18 = (int32_t *)(v17 + 8); // 0x40e861
        *v18 = v14;
        int32_t v19 = v14; // 0x40e870
        if (v11 != 0) {
            int32_t v20 = g295 - (int32_t)g296; // 0x40e877
            int32_t v21 = (0x100000000 * (int64_t)(v20 >> 31) | (int64_t)v20) / (int64_t)v11; // 0x40e87e
            *(int32_t *)(v17 + 12) = v21;
            v19 = v21;
        }
        // 0x40e883
        v15 = v17;
        if (v10 >= v12 || v12 <= g293) {
            // 0x40e8a7
            v16 = v9;
            if (g191 < g293) {
                // 0x40e8b0
                v15 = v17;
                if (g191 < (v10 >= v12 ? v10 : v12)) {
                    goto lab_0x40e8f2;
                } else {
                    // 0x40e8b9
                    *v18 = *v18 + v19 * (v9 - v13);
                    v16 = v13;
                    goto lab_0x40e8ca;
                }
            } else {
                goto lab_0x40e8ca;
            }
        } else {
            goto lab_0x40e8f2;
        }
    }
  lab_0x40e935:;
    // 0x40e935
    int32_t result3; // 0x40e79b
    if (g281 == 0) {
        // 0x40e97f
        return result3;
    }
    // 0x40e93e
    int32_t v22; // 0x40e79b
    int32_t v23 = 256 * (int32_t)*(char *)(v22 + 52) + g188; // 0x40e94e
    int32_t v24 = &g298; // 0x40e94e
    int32_t v25 = *(int32_t *)v24 + g187; // 0x40e954
    uint32_t v26 = *(int32_t *)(v24 + 8); // 0x40e956
    uint32_t v27 = *(int32_t *)(v24 + 12); // 0x40e959
    bool v28 = v24 > 0xffffffef; // 0x40e968
    int32_t v29 = v26 / 0x10000 & 255 | v23 & -256; // 0x40e968
    int32_t v30 = *(int32_t *)(v24 + 4); // 0x40e968
    uint32_t v31 = v26 / 256 | 0x1000000 * v26;
    uint32_t v32 = v31 + (v27 / 256 | 0x1000000 * v27); // 0x40e96c
    uint32_t v33 = v32 + (int32_t)v28; // 0x40e96c
    v28 = v28 ? v33 <= v31 : v32 < v31;
    *(char *)(v30 + v25) = *(char *)v29;
    int16_t v34 = (int16_t)v30 - 1; // 0x40e971
    int32_t result4 = v33 / 256 & 255 | v29 & -256; // 0x40e973
    v29 = result4;
    v30 = v30 & -0x10000 | (int32_t)v34;
    while (v34 >= 0) {
        // 0x40e96a
        v31 = v33;
        v32 = v31 + (v27 / 256 | 0x1000000 * v27);
        v33 = v32 + (int32_t)v28;
        v28 = v28 ? v33 <= v31 : v32 < v31;
        *(char *)(v30 + v25) = *(char *)v29;
        v34 = (int16_t)v30 - 1;
        result4 = v33 / 256 & 255 | v29 & -256;
        v29 = result4;
        v30 = v30 & -0x10000 | (int32_t)v34;
    }
    int32_t v35 = g281 - 1; // 0x40e977
    g281 = v35;
    v24 += 16;
    int32_t v36 = v25; // 0x40e97d
    while (v35 != 0) {
        // 0x40e954
        v25 = *(int32_t *)v24 + v36;
        v26 = *(int32_t *)(v24 + 8);
        v27 = *(int32_t *)(v24 + 12);
        v28 = v24 > 0xffffffef;
        v29 = v26 / 0x10000 & 255 | result4 & -256;
        v30 = *(int32_t *)(v24 + 4);
        v31 = v26 / 256 | 0x1000000 * v26;
        v32 = v31 + (v27 / 256 | 0x1000000 * v27);
        v33 = v32 + (int32_t)v28;
        v28 = v28 ? v33 <= v31 : v32 < v31;
        *(char *)(v30 + v25) = *(char *)v29;
        v34 = (int16_t)v30 - 1;
        result4 = v33 / 256 & 255 | v29 & -256;
        v29 = result4;
        v30 = v30 & -0x10000 | (int32_t)v34;
        while (v34 >= 0) {
            // 0x40e96a
            v31 = v33;
            v32 = v31 + (v27 / 256 | 0x1000000 * v27);
            v33 = v32 + (int32_t)v28;
            v28 = v28 ? v33 <= v31 : v32 < v31;
            *(char *)(v30 + v25) = *(char *)v29;
            v34 = (int16_t)v30 - 1;
            result4 = v33 / 256 & 255 | v29 & -256;
            v29 = result4;
            v30 = v30 & -0x10000 | (int32_t)v34;
        }
        // 0x40e977
        v35 = g281 - 1;
        g281 = v35;
        v24 += 16;
        v36 = v25;
    }
    // 0x40e97f
    return result4;
  lab_0x40e8f2:
    // 0x40e8f2
    g282 += (int32_t)g205;
    g295 += (int32_t)g286;
    v14 = (int32_t)g296 + (int32_t)g287;
    g296 = v14;
    g292 += (int32_t)g285;
    result3 = g284;
    g289 += result3;
    int32_t v37 = (int32_t)g288 - 1; // 0x40e929
    g288 = v37;
    if (v37 < 0) {
        // break -> 0x40e935
        goto lab_0x40e935;
    }
    goto lab_0x40e85c;
  lab_0x40e8ca:;
    int32_t v38 = v10 > v12 ? v10 : v12;
    *(int32_t *)(v17 + 4) = v16 - v38;
    int32_t v39 = g282 + v38; // 0x40e8d3
    int32_t v40 = g283; // 0x40e8db
    g283 = v39;
    *(int32_t *)v17 = v39 - v40;
    g281++;
    v15 = v17 + 16;
    goto lab_0x40e8f2;
}

// Address range: 0x40e980 - 0x40e9cc
int32_t function_40e980(void) {
    // 0x40e980
    int32_t v1; // 0x40e980
    int32_t v2 = *(int32_t *)(v1 + 4); // 0x40e980
    int32_t v3 = *(int32_t *)(v1 + 8); // 0x40e983
    int32_t result = v2; // 0x40e98c
    if (!((v2 < g197 | v2 > g199)) && v3 >= g198 && v3 <= g200) {
        int32_t v4 = *(int32_t *)(4 * (v3 >> 8) + (int32_t)&g206); // 0x40e9ac
        result = v4 + (v2 >> 8) + g187;
        int32_t v5 = *(int32_t *)(v1 + 16); // 0x40e9bb
        unsigned char v6 = *(char *)(v1 + 12); // 0x40e9be
        char * v7 = (char *)result; // 0x40e9c1
        unsigned char v8 = *v7; // 0x40e9c1
        char v9 = *(char *)(256 * (int32_t)v6 | v5 & -0x10000 | (int32_t)v8); // 0x40e9c3
        *v7 = v9;
    }
    // 0x40e9c7
    return result;
}

// Address range: 0x40e9cc - 0x40f91d
int32_t function_40e9cc(void) {
    // 0x40e9cc
    __asm_wait();
    *(int16_t *)&g303 = g302 & -769;
    int3_t v1 = 0; // 0x40e9f7
    if (g315 > g311) {
        // 0x40ebda
        __asm_wait();
        return __asm_wait();
    }
    int3_t v2; // 0x40e9cc
    int3_t v3; // 0x40ea53
    int32_t v4; // 0x40e9cc
    int3_t v5; // 0x40e9cc
    while (true) {
      lab_0x40e9fd:
        // 0x40e9fd
        v2 = v1;
        v5 = v2 - 1;
        __frontend_reg_store_fpr(v5, (float80_t)g312);
        __frontend_reg_store_fpr(v5, __frontend_reg_load_fpr(v5) * (float80_t)g323);
        __frontend_reg_store_fpr(v5, __frontend_reg_load_fpr(v5) + (float80_t)g339);
        g352 = g340 + g312;
        g351 = __frontend_reg_load_fpr(v5);
        __frontend_reg_store_fpr(v5, (float80_t)g315);
        __frontend_reg_store_fpr(v5, __frontend_reg_load_fpr(v5) * (float80_t)g324);
        __frontend_reg_store_fpr(v5, __frontend_reg_load_fpr(v5) + (float80_t)g318);
        g362 = g319 + g315;
        g361 = __frontend_reg_load_fpr(v5);
        __frontend_reg_store_fpr(v5, (float80_t)g313);
        v3 = v2 - 2;
        __frontend_reg_store_fpr(v3, __frontend_reg_load_fpr(v5));
        __frontend_reg_store_fpr(v3, __frontend_reg_load_fpr(v3) * (float80_t)g326);
        __frontend_reg_store_fpr(v3, __frontend_reg_load_fpr(v3) + (float80_t)g325);
        float80_t v6 = __frontend_reg_load_fpr(v5); // 0x40ea61
        __frontend_reg_store_fpr(v2, __frontend_reg_load_fpr(v2) / v6);
        v4 = g351;
        if (g335 != 0) {
            // 0x40ea94
            if (v4 < g201) {
                goto lab_0x40eb8a;
            } else {
                // 0x40eaab
                if (g203 > g361) {
                    goto lab_0x40eab7;
                } else {
                    goto lab_0x40eb8a;
                }
            }
        } else {
            // 0x40ea6f
            if (v4 < g203) {
                // 0x40ea86
                if (g201 > g361) {
                    goto lab_0x40eb8a;
                } else {
                    goto lab_0x40eab7;
                }
            } else {
                goto lab_0x40eb8a;
            }
        }
    }
  lab_0x40ebda:
    // 0x40ebda
    __asm_wait();
    return __asm_wait();
  lab_0x40f2da_2:;
    // 0x40f2da
    int32_t v7; // 0x40e9cc
    int32_t v8 = g348 / 0x10000 - v7 / 0x10000 + g309; // 0x40f2ff
    g309 = v8;
    g310 += (g348 & 0xffff) - (v7 & 0xffff);
    g348 = v7;
    int32_t v9 = v8; // 0x40f311
    int3_t v10; // 0x40e9cc
    int3_t v11 = v10; // 0x40f311
    int32_t v12; // 0x40e9cc
    int32_t v13 = v12; // 0x40f311
    goto lab_0x40f317_2;
  lab_0x40eb8a:
    // 0x40eb8a
    g300 = (float32_t)__frontend_reg_load_fpr(v2);
    int3_t v20 = v2 + 1; // 0x40eb8a
    goto lab_0x40eb90;
  lab_0x40eb90:
    // 0x40eb90
    v1 = v20;
    int32_t v21 = g312 + 256; // 0x40eb90
    g312 = v21;
    g315 += 256;
    int3_t v22 = v1 - 1; // 0x40eba4
    __frontend_reg_store_fpr(v22, (float80_t)v21);
    __frontend_reg_store_fpr(v22, __frontend_reg_load_fpr(v22) * (float80_t)g314);
    g313 = __frontend_reg_load_fpr(v22);
    __frontend_reg_store_fpr(v22, (float80_t)g315);
    __frontend_reg_store_fpr(v22, __frontend_reg_load_fpr(v22) * (float80_t)g317);
    g316 = __frontend_reg_load_fpr(v22);
    if (g315 > g311) {
        // break -> 0x40ebda
        goto lab_0x40ebda;
    }
    goto lab_0x40e9fd;
  lab_0x40eab7:;
    // 0x40eab7
    int3_t v23; // 0x40e9cc
    int3_t v24; // 0x40e9cc
    int3_t v25; // 0x40e9cc
    int3_t v26; // 0x40e9cc
    int3_t v27; // 0x40e9cc
    int32_t v28; // 0x40e9cc
    int32_t v29; // 0x40e9cc
    int32_t v30; // 0x40e9cc
    int32_t v31; // 0x40e9cc
    int32_t v32; // 0x40e9cc
    int32_t v33; // 0x40e9cc
    int32_t v34; // 0x40e9cc
    int32_t v35; // 0x40e9cc
    int3_t v36; // 0x40e9cc
    int3_t v37; // 0x40e9cc
    int3_t v38; // 0x40e9cc
    int32_t v39; // 0x40f4cd
    if ((g361 ^ v4) < 256) {
        goto lab_0x40eb8a;
    } else {
        // 0x40ead0
        __frontend_reg_store_fpr(v5, __frontend_reg_load_fpr(v2));
        __frontend_reg_store_fpr(v3, __frontend_reg_load_fpr(v5));
        __frontend_reg_store_fpr(v3, __frontend_reg_load_fpr(v3) * (float80_t)g329);
        __frontend_reg_store_fpr(v3, __frontend_reg_load_fpr(v3) + (float80_t)g342);
        g344 = __frontend_reg_load_fpr(v3);
        __frontend_reg_store_fpr(v5, __frontend_reg_load_fpr(v5) * (float80_t)g330);
        __frontend_reg_store_fpr(v5, __frontend_reg_load_fpr(v5) + (float80_t)g343);
        g345 = __frontend_reg_load_fpr(v5);
        __frontend_reg_store_fpr(v2, __frontend_reg_load_fpr(v2) * (float80_t)g333);
        __frontend_reg_store_fpr(v2, __frontend_reg_load_fpr(v2) + (float80_t)g341);
        g357 = __frontend_reg_load_fpr(v2);
        __frontend_reg_store_fpr(v2, (float80_t)g316);
        __frontend_reg_store_fpr(v5, __frontend_reg_load_fpr(v2));
        __frontend_reg_store_fpr(v5, __frontend_reg_load_fpr(v5) * (float80_t)g328);
        __frontend_reg_store_fpr(v5, __frontend_reg_load_fpr(v5) + (float80_t)g327);
        int3_t v40 = v2 + 1;
        __frontend_reg_store_fpr(v40, __frontend_reg_load_fpr(v40) / __frontend_reg_load_fpr(v2));
        int32_t v41; // 0x40e9cc
        if (g335 != 0) {
            // 0x40eb3e
            v41 = g351 - g361;
        } else {
            // 0x40eb2c
            v41 = g361 - g351;
        }
        // 0x40eb4e
        g363 = v41;
        __frontend_reg_store_fpr(v2, __frontend_reg_load_fpr(v40));
        __frontend_reg_store_fpr(v5, __frontend_reg_load_fpr(v2));
        __frontend_reg_store_fpr(v5, __frontend_reg_load_fpr(v5) * (float80_t)g331);
        __frontend_reg_store_fpr(v5, __frontend_reg_load_fpr(v5) + (float80_t)g321);
        g346 = __frontend_reg_load_fpr(v5);
        __frontend_reg_store_fpr(v2, __frontend_reg_load_fpr(v2) * (float80_t)g332);
        __frontend_reg_store_fpr(v2, __frontend_reg_load_fpr(v2) + (float80_t)g322);
        g347 = __frontend_reg_load_fpr(v2);
        __frontend_reg_store_fpr(v40, __frontend_reg_load_fpr(v40) * (float80_t)g334);
        __frontend_reg_store_fpr(v40, __frontend_reg_load_fpr(v40) + (float80_t)g320);
        int32_t v42 = __frontend_reg_load_fpr(v40); // 0x40eb82
        g358 = v42;
        int32_t v43 = g357;
        int32_t v44 = v43; // 0x40ebf0
        int32_t v45 = v42; // 0x40ebf0
        if (g335 == 0) {
            // 0x40ebf2
            g357 = v42;
            g358 = v43;
            int32_t v46 = g351; // 0x40ec08
            int32_t v47 = g352; // 0x40ec0d
            g351 = g361;
            g352 = g362;
            g361 = v46;
            g362 = v47;
            int32_t v48 = g344; // 0x40ec36
            int32_t v49 = g345; // 0x40ec3b
            g344 = g346;
            g345 = g347;
            g346 = v48;
            g347 = v49;
            v44 = v42;
            v45 = v43;
        }
        // 0x40ec64
        g366 = v45 - v44;
        __frontend_reg_store_fpr(v40, 1.0L);
        __frontend_reg_store_fpr(v40, __frontend_reg_load_fpr(v40) / (float80_t)g357);
        g359 = g346 - g344;
        g360 = g347 - g345;
        int32_t v50 = g361; // 0x40eca3
        int32_t v51 = g351 - 256 - (v50 & -256) + (256 - (v50 & 255) & 256); // 0x40eccb
        g356 = v51;
        __frontend_reg_store_fpr(v2, (float80_t)g358);
        __frontend_reg_store_fpr(v2, __frontend_reg_load_fpr(v2) * (float80_t)g363);
        float80_t v52 = __frontend_reg_load_fpr(v2); // 0x40ecde
        __frontend_reg_store_fpr(v2, v52 * __frontend_reg_load_fpr(v40));
        g364 = __frontend_reg_load_fpr(v2);
        __frontend_reg_store_fpr(v2, (float80_t)g366);
        __frontend_reg_store_fpr(v2, -__frontend_reg_load_fpr(v2));
        __frontend_reg_store_fpr(v40, __frontend_reg_load_fpr(v2) * __frontend_reg_load_fpr(v40));
        g365 = __frontend_reg_load_fpr(v40);
        int32_t v53 = g361; // 0x40ecf6
        int32_t v54; // 0x40e9cc
        if (v53 < g201) {
            int32_t v55 = (v53 & -256) + v51 - (g201 & -256); // 0x40ed14
            g356 = v55;
            g361 = g201;
            v54 = v55;
        } else {
            // 0x40ec64
            v54 = g356;
        }
        int3_t v56 = v2 + 2;
        __frontend_reg_store_fpr(v40, (float80_t)v54);
        __frontend_reg_store_fpr(v2, __frontend_reg_load_fpr(v40));
        __frontend_reg_store_fpr(v2, __frontend_reg_load_fpr(v2) * (float80_t)g365);
        __frontend_reg_store_fpr(v2, __frontend_reg_load_fpr(v2) + (float80_t)g364);
        __frontend_reg_store_fpr(v56, __frontend_reg_load_fpr(v56) / __frontend_reg_load_fpr(v40));
        uint32_t v57 = g351; // 0x40ed3d
        int32_t v58 = v57 & 255; // 0x40ed44
        g356 = v58;
        if (v57 >= g203) {
            // 0x40ed58
            g356 = (v57 & -256) - (g203 & -256) | v58;
            g351 = g203;
        }
        // 0x40ed75
        __frontend_reg_store_fpr(v40, __frontend_reg_load_fpr(v56));
        __frontend_reg_store_fpr(v2, __frontend_reg_load_fpr(v40));
        __frontend_reg_store_fpr(v2, __frontend_reg_load_fpr(v2) * (float80_t)g359);
        __frontend_reg_store_fpr(v2, __frontend_reg_load_fpr(v2) + (float80_t)g344);
        g346 = __frontend_reg_load_fpr(v2);
        __frontend_reg_store_fpr(v40, __frontend_reg_load_fpr(v40) * (float80_t)g360);
        __frontend_reg_store_fpr(v40, __frontend_reg_load_fpr(v40) + (float80_t)g345);
        g347 = __frontend_reg_load_fpr(v40);
        __frontend_reg_store_fpr(v56, __frontend_reg_load_fpr(v56) * (float80_t)g366);
        __frontend_reg_store_fpr(v56, __frontend_reg_load_fpr(v56) + (float80_t)g357);
        g358 = __frontend_reg_load_fpr(v56);
        __frontend_reg_store_fpr(v56, (float80_t)g356);
        __frontend_reg_store_fpr(v40, __frontend_reg_load_fpr(v56));
        __frontend_reg_store_fpr(v40, __frontend_reg_load_fpr(v40) * (float80_t)g365);
        __frontend_reg_store_fpr(v40, __frontend_reg_load_fpr(v40) + (float80_t)g364);
        int3_t v59 = v2 + 3;
        __frontend_reg_store_fpr(v59, __frontend_reg_load_fpr(v59) / __frontend_reg_load_fpr(v56));
        int32_t v60 = g351 - 256;
        g351 = v60 & -256;
        g353 = (v60 >> 8) - (g361 >> 8);
        __frontend_reg_store_fpr(v56, __frontend_reg_load_fpr(v59));
        __frontend_reg_store_fpr(v40, __frontend_reg_load_fpr(v56));
        __frontend_reg_store_fpr(v40, __frontend_reg_load_fpr(v40) * (float80_t)g359);
        __frontend_reg_store_fpr(v40, __frontend_reg_load_fpr(v40) + (float80_t)g344);
        g344 = __frontend_reg_load_fpr(v40);
        __frontend_reg_store_fpr(v56, __frontend_reg_load_fpr(v56) * (float80_t)g360);
        __frontend_reg_store_fpr(v56, __frontend_reg_load_fpr(v56) + (float80_t)g345);
        g345 = __frontend_reg_load_fpr(v56);
        __frontend_reg_store_fpr(v59, __frontend_reg_load_fpr(v59) * (float80_t)g366);
        __frontend_reg_store_fpr(v59, __frontend_reg_load_fpr(v59) + (float80_t)g357);
        g357 = __frontend_reg_load_fpr(v59);
        int3_t v61 = v2 ^ -4;
        int32_t v62 = g351; // 0x40ee26
        v20 = v61;
        if (v62 >= g201 == v62 < g203) {
            int32_t v63 = g352 - 256; // 0x40ee48
            v20 = v61;
            if (v63 >= g202 == v63 < g204) {
                // 0x40ee65
                g352 = v63;
                __frontend_reg_store_fpr(v59, 1.0L);
                __frontend_reg_store_fpr(v59, __frontend_reg_load_fpr(v59) / (float80_t)g357);
                g348 = 0x10000 * g344 | g345;
                g350 = g336;
                __frontend_reg_store_fpr(v56, (float80_t)g358);
                __frontend_reg_store_fpr(v56, __frontend_reg_load_fpr(v56) * (float80_t)g353);
                __frontend_reg_store_fpr(v56, __frontend_reg_load_fpr(v56) * __frontend_reg_load_fpr(v59));
                g354 = __frontend_reg_load_fpr(v56);
                __frontend_reg_store_fpr(v56, (float80_t)g357);
                __frontend_reg_store_fpr(v56, __frontend_reg_load_fpr(v56) - (float80_t)g358);
                __frontend_reg_store_fpr(v59, __frontend_reg_load_fpr(v56) * __frontend_reg_load_fpr(v59));
                g355 = __frontend_reg_load_fpr(v59);
                g349 = g352 / 256 * (int32_t)g205 + g187;
                __frontend_reg_store_fpr(v59, (float80_t)g346);
                __frontend_reg_store_fpr(v56, (float80_t)g344);
                __frontend_reg_store_fpr(v59, __frontend_reg_load_fpr(v59) - __frontend_reg_load_fpr(v56));
                g309 = __frontend_reg_load_fpr(v59);
                __frontend_reg_store_fpr(v59, (float80_t)g347);
                __frontend_reg_store_fpr(v56, (float80_t)g345);
                __frontend_reg_store_fpr(v59, __frontend_reg_load_fpr(v59) - __frontend_reg_load_fpr(v56));
                int32_t v64 = __frontend_reg_load_fpr(v59);
                g310 = v64;
                if ((g338 & 1) != 0) {
                    if (v64 == 0) {
                        // 0x40f4af
                        g310 = 1;
                    }
                    // 0x40f4b9
                    __frontend_reg_store_fpr(v59, (float80_t)g309);
                    __frontend_reg_store_fpr(v56, (float80_t)g310);
                    __frontend_reg_store_fpr(v59, __frontend_reg_load_fpr(v59) / __frontend_reg_load_fpr(v56));
                    int32_t v65 = g353 + 1; // 0x40f4d9
                    int32_t v66 = g349 + 1 + g351 / 256; // 0x40f4ea
                    if (v65 < 16) {
                        // 0x40f4b9
                        v29 = g309;
                        v38 = v59;
                        v30 = v65;
                        v33 = v66;
                        goto lab_0x40f89e;
                    } else {
                        int32_t v67 = g348; // 0x40f4c7
                        v39 = g350;
                        g305 = __frontend_reg_load_fpr(v59);
                        __frontend_reg_store_fpr(v59, (float80_t)g310);
                        __frontend_reg_store_fpr(v56, (float80_t)g354);
                        __frontend_reg_store_fpr(v40, (float80_t)g305);
                        __frontend_reg_store_fpr(v2, (float80_t)g355);
                        int32_t v68 = v66 & 3; // 0x40f514
                        g300 = v68;
                        __frontend_reg_store_fpr(v5, (float80_t)v68);
                        __frontend_reg_store_fpr(v3, (float80_t)g301);
                        int32_t v69 = v65 - v68; // 0x40f528
                        g307 = v69;
                        if (v68 == 0) {
                            int32_t v70 = v69 & 15; // 0x40f5ee
                            int32_t v71 = v70 != 0 ? v70 : 16;
                            int32_t v72 = v69 / 16 + (int32_t)(v70 == 0);
                            g307 = v72;
                            g308 = v71;
                            v28 = v71;
                            v37 = v3;
                            v35 = v67;
                            v32 = v66;
                            if (v72 > 0) {
                                float80_t v73 = __frontend_reg_load_fpr(v3); // 0x40f612
                                __frontend_reg_store_fpr(v3, __frontend_reg_load_fpr(v5));
                                __frontend_reg_store_fpr(v5, v73);
                                float32_t v74 = g306; // 0x40f614
                                __frontend_reg_store_fpr(v3, __frontend_reg_load_fpr(v3) + (float80_t)v74);
                                float80_t v75 = __frontend_reg_load_fpr(v5); // 0x40f61a
                                __frontend_reg_store_fpr(v5, __frontend_reg_load_fpr(v2));
                                __frontend_reg_store_fpr(v2, v75);
                                __frontend_reg_store_fpr(v3, __frontend_reg_load_fpr(v2));
                                float80_t v76 = __frontend_reg_load_fpr(v3); // 0x40f61e
                                __frontend_reg_store_fpr(v3, v76 * __frontend_reg_load_fpr(v61));
                                int3_t v77 = v2 - 3; // 0x40f620
                                __frontend_reg_store_fpr(v77, __frontend_reg_load_fpr(v40));
                                float80_t v78 = __frontend_reg_load_fpr(v77); // 0x40f622
                                __frontend_reg_store_fpr(v77, v78 * __frontend_reg_load_fpr(v2));
                                float80_t v79 = __frontend_reg_load_fpr(v77); // 0x40f624
                                __frontend_reg_store_fpr(v77, v79 + __frontend_reg_load_fpr(v59));
                                float80_t v80 = __frontend_reg_load_fpr(v3); // 0x40f626
                                __frontend_reg_store_fpr(v5, __frontend_reg_load_fpr(v5) / v80);
                                v26 = v56;
                                v25 = v40;
                                v24 = v2;
                                v23 = v59;
                                v27 = v3;
                                v36 = v5;
                                v34 = v67;
                                v31 = v66;
                                goto lab_0x40f628;
                            } else {
                                goto lab_0x40f861;
                            }
                        } else {
                            int3_t v81 = v2 - 3; // 0x40f53e
                            __frontend_reg_store_fpr(v81, __frontend_reg_load_fpr(v59));
                            __frontend_reg_store_fpr(v61, __frontend_reg_load_fpr(v2));
                            __frontend_reg_store_fpr(v61, __frontend_reg_load_fpr(v61) * __frontend_reg_load_fpr(v5));
                            __frontend_reg_store_fpr(v61, __frontend_reg_load_fpr(v61) + __frontend_reg_load_fpr(v56));
                            __frontend_reg_store_fpr(v3, __frontend_reg_load_fpr(v3) / __frontend_reg_load_fpr(v81));
                            __frontend_reg_store_fpr(v81, __frontend_reg_load_fpr(v3));
                            __frontend_reg_store_fpr(v81, __frontend_reg_load_fpr(v81) * __frontend_reg_load_fpr(v56));
                            int32_t v82 = __frontend_reg_load_fpr(v81); // 0x40f54c
                            g300 = v82;
                            int32_t v83 = __frontend_reg_load_fpr(v3); // 0x40f558
                            g300 = v83;
                            float80_t v84 = __frontend_reg_load_fpr(v5); // 0x40f577
                            __frontend_reg_store_fpr(v5, __frontend_reg_load_fpr(v2));
                            __frontend_reg_store_fpr(v2, v84);
                            __frontend_reg_store_fpr(v5, __frontend_reg_load_fpr(v5) + (float80_t)g306);
                            float80_t v85 = __frontend_reg_load_fpr(v2); // 0x40f57f
                            __frontend_reg_store_fpr(v2, __frontend_reg_load_fpr(v40));
                            __frontend_reg_store_fpr(v40, v85);
                            __frontend_reg_store_fpr(v5, __frontend_reg_load_fpr(v40));
                            __frontend_reg_store_fpr(v5, __frontend_reg_load_fpr(v5) * __frontend_reg_load_fpr(v81));
                            __frontend_reg_store_fpr(v3, __frontend_reg_load_fpr(v56));
                            __frontend_reg_store_fpr(v3, __frontend_reg_load_fpr(v3) * __frontend_reg_load_fpr(v40));
                            __frontend_reg_store_fpr(v3, __frontend_reg_load_fpr(v3) + __frontend_reg_load_fpr(v61));
                            float80_t v86 = __frontend_reg_load_fpr(v5); // 0x40f58b
                            __frontend_reg_store_fpr(v2, __frontend_reg_load_fpr(v2) / v86);
                            int32_t v87 = v68; // 0x40f58f
                            uint32_t v88 = g348;
                            unsigned char v89 = *(char *)((v88 / 0x1000000 | v88 & 0xff00) + v39); // 0x40f59c
                            int32_t v90 = v66 - 1; // 0x40f59f
                            char * v91 = (char *)v90; // 0x40f59f
                            unsigned char v92 = *v91; // 0x40f59f
                            int32_t v93 = v88 + (v83 & 0xffff | 0x10000 * v82); // 0x40f5a2
                            char v94 = *(char *)((256 * (int32_t)v89 | (int32_t)v92) + g337); // 0x40f5a4
                            *v91 = v94;
                            v87--;
                            int32_t v95 = v90; // 0x40f5ac
                            while (v87 != 0) {
                                // 0x40f595
                                v88 = v93;
                                v89 = *(char *)((v88 / 0x1000000 | v88 & 0xff00) + v39);
                                v90 = v95 - 1;
                                v91 = (char *)v90;
                                v92 = *v91;
                                v93 = v88 + (v83 & 0xffff | 0x10000 * v82);
                                v94 = *(char *)((256 * (int32_t)v89 | (int32_t)v92) + g337);
                                *v91 = v94;
                                v87--;
                                v95 = v90;
                            }
                            int32_t v96 = g307 & 15; // 0x40f5b9
                            int32_t v97 = g307 / 16 + (int32_t)(v96 == 0);
                            g307 = v97;
                            g308 = v96 != 0 ? v96 : 16;
                            v26 = v59;
                            v25 = v56;
                            v24 = v40;
                            v23 = v61;
                            v27 = v5;
                            v36 = v2;
                            v34 = v93;
                            v31 = v90;
                            if (v97 > 0) {
                                goto lab_0x40f628;
                            } else {
                                // 0x40f5d8
                                g300 = (float32_t)__frontend_reg_load_fpr(v2);
                                v28 = g308;
                                v37 = v40;
                                v35 = v93;
                                v32 = v90;
                                goto lab_0x40f861;
                            }
                        }
                    }
                } else {
                    if (v64 == 0) {
                        // 0x40efb4
                        g310 = 1;
                    }
                    // 0x40efbe
                    __frontend_reg_store_fpr(v59, (float80_t)g309);
                    __frontend_reg_store_fpr(v56, (float80_t)g310);
                    __frontend_reg_store_fpr(v59, __frontend_reg_load_fpr(v59) / __frontend_reg_load_fpr(v56));
                    int32_t v98 = g353 + 1; // 0x40efde
                    if (v98 < 16) {
                        // 0x40f317
                        v9 = g309;
                        v11 = v59;
                        v13 = v98;
                        goto lab_0x40f317_2;
                    }
                    int32_t v99 = g348; // 0x40efcc
                    int32_t v100 = g350; // 0x40efd2
                    int32_t v101 = g349 + 1 + g351 / 256; // 0x40efef
                    g305 = __frontend_reg_load_fpr(v59);
                    __frontend_reg_store_fpr(v59, (float80_t)g310);
                    __frontend_reg_store_fpr(v56, (float80_t)g354);
                    __frontend_reg_store_fpr(v40, (float80_t)g305);
                    __frontend_reg_store_fpr(v2, (float80_t)g355);
                    int32_t v102 = v101 & 3; // 0x40f019
                    g300 = v102;
                    __frontend_reg_store_fpr(v5, (float80_t)v102);
                    __frontend_reg_store_fpr(v3, (float80_t)g301);
                    int32_t v103 = v98 - v102; // 0x40f02d
                    g307 = v103;
                    int3_t v104; // 0x40e9cc
                    int3_t v105; // 0x40e9cc
                    int3_t v106; // 0x40e9cc
                    int3_t v107; // 0x40e9cc
                    int3_t v108; // 0x40e9cc
                    int32_t v109; // 0x40e9cc
                    int32_t v110; // 0x40e9cc
                    int3_t v111; // 0x40e9cc
                    if (v102 == 0) {
                        int32_t v112 = v103 & 15; // 0x40f0e5
                        int32_t v113 = v112 != 0 ? v112 : 16;
                        int32_t v114 = v103 / 16 + (int32_t)(v112 == 0);
                        g307 = v114;
                        g308 = v113;
                        v12 = v113;
                        v10 = v3;
                        v7 = v99;
                        if (v114 <= 0) {
                            goto lab_0x40f2da_2;
                        }
                        float80_t v115 = __frontend_reg_load_fpr(v3); // 0x40f109
                        __frontend_reg_store_fpr(v3, __frontend_reg_load_fpr(v5));
                        __frontend_reg_store_fpr(v5, v115);
                        __frontend_reg_store_fpr(v3, __frontend_reg_load_fpr(v3) + (float80_t)g306);
                        float80_t v116 = __frontend_reg_load_fpr(v5); // 0x40f111
                        __frontend_reg_store_fpr(v5, __frontend_reg_load_fpr(v2));
                        __frontend_reg_store_fpr(v2, v116);
                        __frontend_reg_store_fpr(v3, __frontend_reg_load_fpr(v2));
                        __frontend_reg_store_fpr(v3, __frontend_reg_load_fpr(v3) * __frontend_reg_load_fpr(v61));
                        int3_t v117 = v2 - 3; // 0x40f117
                        __frontend_reg_store_fpr(v117, __frontend_reg_load_fpr(v40));
                        __frontend_reg_store_fpr(v117, __frontend_reg_load_fpr(v117) * __frontend_reg_load_fpr(v2));
                        __frontend_reg_store_fpr(v117, __frontend_reg_load_fpr(v117) + __frontend_reg_load_fpr(v59));
                        __frontend_reg_store_fpr(v5, __frontend_reg_load_fpr(v5) / __frontend_reg_load_fpr(v3));
                        v108 = v56;
                        v107 = v40;
                        v106 = v2;
                        v105 = v59;
                        v104 = v3;
                        v111 = v5;
                        v110 = v99;
                        v109 = v101;
                    } else {
                        int3_t v118 = v2 - 3; // 0x40f043
                        __frontend_reg_store_fpr(v118, __frontend_reg_load_fpr(v59));
                        __frontend_reg_store_fpr(v61, __frontend_reg_load_fpr(v2));
                        __frontend_reg_store_fpr(v61, __frontend_reg_load_fpr(v61) * __frontend_reg_load_fpr(v5));
                        __frontend_reg_store_fpr(v61, __frontend_reg_load_fpr(v61) + __frontend_reg_load_fpr(v56));
                        __frontend_reg_store_fpr(v3, __frontend_reg_load_fpr(v3) / __frontend_reg_load_fpr(v118));
                        __frontend_reg_store_fpr(v118, __frontend_reg_load_fpr(v3));
                        __frontend_reg_store_fpr(v118, __frontend_reg_load_fpr(v118) * __frontend_reg_load_fpr(v56));
                        int32_t v119 = __frontend_reg_load_fpr(v118); // 0x40f051
                        g300 = v119;
                        int32_t v120 = __frontend_reg_load_fpr(v3); // 0x40f05d
                        g300 = v120;
                        float80_t v121 = __frontend_reg_load_fpr(v5); // 0x40f069
                        __frontend_reg_store_fpr(v5, __frontend_reg_load_fpr(v2));
                        __frontend_reg_store_fpr(v2, v121);
                        __frontend_reg_store_fpr(v5, __frontend_reg_load_fpr(v5) + (float80_t)g306);
                        float80_t v122 = __frontend_reg_load_fpr(v2); // 0x40f071
                        __frontend_reg_store_fpr(v2, __frontend_reg_load_fpr(v40));
                        __frontend_reg_store_fpr(v40, v122);
                        __frontend_reg_store_fpr(v5, __frontend_reg_load_fpr(v40));
                        __frontend_reg_store_fpr(v5, __frontend_reg_load_fpr(v5) * __frontend_reg_load_fpr(v118));
                        __frontend_reg_store_fpr(v3, __frontend_reg_load_fpr(v56));
                        __frontend_reg_store_fpr(v3, __frontend_reg_load_fpr(v3) * __frontend_reg_load_fpr(v40));
                        __frontend_reg_store_fpr(v3, __frontend_reg_load_fpr(v3) + __frontend_reg_load_fpr(v61));
                        float80_t v123 = __frontend_reg_load_fpr(v5); // 0x40f090
                        __frontend_reg_store_fpr(v2, __frontend_reg_load_fpr(v2) / v123);
                        int32_t v124 = v102; // 0x40f090
                        uint32_t v125 = g348;
                        char v126 = *(char *)((v125 / 0x1000000 | v125 & 0xff00) + v100); // 0x40f099
                        int32_t v127 = v125 + (v120 & 0xffff | 0x10000 * v119); // 0x40f09c
                        int32_t v128 = v101 - 1; // 0x40f09e
                        *(char *)v128 = v126;
                        v124--;
                        int32_t v129 = v128; // 0x40f0a3
                        while (v124 != 0) {
                            // 0x40f092
                            v125 = v127;
                            v126 = *(char *)((v125 / 0x1000000 | v125 & 0xff00) + v100);
                            v127 = v125 + (v120 & 0xffff | 0x10000 * v119);
                            v128 = v129 - 1;
                            *(char *)v128 = v126;
                            v124--;
                            v129 = v128;
                        }
                        int32_t v130 = g307 & 15; // 0x40f0b0
                        int32_t v131 = g307 / 16 + (int32_t)(v130 == 0);
                        g307 = v131;
                        g308 = v130 != 0 ? v130 : 16;
                        v108 = v59;
                        v107 = v56;
                        v106 = v40;
                        v105 = v61;
                        v104 = v5;
                        v111 = v2;
                        v110 = v127;
                        v109 = v128;
                        if (v131 <= 0) {
                            // 0x40f0cf
                            g300 = (float32_t)__frontend_reg_load_fpr(v2);
                            v12 = g308;
                            v10 = v40;
                            v7 = v127;
                            goto lab_0x40f2da_2;
                        }
                    }
                    int3_t v132 = v106;
                    __frontend_reg_store_fpr(v104, __frontend_reg_load_fpr(v111));
                    float80_t v133 = __frontend_reg_load_fpr(v104); // 0x40f121
                    __frontend_reg_store_fpr(v104, v133 * __frontend_reg_load_fpr(v105));
                    int32_t v134 = __frontend_reg_load_fpr(v104); // 0x40f123
                    g300 = v134;
                    int32_t v135 = __frontend_reg_load_fpr(v111); // 0x40f12f
                    g300 = v135;
                    float80_t v136 = __frontend_reg_load_fpr(v132); // 0x40f147
                    __frontend_reg_store_fpr(v132, __frontend_reg_load_fpr(v107));
                    __frontend_reg_store_fpr(v107, v136);
                    __frontend_reg_store_fpr(v132, __frontend_reg_load_fpr(v132) + (float80_t)g306);
                    float80_t v137 = __frontend_reg_load_fpr(v107); // 0x40f14f
                    __frontend_reg_store_fpr(v107, __frontend_reg_load_fpr(v108));
                    __frontend_reg_store_fpr(v108, v137);
                    int32_t v138 = g344 + (0x10000 * v134 >> 16); // 0x40f14f
                    int32_t v139 = v109; // 0x40f14f
                    int3_t v140 = v107;
                    g300 = v110;
                    int32_t v141 = (0x10000 * v135 >> 16) + g345 & 0xffff; // 0x40f15c
                    g304 = 0x10000 * v138 | v141;
                    int32_t v142 = v141 - (v110 & 0xffff) >> 4; // 0x40f17b
                    int32_t v143 = 0x10000 * (v138 - v110 / 0x10000) / 16 | v142 & 0xffff; // 0x40f187
                    uint32_t v144 = 0x10000 * v110 >> 16; // 0x40f189
                    uint32_t v145 = (v110 - v142 & 0xffff | v144 & -0x10000) + v143; // 0x40f196
                    int3_t v146 = v140 + 1; // 0x40f19d
                    int3_t v147 = v140 - 1; // 0x40f19d
                    __frontend_reg_store_fpr(v147, __frontend_reg_load_fpr(v146));
                    int3_t v148 = v140 - 2; // 0x40f19f
                    __frontend_reg_store_fpr(v148, __frontend_reg_load_fpr(v146));
                    float80_t v149 = __frontend_reg_load_fpr(v148); // 0x40f1a1
                    __frontend_reg_store_fpr(v148, __frontend_reg_load_fpr(v147));
                    __frontend_reg_store_fpr(v147, v149);
                    int3_t v150 = v140 - 3; // 0x40f1a3
                    __frontend_reg_store_fpr(v148, __frontend_reg_load_fpr(v148) * __frontend_reg_load_fpr(v150));
                    float80_t v151 = __frontend_reg_load_fpr(v148); // 0x40f1a5
                    __frontend_reg_store_fpr(v148, __frontend_reg_load_fpr(v147));
                    __frontend_reg_store_fpr(v147, v151);
                    uint32_t v152 = v145 + v143; // 0x40f1a9
                    int3_t v153 = v140 + 2; // 0x40f1ab
                    __frontend_reg_store_fpr(v148, __frontend_reg_load_fpr(v148) * __frontend_reg_load_fpr(v153));
                    unsigned char v154 = *(char *)((v145 & 0xff00 | v144 / 0x1000000) + v100); // 0x40f1b0
                    int3_t v155 = v140 ^ -4; // 0x40f1b7
                    __frontend_reg_store_fpr(v148, __frontend_reg_load_fpr(v148) + __frontend_reg_load_fpr(v155));
                    uint32_t v156 = v152 + v143; // 0x40f1bc
                    unsigned char v157 = *(char *)((v152 & 0xff00 | v145 / 0x1000000) + v100); // 0x40f1be
                    float80_t v158 = __frontend_reg_load_fpr(v147); // 0x40f1c3
                    __frontend_reg_store_fpr(v140, __frontend_reg_load_fpr(v140) / v158);
                    uint32_t v159 = v156 + v143; // 0x40f1cd
                    unsigned char v160 = *(char *)((v156 & 0xff00 | v152 / 0x1000000) + v100); // 0x40f1cf
                    uint32_t v161 = v159 + v143; // 0x40f1d6
                    unsigned char v162 = *(char *)((v159 & 0xff00 | v156 / 0x1000000) + v100); // 0x40f1db
                    *(int32_t *)(v139 - 4) = 256 * (int32_t)v160 | 0x10000 * (256 * (int32_t)v154 | (int32_t)v157) | (int32_t)v162;
                    uint32_t v163 = v161 + v143; // 0x40f1e5
                    unsigned char v164 = *(char *)((v161 & 0xff00 | v159 / 0x1000000) + v100); // 0x40f1ea
                    uint32_t v165 = v163 + v143; // 0x40f1f4
                    unsigned char v166 = *(char *)((v163 & 0xff00 | v161 / 0x1000000) + v100); // 0x40f1f6
                    uint32_t v167 = v165 + v143; // 0x40f203
                    unsigned char v168 = *(char *)((v165 & 0xff00 | v163 / 0x1000000) + v100); // 0x40f205
                    uint32_t v169 = v167 + v143; // 0x40f20c
                    unsigned char v170 = *(char *)((v167 & 0xff00 | v165 / 0x1000000) + v100); // 0x40f211
                    *(int32_t *)(v139 - 8) = 0x10000 * (256 * (int32_t)v164 | (int32_t)v166) | 256 * (int32_t)v168 | (int32_t)v170;
                    uint32_t v171 = v169 + v143; // 0x40f21b
                    __frontend_reg_store_fpr(v147, __frontend_reg_load_fpr(v140));
                    __frontend_reg_store_fpr(v147, __frontend_reg_load_fpr(v147) * __frontend_reg_load_fpr(v155));
                    unsigned char v172 = *(char *)((v169 & 0xff00 | v167 / 0x1000000) + v100); // 0x40f224
                    __frontend_reg_store_fpr(v147, __frontend_reg_load_fpr(v147) + __frontend_reg_load_fpr(v146));
                    float80_t v173 = __frontend_reg_load_fpr(v140); // 0x40f22d
                    __frontend_reg_store_fpr(v140, __frontend_reg_load_fpr(v146));
                    __frontend_reg_store_fpr(v146, v173);
                    float80_t v174 = __frontend_reg_load_fpr(v140); // 0x40f22f
                    __frontend_reg_store_fpr(v140, v174 + __frontend_reg_load_fpr(v153));
                    float80_t v175 = __frontend_reg_load_fpr(v146); // 0x40f231
                    __frontend_reg_store_fpr(v146, __frontend_reg_load_fpr(v153));
                    __frontend_reg_store_fpr(v153, v175);
                    uint32_t v176 = v171 + v143; // 0x40f236
                    unsigned char v177 = *(char *)((v171 & 0xff00 | v169 / 0x1000000) + v100); // 0x40f238
                    g300 = (float32_t)__frontend_reg_load_fpr(v146);
                    uint32_t v178 = v176 + v143; // 0x40f24b
                    float80_t v179 = __frontend_reg_load_fpr(v153); // 0x40f24d
                    __frontend_reg_store_fpr(v153, __frontend_reg_load_fpr(v155));
                    __frontend_reg_store_fpr(v155, v179);
                    __frontend_reg_store_fpr(v153, __frontend_reg_load_fpr(v153) + (float80_t)g306);
                    int3_t v180 = v140 + 3; // 0x40f24f
                    float80_t v181 = __frontend_reg_load_fpr(v180); // 0x40f255
                    __frontend_reg_store_fpr(v180, __frontend_reg_load_fpr(v150));
                    __frontend_reg_store_fpr(v150, v181);
                    unsigned char v182 = *(char *)((v176 & 0xff00 | v171 / 0x1000000) + v100); // 0x40f257
                    uint32_t v183 = v178 + v143; // 0x40f25e
                    unsigned char v184 = *(char *)((v178 & 0xff00 | v176 / 0x1000000) + v100); // 0x40f263
                    *(int32_t *)(v139 - 12) = 256 * (int32_t)v182 | 0x10000 * (256 * (int32_t)v172 | (int32_t)v177) | (int32_t)v184;
                    uint32_t v185 = v183 + v143; // 0x40f26d
                    unsigned char v186 = *(char *)((v183 & 0xff00 | v178 / 0x1000000) + v100); // 0x40f272
                    uint32_t v187 = v185 + v143; // 0x40f27c
                    unsigned char v188 = *(char *)((v185 & 0xff00 | v183 / 0x1000000) + v100); // 0x40f27e
                    unsigned char v189 = *(char *)((v187 & 0xff00 | v185 / 0x1000000) + v100); // 0x40f28d
                    int16_t v190 = g300; // 0x40f290
                    int32_t v191 = g304; // 0x40f29e
                    float80_t v192 = __frontend_reg_load_fpr(v180); // 0x40f2a4
                    g300 = (float32_t)v192;
                    unsigned char v193 = *(char *)((v187 + v142 & 0xff00 | v187 / 0x1000000) + v100); // 0x40f2aa
                    v139 -= 16;
                    *(int32_t *)v139 = 0x10000 * (256 * (int32_t)v186 | (int32_t)v188) | 256 * (int32_t)v189 | (int32_t)v193;
                    int32_t v194 = g307 - 1; // 0x40f2bf
                    g307 = v194;
                    int32_t v195 = v191; // 0x40f2c5
                    v138 = g344 + (int32_t)v190;
                    while (v194 != 0) {
                        // 0x40f151
                        v140 = v155;
                        g300 = v195;
                        v141 = (0x10000 * (int32_t)(float32_t)v192 >> 16) + g345 & 0xffff;
                        g304 = 0x10000 * v138 | v141;
                        v142 = v141 - (v195 & 0xffff) >> 4;
                        v143 = 0x10000 * (v138 - v195 / 0x10000) / 16 | v142 & 0xffff;
                        v144 = 0x10000 * v195 >> 16;
                        v145 = (v195 - v142 & 0xffff | v144 & -0x10000) + v143;
                        v146 = v140 + 1;
                        v147 = v140 - 1;
                        __frontend_reg_store_fpr(v147, __frontend_reg_load_fpr(v146));
                        v148 = v140 - 2;
                        __frontend_reg_store_fpr(v148, __frontend_reg_load_fpr(v146));
                        v149 = __frontend_reg_load_fpr(v148);
                        __frontend_reg_store_fpr(v148, __frontend_reg_load_fpr(v147));
                        __frontend_reg_store_fpr(v147, v149);
                        v150 = v140 - 3;
                        __frontend_reg_store_fpr(v148, __frontend_reg_load_fpr(v148) * __frontend_reg_load_fpr(v150));
                        v151 = __frontend_reg_load_fpr(v148);
                        __frontend_reg_store_fpr(v148, __frontend_reg_load_fpr(v147));
                        __frontend_reg_store_fpr(v147, v151);
                        v152 = v145 + v143;
                        v153 = v140 + 2;
                        __frontend_reg_store_fpr(v148, __frontend_reg_load_fpr(v148) * __frontend_reg_load_fpr(v153));
                        v154 = *(char *)((v145 & 0xff00 | v144 / 0x1000000) + v100);
                        v155 = v140 ^ -4;
                        __frontend_reg_store_fpr(v148, __frontend_reg_load_fpr(v148) + __frontend_reg_load_fpr(v155));
                        v156 = v152 + v143;
                        v157 = *(char *)((v152 & 0xff00 | v145 / 0x1000000) + v100);
                        v158 = __frontend_reg_load_fpr(v147);
                        __frontend_reg_store_fpr(v140, __frontend_reg_load_fpr(v140) / v158);
                        v159 = v156 + v143;
                        v160 = *(char *)((v156 & 0xff00 | v152 / 0x1000000) + v100);
                        v161 = v159 + v143;
                        v162 = *(char *)((v159 & 0xff00 | v156 / 0x1000000) + v100);
                        *(int32_t *)(v139 - 4) = 256 * (int32_t)v160 | 0x10000 * (256 * (int32_t)v154 | (int32_t)v157) | (int32_t)v162;
                        v163 = v161 + v143;
                        v164 = *(char *)((v161 & 0xff00 | v159 / 0x1000000) + v100);
                        v165 = v163 + v143;
                        v166 = *(char *)((v163 & 0xff00 | v161 / 0x1000000) + v100);
                        v167 = v165 + v143;
                        v168 = *(char *)((v165 & 0xff00 | v163 / 0x1000000) + v100);
                        v169 = v167 + v143;
                        v170 = *(char *)((v167 & 0xff00 | v165 / 0x1000000) + v100);
                        *(int32_t *)(v139 - 8) = 0x10000 * (256 * (int32_t)v164 | (int32_t)v166) | 256 * (int32_t)v168 | (int32_t)v170;
                        v171 = v169 + v143;
                        __frontend_reg_store_fpr(v147, __frontend_reg_load_fpr(v140));
                        __frontend_reg_store_fpr(v147, __frontend_reg_load_fpr(v147) * __frontend_reg_load_fpr(v155));
                        v172 = *(char *)((v169 & 0xff00 | v167 / 0x1000000) + v100);
                        __frontend_reg_store_fpr(v147, __frontend_reg_load_fpr(v147) + __frontend_reg_load_fpr(v146));
                        v173 = __frontend_reg_load_fpr(v140);
                        __frontend_reg_store_fpr(v140, __frontend_reg_load_fpr(v146));
                        __frontend_reg_store_fpr(v146, v173);
                        v174 = __frontend_reg_load_fpr(v140);
                        __frontend_reg_store_fpr(v140, v174 + __frontend_reg_load_fpr(v153));
                        v175 = __frontend_reg_load_fpr(v146);
                        __frontend_reg_store_fpr(v146, __frontend_reg_load_fpr(v153));
                        __frontend_reg_store_fpr(v153, v175);
                        v176 = v171 + v143;
                        v177 = *(char *)((v171 & 0xff00 | v169 / 0x1000000) + v100);
                        g300 = (float32_t)__frontend_reg_load_fpr(v146);
                        v178 = v176 + v143;
                        v179 = __frontend_reg_load_fpr(v153);
                        __frontend_reg_store_fpr(v153, __frontend_reg_load_fpr(v155));
                        __frontend_reg_store_fpr(v155, v179);
                        __frontend_reg_store_fpr(v153, __frontend_reg_load_fpr(v153) + (float80_t)g306);
                        v180 = v140 + 3;
                        v181 = __frontend_reg_load_fpr(v180);
                        __frontend_reg_store_fpr(v180, __frontend_reg_load_fpr(v150));
                        __frontend_reg_store_fpr(v150, v181);
                        v182 = *(char *)((v176 & 0xff00 | v171 / 0x1000000) + v100);
                        v183 = v178 + v143;
                        v184 = *(char *)((v178 & 0xff00 | v176 / 0x1000000) + v100);
                        *(int32_t *)(v139 - 12) = 256 * (int32_t)v182 | 0x10000 * (256 * (int32_t)v172 | (int32_t)v177) | (int32_t)v184;
                        v185 = v183 + v143;
                        v186 = *(char *)((v183 & 0xff00 | v178 / 0x1000000) + v100);
                        v187 = v185 + v143;
                        v188 = *(char *)((v185 & 0xff00 | v183 / 0x1000000) + v100);
                        v189 = *(char *)((v187 & 0xff00 | v185 / 0x1000000) + v100);
                        v190 = g300;
                        v191 = g304;
                        v192 = __frontend_reg_load_fpr(v180);
                        g300 = (float32_t)v192;
                        v193 = *(char *)((v187 + v142 & 0xff00 | v187 / 0x1000000) + v100);
                        v139 -= 16;
                        *(int32_t *)v139 = 0x10000 * (256 * (int32_t)v186 | (int32_t)v188) | 256 * (int32_t)v189 | (int32_t)v193;
                        v194 = g307 - 1;
                        g307 = v194;
                        v195 = v191;
                        v138 = g344 + (int32_t)v190;
                    }
                    // 0x40f2cb
                    v12 = g308;
                    v10 = v155;
                    v7 = v191;
                    if (g308 <= 16) {
                        goto lab_0x40f2da_2;
                    }
                    // 0x40f46c
                    __asm_wait();
                    __asm_wait();
                    v20 = 0;
                    goto lab_0x40eb90;
                }
            } else {
                goto lab_0x40eb90;
            }
        } else {
            goto lab_0x40eb90;
        }
    }
  lab_0x40f89e:;
    int3_t v196 = v38 - 1; // 0x40f8a8
    __frontend_reg_store_fpr(v196, (float80_t)v29);
    float80_t v197 = __frontend_reg_load_fpr(v196); // 0x40f8ae
    float32_t * v198 = (float32_t *)(4 * v30 + (int32_t)&g367); // 0x40f8ae
    __frontend_reg_store_fpr(v196, v197 * (float80_t)*v198);
    int3_t v199 = v38 - 2; // 0x40f8b1
    __frontend_reg_store_fpr(v199, (float80_t)g310);
    __frontend_reg_store_fpr(v199, __frontend_reg_load_fpr(v199) * (float80_t)*v198);
    float80_t v200 = __frontend_reg_load_fpr(v199); // 0x40f8bd
    __frontend_reg_store_fpr(v199, __frontend_reg_load_fpr(v196));
    __frontend_reg_store_fpr(v196, v200);
    int32_t v201 = __frontend_reg_load_fpr(v199); // 0x40f8bf
    g300 = v201;
    int32_t v202 = __frontend_reg_load_fpr(v196); // 0x40f8d1
    g300 = v202;
    uint32_t v203 = g348;
    uint32_t v204 = v30;
    unsigned char v205 = *(char *)((v203 / 0x1000000 | v203 & 0xff00) + g350); // 0x40f8fd
    char * v206 = (char *)(v33 + -1 - v30 + v204); // 0x40f900
    unsigned char v207 = *v206; // 0x40f900
    char v208 = *(char *)((256 * (int32_t)v205 | (int32_t)v207) + g337); // 0x40f905
    *v206 = v208;
    int32_t v209 = v204 - 1; // 0x40f90c
    int32_t v210 = v203 + (v202 & 0xffff | 0x10000 * v201); // 0x40f90c
    while (v204 > 1) {
        // 0x40f8f6
        v203 = v210;
        v204 = v209;
        v205 = *(char *)((v203 / 0x1000000 | v203 & 0xff00) + g350);
        v206 = (char *)(v33 + -1 - v30 + v204);
        v207 = *v206;
        v208 = *(char *)((256 * (int32_t)v205 | (int32_t)v207) + g337);
        *v206 = v208;
        v209 = v204 - 1;
        v210 = v203 + (v202 & 0xffff | 0x10000 * v201);
    }
    goto lab_0x40f90e;
  lab_0x40f90e:
    // 0x40f90e
    __asm_wait();
    __asm_wait();
    v20 = 0;
    goto lab_0x40eb90;
  lab_0x40f861:;
    int32_t v211 = g348 / 0x10000 - v35 / 0x10000 + g309; // 0x40f886
    g309 = v211;
    g310 += (g348 & 0xffff) - (v35 & 0xffff);
    g348 = v35;
    v29 = v211;
    v38 = v37;
    v30 = v28;
    v33 = v32;
    goto lab_0x40f89e;
  lab_0x40f628:;
    int3_t v212 = v24;
    __frontend_reg_store_fpr(v27, __frontend_reg_load_fpr(v36));
    float80_t v213 = __frontend_reg_load_fpr(v27); // 0x40f62a
    __frontend_reg_store_fpr(v27, v213 * __frontend_reg_load_fpr(v23));
    int32_t v214 = __frontend_reg_load_fpr(v27); // 0x40f62c
    g300 = v214;
    int32_t v215 = __frontend_reg_load_fpr(v36); // 0x40f638
    g300 = v215;
    float80_t v216 = __frontend_reg_load_fpr(v212); // 0x40f650
    __frontend_reg_store_fpr(v212, __frontend_reg_load_fpr(v25));
    __frontend_reg_store_fpr(v25, v216);
    __frontend_reg_store_fpr(v212, __frontend_reg_load_fpr(v212) + (float80_t)g306);
    float80_t v217 = __frontend_reg_load_fpr(v25); // 0x40f658
    __frontend_reg_store_fpr(v25, __frontend_reg_load_fpr(v26));
    __frontend_reg_store_fpr(v26, v217);
    int32_t v218 = g344 + (0x10000 * v214 >> 16); // 0x40f658
    int3_t v219 = v25;
    g300 = v34;
    int32_t v220 = (0x10000 * v215 >> 16) + g345 & 0xffff; // 0x40f665
    g304 = 0x10000 * v218 | v220;
    int32_t v221 = v220 - (v34 & 0xffff) >> 4; // 0x40f684
    int32_t v222 = 0x10000 * (v218 - v34 / 0x10000) / 16 | v221 & 0xffff; // 0x40f690
    uint32_t v223 = 0x10000 * v34 >> 16; // 0x40f694
    int3_t v224 = v219 + 1; // 0x40f6a5
    int3_t v225 = v219 - 1; // 0x40f6a5
    __frontend_reg_store_fpr(v225, __frontend_reg_load_fpr(v224));
    int3_t v226 = v219 - 2; // 0x40f6a7
    __frontend_reg_store_fpr(v226, __frontend_reg_load_fpr(v224));
    float80_t v227 = __frontend_reg_load_fpr(v226); // 0x40f6a9
    __frontend_reg_store_fpr(v226, __frontend_reg_load_fpr(v225));
    __frontend_reg_store_fpr(v225, v227);
    int3_t v228 = v219 - 3; // 0x40f6ab
    __frontend_reg_store_fpr(v226, __frontend_reg_load_fpr(v226) * __frontend_reg_load_fpr(v228));
    float80_t v229 = __frontend_reg_load_fpr(v226); // 0x40f6ad
    __frontend_reg_store_fpr(v226, __frontend_reg_load_fpr(v225));
    __frontend_reg_store_fpr(v225, v229);
    int3_t v230 = v219 + 2; // 0x40f6af
    __frontend_reg_store_fpr(v226, __frontend_reg_load_fpr(v226) * __frontend_reg_load_fpr(v230));
    uint32_t v231 = (v34 - v221 & 0xffff | v223 & -0x10000) + v222; // 0x40f6b4
    uint32_t v232 = v231 + v222; // 0x40f6bd
    unsigned char v233 = *(char *)((v231 & 0xff00 | v223 / 0x1000000) + v39); // 0x40f6bf
    char * v234 = (char *)(v31 - 1); // 0x40f6c4
    unsigned char v235 = *(char *)((v232 & 0xff00 | v231 / 0x1000000) + v39); // 0x40f6c7
    char * v236 = (char *)(v31 - 2); // 0x40f6ca
    *v234 = *(char *)((256 * (int32_t)v233 | (int32_t)*v234) + g337);
    *v236 = *(char *)((256 * (int32_t)v235 | (int32_t)*v236) + g337);
    uint32_t v237 = v232 + v222; // 0x40f6de
    uint32_t v238 = v237 + v222; // 0x40f6e7
    unsigned char v239 = *(char *)((v237 & 0xff00 | v232 / 0x1000000) + v39); // 0x40f6e9
    char * v240 = (char *)(v31 - 3); // 0x40f6ee
    unsigned char v241 = *(char *)((v238 & 0xff00 | v237 / 0x1000000) + v39); // 0x40f6f1
    char * v242 = (char *)(v31 - 4); // 0x40f6f4
    *v240 = *(char *)((256 * (int32_t)v239 | (int32_t)*v240) + g337);
    *v242 = *(char *)((256 * (int32_t)v241 | (int32_t)*v242) + g337);
    uint32_t v243 = v238 + v222; // 0x40f708
    int3_t v244 = v219 ^ -4; // 0x40f70e
    __frontend_reg_store_fpr(v226, __frontend_reg_load_fpr(v226) + __frontend_reg_load_fpr(v244));
    uint32_t v245 = v243 + v222; // 0x40f713
    unsigned char v246 = *(char *)((v243 & 0xff00 | v238 / 0x1000000) + v39); // 0x40f715
    char * v247 = (char *)(v31 - 5); // 0x40f71a
    unsigned char v248 = *(char *)((v245 & 0xff00 | v243 / 0x1000000) + v39); // 0x40f71d
    float80_t v249 = __frontend_reg_load_fpr(v225); // 0x40f720
    __frontend_reg_store_fpr(v219, __frontend_reg_load_fpr(v219) / v249);
    char * v250 = (char *)(v31 - 6); // 0x40f722
    *v247 = *(char *)((256 * (int32_t)v246 | (int32_t)*v247) + g337);
    *v250 = *(char *)((256 * (int32_t)v248 | (int32_t)*v250) + g337);
    uint32_t v251 = v245 + v222; // 0x40f736
    uint32_t v252 = v251 + v222; // 0x40f73f
    unsigned char v253 = *(char *)((v251 & 0xff00 | v245 / 0x1000000) + v39); // 0x40f741
    char * v254 = (char *)(v31 - 7); // 0x40f746
    unsigned char v255 = *(char *)((v252 & 0xff00 | v251 / 0x1000000) + v39); // 0x40f749
    char * v256 = (char *)(v31 - 8); // 0x40f74c
    *v254 = *(char *)((256 * (int32_t)v253 | (int32_t)*v254) + g337);
    *v256 = *(char *)((256 * (int32_t)v255 | (int32_t)*v256) + g337);
    uint32_t v257 = v252 + v222; // 0x40f760
    uint32_t v258 = v257 + v222; // 0x40f769
    unsigned char v259 = *(char *)((v257 & 0xff00 | v252 / 0x1000000) + v39); // 0x40f76b
    char * v260 = (char *)(v31 - 9); // 0x40f770
    unsigned char v261 = *(char *)((v258 & 0xff00 | v257 / 0x1000000) + v39); // 0x40f773
    __frontend_reg_store_fpr(v225, __frontend_reg_load_fpr(v219));
    char * v262 = (char *)(v31 - 10); // 0x40f778
    *v260 = *(char *)((256 * (int32_t)v259 | (int32_t)*v260) + g337);
    *v262 = *(char *)((256 * (int32_t)v261 | (int32_t)*v262) + g337);
    uint32_t v263 = v258 + v222; // 0x40f78c
    uint32_t v264 = v263 + v222; // 0x40f795
    unsigned char v265 = *(char *)((v263 & 0xff00 | v258 / 0x1000000) + v39); // 0x40f797
    char * v266 = (char *)(v31 - 11); // 0x40f79c
    unsigned char v267 = *(char *)((v264 & 0xff00 | v263 / 0x1000000) + v39); // 0x40f79f
    __frontend_reg_store_fpr(v225, __frontend_reg_load_fpr(v225) * __frontend_reg_load_fpr(v244));
    char * v268 = (char *)(v31 - 12); // 0x40f7a4
    *v266 = *(char *)((256 * (int32_t)v265 | (int32_t)*v266) + g337);
    *v268 = *(char *)((256 * (int32_t)v267 | (int32_t)*v268) + g337);
    uint32_t v269 = v264 + v222; // 0x40f7b8
    uint32_t v270 = v269 + v222; // 0x40f7c1
    unsigned char v271 = *(char *)((v269 & 0xff00 | v264 / 0x1000000) + v39); // 0x40f7c3
    char * v272 = (char *)(v31 - 13); // 0x40f7c8
    unsigned char v273 = *(char *)((v270 & 0xff00 | v269 / 0x1000000) + v39); // 0x40f7cb
    __frontend_reg_store_fpr(v225, __frontend_reg_load_fpr(v225) + __frontend_reg_load_fpr(v224));
    float80_t v274 = __frontend_reg_load_fpr(v219); // 0x40f7d0
    __frontend_reg_store_fpr(v219, __frontend_reg_load_fpr(v224));
    __frontend_reg_store_fpr(v224, v274);
    float80_t v275 = __frontend_reg_load_fpr(v219); // 0x40f7d2
    __frontend_reg_store_fpr(v219, v275 + __frontend_reg_load_fpr(v230));
    float80_t v276 = __frontend_reg_load_fpr(v224); // 0x40f7d4
    __frontend_reg_store_fpr(v224, __frontend_reg_load_fpr(v230));
    __frontend_reg_store_fpr(v230, v276);
    char * v277 = (char *)(v31 - 14); // 0x40f7d6
    *v272 = *(char *)((256 * (int32_t)v271 | (int32_t)*v272) + g337);
    *v277 = *(char *)((256 * (int32_t)v273 | (int32_t)*v277) + g337);
    g300 = (float32_t)__frontend_reg_load_fpr(v224);
    float80_t v278 = __frontend_reg_load_fpr(v230); // 0x40f7ed
    __frontend_reg_store_fpr(v230, __frontend_reg_load_fpr(v244));
    __frontend_reg_store_fpr(v244, v278);
    __frontend_reg_store_fpr(v230, __frontend_reg_load_fpr(v230) + (float80_t)g306);
    int3_t v279 = v219 + 3; // 0x40f7ef
    float80_t v280 = __frontend_reg_load_fpr(v279); // 0x40f7f5
    __frontend_reg_store_fpr(v279, __frontend_reg_load_fpr(v228));
    __frontend_reg_store_fpr(v228, v280);
    uint32_t v281 = v270 + v222; // 0x40f7fa
    unsigned char v282 = *(char *)((v281 & 0xff00 | v270 / 0x1000000) + v39); // 0x40f805
    char * v283 = (char *)(v31 - 15); // 0x40f80a
    unsigned char v284 = *(char *)((v281 + v221 & 0xff00 | v281 / 0x1000000) + v39); // 0x40f80d
    int32_t v285 = v31 - 16; // 0x40f810
    char * v286 = (char *)v285; // 0x40f810
    int32_t v287 = g304; // 0x40f813
    *v283 = *(char *)((256 * (int32_t)v282 | (int32_t)*v283) + g337);
    *v286 = *(char *)((256 * (int32_t)v284 | (int32_t)*v286) + g337);
    int16_t v288 = g300; // 0x40f825
    float80_t v289 = __frontend_reg_load_fpr(v279); // 0x40f831
    g300 = (float32_t)v289;
    int32_t v290 = g307 - 1; // 0x40f846
    g307 = v290;
    int32_t v291 = v287; // 0x40f84c
    v218 = g344 + (int32_t)v288;
    int32_t v292 = v285; // 0x40f84c
    while (v290 != 0) {
        // 0x40f65a
        v219 = v244;
        g300 = v291;
        v220 = (0x10000 * (int32_t)(float32_t)v289 >> 16) + g345 & 0xffff;
        g304 = 0x10000 * v218 | v220;
        v221 = v220 - (v291 & 0xffff) >> 4;
        v222 = 0x10000 * (v218 - v291 / 0x10000) / 16 | v221 & 0xffff;
        v223 = 0x10000 * v291 >> 16;
        v224 = v219 + 1;
        v225 = v219 - 1;
        __frontend_reg_store_fpr(v225, __frontend_reg_load_fpr(v224));
        v226 = v219 - 2;
        __frontend_reg_store_fpr(v226, __frontend_reg_load_fpr(v224));
        v227 = __frontend_reg_load_fpr(v226);
        __frontend_reg_store_fpr(v226, __frontend_reg_load_fpr(v225));
        __frontend_reg_store_fpr(v225, v227);
        v228 = v219 - 3;
        __frontend_reg_store_fpr(v226, __frontend_reg_load_fpr(v226) * __frontend_reg_load_fpr(v228));
        v229 = __frontend_reg_load_fpr(v226);
        __frontend_reg_store_fpr(v226, __frontend_reg_load_fpr(v225));
        __frontend_reg_store_fpr(v225, v229);
        v230 = v219 + 2;
        __frontend_reg_store_fpr(v226, __frontend_reg_load_fpr(v226) * __frontend_reg_load_fpr(v230));
        v231 = (v291 - v221 & 0xffff | v223 & -0x10000) + v222;
        v232 = v231 + v222;
        v233 = *(char *)((v231 & 0xff00 | v223 / 0x1000000) + v39);
        v234 = (char *)(v292 - 1);
        v235 = *(char *)((v232 & 0xff00 | v231 / 0x1000000) + v39);
        v236 = (char *)(v292 - 2);
        *v234 = *(char *)((256 * (int32_t)v233 | (int32_t)*v234) + g337);
        *v236 = *(char *)((256 * (int32_t)v235 | (int32_t)*v236) + g337);
        v237 = v232 + v222;
        v238 = v237 + v222;
        v239 = *(char *)((v237 & 0xff00 | v232 / 0x1000000) + v39);
        v240 = (char *)(v292 - 3);
        v241 = *(char *)((v238 & 0xff00 | v237 / 0x1000000) + v39);
        v242 = (char *)(v292 - 4);
        *v240 = *(char *)((256 * (int32_t)v239 | (int32_t)*v240) + g337);
        *v242 = *(char *)((256 * (int32_t)v241 | (int32_t)*v242) + g337);
        v243 = v238 + v222;
        v244 = v219 ^ -4;
        __frontend_reg_store_fpr(v226, __frontend_reg_load_fpr(v226) + __frontend_reg_load_fpr(v244));
        v245 = v243 + v222;
        v246 = *(char *)((v243 & 0xff00 | v238 / 0x1000000) + v39);
        v247 = (char *)(v292 - 5);
        v248 = *(char *)((v245 & 0xff00 | v243 / 0x1000000) + v39);
        v249 = __frontend_reg_load_fpr(v225);
        __frontend_reg_store_fpr(v219, __frontend_reg_load_fpr(v219) / v249);
        v250 = (char *)(v292 - 6);
        *v247 = *(char *)((256 * (int32_t)v246 | (int32_t)*v247) + g337);
        *v250 = *(char *)((256 * (int32_t)v248 | (int32_t)*v250) + g337);
        v251 = v245 + v222;
        v252 = v251 + v222;
        v253 = *(char *)((v251 & 0xff00 | v245 / 0x1000000) + v39);
        v254 = (char *)(v292 - 7);
        v255 = *(char *)((v252 & 0xff00 | v251 / 0x1000000) + v39);
        v256 = (char *)(v292 - 8);
        *v254 = *(char *)((256 * (int32_t)v253 | (int32_t)*v254) + g337);
        *v256 = *(char *)((256 * (int32_t)v255 | (int32_t)*v256) + g337);
        v257 = v252 + v222;
        v258 = v257 + v222;
        v259 = *(char *)((v257 & 0xff00 | v252 / 0x1000000) + v39);
        v260 = (char *)(v292 - 9);
        v261 = *(char *)((v258 & 0xff00 | v257 / 0x1000000) + v39);
        __frontend_reg_store_fpr(v225, __frontend_reg_load_fpr(v219));
        v262 = (char *)(v292 - 10);
        *v260 = *(char *)((256 * (int32_t)v259 | (int32_t)*v260) + g337);
        *v262 = *(char *)((256 * (int32_t)v261 | (int32_t)*v262) + g337);
        v263 = v258 + v222;
        v264 = v263 + v222;
        v265 = *(char *)((v263 & 0xff00 | v258 / 0x1000000) + v39);
        v266 = (char *)(v292 - 11);
        v267 = *(char *)((v264 & 0xff00 | v263 / 0x1000000) + v39);
        __frontend_reg_store_fpr(v225, __frontend_reg_load_fpr(v225) * __frontend_reg_load_fpr(v244));
        v268 = (char *)(v292 - 12);
        *v266 = *(char *)((256 * (int32_t)v265 | (int32_t)*v266) + g337);
        *v268 = *(char *)((256 * (int32_t)v267 | (int32_t)*v268) + g337);
        v269 = v264 + v222;
        v270 = v269 + v222;
        v271 = *(char *)((v269 & 0xff00 | v264 / 0x1000000) + v39);
        v272 = (char *)(v292 - 13);
        v273 = *(char *)((v270 & 0xff00 | v269 / 0x1000000) + v39);
        __frontend_reg_store_fpr(v225, __frontend_reg_load_fpr(v225) + __frontend_reg_load_fpr(v224));
        v274 = __frontend_reg_load_fpr(v219);
        __frontend_reg_store_fpr(v219, __frontend_reg_load_fpr(v224));
        __frontend_reg_store_fpr(v224, v274);
        v275 = __frontend_reg_load_fpr(v219);
        __frontend_reg_store_fpr(v219, v275 + __frontend_reg_load_fpr(v230));
        v276 = __frontend_reg_load_fpr(v224);
        __frontend_reg_store_fpr(v224, __frontend_reg_load_fpr(v230));
        __frontend_reg_store_fpr(v230, v276);
        v277 = (char *)(v292 - 14);
        *v272 = *(char *)((256 * (int32_t)v271 | (int32_t)*v272) + g337);
        *v277 = *(char *)((256 * (int32_t)v273 | (int32_t)*v277) + g337);
        g300 = (float32_t)__frontend_reg_load_fpr(v224);
        v278 = __frontend_reg_load_fpr(v230);
        __frontend_reg_store_fpr(v230, __frontend_reg_load_fpr(v244));
        __frontend_reg_store_fpr(v244, v278);
        __frontend_reg_store_fpr(v230, __frontend_reg_load_fpr(v230) + (float80_t)g306);
        v279 = v219 + 3;
        v280 = __frontend_reg_load_fpr(v279);
        __frontend_reg_store_fpr(v279, __frontend_reg_load_fpr(v228));
        __frontend_reg_store_fpr(v228, v280);
        v281 = v270 + v222;
        v282 = *(char *)((v281 & 0xff00 | v270 / 0x1000000) + v39);
        v283 = (char *)(v292 - 15);
        v284 = *(char *)((v281 + v221 & 0xff00 | v281 / 0x1000000) + v39);
        v285 = v292 - 16;
        v286 = (char *)v285;
        v287 = g304;
        *v283 = *(char *)((256 * (int32_t)v282 | (int32_t)*v283) + g337);
        *v286 = *(char *)((256 * (int32_t)v284 | (int32_t)*v286) + g337);
        v288 = g300;
        v289 = __frontend_reg_load_fpr(v279);
        g300 = (float32_t)v289;
        v290 = g307 - 1;
        g307 = v290;
        v291 = v287;
        v218 = g344 + (int32_t)v288;
        v292 = v285;
    }
    // 0x40f852
    v28 = g308;
    v37 = v244;
    v35 = v287;
    v32 = v285;
    if (g308 > 16) {
        goto lab_0x40f90e;
    } else {
        goto lab_0x40f861;
    }
  lab_0x40f317_2:;
    int3_t v14 = v11 - 1; // 0x40f321
    __frontend_reg_store_fpr(v14, (float80_t)v9);
    float80_t v15 = __frontend_reg_load_fpr(v14); // 0x40f327
    int32_t v16 = 4 * v13; // 0x40f327
    float32_t * v17 = (float32_t *)(v16 + (int32_t)&g367); // 0x40f327
    __frontend_reg_store_fpr(v14, v15 * (float80_t)*v17);
    int3_t v18 = v11 - 2; // 0x40f32a
    __frontend_reg_store_fpr(v18, (float80_t)g310);
    __frontend_reg_store_fpr(v18, __frontend_reg_load_fpr(v18) * (float80_t)*v17);
    float80_t v19 = __frontend_reg_load_fpr(v18); // 0x40f33d
    __frontend_reg_store_fpr(v18, __frontend_reg_load_fpr(v14));
    __frontend_reg_store_fpr(v14, v19);
    g300 = __frontend_reg_load_fpr(v18);
    g300 = __frontend_reg_load_fpr(v14);
    return *(int32_t *)(v16 + (int32_t)&g368) + 0x40f386;
}

// Address range: 0x40f920 - 0x40f9db
int32_t function_40f920(void) {
    // 0x40f920
    g371 = g192 + 1 - g190;
    int32_t v1 = g189;
    uint32_t v2 = (int32_t)g191 - v1 + 1; // 0x40f93c
    int32_t v3 = g205;
    g372 = v3 - v2;
    int32_t v4 = v2 / 16; // 0x40f94d
    g369 = v4;
    g370 = v2 & 15;
    int32_t v5; // 0x40f920
    uint32_t v6 = *(int32_t *)(v5 + 8); // 0x40f976
    unsigned char v7 = *(char *)(v5 + 4); // 0x40f97c
    unsigned char v8 = *(char *)((256 * (int32_t)v7 | v6 / 256 & 0xff00ff) + g188);
    int32_t v9 = v8; // 0x40f985
    int32_t v10 = 256 * v9 | v9;
    int32_t v11 = 0x10000 * v10 | v10; // 0x40f98e
    int32_t v12 = g190 * v3 + v1 + g187; // 0x40f990
    int32_t v13 = v4; // 0x40f990
    *(int32_t *)v12 = v11;
    *(int32_t *)(v12 + 4) = v11;
    *(int32_t *)(v12 + 8) = v11;
    *(int32_t *)(v12 + 12) = v11;
    int32_t v14 = v12 + 16; // 0x40f9a1
    v13--;
    v12 = v14;
    while (v13 != 0) {
        // 0x40f996
        *(int32_t *)v12 = v11;
        *(int32_t *)(v12 + 4) = v11;
        *(int32_t *)(v12 + 8) = v11;
        *(int32_t *)(v12 + 12) = v11;
        v14 = v12 + 16;
        v13--;
        v12 = v14;
    }
    int32_t v15 = v14; // 0x40f9ae
    int32_t v16 = v14; // 0x40f9ae
    int32_t v17; // 0x40f920
    int32_t v18; // 0x40f9b8
    int32_t v19; // 0x40f9b9
    if (g370 != 0) {
        *(char *)v15 = v8;
        v18 = v15 + 1;
        v19 = g370 - 1;
        v15 = v18;
        v17 = v19;
        v16 = v18;
        while (v19 != 0) {
            // 0x40f9b6
            *(char *)v15 = v8;
            v18 = v15 + 1;
            v19 = v17 - 1;
            v15 = v18;
            v17 = v19;
            v16 = v18;
        }
    }
    int32_t result = g372 + v16; // 0x40f9bc
    int32_t v20 = g371 - 1; // 0x40f9ce
    g371 = v20;
    while (v20 != 0) {
        // 0x40f9bc
        v13 = g369;
        *(int32_t *)result = v11;
        *(int32_t *)(result + 4) = v11;
        *(int32_t *)(result + 8) = v11;
        *(int32_t *)(result + 12) = v11;
        v14 = result + 16;
        v13--;
        v12 = v14;
        while (v13 != 0) {
            // 0x40f996
            *(int32_t *)v12 = v11;
            *(int32_t *)(v12 + 4) = v11;
            *(int32_t *)(v12 + 8) = v11;
            *(int32_t *)(v12 + 12) = v11;
            v14 = v12 + 16;
            v13--;
            v12 = v14;
        }
        // 0x40f9a7
        v15 = v14;
        v16 = v14;
        if (g370 != 0) {
            *(char *)v15 = v8;
            v18 = v15 + 1;
            v19 = g370 - 1;
            v15 = v18;
            v17 = v19;
            v16 = v18;
            while (v19 != 0) {
                // 0x40f9b6
                *(char *)v15 = v8;
                v18 = v15 + 1;
                v19 = v17 - 1;
                v15 = v18;
                v17 = v19;
                v16 = v18;
            }
        }
        // 0x40f9bc
        result = g372 + v16;
        v20 = g371 - 1;
        g371 = v20;
    }
    // 0x40f9d6
    return result;
}

// Address range: 0x40f9dc - 0x40fba0
int32_t function_40f9dc(void) {
    // 0x40f9dc
    int32_t v1; // 0x40f9dc
    unsigned char v2 = *(char *)(v1 + 28); // 0x40f9e0
    g379 = 256 * (int32_t)v2 | *(int32_t *)(v1 + 32) & -0xff01;
    int32_t v3 = v1 + 12; // 0x40f9e9
    int32_t v4 = v1 + 4; // 0x40f9ec
    int32_t v5 = *(int32_t *)(v1 + 16); // 0x40f9ef
    int32_t v6 = v1 + 20; // 0x40f9f2
    int32_t v7 = *(int32_t *)(v1 + 8); // 0x40f9f5
    int32_t v8 = *(int32_t *)(v1 + 24);
    int32_t v9; // 0x40f9dc
    int32_t v10; // 0x40f9dc
    int32_t v11; // 0x40f9dc
    if (v5 < v7) {
        // 0x40fa0d
        v10 = v4;
        v11 = v6;
        v9 = v3;
        if (v8 <= v7) {
            // 0x40fa17
            v10 = v8 > v5 ? v6 : v3;
            v11 = v4;
            v9 = v8 > v5 ? v3 : v6;
        }
    } else {
        // 0x40f9fa
        v10 = v3;
        v11 = v6;
        v9 = v4;
        if (v5 >= v8) {
            // 0x40f9ff
            v10 = v7 < v8 ? v6 : v4;
            v11 = v3;
            v9 = v7 < v8 ? v4 : v6;
        }
    }
    int32_t result = *(int32_t *)v9; // 0x40fa25
    if (result > 0x7d0000) {
        // 0x40fb9e
        return result;
    }
    // 0x40fa4a
    g380 = result;
    int32_t v12 = *(int32_t *)(v9 + 4); // 0x40fa4a
    g381 = v12;
    int32_t result2 = *(int32_t *)v10; // 0x40fa50
    if (result2 > 0x7d0000) {
        // 0x40fb9e
        return result2;
    }
    // 0x40fa68
    g382 = result2;
    int32_t v13 = *(int32_t *)(v10 + 4); // 0x40fa6b
    g383 = v13;
    int32_t result3 = *(int32_t *)v11; // 0x40fa71
    if (result3 > 0x7d0000) {
        // 0x40fb9e
        return result3;
    }
    // 0x40fa89
    g384 = result3;
    int32_t result4 = *(int32_t *)(v11 + 4); // 0x40fa8c
    if (result4 > 0x7d0000) {
        // 0x40fb9e
        return result4;
    }
    // 0x40fa9a
    g385 = result4;
    int32_t v14 = v12 >> 8; // 0x40faa3
    int32_t v15 = v13 >> 8;
    g373 = v14;
    int32_t v16 = v15 - v14; // 0x40faaf
    int32_t v17 = v15; // 0x40fab1
    int32_t v18 = result4; // 0x40fab1
    if (v16 != 0) {
        // 0x40fab3
        g374 = v16;
        function_40fc98();
        function_40fcfe();
        int32_t v19 = g377; // 0x40fad6
        int32_t v20 = g378; // 0x40fadb
        if (v19 > v20) {
            // 0x40fae5
            g377 = v20;
            g378 = v19;
            int32_t v21 = g375; // 0x40faf0
            g375 = g376;
            g376 = v21;
        }
        // 0x40fb06
        function_40fba0();
        v17 = g383 >> 8;
        v18 = g385;
    }
    // 0x40fb0b
    g373 = v17;
    int32_t v22 = (v18 >> 8) - v17; // 0x40fb22
    if (v22 == 0) {
        // 0x40fb9e
        return 0;
    }
    // 0x40fb26
    g374 = v22;
    function_40fc98();
    function_40fcfe();
    int32_t v23 = g377;
    int32_t v24 = ((g383 >> 8) - (g381 >> 8)) * v23 + g375; // 0x40fb63
    g375 = v24;
    int32_t v25 = g378; // 0x40fb6e
    if (v23 < v25) {
        // 0x40fb78
        g377 = v25;
        g378 = v23;
        g375 = g376;
        g376 = v24;
    }
    // 0x40fb9e
    return function_40fba0();
}

// Address range: 0x40fba0 - 0x40fc98
int32_t function_40fba0(void) {
    // 0x40fba0
    int32_t v1; // 0x40fba0
    int32_t result; // 0x40fba0
    int32_t v2; // 0x40fba0
    int32_t v3; // 0x40fba0
    if (g190 > g373) {
        uint32_t v4 = g190 - g373; // 0x40fbbf
        uint32_t v5 = g374; // 0x40fbc1
        int32_t v6 = v5 - v4; // 0x40fbc1
        g374 = v6;
        if (v5 <= v4) {
            // 0x40fc97
            return g375;
        }
        // 0x40fbcd
        v1 = v6;
        result = v4 * (int32_t)g377 + g375;
        v3 = g190;
        v2 = v4 * (int32_t)g378 + g376;
    } else {
        // 0x40fba0
        v1 = g374;
        result = g375;
        v3 = g373;
        v2 = g376;
    }
    // 0x40fbe7
    if (v1 < v1) {
        // 0x40fbf7
        if (g196 < v3 || v1 == 0) {
            // 0x40fc97
            return result;
        }
        // 0x40fc0c
        g374 = v1;
    }
    int32_t v7 = *(int32_t *)(4 * v3 + (int32_t)&g206); // 0x40fc12
    int32_t v8 = v1; // 0x40fc26
    int32_t v9 = g379; // 0x40fc26
    int32_t v10 = v2; // 0x40fc26
    int32_t v11 = v7 - 1 + g187; // 0x40fc26
    int32_t v12 = result; // 0x40fc26
    int32_t v13; // 0x40fba0
    int32_t v14; // 0x40fba0
    int32_t v15; // 0x40fba0
    int32_t v16; // 0x40fba0
    int32_t v17; // 0x40fba0
    int32_t v18; // 0x40fc2c
    while (true) {
      lab_0x40fc28:
        // 0x40fc28
        v15 = v11;
        v16 = v9;
        v14 = v8;
        v18 = v10 >> 16;
        int32_t v19 = v12 >> 16; // 0x40fc2f
        int32_t v20 = g189; // 0x40fc32
        v17 = v19;
        if (v19 < v20) {
            // 0x40fc3a
            v17 = v20;
            v13 = v14;
            v9 = v16;
            if (v18 < v20) {
                goto lab_0x40fc7b;
            } else {
                goto lab_0x40fc48;
            }
        } else {
            goto lab_0x40fc48;
        }
    }
  lab_0x40fc97:;
    // 0x40fc97
    int32_t result2; // 0x40fba0
    return result2;
  lab_0x40fc48:;
    int32_t v21 = v17;
    int32_t v22 = v18; // 0x40fc4e
    if (v18 > g195) {
        // 0x40fc50
        v22 = g195;
        v13 = v14;
        v9 = v16;
        if (v21 > g195) {
            goto lab_0x40fc7b;
        } else {
            goto lab_0x40fc5e;
        }
    } else {
        goto lab_0x40fc5e;
    }
  lab_0x40fc7b:
    // 0x40fc7b
    v12 += (int32_t)g377;
    v8 = v13 - 1;
    g374 = v8;
    v10 += (int32_t)g378;
    v11 = v15 + (int32_t)g205;
    result2 = v12;
    if (v8 == 0) {
        // break -> 0x40fc97
        goto lab_0x40fc97;
    }
    goto lab_0x40fc28;
  lab_0x40fc5e:;
    int32_t v23 = v22;
    v13 = v14;
    v9 = v16;
    if (v23 > v21) {
        int32_t v24 = v21 + v15; // 0x40fc62
        int32_t v25 = v16 & -256 | (int32_t)*(char *)(v23 + v15); // 0x40fc64
        int32_t v26 = v23 + -1 - v21; // 0x40fc67
        int32_t v27 = v24 + 1;
        int32_t v28 = v26; // 0x40fc68
        int32_t v29 = v25; // 0x40fc68
        int32_t v30 = v25; // 0x40fc68
        if (v26 != 0) {
            int32_t v31 = v29 & -256 | (int32_t)*(char *)(v28 + v24); // 0x40fc6c
            *(char *)(v28 + v27) = *(char *)v29;
            int32_t v32 = v28 - 1; // 0x40fc73
            v28 = v32;
            v29 = v31;
            v30 = v31;
            while (v32 != 0) {
                // 0x40fc6a
                v31 = v29 & -256 | (int32_t)*(char *)(v28 + v24);
                *(char *)(v28 + v27) = *(char *)v29;
                v32 = v28 - 1;
                v28 = v32;
                v29 = v31;
                v30 = v31;
            }
        }
        // 0x40fc76
        *(char *)v27 = *(char *)v30;
        v13 = g374;
        v9 = v30;
    }
    goto lab_0x40fc7b;
}

// Address range: 0x40fc98 - 0x40fcfe
int32_t function_40fc98(void) {
    // 0x40fc98
    int32_t v1; // 0x40fc98
    int32_t * v2 = (int32_t *)(v1 + 4); // 0x40fc9b
    uint32_t v3 = *(int32_t *)(v1 + 4) - *v2; // 0x40fc9b
    int32_t v4 = 0;
    int32_t v5 = v3; // 0x40fca1
    if (v3 < 65) {
        // 0x40fca3
        v5 = 65;
        if ((v1 > v1 ? v4 : -v4) >= 0x10001) {
            // 0x40fcb9
            v5 = v3 > 3 ? v3 : 3;
        }
    }
    int64_t v6 = 0x100000000 * (0x100000000 * (int64_t)(v4 >> 16) | (int64_t)(0x10000 * v4)) / (int64_t)v5 >> 32; // 0x40fcd1
    g377 = v6;
    int32_t result = (int32_t)v6 >> 8; // 0x40fcef
    g375 = (256 - (*v2 & 255)) * result + 256 * v1;
    return result;
}

// Address range: 0x40fcfe - 0x40fd64
int32_t function_40fcfe(void) {
    // 0x40fcfe
    int32_t v1; // 0x40fcfe
    int32_t * v2 = (int32_t *)(v1 + 4); // 0x40fd01
    uint32_t v3 = *(int32_t *)(v1 + 4) - *v2; // 0x40fd01
    int32_t v4 = 0;
    int32_t v5 = v3; // 0x40fd07
    if (v3 < 65) {
        // 0x40fd09
        v5 = 65;
        if ((v1 > v1 ? v4 : -v4) >= 0x10001) {
            // 0x40fd1f
            v5 = v3 > 3 ? v3 : 3;
        }
    }
    int64_t v6 = 0x100000000 * (0x100000000 * (int64_t)(v4 >> 16) | (int64_t)(0x10000 * v4)) / (int64_t)v5 >> 32; // 0x40fd37
    g378 = v6;
    int32_t result = (int32_t)v6 >> 8; // 0x40fd55
    g376 = (256 - (*v2 & 255)) * result + 256 * v1;
    return result;
}

// Address range: 0x40fd64 - 0x40fd7b
int32_t function_40fd64(void) {
    // 0x40fd64
    int32_t result; // 0x40fd64
    g393 = result + 1;
    g394 = 1 - result;
    return result;
}

// Address range: 0x40fd7b - 0x41035c
int32_t function_40fd7b(void) {
    // 0x40fd7b
    int32_t v1; // 0x40fd7b
    int32_t v2 = *(int32_t *)(v1 + 4) >> 8; // 0x40fd81
    int32_t v3 = *(int32_t *)(v1 + 16) >> 8; // 0x40fd84
    int32_t v4 = *(int32_t *)(v1 + 32); // 0x40fd87
    int32_t v5 = *(int32_t *)(v1 + 36); // 0x40fd8a
    int32_t v6 = v2 > v3 ? v4 : v5;
    int32_t v7 = v2 > v3 ? v5 : v4;
    int32_t v8 = v6 - v7; // 0x40fd93
    int64_t v9 = v8; // 0x40fd95
    g392 = v9;
    int16_t v10 = v7; // 0x40fd9b
    g399 = v10;
    unsigned char v11 = *(char *)(v1 + 28); // 0x40fda1
    g391 = (256 * (int32_t)v11 | v7 & -0xff01) + g188;
    int32_t v12 = *(int32_t *)(v1 + 8) >> 8; // 0x40fdb6
    int32_t v13 = *(int32_t *)(v1 + 20) >> 8; // 0x40fdb9
    int32_t v14 = v2 > v3 ? v2 : v3;
    int32_t v15 = v2 > v3 ? v12 : v13;
    int32_t v16 = v2 > v3 ? v13 : v12;
    int32_t v17 = v2 > v3 ? v3 : v2;
    int16_t v18 = v10; // 0x40fdc9
    int64_t v19 = v9; // 0x40fdc9
    int32_t v20 = v14; // 0x40fdc9
    int32_t v21 = v16; // 0x40fdc9
    if (v17 < v17) {
        // 0x40fffe
        g388 = v14;
        g389 = v15;
        v20 = 0x10000 * v14 >> 16;
        int32_t v22 = v20 + 1; // 0x410027
        int64_t v23 = (int32_t)(0x100000000 * (int64_t)(v22 - v17) / (int64_t)(v22 - (0x10000 * v17 >> 16))) / 2;
        g390 = v23;
        v21 = v15 - (int32_t)(v23 * (int64_t)(2 * (v15 - v16)) / 0x100000000);
        g387 = v21;
        g386 = g189;
        int32_t v24 = v23 * (int64_t)(2 * v8) / 0x100000000; // 0x410080
        v19 = v24;
        g392 = v19;
        v18 = v6 - v24;
        g399 = v18;
    }
    int32_t v25 = v21;
    int64_t v26 = v19; // 0x40fdd5
    int32_t v27 = v15; // 0x40fdd5
    int32_t v28 = v17; // 0x40fdd5
    if (v20 > v20) {
        // 0x40ff5e
        g386 = v17;
        g387 = v25;
        v28 = 0x10000 * v17 >> 16;
        int64_t v29 = (int32_t)(0x100000000 * (int64_t)(v20 + 1 - v28) / (int64_t)((0x10000 * v20 >> 16) + 1 - v28)) / 2;
        g390 = v29;
        v27 = v25 + (int32_t)(v29 * (int64_t)(2 * (v15 - v25)) / 0x100000000);
        g389 = v27;
        g388 = g191;
        v26 = v29 * (int64_t)(2 * (int32_t)v19) >> 32;
        g392 = v26;
    }
    // 0x40fddb
    int64_t v30; // 0x40fd7b
    int32_t v31; // 0x40fd7b
    int32_t v32; // 0x40fd7b
    int32_t v33; // 0x40fd7b
    int32_t v34; // 0x40fd7b
    if (v27 < v25) {
        int64_t v35 = v26; // 0x40fdfe
        int32_t v36 = v20; // 0x40fdfe
        int32_t v37 = v25; // 0x40fdfe
        int32_t v38 = v28; // 0x40fdfe
        if (v25 > g192) {
            int16_t v39 = v20;
            g388 = v39;
            g389 = v27;
            int32_t v40 = 1 - v27;
            int64_t v41 = (int32_t)(0x100000000 * (int64_t)(g192 + v40) / (int64_t)(v40 + v25)) / 2;
            g390 = v41;
            v36 = 0x10000 * v20 >> 16;
            int16_t v42 = v39 - (int16_t)(v41 * (int64_t)(2 * (v36 - (0x10000 * v28 >> 16))) / 0x100000000);
            g386 = v42;
            g387 = g192;
            int32_t v43 = v26; // 0x4101c9
            int32_t v44 = v41 * (int64_t)(2 * v43) / 0x100000000; // 0x4101d6
            v35 = v44;
            g392 = v35;
            g399 = v43 + (int32_t)v18 - v44;
            v37 = g192;
            v38 = v42;
        }
        int32_t v45 = v37;
        v30 = v35;
        v33 = v36;
        v34 = v27;
        v32 = v45;
        v31 = v38;
        if (v27 < g190) {
            int16_t v46 = v38;
            g386 = v46;
            g387 = v45;
            int64_t v47 = (int32_t)(0x100000000 * (int64_t)(v45 + 1 - g190) / (int64_t)(1 - v27 + v45)) / 2;
            g390 = v47;
            int32_t v48 = 0x10000 * v38 >> 16;
            int16_t v49 = (int16_t)(v47 * (int64_t)(2 * ((0x10000 * v36 >> 16) - v48)) / 0x100000000) + v46;
            g388 = v49;
            g389 = g190;
            int64_t v50 = v47 * (int64_t)(2 * (int32_t)v35) >> 32; // 0x41012e
            g392 = v50;
            v30 = v50;
            v33 = v49;
            v34 = g190;
            v32 = v45;
            v31 = v48;
        }
    } else {
        int64_t v51 = v26; // 0x40fde5
        int32_t v52 = v20; // 0x40fde5
        int32_t v53 = v27; // 0x40fde5
        int32_t v54 = v28; // 0x40fde5
        if (v27 > g192) {
            int16_t v55 = v28;
            g386 = v55;
            g387 = v25;
            int32_t v56 = 1 - v25;
            int64_t v57 = (int32_t)(0x100000000 * (int64_t)(v56 + g192) / (int64_t)(v56 + v27)) / 2;
            g390 = v57;
            v54 = 0x10000 * v28 >> 16;
            int16_t v58 = (int16_t)(v57 * (int64_t)(2 * ((0x10000 * v20 >> 16) - v54)) / 0x100000000) + v55;
            g388 = v58;
            g389 = g192;
            v51 = v57 * (int64_t)(2 * (int32_t)v26) >> 32;
            g392 = v51;
            v52 = v58;
            v53 = g192;
        }
        // 0x40fdeb
        v30 = v51;
        v33 = v52;
        v34 = v53;
        v32 = v25;
        v31 = v54;
        if (v25 < g190) {
            int16_t v59 = v52;
            g388 = v59;
            g389 = v53;
            int32_t v60 = v53 + 1;
            int64_t v61 = (int32_t)(0x100000000 * (int64_t)(v60 - g190) / (int64_t)(v60 - v25)) / 2;
            g390 = v61;
            int32_t v62 = 0x10000 * v52 >> 16;
            int16_t v63 = v59 - (int16_t)(v61 * (int64_t)(2 * (v62 - (0x10000 * v54 >> 16))) / 0x100000000);
            g386 = v63;
            g387 = g190;
            int32_t v64 = v51; // 0x41031f
            int32_t v65 = v61 * (int64_t)(2 * v64) / 0x100000000; // 0x41032c
            int64_t v66 = v65; // 0x410332
            g392 = v66;
            g399 = v64 + (int32_t)v18 - v65;
            v30 = v66;
            v33 = v62;
            v34 = v53;
            v32 = g190;
            v31 = v63;
        }
    }
    int64_t v67 = v30; // 0x40ff1e
    int32_t v68 = v34 - v32; // 0x40fe21
    int32_t v69 = v33 - v31 + 1; // 0x40fe23
    if (v68 < 0) {
        int32_t v70 = 1 - v68; // 0x40fec7
        if (v69 > v70) {
            uint16_t v71 = (int16_t)v70;
            g396 = v71;
            g398 = (0x100000000 * (int64_t)((int32_t)v67 >> 31) | v67 & 0xffffffff) / (int64_t)v69;
            uint16_t v72 = (int16_t)v69;
            g397 = v72 / v71;
            uint32_t v73 = 0x10000 * (int32_t)(v72 % v71) / (v70 & 0xffff); // 0x40ff3c
            g395 = v73;
            return v73 & 0xffff | v69 & -0x10000;
        }
        // 0x40fecc
        g398 = (0x100000000 * (int64_t)((int32_t)v67 >> 31) | v67 & 0xffffffff) / (int64_t)v70;
        uint16_t v74 = (int16_t)v70;
        uint16_t v75 = (int16_t)v69;
        g397 = v74 / v75;
        g396 = v75;
        uint32_t v76 = 0x10000 * (int32_t)(v74 % v75) / (v69 & 0xffff); // 0x40fef3
        g395 = v76;
        return v76 & 0xffff | v70 & -0x10000;
    }
    int32_t v77 = v68 + 1; // 0x40fe2d
    if (v69 > v77) {
        uint16_t v78 = (int16_t)v77;
        g396 = v78;
        g398 = (0x100000000 * (int64_t)((int32_t)v67 >> 31) | v67 & 0xffffffff) / (int64_t)v69;
        uint16_t v79 = (int16_t)v69;
        g397 = v79 / v78;
        uint32_t v80 = 0x10000 * (int32_t)(v79 % v78) / (v77 & 0xffff); // 0x40fea3
        g395 = v80;
        return v80 & 0xffff | v69 & -0x10000;
    }
    // 0x40fe32
    g398 = (0x100000000 * (int64_t)((int32_t)v67 >> 31) | v67 & 0xffffffff) / (int64_t)v77;
    uint16_t v81 = (int16_t)v77;
    uint16_t v82 = (int16_t)v69;
    g397 = v81 / v82;
    uint32_t v83 = 0x10000 * (int32_t)(v81 % v82) / (v69 & 0xffff); // 0x40fe52
    g396 = v82;
    g395 = v83;
    return v83 & 0xffff | v77 & -0x10000;
}

// Address range: 0x41035c - 0x4103aa
int32_t function_41035c(void) {
    int32_t v1 = g399;
    int32_t v2; // 0x41035c
    uint16_t v3 = (int16_t)v2; // 0x410362
    uint16_t v4 = g395 + v3; // 0x410362
    int32_t v5; // 0x41035c
    int32_t v6 = v5; // 0x410369
    int32_t v7 = v1; // 0x410369
    int32_t v8; // 0x41035c
    int32_t v9 = v8; // 0x410369
    if (v4 < v3) {
        // 0x41036b
        v6 = v5 & -256;
        *(char *)v8 = *(char *)(v1 / 256 & 255 | v6);
        v7 = g398 + (int16_t)v1;
        v9 = v8 + (int32_t)g205;
    }
    // 0x41037e
    int32_t v10; // 0x41035c
    int32_t v11 = v10 & -0x10000 | (int32_t)g397; // 0x41037e
    int32_t v12 = v6 & -256; // 0x410384
    *(char *)v9 = *(char *)(v7 / 256 & 255 | v12);
    int32_t v13 = g398 + (int16_t)v7; // 0x41038a
    int32_t v14 = v9 + (int32_t)g205; // 0x410391
    uint16_t v15 = (int16_t)v11 - 1; // 0x410397
    int32_t result = v11 & -0x10000 | (int32_t)v15; // 0x410397
    v11 = result;
    int32_t v16 = v12; // 0x410399
    int32_t v17 = v13; // 0x410399
    int32_t v18 = v14; // 0x410399
    while (v15 != 0) {
        // 0x410384
        v12 = v16 & -256;
        *(char *)v18 = *(char *)(v17 / 256 & 255 | v12);
        v13 = g398 + (int16_t)v17;
        v14 = v18 + (int32_t)g205;
        v15 = (int16_t)v11 - 1;
        result = v11 & -0x10000 | (int32_t)v15;
        v11 = result;
        v16 = v12;
        v17 = v13;
        v18 = v14;
    }
    int16_t v19 = g396 - 1; // 0x41039c
    g396 = v19;
    while (v19 != 0) {
        int32_t v20 = v14 + 1;
        v1 = v13;
        int32_t v21 = v12;
        v3 = (int16_t)(int32_t)v4;
        v4 = g395 + v3;
        v6 = v21;
        v7 = v1;
        v9 = v20;
        if (v4 < v3) {
            // 0x41036b
            v6 = v21 & -256;
            *(char *)v20 = *(char *)(v1 / 256 & 255 | v6);
            v7 = g398 + (int16_t)v1;
            v9 = v20 + (int32_t)g205;
        }
        // 0x41037e
        v11 = result & -0x10000 | (int32_t)g397;
        v12 = v6 & -256;
        *(char *)v9 = *(char *)(v7 / 256 & 255 | v12);
        v13 = g398 + (int16_t)v7;
        v14 = v9 + (int32_t)g205;
        v15 = (int16_t)v11 - 1;
        result = v11 & -0x10000 | (int32_t)v15;
        v11 = result;
        v16 = v12;
        v17 = v13;
        v18 = v14;
        while (v15 != 0) {
            // 0x410384
            v12 = v16 & -256;
            *(char *)v18 = *(char *)(v17 / 256 & 255 | v12);
            v13 = g398 + (int16_t)v17;
            v14 = v18 + (int32_t)g205;
            v15 = (int16_t)v11 - 1;
            result = v11 & -0x10000 | (int32_t)v15;
            v11 = result;
            v16 = v12;
            v17 = v13;
            v18 = v14;
        }
        // 0x41039b
        v19 = g396 - 1;
        g396 = v19;
    }
    // 0x4103a5
    return result;
}

// Address range: 0x4103aa - 0x4103ed
int32_t function_4103aa(void) {
    int32_t v1 = g399;
    int32_t v2; // 0x4103aa
    uint16_t v3 = (int16_t)v2; // 0x4103b0
    uint16_t v4 = g395 + v3; // 0x4103b0
    int32_t v5; // 0x4103aa
    int32_t v6 = v5; // 0x4103b7
    int32_t v7 = v1; // 0x4103b7
    int32_t v8; // 0x4103aa
    int32_t v9 = v8; // 0x4103b7
    if (v4 < v3) {
        // 0x4103b9
        v6 = v5 & -256;
        *(char *)v8 = *(char *)(v1 / 256 & 255 | v6);
        v7 = g398 + (int16_t)v1;
        v9 = v8 + (int32_t)g205;
    }
    int32_t v10 = v6 & -256; // 0x4103cc
    *(char *)v9 = *(char *)(v7 / 256 & 255 | v10);
    int16_t v11 = g396 - 1; // 0x4103df
    g396 = v11;
    while (v11 != 0) {
        int32_t v12 = g393 + v9;
        v1 = g398 + (int16_t)v7;
        int32_t v13 = v10;
        v3 = (int16_t)(int32_t)v4;
        v4 = g395 + v3;
        v6 = v13;
        v7 = v1;
        v9 = v12;
        if (v4 < v3) {
            // 0x4103b9
            v6 = v13 & -256;
            *(char *)v12 = *(char *)(v1 / 256 & 255 | v6);
            v7 = g398 + (int16_t)v1;
            v9 = v12 + (int32_t)g205;
        }
        // 0x4103cc
        v10 = v6 & -256;
        *(char *)v9 = *(char *)(v7 / 256 & 255 | v10);
        v11 = g396 - 1;
        g396 = v11;
    }
    // 0x4103e8
    int32_t result; // 0x4103aa
    return result;
}

// Address range: 0x4103ed - 0x410443
int32_t function_4103ed(void) {
    int32_t v1 = g399;
    int32_t v2; // 0x4103ed
    uint16_t v3 = (int16_t)v2; // 0x4103f3
    uint16_t v4 = g395 + v3; // 0x4103f3
    int32_t v5; // 0x4103ed
    int32_t v6 = v5; // 0x4103fa
    int32_t v7 = v1; // 0x4103fa
    int32_t v8; // 0x4103ed
    int32_t v9 = v8; // 0x4103fa
    if (v4 < v3) {
        // 0x4103fc
        v6 = v5 & -256;
        *(char *)v8 = *(char *)(v1 / 256 & 255 | v6);
        v7 = g398 + (int16_t)v1;
        v9 = v8 + (int32_t)g205;
    }
    int32_t v10 = v6 & -256; // 0x41040f
    *(char *)v9 = *(char *)(v7 / 256 & 255 | v10);
    uint16_t v11 = g398 + (int16_t)v7; // 0x410415
    int32_t v12 = v9 + (int32_t)g205; // 0x41041c
    *(char *)v12 = *(char *)(v10 | (int32_t)(v11 / 256));
    int16_t v13 = g396 - 1; // 0x410435
    g396 = v13;
    while (v13 != 0) {
        int32_t v14 = g393 + v12;
        v1 = g398 + v11;
        int32_t v15 = v10;
        v3 = (int16_t)(int32_t)v4;
        v4 = g395 + v3;
        v6 = v15;
        v7 = v1;
        v9 = v14;
        if (v4 < v3) {
            // 0x4103fc
            v6 = v15 & -256;
            *(char *)v14 = *(char *)(v1 / 256 & 255 | v6);
            v7 = g398 + (int16_t)v1;
            v9 = v14 + (int32_t)g205;
        }
        // 0x41040f
        v10 = v6 & -256;
        *(char *)v9 = *(char *)(v7 / 256 & 255 | v10);
        v11 = g398 + (int16_t)v7;
        v12 = v9 + (int32_t)g205;
        *(char *)v12 = *(char *)(v10 | (int32_t)(v11 / 256));
        v13 = g396 - 1;
        g396 = v13;
    }
    // 0x41043e
    int32_t result; // 0x4103ed
    return result;
}

// Address range: 0x410443 - 0x4104ac
int32_t function_410443(void) {
    int32_t v1 = g399;
    int32_t v2; // 0x410443
    uint16_t v3 = (int16_t)v2; // 0x410449
    uint16_t v4 = g395 + v3; // 0x410449
    int32_t v5; // 0x410443
    int32_t v6 = v5; // 0x410450
    int32_t v7 = v1; // 0x410450
    int32_t v8; // 0x410443
    int32_t v9 = v8; // 0x410450
    if (v4 < v3) {
        // 0x410452
        v6 = v5 & -256;
        *(char *)v8 = *(char *)(v1 / 256 & 255 | v6);
        v7 = g398 + (int16_t)v1;
        v9 = v8 + (int32_t)g205;
    }
    int32_t v10 = v6 & -256; // 0x410465
    *(char *)v9 = *(char *)(v7 / 256 & 255 | v10);
    uint16_t v11 = g398 + (int16_t)v7; // 0x41046b
    int32_t v12 = v9 + (int32_t)g205; // 0x410472
    *(char *)v12 = *(char *)(v10 | (int32_t)(v11 / 256));
    uint16_t v13 = g398 + v11; // 0x41047e
    int32_t v14 = v12 + (int32_t)g205; // 0x410485
    *(char *)v14 = *(char *)(v10 | (int32_t)(v13 / 256));
    int16_t v15 = g396 - 1; // 0x41049e
    g396 = v15;
    while (v15 != 0) {
        int32_t v16 = g393 + v14;
        v1 = g398 + v13;
        int32_t v17 = v10;
        v3 = (int16_t)(int32_t)v4;
        v4 = g395 + v3;
        v6 = v17;
        v7 = v1;
        v9 = v16;
        if (v4 < v3) {
            // 0x410452
            v6 = v17 & -256;
            *(char *)v16 = *(char *)(v1 / 256 & 255 | v6);
            v7 = g398 + (int16_t)v1;
            v9 = v16 + (int32_t)g205;
        }
        // 0x410465
        v10 = v6 & -256;
        *(char *)v9 = *(char *)(v7 / 256 & 255 | v10);
        v11 = g398 + (int16_t)v7;
        v12 = v9 + (int32_t)g205;
        *(char *)v12 = *(char *)(v10 | (int32_t)(v11 / 256));
        v13 = g398 + v11;
        v14 = v12 + (int32_t)g205;
        *(char *)v14 = *(char *)(v10 | (int32_t)(v13 / 256));
        v15 = g396 - 1;
        g396 = v15;
    }
    // 0x4104a7
    int32_t result; // 0x410443
    return result;
}

// Address range: 0x4104ac - 0x410528
int32_t function_4104ac(void) {
    int32_t v1 = g399;
    int32_t v2; // 0x4104ac
    uint16_t v3 = (int16_t)v2; // 0x4104b2
    uint16_t v4 = g395 + v3; // 0x4104b2
    int32_t v5; // 0x4104ac
    int32_t v6 = v5; // 0x4104b9
    int32_t v7 = v1; // 0x4104b9
    int32_t v8; // 0x4104ac
    int32_t v9 = v8; // 0x4104b9
    if (v4 < v3) {
        // 0x4104bb
        v6 = v5 & -256;
        *(char *)v8 = *(char *)(v1 / 256 & 255 | v6);
        v7 = g398 + (int16_t)v1;
        v9 = v8 + (int32_t)g205;
    }
    int32_t v10 = v6 & -256; // 0x4104ce
    *(char *)v9 = *(char *)(v7 / 256 & 255 | v10);
    uint16_t v11 = g398 + (int16_t)v7; // 0x4104d4
    int32_t v12 = v9 + (int32_t)g205; // 0x4104db
    *(char *)v12 = *(char *)(v10 | (int32_t)(v11 / 256));
    uint16_t v13 = g398 + v11; // 0x4104e7
    int32_t v14 = v12 + (int32_t)g205; // 0x4104ee
    *(char *)v14 = *(char *)(v10 | (int32_t)(v13 / 256));
    uint16_t v15 = g398 + v13; // 0x4104fa
    int32_t v16 = v14 + (int32_t)g205; // 0x410501
    *(char *)v16 = *(char *)(v10 | (int32_t)(v15 / 256));
    int16_t v17 = g396 - 1; // 0x41051a
    g396 = v17;
    while (v17 != 0) {
        int32_t v18 = g393 + v16;
        v1 = g398 + v15;
        int32_t v19 = v10;
        v3 = (int16_t)(int32_t)v4;
        v4 = g395 + v3;
        v6 = v19;
        v7 = v1;
        v9 = v18;
        if (v4 < v3) {
            // 0x4104bb
            v6 = v19 & -256;
            *(char *)v18 = *(char *)(v1 / 256 & 255 | v6);
            v7 = g398 + (int16_t)v1;
            v9 = v18 + (int32_t)g205;
        }
        // 0x4104ce
        v10 = v6 & -256;
        *(char *)v9 = *(char *)(v7 / 256 & 255 | v10);
        v11 = g398 + (int16_t)v7;
        v12 = v9 + (int32_t)g205;
        *(char *)v12 = *(char *)(v10 | (int32_t)(v11 / 256));
        v13 = g398 + v11;
        v14 = v12 + (int32_t)g205;
        *(char *)v14 = *(char *)(v10 | (int32_t)(v13 / 256));
        v15 = g398 + v13;
        v16 = v14 + (int32_t)g205;
        *(char *)v16 = *(char *)(v10 | (int32_t)(v15 / 256));
        v17 = g396 - 1;
        g396 = v17;
    }
    // 0x410523
    int32_t result; // 0x4104ac
    return result;
}

// Address range: 0x410528 - 0x410571
int32_t function_410528(void) {
    int32_t v1 = g399;
    int32_t v2; // 0x410528
    uint16_t v3 = (int16_t)v2; // 0x41052e
    uint16_t v4 = g395 + v3; // 0x41052e
    int32_t v5; // 0x410528
    int32_t v6 = v5; // 0x410535
    int32_t v7 = v1; // 0x410535
    int32_t v8; // 0x410528
    int32_t v9 = v8; // 0x410535
    if (v4 < v3) {
        // 0x410537
        v6 = v5 & -256;
        *(char *)v8 = *(char *)(v1 / 256 & 255 | v6);
        v7 = g398 + (int16_t)v1;
        v9 = v8 + 1;
    }
    // 0x410545
    int32_t v10; // 0x410528
    int32_t v11 = v10 & -0x10000 | (int32_t)g397; // 0x410545
    int32_t v12 = v6 & -256; // 0x41054b
    *(char *)v9 = *(char *)(v7 / 256 & 255 | v12);
    int32_t v13 = g398 + (int16_t)v7; // 0x410551
    int32_t v14 = v9 + 1; // 0x410558
    uint16_t v15 = (int16_t)v11 - 1; // 0x410559
    int32_t result = v11 & -0x10000 | (int32_t)v15; // 0x410559
    v11 = result;
    int32_t v16 = v12; // 0x41055b
    int32_t v17 = v13; // 0x41055b
    int32_t v18 = v14; // 0x41055b
    while (v15 != 0) {
        // 0x41054b
        v12 = v16 & -256;
        *(char *)v18 = *(char *)(v17 / 256 & 255 | v12);
        v13 = g398 + (int16_t)v17;
        v14 = v18 + 1;
        v15 = (int16_t)v11 - 1;
        result = v11 & -0x10000 | (int32_t)v15;
        v11 = result;
        v16 = v12;
        v17 = v13;
        v18 = v14;
    }
    int16_t v19 = g396 - 1; // 0x410563
    g396 = v19;
    while (v19 != 0) {
        int32_t v20 = v14 + (int32_t)g205;
        v1 = v13;
        int32_t v21 = v12;
        v3 = (int16_t)(int32_t)v4;
        v4 = g395 + v3;
        v6 = v21;
        v7 = v1;
        v9 = v20;
        if (v4 < v3) {
            // 0x410537
            v6 = v21 & -256;
            *(char *)v20 = *(char *)(v1 / 256 & 255 | v6);
            v7 = g398 + (int16_t)v1;
            v9 = v20 + 1;
        }
        // 0x410545
        v11 = result & -0x10000 | (int32_t)g397;
        v12 = v6 & -256;
        *(char *)v9 = *(char *)(v7 / 256 & 255 | v12);
        v13 = g398 + (int16_t)v7;
        v14 = v9 + 1;
        v15 = (int16_t)v11 - 1;
        result = v11 & -0x10000 | (int32_t)v15;
        v11 = result;
        v16 = v12;
        v17 = v13;
        v18 = v14;
        while (v15 != 0) {
            // 0x41054b
            v12 = v16 & -256;
            *(char *)v18 = *(char *)(v17 / 256 & 255 | v12);
            v13 = g398 + (int16_t)v17;
            v14 = v18 + 1;
            v15 = (int16_t)v11 - 1;
            result = v11 & -0x10000 | (int32_t)v15;
            v11 = result;
            v16 = v12;
            v17 = v13;
            v18 = v14;
        }
        // 0x41055d
        v19 = g396 - 1;
        g396 = v19;
    }
    // 0x41056c
    return result;
}

// Address range: 0x410571 - 0x4105af
int32_t function_410571(void) {
    int32_t v1 = g399;
    int32_t v2; // 0x410571
    uint16_t v3 = (int16_t)v2; // 0x410577
    uint16_t v4 = g395 + v3; // 0x410577
    int32_t v5; // 0x410571
    int32_t v6 = v5; // 0x41057e
    int32_t v7 = v1; // 0x41057e
    int32_t v8; // 0x410571
    int32_t v9 = v8; // 0x41057e
    if (v4 < v3) {
        // 0x410580
        v6 = v5 & -256;
        *(char *)v8 = *(char *)(v1 / 256 & 255 | v6);
        v7 = g398 + (int16_t)v1;
        v9 = v8 + 1;
    }
    int32_t v10 = v6 & -256; // 0x41058e
    *(char *)v9 = *(char *)(v7 / 256 & 255 | v10);
    int16_t v11 = g396 - 1; // 0x4105a1
    g396 = v11;
    while (v11 != 0) {
        int32_t v12 = g393 + v9;
        v1 = g398 + (int16_t)v7;
        int32_t v13 = v10;
        v3 = (int16_t)(int32_t)v4;
        v4 = g395 + v3;
        v6 = v13;
        v7 = v1;
        v9 = v12;
        if (v4 < v3) {
            // 0x410580
            v6 = v13 & -256;
            *(char *)v12 = *(char *)(v1 / 256 & 255 | v6);
            v7 = g398 + (int16_t)v1;
            v9 = v12 + 1;
        }
        // 0x41058e
        v10 = v6 & -256;
        *(char *)v9 = *(char *)(v7 / 256 & 255 | v10);
        v11 = g396 - 1;
        g396 = v11;
    }
    // 0x4105aa
    int32_t result; // 0x410571
    return result;
}

// Address range: 0x4105af - 0x4105fb
int32_t function_4105af(void) {
    int32_t v1 = g399;
    int32_t v2; // 0x4105af
    uint16_t v3 = (int16_t)v2; // 0x4105b5
    uint16_t v4 = g395 + v3; // 0x4105b5
    int32_t v5; // 0x4105af
    int32_t v6 = v5; // 0x4105bc
    int32_t v7 = v1; // 0x4105bc
    int32_t v8; // 0x4105af
    int32_t v9 = v8; // 0x4105bc
    if (v4 < v3) {
        // 0x4105be
        v6 = v5 & -256;
        *(char *)v8 = *(char *)(v1 / 256 & 255 | v6);
        v7 = g398 + (int16_t)v1;
        v9 = v8 + 1;
    }
    int32_t v10 = v6 & -256; // 0x4105cc
    *(char *)v9 = *(char *)(v7 / 256 & 255 | v10);
    uint16_t v11 = g398 + (int16_t)v7; // 0x4105d2
    int32_t v12 = v9 + 1; // 0x4105d9
    *(char *)v12 = *(char *)(v10 | (int32_t)(v11 / 256));
    int16_t v13 = g396 - 1; // 0x4105ed
    g396 = v13;
    while (v13 != 0) {
        int32_t v14 = g393 + v12;
        v1 = g398 + v11;
        int32_t v15 = v10;
        v3 = (int16_t)(int32_t)v4;
        v4 = g395 + v3;
        v6 = v15;
        v7 = v1;
        v9 = v14;
        if (v4 < v3) {
            // 0x4105be
            v6 = v15 & -256;
            *(char *)v14 = *(char *)(v1 / 256 & 255 | v6);
            v7 = g398 + (int16_t)v1;
            v9 = v14 + 1;
        }
        // 0x4105cc
        v10 = v6 & -256;
        *(char *)v9 = *(char *)(v7 / 256 & 255 | v10);
        v11 = g398 + (int16_t)v7;
        v12 = v9 + 1;
        *(char *)v12 = *(char *)(v10 | (int32_t)(v11 / 256));
        v13 = g396 - 1;
        g396 = v13;
    }
    // 0x4105f6
    int32_t result; // 0x4105af
    return result;
}

// Address range: 0x4105fb - 0x410655
int32_t function_4105fb(void) {
    int32_t v1 = g399;
    int32_t v2; // 0x4105fb
    uint16_t v3 = (int16_t)v2; // 0x410601
    uint16_t v4 = g395 + v3; // 0x410601
    int32_t v5; // 0x4105fb
    int32_t v6 = v5; // 0x410608
    int32_t v7 = v1; // 0x410608
    int32_t v8; // 0x4105fb
    int32_t v9 = v8; // 0x410608
    if (v4 < v3) {
        // 0x41060a
        v6 = v5 & -256;
        *(char *)v8 = *(char *)(v1 / 256 & 255 | v6);
        v7 = g398 + (int16_t)v1;
        v9 = v8 + 1;
    }
    int32_t v10 = v6 & -256; // 0x410618
    *(char *)v9 = *(char *)(v7 / 256 & 255 | v10);
    uint16_t v11 = g398 + (int16_t)v7; // 0x41061e
    *(char *)(v9 + 1) = *(char *)(v10 | (int32_t)(v11 / 256));
    uint16_t v12 = g398 + v11; // 0x41062c
    int32_t v13 = v9 + 2; // 0x410633
    *(char *)v13 = *(char *)(v10 | (int32_t)(v12 / 256));
    int16_t v14 = g396 - 1; // 0x410647
    g396 = v14;
    while (v14 != 0) {
        int32_t v15 = g393 + v13;
        v1 = g398 + v12;
        int32_t v16 = v10;
        v3 = (int16_t)(int32_t)v4;
        v4 = g395 + v3;
        v6 = v16;
        v7 = v1;
        v9 = v15;
        if (v4 < v3) {
            // 0x41060a
            v6 = v16 & -256;
            *(char *)v15 = *(char *)(v1 / 256 & 255 | v6);
            v7 = g398 + (int16_t)v1;
            v9 = v15 + 1;
        }
        // 0x410618
        v10 = v6 & -256;
        *(char *)v9 = *(char *)(v7 / 256 & 255 | v10);
        v11 = g398 + (int16_t)v7;
        *(char *)(v9 + 1) = *(char *)(v10 | (int32_t)(v11 / 256));
        v12 = g398 + v11;
        v13 = v9 + 2;
        *(char *)v13 = *(char *)(v10 | (int32_t)(v12 / 256));
        v14 = g396 - 1;
        g396 = v14;
    }
    // 0x410650
    int32_t result; // 0x4105fb
    return result;
}

// Address range: 0x410655 - 0x4106bd
int32_t function_410655(void) {
    int32_t v1 = g399;
    int32_t v2; // 0x410655
    uint16_t v3 = (int16_t)v2; // 0x41065b
    uint16_t v4 = g395 + v3; // 0x41065b
    int32_t v5; // 0x410655
    int32_t v6 = v5; // 0x410662
    int32_t v7 = v1; // 0x410662
    int32_t v8; // 0x410655
    int32_t v9 = v8; // 0x410662
    if (v4 < v3) {
        // 0x410664
        v6 = v5 & -256;
        *(char *)v8 = *(char *)(v1 / 256 & 255 | v6);
        v7 = g398 + (int16_t)v1;
        v9 = v8 + 1;
    }
    int32_t v10 = v6 & -256; // 0x410672
    *(char *)v9 = *(char *)(v7 / 256 & 255 | v10);
    uint16_t v11 = g398 + (int16_t)v7; // 0x410678
    *(char *)(v9 + 1) = *(char *)(v10 | (int32_t)(v11 / 256));
    uint16_t v12 = g398 + v11; // 0x410686
    *(char *)(v9 + 2) = *(char *)(v10 | (int32_t)(v12 / 256));
    uint16_t v13 = g398 + v12; // 0x410694
    int32_t v14 = v9 + 3; // 0x41069b
    *(char *)v14 = *(char *)(v10 | (int32_t)(v13 / 256));
    int16_t v15 = g396 - 1; // 0x4106af
    g396 = v15;
    while (v15 != 0) {
        int32_t v16 = g393 + v14;
        v1 = g398 + v13;
        int32_t v17 = v10;
        v3 = (int16_t)(int32_t)v4;
        v4 = g395 + v3;
        v6 = v17;
        v7 = v1;
        v9 = v16;
        if (v4 < v3) {
            // 0x410664
            v6 = v17 & -256;
            *(char *)v16 = *(char *)(v1 / 256 & 255 | v6);
            v7 = g398 + (int16_t)v1;
            v9 = v16 + 1;
        }
        // 0x410672
        v10 = v6 & -256;
        *(char *)v9 = *(char *)(v7 / 256 & 255 | v10);
        v11 = g398 + (int16_t)v7;
        *(char *)(v9 + 1) = *(char *)(v10 | (int32_t)(v11 / 256));
        v12 = g398 + v11;
        *(char *)(v9 + 2) = *(char *)(v10 | (int32_t)(v12 / 256));
        v13 = g398 + v12;
        v14 = v9 + 3;
        *(char *)v14 = *(char *)(v10 | (int32_t)(v13 / 256));
        v15 = g396 - 1;
        g396 = v15;
    }
    // 0x4106b8
    int32_t result; // 0x410655
    return result;
}

// Address range: 0x4106bd - 0x41070b
int32_t function_4106bd(void) {
    int32_t v1 = g399;
    int32_t v2; // 0x4106bd
    uint16_t v3 = (int16_t)v2; // 0x4106c3
    uint16_t v4 = g395 + v3; // 0x4106c3
    int32_t v5; // 0x4106bd
    int32_t v6 = v5; // 0x4106ca
    int32_t v7 = v1; // 0x4106ca
    int32_t v8; // 0x4106bd
    int32_t v9 = v8; // 0x4106ca
    if (v4 < v3) {
        // 0x4106cc
        v6 = v5 & -256;
        *(char *)v8 = *(char *)(v1 / 256 & 255 | v6);
        v7 = g398 + (int16_t)v1;
        v9 = v8 - (int32_t)g205;
    }
    // 0x4106df
    int32_t v10; // 0x4106bd
    int32_t v11 = v10 & -0x10000 | (int32_t)g397; // 0x4106df
    int32_t v12 = v6 & -256; // 0x4106e5
    *(char *)v9 = *(char *)(v7 / 256 & 255 | v12);
    int32_t v13 = g398 + (int16_t)v7; // 0x4106eb
    int32_t v14 = v9 - (int32_t)g205; // 0x4106f2
    uint16_t v15 = (int16_t)v11 - 1; // 0x4106f8
    int32_t result = v11 & -0x10000 | (int32_t)v15; // 0x4106f8
    v11 = result;
    int32_t v16 = v12; // 0x4106fa
    int32_t v17 = v13; // 0x4106fa
    int32_t v18 = v14; // 0x4106fa
    while (v15 != 0) {
        // 0x4106e5
        v12 = v16 & -256;
        *(char *)v18 = *(char *)(v17 / 256 & 255 | v12);
        v13 = g398 + (int16_t)v17;
        v14 = v18 - (int32_t)g205;
        v15 = (int16_t)v11 - 1;
        result = v11 & -0x10000 | (int32_t)v15;
        v11 = result;
        v16 = v12;
        v17 = v13;
        v18 = v14;
    }
    int16_t v19 = g396 - 1; // 0x4106fd
    g396 = v19;
    while (v19 != 0) {
        int32_t v20 = v14 + 1;
        v1 = v13;
        int32_t v21 = v12;
        v3 = (int16_t)(int32_t)v4;
        v4 = g395 + v3;
        v6 = v21;
        v7 = v1;
        v9 = v20;
        if (v4 < v3) {
            // 0x4106cc
            v6 = v21 & -256;
            *(char *)v20 = *(char *)(v1 / 256 & 255 | v6);
            v7 = g398 + (int16_t)v1;
            v9 = v20 - (int32_t)g205;
        }
        // 0x4106df
        v11 = result & -0x10000 | (int32_t)g397;
        v12 = v6 & -256;
        *(char *)v9 = *(char *)(v7 / 256 & 255 | v12);
        v13 = g398 + (int16_t)v7;
        v14 = v9 - (int32_t)g205;
        v15 = (int16_t)v11 - 1;
        result = v11 & -0x10000 | (int32_t)v15;
        v11 = result;
        v16 = v12;
        v17 = v13;
        v18 = v14;
        while (v15 != 0) {
            // 0x4106e5
            v12 = v16 & -256;
            *(char *)v18 = *(char *)(v17 / 256 & 255 | v12);
            v13 = g398 + (int16_t)v17;
            v14 = v18 - (int32_t)g205;
            v15 = (int16_t)v11 - 1;
            result = v11 & -0x10000 | (int32_t)v15;
            v11 = result;
            v16 = v12;
            v17 = v13;
            v18 = v14;
        }
        // 0x4106fc
        v19 = g396 - 1;
        g396 = v19;
    }
    // 0x410706
    return result;
}

// Address range: 0x41070b - 0x41074e
int32_t function_41070b(void) {
    int32_t v1 = g399;
    int32_t v2; // 0x41070b
    uint16_t v3 = (int16_t)v2; // 0x410711
    uint16_t v4 = g395 + v3; // 0x410711
    int32_t v5; // 0x41070b
    int32_t v6 = v5; // 0x410718
    int32_t v7 = v1; // 0x410718
    int32_t v8; // 0x41070b
    int32_t v9 = v8; // 0x410718
    if (v4 < v3) {
        // 0x41071a
        v6 = v5 & -256;
        *(char *)v8 = *(char *)(v1 / 256 & 255 | v6);
        v7 = g398 + (int16_t)v1;
        v9 = v8 - (int32_t)g205;
    }
    int32_t v10 = v6 & -256; // 0x41072d
    *(char *)v9 = *(char *)(v7 / 256 & 255 | v10);
    int16_t v11 = g396 - 1; // 0x410740
    g396 = v11;
    while (v11 != 0) {
        int32_t v12 = g394 + v9;
        v1 = g398 + (int16_t)v7;
        int32_t v13 = v10;
        v3 = (int16_t)(int32_t)v4;
        v4 = g395 + v3;
        v6 = v13;
        v7 = v1;
        v9 = v12;
        if (v4 < v3) {
            // 0x41071a
            v6 = v13 & -256;
            *(char *)v12 = *(char *)(v1 / 256 & 255 | v6);
            v7 = g398 + (int16_t)v1;
            v9 = v12 - (int32_t)g205;
        }
        // 0x41072d
        v10 = v6 & -256;
        *(char *)v9 = *(char *)(v7 / 256 & 255 | v10);
        v11 = g396 - 1;
        g396 = v11;
    }
    // 0x410749
    int32_t result; // 0x41070b
    return result;
}

// Address range: 0x41074e - 0x4107a4
int32_t function_41074e(void) {
    int32_t v1 = g399;
    int32_t v2; // 0x41074e
    uint16_t v3 = (int16_t)v2; // 0x410754
    uint16_t v4 = g395 + v3; // 0x410754
    int32_t v5; // 0x41074e
    int32_t v6 = v5; // 0x41075b
    int32_t v7 = v1; // 0x41075b
    int32_t v8; // 0x41074e
    int32_t v9 = v8; // 0x41075b
    if (v4 < v3) {
        // 0x41075d
        v6 = v5 & -256;
        *(char *)v8 = *(char *)(v1 / 256 & 255 | v6);
        v7 = g398 + (int16_t)v1;
        v9 = v8 - (int32_t)g205;
    }
    int32_t v10 = v6 & -256; // 0x410770
    *(char *)v9 = *(char *)(v7 / 256 & 255 | v10);
    uint16_t v11 = g398 + (int16_t)v7; // 0x410776
    int32_t v12 = v9 - (int32_t)g205; // 0x41077d
    *(char *)v12 = *(char *)(v10 | (int32_t)(v11 / 256));
    int16_t v13 = g396 - 1; // 0x410796
    g396 = v13;
    while (v13 != 0) {
        int32_t v14 = g394 + v12;
        v1 = g398 + v11;
        int32_t v15 = v10;
        v3 = (int16_t)(int32_t)v4;
        v4 = g395 + v3;
        v6 = v15;
        v7 = v1;
        v9 = v14;
        if (v4 < v3) {
            // 0x41075d
            v6 = v15 & -256;
            *(char *)v14 = *(char *)(v1 / 256 & 255 | v6);
            v7 = g398 + (int16_t)v1;
            v9 = v14 - (int32_t)g205;
        }
        // 0x410770
        v10 = v6 & -256;
        *(char *)v9 = *(char *)(v7 / 256 & 255 | v10);
        v11 = g398 + (int16_t)v7;
        v12 = v9 - (int32_t)g205;
        *(char *)v12 = *(char *)(v10 | (int32_t)(v11 / 256));
        v13 = g396 - 1;
        g396 = v13;
    }
    // 0x41079f
    int32_t result; // 0x41074e
    return result;
}

// Address range: 0x4107a4 - 0x41080d
int32_t function_4107a4(void) {
    int32_t v1 = g399;
    int32_t v2; // 0x4107a4
    uint16_t v3 = (int16_t)v2; // 0x4107aa
    uint16_t v4 = g395 + v3; // 0x4107aa
    int32_t v5; // 0x4107a4
    int32_t v6 = v5; // 0x4107b1
    int32_t v7 = v1; // 0x4107b1
    int32_t v8; // 0x4107a4
    int32_t v9 = v8; // 0x4107b1
    if (v4 < v3) {
        // 0x4107b3
        v6 = v5 & -256;
        *(char *)v8 = *(char *)(v1 / 256 & 255 | v6);
        v7 = g398 + (int16_t)v1;
        v9 = v8 - (int32_t)g205;
    }
    int32_t v10 = v6 & -256; // 0x4107c6
    *(char *)v9 = *(char *)(v7 / 256 & 255 | v10);
    uint16_t v11 = g398 + (int16_t)v7; // 0x4107cc
    int32_t v12 = v9 - (int32_t)g205; // 0x4107d3
    *(char *)v12 = *(char *)(v10 | (int32_t)(v11 / 256));
    uint16_t v13 = g398 + v11; // 0x4107df
    int32_t v14 = v12 - (int32_t)g205; // 0x4107e6
    *(char *)v14 = *(char *)(v10 | (int32_t)(v13 / 256));
    int16_t v15 = g396 - 1; // 0x4107ff
    g396 = v15;
    while (v15 != 0) {
        int32_t v16 = g394 + v14;
        v1 = g398 + v13;
        int32_t v17 = v10;
        v3 = (int16_t)(int32_t)v4;
        v4 = g395 + v3;
        v6 = v17;
        v7 = v1;
        v9 = v16;
        if (v4 < v3) {
            // 0x4107b3
            v6 = v17 & -256;
            *(char *)v16 = *(char *)(v1 / 256 & 255 | v6);
            v7 = g398 + (int16_t)v1;
            v9 = v16 - (int32_t)g205;
        }
        // 0x4107c6
        v10 = v6 & -256;
        *(char *)v9 = *(char *)(v7 / 256 & 255 | v10);
        v11 = g398 + (int16_t)v7;
        v12 = v9 - (int32_t)g205;
        *(char *)v12 = *(char *)(v10 | (int32_t)(v11 / 256));
        v13 = g398 + v11;
        v14 = v12 - (int32_t)g205;
        *(char *)v14 = *(char *)(v10 | (int32_t)(v13 / 256));
        v15 = g396 - 1;
        g396 = v15;
    }
    // 0x410808
    int32_t result; // 0x4107a4
    return result;
}

// Address range: 0x41080d - 0x410889
int32_t function_41080d(void) {
    int32_t v1 = g399;
    int32_t v2; // 0x41080d
    uint16_t v3 = (int16_t)v2; // 0x410813
    uint16_t v4 = g395 + v3; // 0x410813
    int32_t v5; // 0x41080d
    int32_t v6 = v5; // 0x41081a
    int32_t v7 = v1; // 0x41081a
    int32_t v8; // 0x41080d
    int32_t v9 = v8; // 0x41081a
    if (v4 < v3) {
        // 0x41081c
        v6 = v5 & -256;
        *(char *)v8 = *(char *)(v1 / 256 & 255 | v6);
        v7 = g398 + (int16_t)v1;
        v9 = v8 - (int32_t)g205;
    }
    int32_t v10 = v6 & -256; // 0x41082f
    *(char *)v9 = *(char *)(v7 / 256 & 255 | v10);
    uint16_t v11 = g398 + (int16_t)v7; // 0x410835
    int32_t v12 = v9 - (int32_t)g205; // 0x41083c
    *(char *)v12 = *(char *)(v10 | (int32_t)(v11 / 256));
    uint16_t v13 = g398 + v11; // 0x410848
    int32_t v14 = v12 - (int32_t)g205; // 0x41084f
    *(char *)v14 = *(char *)(v10 | (int32_t)(v13 / 256));
    uint16_t v15 = g398 + v13; // 0x41085b
    int32_t v16 = v14 - (int32_t)g205; // 0x410862
    *(char *)v16 = *(char *)(v10 | (int32_t)(v15 / 256));
    int16_t v17 = g396 - 1; // 0x41087b
    g396 = v17;
    while (v17 != 0) {
        int32_t v18 = g394 + v16;
        v1 = g398 + v15;
        int32_t v19 = v10;
        v3 = (int16_t)(int32_t)v4;
        v4 = g395 + v3;
        v6 = v19;
        v7 = v1;
        v9 = v18;
        if (v4 < v3) {
            // 0x41081c
            v6 = v19 & -256;
            *(char *)v18 = *(char *)(v1 / 256 & 255 | v6);
            v7 = g398 + (int16_t)v1;
            v9 = v18 - (int32_t)g205;
        }
        // 0x41082f
        v10 = v6 & -256;
        *(char *)v9 = *(char *)(v7 / 256 & 255 | v10);
        v11 = g398 + (int16_t)v7;
        v12 = v9 - (int32_t)g205;
        *(char *)v12 = *(char *)(v10 | (int32_t)(v11 / 256));
        v13 = g398 + v11;
        v14 = v12 - (int32_t)g205;
        *(char *)v14 = *(char *)(v10 | (int32_t)(v13 / 256));
        v15 = g398 + v13;
        v16 = v14 - (int32_t)g205;
        *(char *)v16 = *(char *)(v10 | (int32_t)(v15 / 256));
        v17 = g396 - 1;
        g396 = v17;
    }
    // 0x410884
    int32_t result; // 0x41080d
    return result;
}

// Address range: 0x410889 - 0x4108d2
int32_t function_410889(void) {
    int32_t v1 = g399;
    int32_t v2; // 0x410889
    uint16_t v3 = (int16_t)v2; // 0x41088f
    uint16_t v4 = g395 + v3; // 0x41088f
    int32_t v5; // 0x410889
    int32_t v6 = v5; // 0x410896
    int32_t v7 = v1; // 0x410896
    int32_t v8; // 0x410889
    int32_t v9 = v8; // 0x410896
    if (v4 < v3) {
        // 0x410898
        v6 = v5 & -256;
        *(char *)v8 = *(char *)(v1 / 256 & 255 | v6);
        v7 = g398 + (int16_t)v1;
        v9 = v8 + 1;
    }
    // 0x4108a6
    int32_t v10; // 0x410889
    int32_t v11 = v10 & -0x10000 | (int32_t)g397; // 0x4108a6
    int32_t v12 = v6 & -256; // 0x4108ac
    *(char *)v9 = *(char *)(v7 / 256 & 255 | v12);
    int32_t v13 = g398 + (int16_t)v7; // 0x4108b2
    int32_t v14 = v9 + 1; // 0x4108b9
    uint16_t v15 = (int16_t)v11 - 1; // 0x4108ba
    int32_t result = v11 & -0x10000 | (int32_t)v15; // 0x4108ba
    v11 = result;
    int32_t v16 = v12; // 0x4108bc
    int32_t v17 = v13; // 0x4108bc
    int32_t v18 = v14; // 0x4108bc
    while (v15 != 0) {
        // 0x4108ac
        v12 = v16 & -256;
        *(char *)v18 = *(char *)(v17 / 256 & 255 | v12);
        v13 = g398 + (int16_t)v17;
        v14 = v18 + 1;
        v15 = (int16_t)v11 - 1;
        result = v11 & -0x10000 | (int32_t)v15;
        v11 = result;
        v16 = v12;
        v17 = v13;
        v18 = v14;
    }
    int16_t v19 = g396 - 1; // 0x4108c4
    g396 = v19;
    while (v19 != 0) {
        int32_t v20 = v14 - (int32_t)g205;
        v1 = v13;
        int32_t v21 = v12;
        v3 = (int16_t)(int32_t)v4;
        v4 = g395 + v3;
        v6 = v21;
        v7 = v1;
        v9 = v20;
        if (v4 < v3) {
            // 0x410898
            v6 = v21 & -256;
            *(char *)v20 = *(char *)(v1 / 256 & 255 | v6);
            v7 = g398 + (int16_t)v1;
            v9 = v20 + 1;
        }
        // 0x4108a6
        v11 = result & -0x10000 | (int32_t)g397;
        v12 = v6 & -256;
        *(char *)v9 = *(char *)(v7 / 256 & 255 | v12);
        v13 = g398 + (int16_t)v7;
        v14 = v9 + 1;
        v15 = (int16_t)v11 - 1;
        result = v11 & -0x10000 | (int32_t)v15;
        v11 = result;
        v16 = v12;
        v17 = v13;
        v18 = v14;
        while (v15 != 0) {
            // 0x4108ac
            v12 = v16 & -256;
            *(char *)v18 = *(char *)(v17 / 256 & 255 | v12);
            v13 = g398 + (int16_t)v17;
            v14 = v18 + 1;
            v15 = (int16_t)v11 - 1;
            result = v11 & -0x10000 | (int32_t)v15;
            v11 = result;
            v16 = v12;
            v17 = v13;
            v18 = v14;
        }
        // 0x4108be
        v19 = g396 - 1;
        g396 = v19;
    }
    // 0x4108cd
    return result;
}

// Address range: 0x4108d2 - 0x410910
int32_t function_4108d2(void) {
    int32_t v1 = g399;
    int32_t v2; // 0x4108d2
    uint16_t v3 = (int16_t)v2; // 0x4108d8
    uint16_t v4 = g395 + v3; // 0x4108d8
    int32_t v5; // 0x4108d2
    int32_t v6 = v5; // 0x4108df
    int32_t v7 = v1; // 0x4108df
    int32_t v8; // 0x4108d2
    int32_t v9 = v8; // 0x4108df
    if (v4 < v3) {
        // 0x4108e1
        v6 = v5 & -256;
        *(char *)v8 = *(char *)(v1 / 256 & 255 | v6);
        v7 = g398 + (int16_t)v1;
        v9 = v8 + 1;
    }
    int32_t v10 = v6 & -256; // 0x4108ef
    *(char *)v9 = *(char *)(v7 / 256 & 255 | v10);
    int16_t v11 = g396 - 1; // 0x410902
    g396 = v11;
    while (v11 != 0) {
        int32_t v12 = g394 + v9;
        v1 = g398 + (int16_t)v7;
        int32_t v13 = v10;
        v3 = (int16_t)(int32_t)v4;
        v4 = g395 + v3;
        v6 = v13;
        v7 = v1;
        v9 = v12;
        if (v4 < v3) {
            // 0x4108e1
            v6 = v13 & -256;
            *(char *)v12 = *(char *)(v1 / 256 & 255 | v6);
            v7 = g398 + (int16_t)v1;
            v9 = v12 + 1;
        }
        // 0x4108ef
        v10 = v6 & -256;
        *(char *)v9 = *(char *)(v7 / 256 & 255 | v10);
        v11 = g396 - 1;
        g396 = v11;
    }
    // 0x41090b
    int32_t result; // 0x4108d2
    return result;
}

// Address range: 0x410910 - 0x41095c
int32_t function_410910(void) {
    int32_t v1 = g399;
    int32_t v2; // 0x410910
    uint16_t v3 = (int16_t)v2; // 0x410916
    uint16_t v4 = g395 + v3; // 0x410916
    int32_t v5; // 0x410910
    int32_t v6 = v5; // 0x41091d
    int32_t v7 = v1; // 0x41091d
    int32_t v8; // 0x410910
    int32_t v9 = v8; // 0x41091d
    if (v4 < v3) {
        // 0x41091f
        v6 = v5 & -256;
        *(char *)v8 = *(char *)(v1 / 256 & 255 | v6);
        v7 = g398 + (int16_t)v1;
        v9 = v8 + 1;
    }
    int32_t v10 = v6 & -256; // 0x41092d
    *(char *)v9 = *(char *)(v7 / 256 & 255 | v10);
    uint16_t v11 = g398 + (int16_t)v7; // 0x410933
    int32_t v12 = v9 + 1; // 0x41093a
    *(char *)v12 = *(char *)(v10 | (int32_t)(v11 / 256));
    int16_t v13 = g396 - 1; // 0x41094e
    g396 = v13;
    while (v13 != 0) {
        int32_t v14 = g394 + v12;
        v1 = g398 + v11;
        int32_t v15 = v10;
        v3 = (int16_t)(int32_t)v4;
        v4 = g395 + v3;
        v6 = v15;
        v7 = v1;
        v9 = v14;
        if (v4 < v3) {
            // 0x41091f
            v6 = v15 & -256;
            *(char *)v14 = *(char *)(v1 / 256 & 255 | v6);
            v7 = g398 + (int16_t)v1;
            v9 = v14 + 1;
        }
        // 0x41092d
        v10 = v6 & -256;
        *(char *)v9 = *(char *)(v7 / 256 & 255 | v10);
        v11 = g398 + (int16_t)v7;
        v12 = v9 + 1;
        *(char *)v12 = *(char *)(v10 | (int32_t)(v11 / 256));
        v13 = g396 - 1;
        g396 = v13;
    }
    // 0x410957
    int32_t result; // 0x410910
    return result;
}

// Address range: 0x41095c - 0x4109b6
int32_t function_41095c(void) {
    int32_t v1 = g399;
    int32_t v2; // 0x41095c
    uint16_t v3 = (int16_t)v2; // 0x410962
    uint16_t v4 = g395 + v3; // 0x410962
    int32_t v5; // 0x41095c
    int32_t v6 = v5; // 0x410969
    int32_t v7 = v1; // 0x410969
    int32_t v8; // 0x41095c
    int32_t v9 = v8; // 0x410969
    if (v4 < v3) {
        // 0x41096b
        v6 = v5 & -256;
        *(char *)v8 = *(char *)(v1 / 256 & 255 | v6);
        v7 = g398 + (int16_t)v1;
        v9 = v8 + 1;
    }
    int32_t v10 = v6 & -256; // 0x410979
    *(char *)v9 = *(char *)(v7 / 256 & 255 | v10);
    uint16_t v11 = g398 + (int16_t)v7; // 0x41097f
    *(char *)(v9 + 1) = *(char *)(v10 | (int32_t)(v11 / 256));
    uint16_t v12 = g398 + v11; // 0x41098d
    int32_t v13 = v9 + 2; // 0x410994
    *(char *)v13 = *(char *)(v10 | (int32_t)(v12 / 256));
    int16_t v14 = g396 - 1; // 0x4109a8
    g396 = v14;
    while (v14 != 0) {
        int32_t v15 = g394 + v13;
        v1 = g398 + v12;
        int32_t v16 = v10;
        v3 = (int16_t)(int32_t)v4;
        v4 = g395 + v3;
        v6 = v16;
        v7 = v1;
        v9 = v15;
        if (v4 < v3) {
            // 0x41096b
            v6 = v16 & -256;
            *(char *)v15 = *(char *)(v1 / 256 & 255 | v6);
            v7 = g398 + (int16_t)v1;
            v9 = v15 + 1;
        }
        // 0x410979
        v10 = v6 & -256;
        *(char *)v9 = *(char *)(v7 / 256 & 255 | v10);
        v11 = g398 + (int16_t)v7;
        *(char *)(v9 + 1) = *(char *)(v10 | (int32_t)(v11 / 256));
        v12 = g398 + v11;
        v13 = v9 + 2;
        *(char *)v13 = *(char *)(v10 | (int32_t)(v12 / 256));
        v14 = g396 - 1;
        g396 = v14;
    }
    // 0x4109b1
    int32_t result; // 0x41095c
    return result;
}

// Address range: 0x4109b6 - 0x410a1e
int32_t function_4109b6(void) {
    int32_t v1 = g399;
    int32_t v2; // 0x4109b6
    uint16_t v3 = (int16_t)v2; // 0x4109bc
    uint16_t v4 = g395 + v3; // 0x4109bc
    int32_t v5; // 0x4109b6
    int32_t v6 = v5; // 0x4109c3
    int32_t v7 = v1; // 0x4109c3
    int32_t v8; // 0x4109b6
    int32_t v9 = v8; // 0x4109c3
    if (v4 < v3) {
        // 0x4109c5
        v6 = v5 & -256;
        *(char *)v8 = *(char *)(v1 / 256 & 255 | v6);
        v7 = g398 + (int16_t)v1;
        v9 = v8 + 1;
    }
    int32_t v10 = v6 & -256; // 0x4109d3
    *(char *)v9 = *(char *)(v7 / 256 & 255 | v10);
    uint16_t v11 = g398 + (int16_t)v7; // 0x4109d9
    *(char *)(v9 + 1) = *(char *)(v10 | (int32_t)(v11 / 256));
    uint16_t v12 = g398 + v11; // 0x4109e7
    *(char *)(v9 + 2) = *(char *)(v10 | (int32_t)(v12 / 256));
    uint16_t v13 = g398 + v12; // 0x4109f5
    int32_t v14 = v9 + 3; // 0x4109fc
    *(char *)v14 = *(char *)(v10 | (int32_t)(v13 / 256));
    int16_t v15 = g396 - 1; // 0x410a10
    g396 = v15;
    while (v15 != 0) {
        int32_t v16 = g394 + v14;
        v1 = g398 + v13;
        int32_t v17 = v10;
        v3 = (int16_t)(int32_t)v4;
        v4 = g395 + v3;
        v6 = v17;
        v7 = v1;
        v9 = v16;
        if (v4 < v3) {
            // 0x4109c5
            v6 = v17 & -256;
            *(char *)v16 = *(char *)(v1 / 256 & 255 | v6);
            v7 = g398 + (int16_t)v1;
            v9 = v16 + 1;
        }
        // 0x4109d3
        v10 = v6 & -256;
        *(char *)v9 = *(char *)(v7 / 256 & 255 | v10);
        v11 = g398 + (int16_t)v7;
        *(char *)(v9 + 1) = *(char *)(v10 | (int32_t)(v11 / 256));
        v12 = g398 + v11;
        *(char *)(v9 + 2) = *(char *)(v10 | (int32_t)(v12 / 256));
        v13 = g398 + v12;
        v14 = v9 + 3;
        *(char *)v14 = *(char *)(v10 | (int32_t)(v13 / 256));
        v15 = g396 - 1;
        g396 = v15;
    }
    // 0x410a19
    int32_t result; // 0x4109b6
    return result;
}

// Address range: 0x410a20 - 0x410c97
int32_t function_410a20(void) {
    // 0x410a20
    int32_t v1; // 0x410a20
    int32_t v2 = *(int32_t *)(v1 + 4); // 0x410a21
    int32_t * v3 = (int32_t *)(v2 + 12); // 0x410a24
    g408 = *v3;
    int32_t * v4 = (int32_t *)(v2 + 20); // 0x410a2c
    g409 = *v4;
    int32_t * v5 = (int32_t *)(v2 + 8); // 0x410a34
    g410 = *v5;
    int32_t * v6 = (int32_t *)(v2 + 16); // 0x410a3c
    g411 = *v6;
    g412 = *(int32_t *)(v2 + 28);
    g413 = *(int32_t *)(v2 + 24);
    int32_t v7 = *(int32_t *)(v1 + 8); // 0x410a54
    int32_t * v8 = (int32_t *)v2; // 0x410a57
    int32_t * v9 = (int32_t *)v7; // 0x410a5c
    uint64_t v10 = (int64_t)*v9 * (int64_t)-*v8; // 0x410a5e
    int32_t v11 = (int32_t)v10 / 0x10000 | 0x10000 * (int32_t)(v10 / 0x100000000); // 0x410a63
    g400 = v11;
    int32_t * v12 = (int32_t *)(v2 + 4); // 0x410a6b
    int32_t * v13 = (int32_t *)(v7 + 8); // 0x410a70
    uint64_t v14 = (int64_t)*v13 * (int64_t)-*v12; // 0x410a73
    int32_t v15 = ((int32_t)v14 / 0x10000 | 0x10000 * (int32_t)(v14 / 0x100000000)) + v11;
    g400 = v15;
    int32_t * v16 = (int32_t *)(v7 + 4); // 0x410a86
    uint64_t v17 = (int64_t)*v16 * (int64_t)-*v8; // 0x410a89
    int32_t v18 = (int32_t)v17 / 0x10000 | 0x10000 * (int32_t)(v17 / 0x100000000); // 0x410a8e
    g401 = v18;
    int32_t * v19 = (int32_t *)(v7 + 12); // 0x410a9b
    uint64_t v20 = (int64_t)*v19 * (int64_t)-*v12; // 0x410a9e
    int32_t v21 = ((int32_t)v20 / 0x10000 | 0x10000 * (int32_t)(v20 / 0x100000000)) + v18;
    g401 = v21;
    int64_t v22 = (int64_t)(*v6 - *v5); // 0x410ab5
    uint64_t v23 = v22 * (int64_t)*v16; // 0x410ab5
    int32_t v24 = (int32_t)v23 / 0x10000 | 0x10000 * (int32_t)(v23 / 0x100000000);
    g403 = v24;
    uint64_t v25 = (int64_t)*v9 * v22; // 0x410ac4
    int32_t v26 = (int32_t)v25 / 0x10000 | 0x10000 * (int32_t)(v25 / 0x100000000);
    g402 = v26;
    int64_t v27 = (int64_t)(*v4 - *v3); // 0x410ada
    uint64_t v28 = v27 * (int64_t)*v19; // 0x410ada
    int32_t v29 = ((int32_t)v28 / 0x10000 | 0x10000 * (int32_t)(v28 / 0x100000000)) + v21;
    g405 = v29;
    int32_t v30 = v29 + v24;
    g407 = v30;
    int32_t v31 = v24 + v21;
    g403 = v31;
    uint64_t v32 = (int64_t)*v13 * v27; // 0x410b0b
    int32_t v33 = ((int32_t)v32 / 0x10000 | 0x10000 * (int32_t)(v32 / 0x100000000)) + v15;
    g404 = v33;
    int32_t v34 = v33 + v26;
    g406 = v34;
    int32_t v35 = v26 + v15;
    g402 = v35;
    int32_t * v36 = (int32_t *)(v1 + 12); // 0x410b3e
    int32_t v37 = *v36 + v15;
    g400 = v37;
    int32_t * v38 = (int32_t *)(v1 + 16); // 0x410b4b
    int32_t v39 = *v38 + v21;
    g401 = v39;
    int32_t v40 = *v36 + v35;
    g402 = v40;
    int32_t v41 = *v38 + v31;
    g403 = v41;
    int32_t v42 = *v36 + v33;
    g404 = v42;
    int32_t v43 = *v38 + v29;
    g405 = v43;
    g406 = *v36 + v34;
    g407 = *v38 + v30;
    g415 = v37;
    g416 = v39;
    g417 = v40;
    g418 = v41;
    g419 = v42;
    g420 = v43;
    g421 = &g424;
    g425 = g408;
    g427 = g408;
    g429 = g409;
    g424 = g410;
    g428 = g410;
    g426 = g411;
    g422 = g413;
    g423 = g412;
    function_40b390((int32_t)&g414);
    g415 = g402;
    g416 = g403;
    g417 = g404;
    g418 = g405;
    g419 = g406;
    g420 = g407;
    g421 = &g424;
    g425 = g408;
    g427 = g409;
    g429 = g409;
    g424 = g411;
    g428 = g411;
    g426 = g410;
    g422 = g413;
    g423 = g412;
    function_40b390((int32_t)&g414);
    return &g414;
}

// Address range: 0x410c98 - 0x410cbe
int32_t function_410c98(void) {
    // 0x410c98
    int32_t v1; // 0x410c98
    uint32_t v2 = -v1; // 0x410ca0
    uint32_t result = -v1 / 256; // 0x410ca2
    g443 = v2 / 0x10000;
    g444 = result & 0xffff | 0x10000 * v2;
    return result;
}

// Address range: 0x410cbe - 0x410d3a
int32_t function_410cbe(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6) {
    // 0x410cbe
    int32_t v1; // 0x410cbe
    int32_t v2 = v1 - 1; // 0x410cbe
    if (v2 < 0) {
        // 0x410d39
        int32_t result; // 0x410cbe
        return result;
    }
    // 0x410cc1
    int32_t v3; // bp-4, 0x410cbe
    int32_t v4 = &v3; // 0x410cc4
    int32_t * v5 = (int32_t *)(v4 - 4); // 0x410cda
    int32_t * v6 = (int32_t *)(v4 - 8); // 0x410cde
    int32_t * v7 = (int32_t *)(v4 - 12); // 0x410ce2
    int32_t v8 = 0x10000 * v2 | (int32_t)g443;
    int32_t v9; // 0x410cbe
    int32_t v10 = *(int32_t *)(v9 + 4); // 0x410cd7
    int32_t v11; // 0x410cbe
    *v5 = v11;
    *v6 = v9;
    unsigned char v12 = *(char *)(v9 + 1); // 0x410cdf
    int32_t v13; // 0x410cbe
    *v7 = v13;
    unsigned char v14 = *(char *)(v9 + 2); // 0x410ce3
    int32_t v15 = g445 & -256 | (int32_t)*(char *)(v9 + 6); // 0x410ce6
    int32_t v16 = *(int32_t *)v11; // 0x410ce9
    uint32_t v17 = *(int32_t *)(v9 + 8) + -1 - v16; // 0x410cf2
    int32_t v18 = v13; // 0x410cf3
    int32_t v19 = v8; // 0x410cf3
    int32_t v20 = v15; // 0x410cf3
    int32_t v21; // 0x410cbe
    bool v22; // 0x410cbe
    int32_t v23; // 0x410cbe
    int32_t v24; // 0x410cbe
    int32_t v25; // 0x410cbe
    int32_t v26; // 0x410cbe
    uint32_t v27; // 0x410cbe
    int32_t v28; // 0x410cbe
    int32_t v29; // 0x410cbe
    int32_t v30; // 0x410ce3
    int32_t v31; // 0x410cf0
    int32_t v32; // 0x410cfa
    unsigned char v33; // 0x410cfc
    unsigned char v34; // 0x410d01
    int32_t v35; // 0x410d01
    int32_t v36; // 0x410d03
    uint32_t v37; // 0x410ce3
    int32_t v38; // 0x410cff
    int32_t v39; // 0x410cbe
    unsigned char v40; // 0x410d1a
    int32_t v41; // 0x410d08
    int32_t v42; // 0x410d0a
    unsigned char v43; // 0x410d0c
    int32_t v44; // 0x410d0f
    unsigned char v45; // 0x410d11
    int32_t v46; // 0x410d11
    int32_t v47; // 0x410d17
    if (v17 >= 0) {
        // 0x410cf5
        v30 = 256 * (int32_t)v14;
        v31 = v16 + v13;
        v32 = v15 & -0xff01 | v30;
        v33 = *(char *)(v17 + v31);
        v34 = *(char *)v32;
        v35 = g430 & -0x10000 | (int32_t)v33 | 256 * (int32_t)v34;
        v36 = v17 - 1;
        if (v36 < 0) {
            // 0x410cf5
            v21 = v31 + 1;
            v24 = v35;
            v28 = v8;
            v26 = v32;
            v29 = -1;
        } else {
            // 0x410d06
            v37 = 0x10000 * v10 | (int32_t)v12 | v30;
            v38 = v37 + g444;
            v39 = v31 + 1;
            v22 = v38 < v37;
            v42 = v8;
            v47 = v36;
            v25 = v32;
            v41 = v25 & -0x10000 | v38 & 0xff00 | v42 + (int32_t)v22 + v25 & 255;
            v42 &= -0xff01;
            v43 = *(char *)(v47 + v31);
            v44 = v38 + g444;
            v46 = v35 & -0x10000 | (int32_t)v43 | 256 * (int32_t)*(char *)v41;
            *(char *)(v47 + v39) = *(char *)v35;
            v47--;
            v22 = v44 < v38;
            v21 = v39;
            v24 = v46;
            v28 = v42;
            v26 = v41;
            v29 = v47;
            while (v47 >= 0) {
                // 0x410d06
                v25 = v41;
                v27 = v44;
                v23 = v46;
                v41 = v25 & -0x10000 | v27 & 0xff00 | v42 + (int32_t)v22 + v25 & 255;
                v42 &= -0xff01;
                v43 = *(char *)(v47 + v31);
                v44 = v27 + g444;
                v45 = *(char *)v41;
                v46 = v23 & -0x10000 | (int32_t)v43 | 256 * (int32_t)v45;
                *(char *)(v47 + v39) = *(char *)v23;
                v47--;
                v22 = v44 < v27;
                v21 = v39;
                v24 = v46;
                v28 = v42;
                v26 = v41;
                v29 = v47;
            }
        }
        // 0x410d1a
        v40 = *(char *)v24;
        *(char *)(v29 + v21) = v40;
        v18 = *v7;
        v19 = 256 * (int32_t)v40 | v28 & -0xff01;
        v20 = v26;
    }
    int32_t result2 = *v5 + 4; // 0x410d2d
    int32_t v48 = v19 - 0x10000; // 0x410d30
    v9 = *v6 + 12;
    while (v48 >= 0) {
        int32_t v49 = v18 + (int32_t)g205;
        v8 = v48;
        v10 = *(int32_t *)(v9 + 4);
        *v5 = result2;
        *v6 = v9;
        v12 = *(char *)(v9 + 1);
        *v7 = v49;
        v14 = *(char *)(v9 + 2);
        v15 = v20 & -256 | (int32_t)*(char *)(v9 + 6);
        v16 = *(int32_t *)result2;
        v17 = *(int32_t *)(v9 + 8) + -1 - v16;
        v18 = v49;
        v19 = v8;
        v20 = v15;
        if (v17 >= 0) {
            // 0x410cf5
            v30 = 256 * (int32_t)v14;
            v31 = v16 + v49;
            v32 = v15 & -0xff01 | v30;
            v33 = *(char *)(v17 + v31);
            v34 = *(char *)v32;
            v35 = g430 & -0x10000 | (int32_t)v33 | 256 * (int32_t)v34;
            v36 = v17 - 1;
            if (v36 < 0) {
                // 0x410cf5
                v21 = v31 + 1;
                v24 = v35;
                v28 = v8;
                v26 = v32;
                v29 = -1;
            } else {
                // 0x410d06
                v37 = 0x10000 * v10 | (int32_t)v12 | v30;
                v38 = v37 + g444;
                v39 = v31 + 1;
                v22 = v38 < v37;
                v42 = v8;
                v47 = v36;
                v25 = v32;
                v41 = v25 & -0x10000 | v38 & 0xff00 | v42 + (int32_t)v22 + v25 & 255;
                v42 &= -0xff01;
                v43 = *(char *)(v47 + v31);
                v44 = v38 + g444;
                v46 = v35 & -0x10000 | (int32_t)v43 | 256 * (int32_t)*(char *)v41;
                *(char *)(v47 + v39) = *(char *)v35;
                v47--;
                v22 = v44 < v38;
                v21 = v39;
                v24 = v46;
                v28 = v42;
                v26 = v41;
                v29 = v47;
                while (v47 >= 0) {
                    // 0x410d06
                    v25 = v41;
                    v27 = v44;
                    v23 = v46;
                    v41 = v25 & -0x10000 | v27 & 0xff00 | v42 + (int32_t)v22 + v25 & 255;
                    v42 &= -0xff01;
                    v43 = *(char *)(v47 + v31);
                    v44 = v27 + g444;
                    v45 = *(char *)v41;
                    v46 = v23 & -0x10000 | (int32_t)v43 | 256 * (int32_t)v45;
                    *(char *)(v47 + v39) = *(char *)v23;
                    v47--;
                    v22 = v44 < v27;
                    v21 = v39;
                    v24 = v46;
                    v28 = v42;
                    v26 = v41;
                    v29 = v47;
                }
            }
            // 0x410d1a
            v40 = *(char *)v24;
            *(char *)(v29 + v21) = v40;
            v18 = *v7;
            v19 = 256 * (int32_t)v40 | v28 & -0xff01;
            v20 = v26;
        }
        // 0x410d20
        result2 = *v5 + 4;
        v48 = v19 - 0x10000;
        v9 = *v6 + 12;
    }
    // 0x410d39
    return result2;
}

// Address range: 0x410d3c - 0x410d5c
int32_t function_410d3c(void) {
    // 0x410d3c
    int32_t v1; // 0x410d3c
    uint32_t v2 = -v1; // 0x410d3e
    uint32_t result = -v1 / 256; // 0x410d40
    g443 = v2 / 0x10000;
    g444 = result & 0xffff | 0x10000 * v2;
    return result;
}

// Address range: 0x410d5c - 0x410df5
int32_t function_410d5c(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6) {
    // 0x410d5c
    int32_t v1; // 0x410d5c
    int32_t v2 = v1 - 1; // 0x410d5c
    if (v2 < 0) {
        // 0x410df4
        int32_t result; // 0x410d5c
        return result;
    }
    // 0x410d63
    int32_t v3; // bp-4, 0x410d5c
    int32_t v4 = &v3; // 0x410d66
    int32_t * v5 = (int32_t *)(v4 - 4); // 0x410d7c
    int32_t * v6 = (int32_t *)(v4 - 8); // 0x410d80
    int32_t * v7 = (int32_t *)(v4 - 12); // 0x410d84
    int32_t v8 = 0x10000 * v2 | (int32_t)g443;
    int32_t v9; // 0x410d5c
    *v5 = v9;
    int32_t v10; // 0x410d5c
    *v6 = v10;
    unsigned char v11 = *(char *)(v10 + 1); // 0x410d81
    int32_t v12; // 0x410d5c
    *v7 = v12;
    int32_t v13 = 256 * (int32_t)*(char *)(v10 + 2); // 0x410d85
    int32_t v14 = 0x10000 * *(int32_t *)(v10 + 4) | (int32_t)v11 | v13; // 0x410d85
    int32_t v15 = *(int32_t *)v9; // 0x410d8b
    int32_t v16 = v15 + v12; // 0x410d90
    int32_t v17 = g445 & -0x10000 | (int32_t)*(char *)(v10 + 6) | v13; // 0x410d94
    int32_t v18 = *(int32_t *)(v10 + 8) - v15 - 4; // 0x410d96
    int32_t v19 = v14; // 0x410d99
    int32_t v20 = v17; // 0x410d99
    int32_t v21 = v18; // 0x410d99
    int32_t v22 = v14; // 0x410d99
    int32_t v23 = v17; // 0x410d99
    int32_t v24 = v18; // 0x410d99
    uint32_t v25; // 0x410d9b
    unsigned char v26; // 0x410d9d
    int32_t v27; // 0x410d9f
    int32_t v28; // 0x410da1
    uint32_t v29; // 0x410da3
    unsigned char v30; // 0x410da5
    int32_t v31; // 0x410da9
    uint32_t v32; // 0x410dae
    unsigned char v33; // 0x410db0
    int32_t v34; // 0x410db4
    int32_t v35; // 0x410db6
    unsigned char v36; // 0x410db8
    int32_t v37; // 0x410dbc
    int32_t v38; // 0x410dc1
    if (v18 >= 0) {
        v25 = v19 + g444;
        v26 = *(char *)v20;
        v27 = v20 & -0x10000;
        v28 = v20 + v8 + (int32_t)(v25 < v19);
        v29 = v25 + g444;
        v30 = *(char *)(v27 | v25 & 0xff00 | v28 & 255);
        v31 = v28 + v8 + (int32_t)(v29 < v25);
        v32 = v29 + g444;
        v33 = *(char *)(v29 & 0xff00 | v27 | v31 & 255);
        v34 = v8 + (int32_t)(v32 < v29) + v31;
        v35 = v32 + g444;
        v36 = *(char *)(v32 & 0xff00 | v27 | v34 & 255);
        v37 = v35 & 0xff00 | v27 | v8 + (int32_t)(v35 < v32) + v34 & 255;
        *(int32_t *)(v21 + v16) = 0x10000 * (256 * (int32_t)v26 | (int32_t)v30) | 256 * (int32_t)v33 | (int32_t)v36;
        v38 = v21 - 4;
        v19 = v35;
        v20 = v37;
        v21 = v38;
        v22 = v35;
        v23 = v37;
        v24 = v38;
        while (v38 >= 0) {
            // 0x410d9b
            v25 = v19 + g444;
            v26 = *(char *)v20;
            v27 = v20 & -0x10000;
            v28 = v20 + v8 + (int32_t)(v25 < v19);
            v29 = v25 + g444;
            v30 = *(char *)(v27 | v25 & 0xff00 | v28 & 255);
            v31 = v28 + v8 + (int32_t)(v29 < v25);
            v32 = v29 + g444;
            v33 = *(char *)(v29 & 0xff00 | v27 | v31 & 255);
            v34 = v8 + (int32_t)(v32 < v29) + v31;
            v35 = v32 + g444;
            v36 = *(char *)(v32 & 0xff00 | v27 | v34 & 255);
            v37 = v35 & 0xff00 | v27 | v8 + (int32_t)(v35 < v32) + v34 & 255;
            *(int32_t *)(v21 + v16) = 0x10000 * (256 * (int32_t)v26 | (int32_t)v30) | 256 * (int32_t)v33 | (int32_t)v36;
            v38 = v21 - 4;
            v19 = v35;
            v20 = v37;
            v21 = v38;
            v22 = v35;
            v23 = v37;
            v24 = v38;
        }
    }
    int32_t v39 = v23;
    int32_t v40 = v24 + 3; // 0x410dc6
    int32_t v41 = v39; // 0x410dc9
    bool v42; // 0x410d5c
    int32_t v43; // 0x410d5c
    uint32_t v44; // 0x410d5c
    int32_t v45; // 0x410dcb
    int32_t v46; // 0x410dd1
    int32_t v47; // 0x410dd3
    int32_t v48; // 0x410dd8
    if (v40 >= 0) {
        // 0x410dcb
        v45 = v22 + g444;
        v42 = v45 < v22;
        v48 = v40;
        v43 = v39;
        v46 = v43 & -0x10000 | v45 & 0xff00 | v8 + (int32_t)v42 + v43 & 255;
        v47 = v45 + g444;
        *(char *)(v48 + v16) = *(char *)v43;
        v48--;
        v42 = v47 < v45;
        v41 = v46;
        while (v48 >= 0) {
            // 0x410dcd
            v43 = v46;
            v44 = v47;
            v46 = v43 & -0x10000 | v44 & 0xff00 | v8 + (int32_t)v42 + v43 & 255;
            v47 = v44 + g444;
            *(char *)(v48 + v16) = *(char *)v43;
            v48--;
            v42 = v47 < v44;
            v41 = v46;
        }
    }
    int32_t result2 = *v5 + 4; // 0x410de5
    int32_t v49 = v8 - 0x10000; // 0x410deb
    v10 = *v6 + 12;
    v12 = *v7 + (int32_t)g205;
    while (v49 >= 0) {
        // 0x410d79
        v8 = v49;
        *v5 = result2;
        *v6 = v10;
        v11 = *(char *)(v10 + 1);
        *v7 = v12;
        v13 = 256 * (int32_t)*(char *)(v10 + 2);
        v14 = 0x10000 * *(int32_t *)(v10 + 4) | (int32_t)v11 | v13;
        v15 = *(int32_t *)result2;
        v16 = v15 + v12;
        v17 = v41 & -0x10000 | (int32_t)*(char *)(v10 + 6) | v13;
        v18 = *(int32_t *)(v10 + 8) - v15 - 4;
        v19 = v14;
        v20 = v17;
        v21 = v18;
        v22 = v14;
        v23 = v17;
        v24 = v18;
        if (v18 >= 0) {
            v25 = v19 + g444;
            v26 = *(char *)v20;
            v27 = v20 & -0x10000;
            v28 = v20 + v8 + (int32_t)(v25 < v19);
            v29 = v25 + g444;
            v30 = *(char *)(v27 | v25 & 0xff00 | v28 & 255);
            v31 = v28 + v8 + (int32_t)(v29 < v25);
            v32 = v29 + g444;
            v33 = *(char *)(v29 & 0xff00 | v27 | v31 & 255);
            v34 = v8 + (int32_t)(v32 < v29) + v31;
            v35 = v32 + g444;
            v36 = *(char *)(v32 & 0xff00 | v27 | v34 & 255);
            v37 = v35 & 0xff00 | v27 | v8 + (int32_t)(v35 < v32) + v34 & 255;
            *(int32_t *)(v21 + v16) = 0x10000 * (256 * (int32_t)v26 | (int32_t)v30) | 256 * (int32_t)v33 | (int32_t)v36;
            v38 = v21 - 4;
            v19 = v35;
            v20 = v37;
            v21 = v38;
            v22 = v35;
            v23 = v37;
            v24 = v38;
            while (v38 >= 0) {
                // 0x410d9b
                v25 = v19 + g444;
                v26 = *(char *)v20;
                v27 = v20 & -0x10000;
                v28 = v20 + v8 + (int32_t)(v25 < v19);
                v29 = v25 + g444;
                v30 = *(char *)(v27 | v25 & 0xff00 | v28 & 255);
                v31 = v28 + v8 + (int32_t)(v29 < v25);
                v32 = v29 + g444;
                v33 = *(char *)(v29 & 0xff00 | v27 | v31 & 255);
                v34 = v8 + (int32_t)(v32 < v29) + v31;
                v35 = v32 + g444;
                v36 = *(char *)(v32 & 0xff00 | v27 | v34 & 255);
                v37 = v35 & 0xff00 | v27 | v8 + (int32_t)(v35 < v32) + v34 & 255;
                *(int32_t *)(v21 + v16) = 0x10000 * (256 * (int32_t)v26 | (int32_t)v30) | 256 * (int32_t)v33 | (int32_t)v36;
                v38 = v21 - 4;
                v19 = v35;
                v20 = v37;
                v21 = v38;
                v22 = v35;
                v23 = v37;
                v24 = v38;
            }
        }
        // 0x410dc6
        v39 = v23;
        v40 = v24 + 3;
        v41 = v39;
        if (v40 >= 0) {
            // 0x410dcb
            v45 = v22 + g444;
            v42 = v45 < v22;
            v48 = v40;
            v43 = v39;
            v46 = v43 & -0x10000 | v45 & 0xff00 | v8 + (int32_t)v42 + v43 & 255;
            v47 = v45 + g444;
            *(char *)(v48 + v16) = *(char *)v43;
            v48--;
            v42 = v47 < v45;
            v41 = v46;
            while (v48 >= 0) {
                // 0x410dcd
                v43 = v46;
                v44 = v47;
                v46 = v43 & -0x10000 | v44 & 0xff00 | v8 + (int32_t)v42 + v43 & 255;
                v47 = v44 + g444;
                *(char *)(v48 + v16) = *(char *)v43;
                v48--;
                v42 = v47 < v44;
                v41 = v46;
            }
        }
        // 0x410ddb
        result2 = *v5 + 4;
        v49 = v8 - 0x10000;
        v10 = *v6 + 12;
        v12 = *v7 + (int32_t)g205;
    }
    // 0x410df4
    return result2;
}

// Address range: 0x410e20 - 0x410e37
int32_t function_410e20(void) {
    // 0x410e20
    function_410e50();
    g482 = __ms_p5_mp_test_fdiv();
    function_411a00();
    return __asm_fnclex();
}

// Address range: 0x410e40 - 0x410e41
int32_t function_410e40(void) {
    // 0x410e40
    int32_t result; // 0x410e40
    return result;
}

// Address range: 0x410e50 - 0x410e88
int32_t function_410e50(void) {
    // 0x410e50
    g503 = 0x411b10;
    g504 = 0x411b90;
    g505 = 0x411aa0;
    g506 = 0x411b70;
    g502 = 0x411f30;
    g507 = 0x411f30;
    return 0x411f30;
}

// Address range: 0x410e90 - 0x410ec0
int32_t function_410e90(void) {
    // 0x410e90
    if (g483 != 0) {
        // 0x410e99
        function_410e20();
    }
    // 0x410e9b
    function_410fb0(&g15, &g16);
    return function_410fb0(&g13, &g14);
}

// Address range: 0x410ec0 - 0x410ed2
int32_t function_410ec0(int32_t a1) {
    // 0x410ec0
    return function_410f00(a1);
}

// Address range: 0x410ee0 - 0x410ef2
int32_t function_410ee0(int32_t a1) {
    // 0x410ee0
    return function_410f00(a1);
}

// Address range: 0x410f00 - 0x410fa3
int32_t function_410f00(int32_t a1) {
    // 0x410f00
    int32_t v1; // bp-12, 0x410f00
    int32_t * v2 = &v1; // 0x410f0e
    if (g498 == 1) {
        int32_t * processHandle = GetCurrentProcess(); // 0x410f11
        int32_t v3 = (int32_t)processHandle; // bp-20, 0x410f17
        TerminateProcess(processHandle, (int32_t)&g1001);
        v2 = &v3;
    }
    int32_t v4 = (int32_t)v2;
    g497 = 1;
    int32_t v5 = *(int32_t *)(v4 + 24); // 0x410f2d
    g496 = v5;
    int32_t * v6; // 0x410f00
    int32_t * v7; // 0x410f00
    if (*(int32_t *)(v4 + 20) != 0) {
        // 0x410f1e
        v7 = (int32_t *)(v4 - 8);
        v6 = (int32_t *)(v4 - 4);
    } else {
        // 0x410f39
        if (g990 != 0) {
            int32_t v8 = g989 - 4; // 0x410f48
            if (v8 >= g990) {
                int32_t v9 = v8 - 4; // 0x410f5b
                int32_t v10 = v9; // 0x410f64
                while (v9 >= g990) {
                    // 0x410f53
                    v9 = v10 - 4;
                    v10 = v9;
                }
            }
        }
        int32_t * v11 = (int32_t *)(v4 - 4);
        *v11 = (int32_t)&g18;
        int32_t * v12 = (int32_t *)(v4 - 8);
        *v12 = (int32_t)&g17;
        function_410fb0(&g1001, &g1001);
        v7 = v12;
        v6 = v11;
    }
    // 0x410f78
    *v6 = (int32_t)&g20;
    *v7 = (int32_t)&g19;
    int32_t result = function_410fb0(&g1001, &g1001); // 0x410f82
    if (v5 != 0) {
        // 0x410f9f
        return result;
    }
    // 0x410f8e
    g498 = 1;
    *v6 = a1;
    ExitProcess((int32_t)&g1001);
    // UNREACHABLE
}

// Address range: 0x410fb0 - 0x410fd0
int32_t function_410fb0(int32_t * a1, int32_t * a2) {
    if (a2 <= a1) {
        // 0x410fcd
        int32_t result; // 0x410fb0
        return result;
    }
    int32_t v1 = (int32_t)a1;
    int32_t v2 = v1 + 4; // 0x410fc6
    while (v2 < (uint32_t)(int32_t)a2) {
        // 0x410fbe
        v1 = v2;
        v2 = v1 + 4;
    }
    // 0x410fcd
    return *(int32_t *)v1;
}

// Address range: 0x410fd0 - 0x411123
int32_t entry_point(void) {
    int32_t v1 = __readfsdword(0); // bp-20, 0x410fe5
    __writefsdword(0, (int32_t)&v1);
    uint32_t v2 = GetVersion(); // 0x410ff6
    int32_t v3 = g488; // 0x411003
    g491 = v3;
    g487 = v2 / 0x10000;
    int32_t v4 = v2 & 255; // 0x411019
    g490 = v4;
    g489 = 256 * v4 | v3;
    if (function_412c60() == 0) {
        // 0x41103a
        function_411170(28);
    }
    // 0x411044
    function_412a80(0);
    function_412a70();
    g988 = GetCommandLineA();
    int32_t v5 = function_412620(); // 0x411060
    g499 = (char *)v5;
    if (v5 == 0) {
        // 0x411077
        function_410ec0(-1);
        goto lab_0x411081;
    } else {
        // 0x41106e
        if (g988 != NULL) {
            goto lab_0x411081;
        } else {
            // 0x411077
            function_410ec0(-1);
            goto lab_0x411081;
        }
    }
  lab_0x411081:;
    // 0x411081
    int32_t v6; // bp-128, 0x410fd0
    int32_t v7 = &v6; // 0x410ff2
    function_4123a0();
    function_4122b0();
    function_410e90();
    int32_t v8 = (int32_t)g988; // 0x411090
    unsigned char v9 = *g988; // 0x411096
    int32_t v10; // 0x410fd0
    if (v9 == 34) {
        int32_t v11 = v8 + 1; // 0x4110a8
        char v12 = *(char *)v11; // 0x4110a9
        int32_t v13 = v11; // 0x4110ac
        if (v12 == 34) {
          lab_0x4110d4:
            // 0x4110d4
            v10 = v13 + 1;
        } else {
            char v14 = v12; // 0x4110ae
            int32_t v15 = v11; // 0x4110ae
            v10 = v15;
            while (v14 != 0) {
                // 0x4110b7
                *(int32_t *)(v7 - 4) = (int32_t)v14;
                v15 = v15 + 1 + (int32_t)(function_412250((int32_t)&g1001) != 0);
                v14 = *(char *)v15;
                v13 = v15;
                if (v14 == 34) {
                    goto lab_0x4110d4;
                }
                v10 = v15;
            }
        }
    } else {
        // 0x41109c
        v10 = v8;
        if (v9 >= 33) {
            int32_t v16 = v8 + 1; // 0x4110a0
            int32_t v17 = v16; // 0x4110a4
            v10 = v16;
            while (*(char *)v16 >= 33) {
                // 0x4110a0
                v16 = v17 + 1;
                v17 = v16;
                v10 = v16;
            }
        }
    }
    char v18 = *(char *)v10; // 0x4110d5
    char v19 = v18; // 0x4110d8
    int32_t v20 = v10; // 0x4110d8
    int32_t v21 = v10; // 0x4110d8
    if (v18 != 0) {
        v21 = v20;
        while (v19 < 33) {
            int32_t v22 = v20 + 1; // 0x4110df
            char v23 = *(char *)v22; // 0x4110e0
            v19 = v23;
            v20 = v22;
            v21 = v22;
            if (v23 == 0) {
                // break -> 0x4110e5
                break;
            }
            v21 = v20;
        }
    }
    // 0x4110e5
    int32_t v24; // bp-116, 0x410fd0
    *(int32_t *)(v7 - 4) = (int32_t)&v24;
    GetStartupInfoA(NULL);
    *(int32_t *)(v7 - 8) = 10;
    *(int32_t *)(v7 - 12) = v21;
    *(int32_t *)(v7 - 16) = 0;
    *(int32_t *)(v7 - 20) = 0;
    *(int32_t *)(v7 - 24) = (int32_t)GetModuleHandleA((char *)&g1001);
    *(int32_t *)(v7 - 28) = function_403140((int32_t)&g1001);
    function_410ec0((int32_t)&g1001);
    int32_t result = function_41114a((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001); // 0x411121
    return result;
}

// Address range: 0x411123 - 0x41113e
int32_t function_411123(void) {
    // 0x411123
    int32_t v1; // 0x411123
    int32_t * v2 = (int32_t *)(v1 - 20); // 0x411123
    int32_t v3 = *(int32_t *)*(int32_t *)*v2; // 0x411128
    *(int32_t *)(v1 - 32) = v3;
    return function_4120c0(v3, *v2);
}

// Address range: 0x41114a - 0x411164
int32_t function_41114a(int32_t a1, int32_t a2, int32_t a3) {
    // 0x41114a
    int32_t v1; // 0x41114a
    *(int32_t *)(v1 - 4) = -1;
    int32_t result = *(int32_t *)(v1 - 16); // 0x411154
    __writefsdword(0, result);
    return result;
}

// Address range: 0x411170 - 0x41119a
int32_t function_411170(int32_t a1) {
    // 0x411170
    if (g500 == 1) {
        // 0x411179
        function_412d80();
    }
    // 0x41117e
    function_412dc0(a1);
    return function_410ee0(255);
}

// Address range: 0x4111a0 - 0x4111b4
int32_t function_4111a0(int32_t a1) {
    // 0x4111a0
    return function_4111c0(a1, g536);
}

// Address range: 0x4111c0 - 0x41120a
int32_t function_4111c0(uint32_t a1, int32_t a2) {
    // 0x4111c0
    if (a1 >= 0xffffffe1) {
        // 0x4111cb
        return 0;
    }
    uint32_t v1 = a1 != 0 ? a1 : 1;
    int32_t v2; // bp-8, 0x4111c0
    int32_t * v3 = (int32_t *)((int32_t)&v2 - 4);
    int32_t v4 = 0; // 0x4111e5
    if (v1 < 0xffffffe1) {
        // 0x4111e7
        *v3 = v1;
        v4 = function_411210((int32_t)&g1001);
    }
    int32_t result = v4; // 0x4111f2
    while (a2 != 0 && v4 == 0) {
        // 0x4111f8
        *v3 = v1;
        int32_t v5 = function_412fc0((int32_t)&g1001); // 0x4111f9
        result = 0;
        if (v5 == 0) {
            // break -> 0x4111cb
            break;
        }
        v4 = 0;
        if (v1 < 0xffffffe1) {
            // 0x4111e7
            *v3 = v1;
            v4 = function_411210((int32_t)&g1001);
        }
        // 0x4111f0
        result = v4;
    }
    // 0x4111cb
    return result;
}

// Address range: 0x411210 - 0x411246
int32_t function_411210(int32_t a1) {
    uint32_t v1 = a1 + 15; // 0x411215
    uint32_t dwBytes = v1 & -16; // 0x411218
    if (dwBytes <= g542) {
        int32_t result = function_413350(v1 / 16); // 0x411229
        if (result != 0) {
            // 0x411244
            return result;
        }
    }
    // 0x411244
    return (int32_t)HeapAlloc((int32_t *)g984, 0, dwBytes);
}

// Address range: 0x411250 - 0x41129f
int32_t function_411250(int32_t lpMem) {
    if (lpMem == 0) {
        // 0x41129a
        int32_t result; // 0x411250
        return result;
    }
    // 0x41125c
    int32_t v1; // bp-4, 0x411250
    int32_t v2; // bp-8, 0x411250
    int32_t v3 = function_4132a0(lpMem, &v1, &v2); // 0x411267
    if (v3 != 0) {
        // 0x411273
        return function_413300(v1, v2, v3);
    }
    // 0x41129a
    return HeapFree((int32_t *)g984, 0, (int32_t *)lpMem);
}

// Address range: 0x4112a0 - 0x411310
int32_t function_4112a0(int32_t a1) {
    int32_t * v1 = (int32_t *)(a1 + 12); // 0x4112ab
    int32_t v2 = *v1; // 0x4112ab
    if ((v2 & 64) != 0 || (v2 & 131) == 0) {
        // 0x4112b2
        *v1 = 0;
        return -1;
    }
    int32_t result = function_4138b0(a1); // 0x4112c3
    function_413820(a1);
    if (function_413750(*(int32_t *)(a1 + 16)) < 0) {
        // 0x411304
        *v1 = 0;
        return -1;
    }
    int32_t * v3 = (int32_t *)(a1 + 28); // 0x4112ed
    int32_t v4 = *v3; // 0x4112ed
    if (v4 != 0) {
        // 0x4112f4
        function_411250(v4);
        *v3 = 0;
    }
    // 0x411304
    *v1 = 0;
    return result;
}

// Address range: 0x411310 - 0x411458
int32_t function_411310(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = a3 * a2; // 0x411321
    if (v1 == 0) {
        // 0x411332
        return 0;
    }
    // 0x411365
    int32_t v2; // bp-28, 0x411310
    int32_t v3 = &v2; // 0x41132d
    int32_t * v4 = (int32_t *)(a4 + 12);
    int32_t * v5 = (int32_t *)(a4 + 4);
    int32_t * v6 = (int32_t *)(v3 + 16);
    int32_t * v7 = (int32_t *)a4;
    int32_t * v8 = (int32_t *)(v3 + 24);
    int32_t * v9 = (int32_t *)(v3 - 4);
    int32_t v10 = v1;
    uint32_t v11; // 0x411310
    int32_t v12; // 0x411310
    while (true) {
      lab_0x411365:
        // 0x411365
        v11 = v10;
        if ((*v4 & 268) == 0) {
            goto lab_0x4113a2;
        } else {
            uint32_t v13 = *v5; // 0x41136e
            if (v13 == 0) {
                goto lab_0x4113a2;
            } else {
                uint32_t v14 = v11 < v13 ? v11 : v13;
                uint32_t v15 = v14 / 4; // 0x411381
                int32_t v16 = *v6; // 0x411384
                __asm_rep_movsd_memcpy((char *)v16, (char *)*v7, v15);
                bool v17; // 0x411310
                char * v18 = (char *)(v16 + v15 * (v17 ? -4 : 4)); // 0x411394
                __asm_rep_movsb_memcpy(v18, v18, v14 & 3);
                *v5 = *v5 - v14;
                *v7 = *v7 + v14;
                *v6 = *v6 + v14;
                v12 = v11 - v14;
                goto lab_0x411400;
            }
        }
    }
    // 0x411444
    return (*(int32_t *)(v3 + 20) - v11) / *(int32_t *)(v3 + 36);
  lab_0x4113a2:;
    uint32_t v19 = *v8; // 0x4113a2
    if (v11 < v19) {
        // 0x4113e0
        *v9 = a4;
        int32_t v20 = function_4139c0((int32_t)&g1001); // 0x4113e1
        if (v20 == -1) {
            return (*(int32_t *)(v3 + 20) - v11) / *(int32_t *)(v3 + 36);
        }
        int32_t v21 = *v6; // 0x4113ee
        *v6 = v21 + 1;
        *(char *)v21 = (char)v20;
        *v8 = *(int32_t *)(a4 + 24);
        v12 = v11 - 1;
    } else {
        int32_t v22 = v11; // 0x4113af
        if (v19 != 0) {
            // 0x4113b1
            v22 = v11 - v11 % v19;
        }
        // 0x4113bd
        *v9 = v22;
        *(int32_t *)(v3 - 8) = *v6;
        *(int32_t *)(v3 - 12) = *(int32_t *)(a4 + 16);
        int32_t v23 = function_413ab0((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001); // 0x4113c7
        switch (v23) {
            case 0: {
                // 0x411414
                *v4 = *v4 | 16;
                return (*(int32_t *)(v3 + 20) - v11) / *(int32_t *)(v3 + 36);
            }
            case -1: {
                // 0x41142c
                *v4 = *v4 | 32;
                return (*(int32_t *)(v3 + 20) - v11) / *(int32_t *)(v3 + 36);
            }
        }
        // 0x4113d8
        *v6 = *v6 + v23;
        v12 = v11 - v23;
    }
    goto lab_0x411400;
  lab_0x411400:
    // 0x411400
    v10 = v12;
    if (v10 == 0) {
        // 0x411408
        return *(int32_t *)(v3 + 40);
    }
    goto lab_0x411365;
}

// Address range: 0x411460 - 0x41147b
int32_t function_411460(int32_t a1, int32_t * a2) {
    // 0x411460
    return function_413d20(a1, *a2, *(int32_t *)((int32_t)a2 + 4), 0);
}

// Address range: 0x411480 - 0x4114a5
int32_t function_411480(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = function_413fe0(); // 0x411480
    if (v1 != 0) {
        // 0x41148c
        return function_413dd0(a1, a2, a3, v1);
    }
    // 0x411489
    return 0;
}

// Address range: 0x4114b0 - 0x4114c5
int32_t function_4114b0(int32_t a1, char * a2) {
    // 0x4114b0
    return function_411480(a1, (int32_t)a2, 64);
}

// Address range: 0x4114d0 - 0x411569
int32_t function_4114d0(int32_t a1, int32_t a2, uint32_t a3) {
    int32_t * v1 = (int32_t *)(a1 + 12); // 0x4114d7
    int32_t v2 = *v1; // 0x4114d7
    if ((v2 & 131) == 0) {
        // 0x411556
        g484 = 22;
        return -1;
    }
    if (a3 > 1 == (a3 != 2)) {
        // 0x411556
        g484 = 22;
        return -1;
    }
    // 0x4114f0
    *v1 = v2 & -17;
    int32_t v3 = a3; // 0x4114f9
    int32_t v4 = a2; // 0x4114f9
    if (a3 == 1) {
        // 0x4114fb
        v3 = 0;
        v4 = function_411570(a1) + a2;
    }
    // 0x411512
    function_4138b0(a1);
    int32_t v5 = *v1; // 0x41151b
    int32_t v6; // 0x411544
    if ((char)v5 <= -1) {
        // 0x411522
        *v1 = v5 & -4;
        // 0x41153e
        v6 = function_4143e0(*(int32_t *)(a1 + 16), v4, v3);
        return v6 == -1;
    }
    if ((v5 & 9) != 9) {
        // 0x41153e
        v6 = function_4143e0(*(int32_t *)(a1 + 16), v4, v3);
        return v6 == -1;
    }
    if ((v5 & 1024) == 0) {
        // 0x411537
        *(int32_t *)(a1 + 24) = 512;
    }
    // 0x41153e
    v6 = function_4143e0(*(int32_t *)(a1 + 16), v4, v3);
    return v6 == -1;
}

// Address range: 0x411570 - 0x41171f
int32_t function_411570(int32_t a1) {
    int32_t v1 = *(int32_t *)(a1 + 16); // 0x41157b
    int32_t * v2 = (int32_t *)(a1 + 4); // 0x41157e
    if (*v2 < 0) {
        // 0x411588
        *v2 = 0;
    }
    int32_t result2 = function_4143e0(v1, 0, 1); // 0x411598
    if (result2 < 0) {
        // 0x4115a6
        return -1;
    }
    int32_t * v3 = (int32_t *)(a1 + 12); // 0x4115b3
    int32_t v4 = *v3; // 0x4115b3
    if ((v4 & 264) == 0) {
        // 0x4115c1
        return result2 - *v2;
    }
    char v5 = v4; // 0x4115b6
    uint32_t v6 = *(int32_t *)a1; // 0x4115ce
    int32_t * v7 = (int32_t *)(a1 + 8); // 0x4115d0
    uint32_t v8 = *v7; // 0x4115d0
    int32_t v9 = v6 - v8; // 0x4115d5
    int32_t result; // 0x411570
    if ((v5 & 3) == 0) {
        // 0x411631
        result = v9;
        if (v5 > -1) {
            // 0x411638
            g484 = 22;
            return -1;
        }
    } else {
        int32_t v10 = *(int32_t *)((v1 >> 3 & -4) + (int32_t)&g985); // 0x411603
        result = v9;
        if (!((v6 <= v8 | *(char *)(v10 + (8 * v1 & 248 | 4)) > -1))) {
            int32_t v11 = v9 + (int32_t)(*(char *)v8 == 10);
            int32_t v12 = v8 + 1; // 0x41161e
            int32_t v13 = v12; // 0x411621
            int32_t v14 = v11; // 0x411621
            result = v11;
            while (v12 < v6) {
                // 0x411618
                v11 = v14 + (int32_t)(*(char *)v13 == 10);
                v12 = v13 + 1;
                v13 = v12;
                v14 = v11;
                result = v11;
            }
        }
    }
    // 0x411623
    if (result2 == 0) {
        // 0x4115a6
        return result;
    }
    // 0x41164f
    if ((v5 & 1) == 0) {
        // 0x411714
        return result2 + result;
    }
    int32_t v15 = *v2; // 0x41165a
    if (v15 == 0) {
        // 0x4115a6
        return result2;
    }
    int32_t v16 = v15 + v9; // 0x411676
    int32_t * v17 = (int32_t *)((v1 >> 3 & -4) + (int32_t)&g985); // 0x411695
    int32_t v18 = 8 * v1 & 248 | 4;
    if (*(char *)(*v17 + v18) > -1) {
        // 0x411714
        return result2 - v16 + result;
    }
    // 0x4116a2
    int32_t v19; // 0x411570
    int32_t v20; // 0x411570
    if (function_4143e0(v1, 0, 2) != result2) {
        // 0x4116d4
        function_4143e0(v1, result2, 0);
        if (v16 < 513) {
            // 0x4116ec
            v19 = 512;
            if ((*v3 & 1032) == 8) {
                goto lab_0x411700;
            } else {
                // 0x4116fd
                v19 = *(int32_t *)(a1 + 24);
                goto lab_0x411700;
            }
        } else {
            // 0x4116fd
            v19 = *(int32_t *)(a1 + 24);
            goto lab_0x411700;
        }
    } else {
        uint32_t v21 = *v7; // 0x4116b7
        uint32_t v22 = v21 + v16; // 0x4116ba
        int32_t v23 = v16; // 0x4116bf
        if (v16 != 0 && v22 >= v21) {
            int32_t v24 = v16 + (int32_t)(*(char *)v21 == 10);
            int32_t v25 = v21 + 1; // 0x4116c7
            int32_t v26 = v25; // 0x4116ca
            int32_t v27 = v24; // 0x4116ca
            v23 = v24;
            while (v22 > v25) {
                // 0x4116c1
                v24 = v27 + (int32_t)(*(char *)v26 == 10);
                v25 = v26 + 1;
                v26 = v25;
                v27 = v24;
                v23 = v24;
            }
        }
        // 0x4116cc
        v20 = v23;
        if ((*(char *)(a1 + 13) & 32) == 0) {
            // 0x411714
            return result2 - v23 + result;
        }
        return result2 - (v20 + 1) + result;
    }
    // 0x411714
    return result2 - (v20 + 1) + result;
  lab_0x411700:
    // 0x411700
    v20 = v19;
    if ((*(char *)(*v17 + v18) & 4) == 0) {
        // 0x411714
        return result2 - v19 + result;
    }
    return result2 - (v20 + 1) + result;
}

// Address range: 0x411720 - 0x4117a0
int32_t function_411720(int32_t result, int32_t a2) {
    char v1 = *(char *)a2; // 0x411727
    if (v1 == 0) {
        // 0x411754
        return result;
    }
    char v2 = *(char *)(a2 + 1); // 0x411731
    if (v2 == 0) {
        // 0x411787
        int32_t v3; // 0x411720
        return function_414526(v3);
    }
    // 0x411738
    int32_t v4; // 0x411720
    int32_t v5; // 0x411720
    while (true) {
      lab_0x411738:;
        char v6 = *(char *)result; // 0x41173e
        int32_t v7 = result + 1; // 0x411740
        v5 = v7;
        if (v6 == v1) {
            goto lab_0x41175a;
        } else {
            // 0x411745
            v4 = v7;
            if (v6 == 0) {
                // break -> 0x411754
                break;
            }
            goto lab_0x411749;
        }
    }
    // 0x411754
    return 0;
  lab_0x41175a:;
    int32_t v8 = v5;
    char v9 = *(char *)v8; // 0x41175a
    int32_t v10 = v8 + 1; // 0x41175c
    char v11 = v9; // 0x41175f
    int32_t v12 = v10; // 0x41175f
    int32_t v13 = v10; // 0x41175f
    if (v9 != v2) {
        goto lab_0x41174c;
    } else {
        int32_t v14 = a2;
        int32_t v15 = v14 + 2; // 0x411764
        char v16 = *(char *)v15; // 0x411764
        while (v16 != 0) {
            int32_t v17 = v13;
            if (*(char *)v17 != v16) {
                // break -> 0x411738
                break;
            }
            char v18 = *(char *)(v14 + 3); // 0x411774
            if (v18 == 0) {
                // 0x411793
                return v8 - 1;
            }
            // 0x41177b
            v13 = v17 + 2;
            if (*(char *)(v17 + 1) != v18) {
                // break -> 0x411738
                break;
            }
            v14 = v15;
            v15 = v14 + 2;
            v16 = *(char *)v15;
        }
        // 0x411793
        return v8 - 1;
        // 0x411738
        goto lab_0x411738;
    }
  lab_0x41174c:;
    int32_t v19 = v12;
    char v20 = v11;
    v5 = v19;
    if (v1 == v20) {
        goto lab_0x41175a;
    } else {
        // 0x411750
        v4 = v19;
        if (v20 == 0) {
            return 0;
        }
        goto lab_0x411749;
    }
  lab_0x411749:
    // 0x411749
    v11 = *(char *)v4;
    v12 = v4 + 1;
    goto lab_0x41174c;
}

// Address range: 0x4117a0 - 0x4117dd
int32_t function_4117a0(char * a1) {
    int32_t v1 = function_4145e0(&g549); // 0x4117a7
    int32_t result = function_4147c0(&g549); // 0x4117c0
    function_414680(v1, &g549);
    return result;
}

// Address range: 0x4117e0 - 0x411874
int32_t function_4117e0(int32_t a1, int32_t a2) {
    int32_t v1 = a2 * a1; // 0x4117e7
    int32_t v2 = v1; // 0x4117ef
    if (v1 < 0xffffffe1) {
        // 0x4117f1
        v2 = 16;
        if (v1 != 0) {
            // 0x4117f5
            v2 = v1 + 15 & -16;
        }
    }
    // 0x411802
    int32_t v3; // bp-12, 0x4117e0
    int32_t v4 = &v3;
    int32_t v5 = v4; // 0x41180d
    int32_t v6 = 0; // 0x41180d
    int32_t * v7; // 0x4117e0
    int32_t result; // 0x4117e0
    int32_t v8; // 0x41181d
    uint32_t v9; // 0x411831
    bool v10; // 0x4117e0
    int32_t * v11; // 0x41184a
    if (v2 < 0xffffffe1) {
        // 0x41180f
        v7 = (int32_t *)(v4 - 4);
        if (g542 >= v2) {
            // 0x411817
            *v7 = v2 / 16;
            v8 = function_413350((int32_t)&g1001);
            if (v8 != 0) {
                // 0x41183d
                v9 = v2 / 4;
                __asm_rep_stosd_memset((char *)v8, 0, v9);
                __asm_rep_stosb_memset((char *)(v8 + v9 * (v10 ? -4 : 4)), 0, v2 & 3);
                result = v8;
                return result;
            }
        }
        // 0x411841
        *v7 = v2;
        *(int32_t *)(v4 - 8) = 8;
        v5 = v4 - 12;
        *(int32_t *)v5 = g984;
        v11 = HeapAlloc(&g1001, (int32_t)&g1001, (int32_t)&g1001);
        v6 = (int32_t)v11;
    }
    // 0x41184e
    result = v6;
    while (v6 == 0 && g536 != 0) {
        // 0x41185b
        *(int32_t *)(v5 - 4) = v2;
        int32_t v12 = function_412fc0((int32_t)&g1001); // 0x41185c
        result = 0;
        if (v12 == 0) {
            // break -> 0x411868
            break;
        }
        v4 = v5;
        v5 = v4;
        v6 = 0;
        if (v2 < 0xffffffe1) {
            // 0x41180f
            v7 = (int32_t *)(v4 - 4);
            if (g542 >= v2) {
                // 0x411817
                *v7 = v2 / 16;
                v8 = function_413350((int32_t)&g1001);
                if (v8 != 0) {
                    // 0x41183d
                    v9 = v2 / 4;
                    __asm_rep_stosd_memset((char *)v8, 0, v9);
                    __asm_rep_stosb_memset((char *)(v8 + v9 * (v10 ? -4 : 4)), 0, v2 & 3);
                    result = v8;
                    return result;
                }
            }
            // 0x411841
            *v7 = v2;
            *(int32_t *)(v4 - 8) = 8;
            v5 = v4 - 12;
            *(int32_t *)v5 = g984;
            v11 = HeapAlloc(&g1001, (int32_t)&g1001, (int32_t)&g1001);
            v6 = (int32_t)v11;
        }
        // 0x41184e
        result = v6;
    }
  lab_0x411868:
    // 0x411868
    return result;
}

// Address range: 0x411880 - 0x4119a3
int32_t function_411880(int32_t result, int32_t a2, int32_t a3) {
    if (a3 == 0) {
        // 0x411934
        return result;
    }
    int32_t v1 = result; // 0x411899
    int32_t v2; // 0x411880
    int32_t v3; // 0x411880
    if ((result & 3) == 0) {
      lab_0x4118aa:;
        int32_t v4 = v1; // 0x411880
        while (true) {
            int32_t v5 = v4;
            uint32_t v6 = *(int32_t *)v5; // 0x4118aa
            int32_t v7 = v5 + 4; // 0x4118b8
            if (((v6 ^ -0x7efeff00 ^ v6 + 0x7efefeff) & -0x7efeff00) != 0) {
                // 0x4118c2
                v3 = v5;
                if ((char)v6 == 0) {
                    // break -> 0x4118eb
                    break;
                }
                if ((v6 & 0xff00) == 0) {
                    // 0x4118e3
                    v3 = v5 + 1;
                    goto lab_0x4118eb;
                }
                if ((v6 & 0xff0000) == 0) {
                    // 0x4118de
                    v3 = v5 + 2;
                    goto lab_0x4118eb;
                }
                // 0x4118d4
                v2 = v7;
                if (v6 < 0x1000000) {
                    goto lab_0x4118db;
                }
            }
            // 0x4118aa
            v4 = v7;
        }
    } else {
        int32_t v8 = result;
        int32_t v9 = v8 + 1; // 0x41189d
        v2 = v9;
        while (*(char *)v8 != 0) {
            // 0x4118a2
            v1 = v9;
            if ((v9 & 3) == 0) {
                goto lab_0x4118aa;
            }
            v8 = v9;
            v9 = v8 + 1;
            v2 = v9;
        }
      lab_0x4118db:
        // 0x4118db
        v3 = v2 - 1;
    }
    goto lab_0x4118eb;
  lab_0x4118eb:;
    int32_t v10 = a3; // 0x4118f5
    int32_t v11 = a2; // 0x4118f5
    int32_t v12 = v3; // 0x4118f5
    int32_t v13; // 0x411880
    int32_t v14; // 0x411880
    char v15; // 0x411880
    int32_t v16; // 0x411880
    int32_t v17; // 0x411880
    int32_t v18; // 0x411880
    int32_t v19; // 0x411880
    int32_t v20; // 0x411880
    int32_t v21; // 0x411880
    if ((a2 & 3) != 0) {
        char v22 = *(char *)v11; // 0x411900
        while (v22 != 0) {
            // 0x411907
            *(char *)v12 = v22;
            int32_t v23 = v12 + 1; // 0x411909
            int32_t v24 = v10 - 1; // 0x41190a
            v15 = 0;
            v18 = v23;
            if (v24 == 0) {
                goto lab_0x411930;
            }
            int32_t v25 = v11 + 1; // 0x411902
            v10 = v24;
            v11 = v25;
            v12 = v23;
            if ((v25 & 3) == 0) {
                // 0x411915
                v16 = v24;
                v14 = v24;
                v21 = v25;
                v19 = v23;
                v13 = v24;
                v20 = v25;
                v17 = v23;
                if (v24 >= 4) {
                    goto lab_0x41194c;
                } else {
                    goto lab_0x41191c;
                }
            }
            v22 = *(char *)v11;
        }
        // 0x41193a
        *(char *)v12 = 0;
        return result;
    }
    // 0x4118f7
    v16 = a3;
    v14 = a3;
    v21 = a2;
    v19 = v3;
    v13 = a3;
    v20 = a2;
    v17 = v3;
    if (a3 >= 4) {
        goto lab_0x41194c;
    } else {
        goto lab_0x41191c;
    }
  lab_0x41194c:;
    uint32_t v26 = *(int32_t *)v21;
    if (((v26 ^ -0x7efeff00 ^ v26 + 0x7efefeff) & -0x7efeff00) != 0) {
        // 0x411966
        if ((char)v26 == 0) {
            // 0x41193a
            *(char *)v19 = 0;
            return result;
        }
        if ((v26 & 0xff00) == 0) {
            // 0x411998
            *(int16_t *)v19 = (int16_t)v26;
            return result;
        }
        if ((v26 & 0xff0000) == 0) {
            // 0x411988
            *(int16_t *)v19 = (int16_t)v26;
            *(char *)(v19 + 2) = 0;
            return result;
        }
        if (v26 < 0x1000000) {
            // 0x41197e
            *(int32_t *)v19 = v26;
            return result;
        }
    }
    int32_t v27 = v21 + 4; // 0x41195c
    *(int32_t *)v19 = v26;
    int32_t v28 = v19 + 4; // 0x411946
    int32_t v29 = v16 / 4 - 1; // 0x411949
    v13 = v14;
    v20 = v27;
    v17 = v28;
    int32_t v30 = v29; // 0x41194a
    int32_t v31 = v27; // 0x41194a
    while (v29 != 0) {
        int32_t v32 = v28;
        v26 = *(int32_t *)v31;
        if (((v26 ^ -0x7efeff00 ^ v26 + 0x7efefeff) & -0x7efeff00) != 0) {
            int32_t v33 = v32; // 0x411968
            if ((char)v26 == 0) {
                // 0x41193a
                *(char *)v33 = 0;
                return result;
            }
            if ((v26 & 0xff00) == 0) {
                // 0x411998
                *(int16_t *)v32 = (int16_t)v26;
                return result;
            }
            if ((v26 & 0xff0000) == 0) {
                // 0x411988
                *(int16_t *)v32 = (int16_t)v26;
                *(char *)(v32 + 2) = 0;
                return result;
            }
            if (v26 < 0x1000000) {
                // 0x41197e
                *(int32_t *)v32 = v26;
                return result;
            }
        }
        // 0x411944
        v27 = v31 + 4;
        *(int32_t *)v32 = v26;
        v28 = v32 + 4;
        v29 = v30 - 1;
        v13 = v14;
        v20 = v27;
        v17 = v28;
        v30 = v29;
        v31 = v27;
    }
    goto lab_0x41191c;
  lab_0x41191c:;
    int32_t v34 = v13 & 3; // 0x41191e
    int32_t v35 = v34; // 0x411921
    int32_t v36 = v20; // 0x411921
    int32_t v37 = v17; // 0x411921
    v15 = 0;
    v18 = v17;
    if (v34 == 0) {
      lab_0x411930:
        // 0x411930
        *(char *)v18 = v15;
        // 0x411934
        return result;
    }
    char v38 = *(char *)v36; // 0x411923
    *(char *)v37 = v38;
    while (v38 != 0) {
        int32_t v39 = v37 + 1; // 0x411928
        int32_t v40 = v35 - 1; // 0x41192d
        v35 = v40;
        v36++;
        v37 = v39;
        if (v40 == 0) {
            // 0x411930
            v15 = v40;
            v18 = v39;
            goto lab_0x411930;
        }
        v38 = *(char *)v36;
        *(char *)v37 = v38;
    }
    // 0x411934
    return result;
}

// Address range: 0x4119b0 - 0x4119ba
int32_t function_4119b0(void) {
    int32_t result = function_415504((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001); // 0x4119b5
    return result;
}

// Address range: 0x4119ba - 0x4119c4
int32_t function_4119ba(void) {
    // 0x4119ba
    return function_415675((int32_t)&g1001, (int32_t)&g1001);
}

// Address range: 0x4119c4 - 0x4119cb
int32_t function_4119c4(void) {
    // 0x4119c4
    int32_t result; // 0x4119c4
    return result;
}

// Address range: 0x4119cb - 0x4119d2
int32_t function_4119cb(void) {
    // 0x4119cb
    int32_t result; // 0x4119cb
    return result;
}

// Address range: 0x4119d2 - 0x4119dc
int32_t function_4119d2(void) {
    // 0x4119d2
    return __cintrindisp2();
}

// Address range: 0x4119dc - 0x4119e6
int32_t function_4119dc(void) {
    // 0x4119dc
    return __cintrindisp1();
}

// Address range: 0x4119e6 - 0x4119ed
int32_t function_4119e6(void) {
    // 0x4119e6
    int32_t result; // 0x4119e6
    return result;
}

// Address range: 0x4119ed - 0x4119f4
int32_t function_4119ed(void) {
    // 0x4119ed
    int32_t result; // 0x4119ed
    return result;
}

// Address range: 0x411a00 - 0x411a13
int32_t function_411a00(void) {
    // 0x411a00
    return function_415730(0x10000, 0x30000);
}

// Address range: 0x411a20 - 0x411a6f
int32_t __ms_p5_test_fdiv(void) {
    // 0x411a20
    int32_t v1; // 0x411a20
    return (v1 & 256) != 0;
}

// Address range: 0x411aa0 - 0x411b05
int32_t function_411aa0(int32_t a1) {
    char * v1 = (char *)a1;
    char * v2 = v1; // 0x411ab5
    int32_t v3 = 101; // 0x411ab5
    int32_t v4 = a1; // 0x411ab5
    if (function_415940((int32_t)*v1) != 101) {
        // 0x411abc
        int32_t v5; // bp-8, 0x411aa0
        int32_t v6 = &v5; // 0x411aaf
        int32_t v7 = a1; // 0x411abc
        v7++;
        char * v8 = (char *)v7;
        int32_t v9 = (int32_t)*v8;
        int32_t v10; // 0x411aa0
        if (g556 > 1) {
            // 0x411ac5
            *(int32_t *)(v6 - 4) = 4;
            *(int32_t *)(v6 - 8) = v9;
            v10 = function_4158a0((int32_t)&g1001, (int32_t)&g1001);
        } else {
            // 0x411ad5
            v10 = (int32_t)(*(int16_t *)(*(int32_t *)0x43bb90 + 2 * v9) & 4);
        }
        // 0x411ae7
        v2 = v8;
        v3 = v10;
        v4 = v7;
        while (v10 != 0) {
            // 0x411abc
            v7++;
            v8 = (char *)v7;
            v9 = (int32_t)*v8;
            if (g556 > 1) {
                // 0x411ac5
                *(int32_t *)(v6 - 4) = 4;
                *(int32_t *)(v6 - 8) = v9;
                v10 = function_4158a0((int32_t)&g1001, (int32_t)&g1001);
            } else {
                // 0x411ad5
                v10 = (int32_t)(*(int16_t *)(*(int32_t *)0x43bb90 + 2 * v9) & 4);
            }
            // 0x411ae7
            v2 = v8;
            v3 = v10;
            v4 = v7;
        }
    }
    // 0x411aeb
    *v2 = g557;
    int32_t result = v3 & -256; // 0x411af4
    int32_t v11 = v4; // 0x411af4
    unsigned char v12 = *v2;
    v11++;
    char * v13 = (char *)v11; // 0x411af5
    result = result & -256 | (int32_t)v12;
    *v13 = v12;
    while (v12 != 0) {
        // 0x411af5
        v12 = *v13;
        v11++;
        v13 = (char *)v11;
        result = result & -256 | (int32_t)v12;
        *v13 = v12;
    }
    // 0x411b02
    return result;
}

// Address range: 0x411b10 - 0x411b69
int32_t function_411b10(int32_t result) {
    char v1 = *(char *)result; // 0x411b14
    if (v1 == 0) {
        // 0x411b68
        return result;
    }
    char v2 = v1; // 0x411b23
    int32_t result2 = result; // 0x411b22
    char v3 = g557; // 0x411b20
    while (v2 != g557) {
        // 0x411b22
        result2++;
        v2 = *(char *)result2;
        v3 = v2;
        if (v2 == 0) {
            // break -> 0x411b28
            break;
        }
        v3 = g557;
    }
    // 0x411b28
    if (v3 == 0) {
        // 0x411b68
        return result2;
    }
    int32_t v4 = result2 + 1; // 0x411b2a
    char v5 = *(char *)v4; // 0x411b30
    char v6 = v5; // 0x411b33
    int32_t v7 = v4; // 0x411b33
    int32_t v8 = v4; // 0x411b33
    if (v5 != 0) {
        while (true) {
          lab_0x411b35:
            // 0x411b35
            v8 = v7;
            switch (v6) {
                case 101: {
                    goto lab_0x411b45;
                }
                case 69: {
                    goto lab_0x411b45;
                }
                default: {
                    // 0x411b3f
                    v7++;
                    v6 = *(char *)v7;
                    if (v6 == 0) {
                        // break -> 0x411b45
                        break;
                    }
                    goto lab_0x411b35;
                }
            }
        }
    }
  lab_0x411b45:;
    int32_t v9 = v8 - 1; // 0x411b47
    char v10 = *(char *)v9; // 0x411b48
    char v11 = v10; // 0x411b4b
    int32_t v12 = v9; // 0x411b4b
    if (v10 == 48) {
        int32_t v13 = v9 - 1; // 0x411b4d
        char v14 = *(char *)v13; // 0x411b4e
        int32_t v15 = v13; // 0x411b51
        v11 = v14;
        v12 = v13;
        while (v14 == 48) {
            // 0x411b4d
            v13 = v15 - 1;
            v14 = *(char *)v13;
            v15 = v13;
            v11 = v14;
            v12 = v13;
        }
    }
    char v16 = *(char *)v8; // 0x411b5e
    int32_t v17 = v12 + (int32_t)(v11 == g557) + 1; // 0x411b60
    int32_t result3 = v8 + 1; // 0x411b61
    *(char *)v17 = v16;
    int32_t v18 = result3; // 0x411b66
    int32_t v19 = v17; // 0x411b66
    while (v16 != 0) {
        // 0x411b5e
        v16 = *(char *)v18;
        v17 = v19 + 1;
        result3 = v18 + 1;
        *(char *)v17 = v16;
        v18 = result3;
        v19 = v17;
    }
    // 0x411b68
    return result3;
}

// Address range: 0x411b70 - 0x411b87
int32_t function_411b70(int32_t a1) {
    // 0x411b70
    int32_t v1; // 0x411b70
    return (v1 & 0x4100) != 0;
}

// Address range: 0x411b90 - 0x411bdc
int32_t function_411b90(int32_t a1, int32_t a2, int32_t a3) {
    if (a1 == 0) {
        // 0x411bc1
        int32_t v1; // bp-12, 0x411b90
        int32_t result = function_415f10(&v1, a3); // 0x411bc6
        *(int32_t *)a2 = v1;
        return result;
    }
    // 0x411b9f
    int32_t result2; // bp-8, 0x411b90
    function_415ed0(&result2, a3);
    *(int32_t *)a2 = result2;
    return result2;
}

// Address range: 0x411be0 - 0x411d16
int32_t function_411be0(int32_t a1, int32_t result, int32_t a3, int32_t a4) {
    // 0x411be0
    int32_t * v1; // 0x411be0
    int32_t v2; // 0x411be0
    if (g508 == 0) {
        int32_t v3 = function_415fe0(); // 0x411c2b
        int32_t * v4 = (int32_t *)v3;
        int32_t v5 = *v4; // 0x411c3e
        function_415f50((int32_t)(a3 >= 0 == (a3 != 0)) + result + (int32_t)(v5 == 45), a3 + 1, v3);
        v1 = v4;
        v2 = v3;
    } else {
        int32_t * v6 = (int32_t *)g866;
        function_411fa0((int32_t)(*v6 == 45) + result, (int32_t)(a3 >= 0 == (a3 != 0)));
        v1 = v6;
        v2 = g866;
    }
    int32_t v7 = result; // 0x411c6b
    if (*v1 == 45) {
        // 0x411c6d
        *(char *)result = 45;
        v7 = result + 1;
    }
    int32_t v8 = v7; // 0x411c76
    if (a3 >= 1) {
        // 0x411c78
        v8 = v7 + 1;
        char * v9 = (char *)v8; // 0x411c7b
        *(char *)v7 = *v9;
        *v9 = g557;
    }
    int32_t v10 = v8 + a3;
    int32_t v11 = v10 + (int32_t)(g508 == 0); // 0x411c96
    *(int32_t *)v11 = 0x30302b65;
    *(int16_t *)(v11 + 4) = 48;
    int32_t v12 = g508 == 0 ? -((((int32_t)"e+000" & -0x10000 | 48) - (((int32_t)"e+000" & -0x10000 | 48) + 1))) : 0; // 0x411cb6
    int32_t v13 = v12 + v10; // 0x411cba
    if (a4 != 0) {
        // 0x411cc3
        *(char *)v13 = 69;
    }
    // 0x411cc6
    if (*(char *)*(int32_t *)(v2 + 12) == 48) {
        // 0x411d0f
        return result;
    }
    int32_t v14 = *(int32_t *)(v2 + 4); // 0x411ccf
    int32_t v15 = v14 - 1; // 0x411cd2
    int32_t v16 = v15; // 0x411cd3
    if (v15 < 0) {
        // 0x411cd5
        *(char *)(v13 + 1) = 45;
        v16 = 1 - v14;
    }
    uint32_t v17 = v16;
    int32_t v18 = v17; // 0x411cde
    if (v17 >= 100) {
        uint64_t v19 = 0x100000000 * (int64_t)(v17 / 0x80000000) | (int64_t)v17; // 0x411ce8
        char * v20 = (char *)(v13 + 2); // 0x411cea
        *v20 = *v20 + (char)(v19 / 100);
        v18 = v19 % 100;
    }
    uint32_t v21 = v18;
    int32_t v22 = v21; // 0x411cf7
    if (v21 >= 10) {
        uint64_t v23 = 0x100000000 * (int64_t)(v21 / 0x80000000) | (int64_t)v21; // 0x411d01
        char * v24 = (char *)(v13 + 3); // 0x411d03
        *v24 = *v24 + (char)(v23 / 10);
        v22 = v23 % 10;
    }
    char * v25 = (char *)(v13 + 4); // 0x411d0c
    *v25 = *v25 + (char)v22;
    // 0x411d0f
    return result;
}

// Address range: 0x411d20 - 0x411e1b
int32_t function_411d20(int32_t a1, int32_t result, int32_t a3) {
    // 0x411d20
    int32_t * v1; // 0x411d20
    int32_t v2; // 0x411d20
    if (g508 == 0) {
        int32_t v3 = function_415fe0(); // 0x411d6b
        int32_t * v4 = (int32_t *)v3;
        function_415f50((int32_t)(*v4 == 45) + result, *(int32_t *)(v3 + 4) + a3, v3);
        v1 = v4;
        v2 = v3;
    } else {
        int32_t * v5 = (int32_t *)g866;
        v1 = v5;
        v2 = g866;
        if (g509 == a3) {
            int32_t v6 = g509 + result + (int32_t)(*v5 == 45); // 0x411d51
            *(char *)v6 = 48;
            *(char *)(v6 + 1) = 0;
            v1 = v5;
            v2 = g866;
        }
    }
    int32_t v7 = result; // 0x411da0
    if (*v1 == 45) {
        // 0x411da2
        *(char *)result = 45;
        v7 = result + 1;
    }
    int32_t * v8 = (int32_t *)(v2 + 4); // 0x411da8
    int32_t v9 = *v8; // 0x411da8
    int32_t v10 = v9; // 0x411dad
    if (v9 >= 0 != v9 != 0) {
        // 0x411daf
        function_411fa0(v7, 1);
        *(char *)v7 = 48;
        v10 = 1;
    }
    if (a3 < 1) {
        // 0x411e14
        return result;
    }
    int32_t v11 = v10 + v7;
    function_411fa0(v11, 1);
    *(char *)v11 = g557;
    int32_t v12 = *v8; // 0x411ddb
    if (v12 < 0) {
        int32_t v13 = v11 + 1; // 0x411dca
        int32_t v14 = -v12;
        uint32_t v15 = v14 < a3 | g508 != 0 ? v14 : a3;
        function_411fa0(v13, v15);
        uint32_t v16 = v15 / 4; // 0x411e08
        __asm_rep_stosd_memset((char *)v13, 0x30303030, v16);
        bool v17; // 0x411d20
        __asm_rep_stosb_memset((char *)(v16 * (v17 ? -4 : 4) + v13), 48, v15 & 3);
    }
    // 0x411e14
    return result;
}

// Address range: 0x411e20 - 0x411ed0
int32_t function_411e20(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    int32_t v1 = function_415fe0(); // 0x411e30
    g866 = v1;
    g509 = *(int32_t *)(v1 + 4) - 1;
    int32_t v2 = (int32_t)(*(int32_t *)v1 == 45) + a2; // 0x411e62
    function_415f50(v2, a3, v1);
    int32_t * v3 = (int32_t *)(g866 + 4); // 0x411e74
    int32_t v4 = *v3 - 1; // 0x411e7a
    int32_t v5 = g509; // 0x411e7b
    int32_t v6 = v4 - v5; // 0x411e7b
    *(char *)&g510 = (char)(v6 < 0 == ((v6 ^ v4) & (v4 ^ v5)) < 0 == (v6 != 0));
    int32_t v7 = *v3 - 1; // 0x411e8c
    g509 = v7;
    if (v7 > -5 != v7 < a3) {
        // 0x411ebb
        return function_411ed0(a1, a2, a3, a4);
    }
    // 0x411e9b
    if (v6 < 0 == ((v6 ^ v4) & (v4 ^ v5)) < 0 != v6 != 0) {
        // 0x411eab
        return function_411f00(a1, a2, a3);
    }
    int32_t v8 = v2; // 0x411e9d
    while (*(char *)v8 != 0) {
        // 0x411e9f
        v8++;
    }
    // 0x411ea7
    *(char *)(v8 - 1) = 0;
    // 0x411eab
    return function_411f00(a1, a2, a3);
}

// Address range: 0x411ed0 - 0x411efb
int32_t function_411ed0(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x411ed0
    g508 = 1;
    int32_t result = function_411be0(a1, a2, a3, a4); // 0x411eeb
    g508 = 0;
    return result;
}

// Address range: 0x411f00 - 0x411f26
int32_t function_411f00(int32_t a1, int32_t a2, int32_t a3) {
    // 0x411f00
    g508 = 1;
    int32_t result = function_411d20(a1, a2, a3); // 0x411f16
    g508 = 0;
    return result;
}

// Address range: 0x411f30 - 0x411f95
int32_t function_411f30(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5) {
    if ((a3 || 32) == 101) {
        // 0x411f78
        return function_411be0(a1, a2, a4, a5);
    }
    if (a3 != 102) {
        // 0x411f5b
        return function_411e20(a1, a2, a4, a5);
    }
    // 0x411f43
    return function_411d20(a1, a2, a4);
}

// Address range: 0x411fa0 - 0x411fcb
int32_t function_411fa0(int32_t a1, int32_t a2) {
    // 0x411fa0
    if (a2 == 0) {
        // 0x411fc8
        int32_t result; // 0x411fa0
        return result;
    }
    int32_t v1 = -1; // 0x411fb7
    int32_t v2 = a1; // 0x411fa0
    int32_t v3 = 0; // 0x411fb7
    while (v1 != 0) {
        int32_t v4 = v2;
        v1--;
        bool v5; // 0x411fa0
        v2 = v4 + (v5 ? -1 : 1);
        v3 = v1;
        if (*(char *)v4 == 0) {
            // break -> 
            break;
        }
        v3 = 0;
    }
    // 0x411fc8
    return function_416110(a2 + a1, a1, -1 - v3);
}

// Address range: 0x412099 - 0x4120a2
int32_t function_412099(void) {
    // 0x412099
    int32_t result; // 0x412099
    return result;
}

// Address range: 0x4120c0 - 0x41221f
int32_t function_4120c0(int32_t a1, int32_t ExceptionInfo) {
    int32_t v1 = function_412220(a1); // 0x4120c7
    if (v1 == 0) {
        // 0x412211
        return UnhandledExceptionFilter((struct _EXCEPTION_POINTERS *)ExceptionInfo);
    }
    int32_t * v2 = (int32_t *)(v1 + 8); // 0x4120d7
    int32_t v3 = *v2; // 0x4120d7
    if (v3 == 0) {
        // 0x412211
        return UnhandledExceptionFilter((struct _EXCEPTION_POINTERS *)ExceptionInfo);
    }
    if (v3 == 5) {
        // 0x4120e7
        *v2 = 0;
        return 1;
    }
    if (v3 == 1) {
        // 0x4120fb
        return -1;
    }
    int32_t v4 = g517; // 0x412103
    g517 = ExceptionInfo;
    if (*(int32_t *)(v1 + 4) != 8) {
        // 0x4121f3
        *v2 = 0;
        // 0x412203
        g517 = v4;
        return -1;
    }
    int32_t v5 = g513;
    if (v5 + g514 > v5) {
        int32_t v6 = g514; // 0x412141
        int32_t v7 = 12 * v5 + (int32_t)&g512; // 0x412141
        *(int32_t *)v7 = 0;
        v6--;
        v7 += 12;
        while (v6 != 0) {
            // 0x412147
            *(int32_t *)v7 = 0;
            v6--;
            v7 += 12;
        }
    }
    struct _EXCEPTION_POINTERS * v8 = g516;
    int32_t v9 = *(int32_t *)v1; // 0x412159
    if (v9 == -0x3fffff72) {
        // 0x412162
        g516 = (struct _EXCEPTION_POINTERS *)131;
        // 0x4121de
        *(int32_t *)&g516 = (int32_t)v8;
        // 0x412203
        g517 = v4;
        return -1;
    }
    if (v9 == -0x3fffff70) {
        // 0x412175
        g516 = (struct _EXCEPTION_POINTERS *)129;
        // 0x4121de
        *(int32_t *)&g516 = (int32_t)v8;
        // 0x412203
        g517 = v4;
        return -1;
    }
    if (v9 == -0x3fffff6f) {
        // 0x412188
        g516 = (struct _EXCEPTION_POINTERS *)132;
        // 0x4121de
        *(int32_t *)&g516 = (int32_t)v8;
        // 0x412203
        g517 = v4;
        return -1;
    }
    if (v9 == -0x3fffff6d) {
        // 0x41219b
        g516 = (struct _EXCEPTION_POINTERS *)133;
        // 0x4121de
        *(int32_t *)&g516 = (int32_t)v8;
        // 0x412203
        g517 = v4;
        return -1;
    }
    if (v9 == -0x3fffff73) {
        // 0x4121ae
        g516 = (struct _EXCEPTION_POINTERS *)130;
        // 0x4121de
        *(int32_t *)&g516 = (int32_t)v8;
        // 0x412203
        g517 = v4;
        return -1;
    }
    if (v9 == -0x3fffff71) {
        // 0x4121c1
        g516 = (struct _EXCEPTION_POINTERS *)134;
        // 0x4121de
        *(int32_t *)&g516 = (int32_t)v8;
        // 0x412203
        g517 = v4;
        return -1;
    }
    if (v9 == -0x3fffff6e) {
        // 0x4121d4
        g516 = (struct _EXCEPTION_POINTERS *)138;
    }
    // 0x4121de
    *(int32_t *)&g516 = (int32_t)v8;
    // 0x412203
    g517 = v4;
    return -1;
}

// Address range: 0x412220 - 0x41224f
int32_t function_412220(int32_t a1) {
    int32_t v1 = &g511; // 0x412225
    int32_t v2 = a1; // 0x41222b
    while (*(int32_t *)v1 != a1) {
        // 0x41222d
        v1 += 12;
        if (12 * g515 + (int32_t)&g511 <= v1) {
            // 0x41222d
            v2 = *(int32_t *)v1;
            return v2 == a1 ? v1 : 0;
        }
        v2 = a1;
    }
  lab_0x412243:
    // 0x412243
    return v2 == a1 ? v1 : 0;
}

// Address range: 0x412250 - 0x412262
int32_t function_412250(int32_t a1) {
    // 0x412250
    return function_412270(a1, 0, 4);
}

// Address range: 0x412270 - 0x4122aa
int32_t function_412270(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = a1 & 255; // 0x412274
    if (((int32_t)*(char *)(v1 + (int32_t)&g520) & a3) != 0) {
        // 0x4122a1
        return 1;
    }
    // 0x412284
    if (a2 == 0) {
        // 0x4122a1
        return 0;
    }
    uint16_t v2 = *(int16_t *)(2 * v1 + (int32_t)&g559); // 0x412293
    if (((int32_t)v2 & a2) == 0) {
        // 0x4122a1
        return 0;
    }
    // 0x4122a1
    return 1;
}

// Address range: 0x4122b0 - 0x412395
int32_t function_4122b0(void) {
    char * v1 = g499; // 0x4122b3
    char v2 = *v1; // 0x4122bf
    int32_t v3 = 4; // 0x4122c2
    bool v4; // 0x4122b0
    if (v2 != 0) {
        int32_t v5 = (int32_t)v1; // 0x4122d7
        int32_t v6 = v2 != 61;
        int32_t v7 = v5; // 0x4122d3
        int32_t v8 = -1;
        int32_t v9 = 0; // 0x4122d3
        int32_t v10; // 0x4122b0
        int32_t v11; // 0x4122d3
        while (v8 != 0) {
            v10 = v7;
            v11 = v8 - 1;
            v7 = v10 + (v4 ? -1 : 1);
            v9 = v11;
            if (*(char *)v10 == 0) {
                // break -> 
                break;
            }
            v8 = v11;
            v9 = 0;
        }
        v5 += -1 - v9;
        char v12 = *(char *)v5; // 0x4122d9
        int32_t v13 = v6; // 0x4122dc
        while (v12 != 0) {
            // 0x4122c4
            v6 = v13 + (int32_t)(v12 != 61);
            v7 = v5;
            v8 = -1;
            v9 = 0;
            while (v8 != 0) {
                v10 = v7;
                v11 = v8 - 1;
                v7 = v10 + (v4 ? -1 : 1);
                v9 = v11;
                if (*(char *)v10 == 0) {
                    // break -> 
                    break;
                }
                v8 = v11;
                v9 = 0;
            }
            v5 += -1 - v9;
            v12 = *(char *)v5;
            v13 = v6;
        }
        // 0x4122de
        v3 = 4 * v6 + 4;
    }
    int32_t v14 = function_4111a0(v3); // 0x4122e6
    g494 = v14;
    if (v14 == 0) {
        // 0x4122f9
        function_411170(9);
    }
    // 0x412303
    int32_t v15; // bp-20, 0x4122b0
    int32_t v16 = &v15; // 0x4122f0
    char * v17 = g499; // 0x412303
    int32_t * v18; // 0x4122b0
    char * v19; // 0x4122b0
    int32_t v20; // 0x4122b0
    if (*v17 == 0) {
        // 0x412303
        v18 = (int32_t *)(v16 - 4);
        v19 = v17;
        v20 = v14;
    } else {
        int32_t v21 = v4 ? -1 : 1;
        int32_t * v22 = (int32_t *)(v16 + 16); // 0x41231e
        int32_t * v23 = (int32_t *)(v16 - 4);
        int32_t v24 = (int32_t)v17;
        int32_t v25 = v24; // 0x41231a
        int32_t v26 = -1;
        int32_t v27 = 0; // 0x41231a
        int32_t v28; // 0x4122b0
        int32_t v29; // 0x41231a
        while (v26 != 0) {
            v28 = v25;
            v29 = v26 - 1;
            v25 = v28 + v21;
            v27 = v29;
            if (*(char *)v28 == 0) {
                // break -> 
                break;
            }
            v26 = v29;
            v27 = 0;
        }
        int32_t v30 = -1 - v27;
        *v22 = v30;
        int32_t v31 = v30; // 0x412326
        int32_t v32 = v14; // 0x412326
        int32_t v33; // 0x4122b0
        int32_t v34; // 0x4122b0
        int32_t v35; // 0x4122b0
        int32_t v36; // 0x4122b0
        int32_t v37; // 0x412329
        int32_t * v38; // 0x412331
        uint32_t v39; // 0x4122b0
        uint32_t v40; // 0x412352
        int32_t v41; // 0x412357
        char * v42; // 0x412363
        int32_t v43; // 0x41234a
        int32_t v44; // 0x41234a
        if (*(char *)v24 != 61) {
            // 0x412328
            *v23 = v30;
            v37 = function_4111a0((int32_t)&g1001);
            v38 = (int32_t *)v14;
            *v38 = v37;
            if (v37 == 0) {
                // 0x412337
                *v23 = 9;
                function_411170((int32_t)&g1001);
            }
            // 0x412341
            v35 = v24;
            v33 = -1;
            v34 = 0;
            v36 = v35;
            while (v33 != 0) {
                v43 = v35 + v21;
                v44 = v33 - 1;
                v34 = v44;
                v36 = v43;
                if (*(char *)v35 == 0) {
                    // break -> 
                    break;
                }
                v35 = v43;
                v33 = v44;
                v34 = 0;
                v36 = v35;
            }
            v39 = -1 - v34;
            v40 = v39 / 4;
            v41 = *v38;
            __asm_rep_movsd_memcpy((char *)v41, (char *)(v36 - v39), v40);
            v42 = (char *)(v41 + v40 * (v4 ? -4 : 4));
            __asm_rep_movsb_memcpy(v42, v42, v39 & 3);
            v31 = *v22;
            v32 = v14 + 4;
        }
        int32_t v45 = v32;
        int32_t v46 = v31 + v24; // 0x412365
        while (*(char *)v46 != 0) {
            // 0x412311
            v24 = v46;
            int32_t v47 = v45;
            v25 = v24;
            v26 = -1;
            v27 = 0;
            while (v26 != 0) {
                v28 = v25;
                v29 = v26 - 1;
                v25 = v28 + v21;
                v27 = v29;
                if (*(char *)v28 == 0) {
                    // break -> 
                    break;
                }
                v26 = v29;
                v27 = 0;
            }
            v30 = -1 - v27;
            *v22 = v30;
            v31 = v30;
            v32 = v47;
            if (*(char *)v24 != 61) {
                // 0x412328
                *v23 = v30;
                v37 = function_4111a0((int32_t)&g1001);
                v38 = (int32_t *)v47;
                *v38 = v37;
                if (v37 == 0) {
                    // 0x412337
                    *v23 = 9;
                    function_411170((int32_t)&g1001);
                }
                // 0x412341
                v35 = v24;
                v33 = -1;
                v34 = 0;
                v36 = v35;
                while (v33 != 0) {
                    v43 = v35 + v21;
                    v44 = v33 - 1;
                    v34 = v44;
                    v36 = v43;
                    if (*(char *)v35 == 0) {
                        // break -> 
                        break;
                    }
                    v35 = v43;
                    v33 = v44;
                    v34 = 0;
                    v36 = v35;
                }
                v39 = -1 - v34;
                v40 = v39 / 4;
                v41 = *v38;
                __asm_rep_movsd_memcpy((char *)v41, (char *)(v36 - v39), v40);
                v42 = (char *)(v41 + v40 * (v4 ? -4 : 4));
                __asm_rep_movsb_memcpy(v42, v42, v39 & 3);
                v31 = *v22;
                v32 = v47 + 4;
            }
            // 0x412365
            v45 = v32;
            v46 = v31 + v24;
        }
        // 0x41236f
        v18 = v23;
        v19 = g499;
        v20 = v45;
    }
    // 0x41236f
    *v18 = (int32_t)v19;
    int32_t result = function_411250((int32_t)&g1001); // 0x412375
    g499 = NULL;
    *(int32_t *)v20 = 0;
    return result;
}

// Address range: 0x4123a0 - 0x41243b
int32_t function_4123a0(void) {
    int32_t v1 = 260; // bp-20, 0x4123a5
    GetModuleFileNameA(NULL, (char *)&g867, 260);
    char * v2 = g988;
    g495 = (char *)&g867;
    int32_t v3 = *v2 == 0 ? (int32_t)&g867 : (int32_t)v2;
    int32_t v4; // bp-16, 0x4123a0
    function_412440(v3, 0, 0, &v1, &v4);
    int32_t v5 = function_4111a0(4 * v1 + v4); // 0x4123f1
    if (v5 == 0) {
        // 0x4123ff
        function_411170(8);
    }
    // 0x412409
    function_412440(v3, v5, 4 * v1 + v5, &v1, &v4);
    int32_t result = v1 - 1; // 0x412429
    g493 = v5;
    g492 = result;
    return result;
}

// Address range: 0x412440 - 0x412612
int32_t function_412440(int32_t a1, int32_t a2, int32_t a3, int32_t * a4, int32_t * a5) {
    // 0x412440
    *a5 = 0;
    *a4 = 1;
    int32_t v1 = 0; // 0x412465
    if (a2 != 0) {
        // 0x412467
        *(int32_t *)a2 = a3;
        v1 = a2 + 4;
    }
    int32_t v2 = a3; // 0x412475
    int32_t v3 = a1; // 0x412475
    char v4; // 0x412440
    char * v5; // 0x412440
    int32_t v6; // 0x412440
    int32_t v7; // 0x412440
    int32_t v8; // 0x412440
    int32_t v9; // 0x412440
    int32_t v10; // 0x412440
    int32_t v11; // 0x412440
    int32_t v12; // 0x412440
    int32_t v13; // 0x412440
    int32_t v14; // 0x412440
    int32_t v15; // 0x412440
    if (*(char *)a1 == 34) {
        int32_t v16 = a1 + 1; // 0x4124bd
        char * v17 = (char *)v16;
        char v18 = *v17; // 0x4124be
        v4 = v18;
        v5 = v17;
        v11 = v16;
        v6 = a3;
        v9 = a3;
        v14 = v16;
        switch (v18) {
            default: {
                while (true) {
                  lab_0x4124c9:;
                    int32_t v19 = v6;
                    int32_t v20 = v11;
                    char v21 = *(char *)((int32_t)v4 + (int32_t)&g520); // 0x4124cd
                    v7 = v19;
                    v13 = v20;
                    if ((v21 & 4) == 0) {
                        goto lab_0x4124e2;
                    } else {
                        int32_t v22 = *a5; // 0x4124d6
                        *a5 = v22 + 1;
                        if (v19 == 0) {
                            // 0x4124e2
                            *a5 = v22 + 2;
                            v12 = v20;
                            v8 = 0;
                            goto lab_0x4124ed;
                        } else {
                            // 0x4124dc
                            *(char *)v19 = *v5;
                            v7 = v19 + 1;
                            v13 = v20 + 1;
                            goto lab_0x4124e2;
                        }
                    }
                }
            }
            case 34: {
            }
            case 0: {
              lab_0x4124f3:;
                int32_t v23 = v14;
                int32_t v24 = v9;
                *a5 = *a5 + 1;
                int32_t v25 = 0; // 0x4124f7
                if (v24 != 0) {
                    // 0x4124f9
                    *(char *)v24 = 0;
                    v25 = v24 + 1;
                }
                // 0x4124fd
                v10 = v25;
                v15 = v23 + (int32_t)(*(char *)v23 == 34);
                // break -> 0x412503
                break;
            }
        }
    } else {
        while (true) {
          lab_0x412477:;
            int32_t v26 = v3;
            int32_t v27 = v2;
            *a5 = *a5 + 1;
            char * v28 = (char *)v26;
            int32_t v29 = 0; // 0x41247b
            if (v27 != 0) {
                // 0x41247d
                *(char *)v27 = *v28;
                v29 = v27 + 1;
            }
            int32_t v30 = v29;
            unsigned char v31 = *v28; // 0x412482
            int32_t v32 = v26 + 1; // 0x412484
            int32_t v33 = v30; // 0x412490
            int32_t v34 = v32; // 0x412490
            if ((*(char *)((int32_t)v31 + (int32_t)&g520) & 4) != 0) {
                // 0x412492
                *a5 = *a5 + 1;
                int32_t v35 = 0; // 0x412496
                if (v30 != 0) {
                    // 0x412498
                    *(char *)v30 = *(char *)v32;
                    v35 = v30 + 1;
                }
                // 0x41249d
                v33 = v35;
                v34 = v26 + 2;
            }
            // 0x41249e
            v3 = v34;
            v2 = v33;
            switch (v31) {
                case 32: {
                    goto lab_0x4124b3;
                }
                case 0: {
                    // 0x4124b0
                    v10 = v2;
                    v15 = v3 - 1;
                    goto lab_0x412503;
                }
                default: {
                    // 0x4124a7
                    if (v31 == 9) {
                        // break -> 0x4124b3
                        break;
                    }
                    goto lab_0x412477;
                }
            }
        }
      lab_0x4124b3:
        // 0x4124b3
        v10 = 0;
        v15 = v3;
        if (v2 != 0) {
            // 0x4124b7
            *(char *)(v2 - 1) = 0;
            v10 = v2;
            v15 = v3;
        }
    }
    goto lab_0x412503;
  lab_0x41257a:;
    // 0x41257a
    int32_t v71; // 0x412440
    int32_t v82 = v71;
    int32_t v70; // 0x412440
    int32_t v83 = v70;
    int32_t v68; // 0x412440
    int32_t v84 = v68;
    int32_t v56; // 0x412440
    int32_t v85 = v56; // 0x41257f
    int32_t v69; // 0x412440
    int32_t v86 = v69; // 0x41257f
    int32_t v87 = v56; // 0x41257f
    if (v69 != 0) {
        int32_t v88 = v85;
        int32_t v89 = 0; // 0x412583
        if (v88 != 0) {
            // 0x412585
            *(char *)v88 = 92;
            v89 = v88 + 1;
        }
        int32_t v90 = v86 - 1;
        *a5 = *a5 + 1;
        v86 = v90;
        v87 = v89;
        while (v90 != 0) {
            // 0x412581
            v88 = v89;
            v89 = 0;
            if (v88 != 0) {
                // 0x412585
                *(char *)v88 = 92;
                v89 = v88 + 1;
            }
            // 0x412589
            v90 = v86 - 1;
            *a5 = *a5 + 1;
            v86 = v90;
            v87 = v89;
        }
    }
    int32_t v79 = v87;
    char * v81 = (char *)v83;
    unsigned char v91 = *v81; // 0x412592
    if (v91 == 0) {
        // break -> 0x4125e7
        goto lab_0x4125e7_2;
    }
    if (v82 != 0) {
        goto lab_0x4125a6;
    } else {
        switch (v91) {
            case 32: {
                goto lab_0x4125e7_2;
            }
            case 9: {
                goto lab_0x4125e7_2;
            }
            default: {
                goto lab_0x4125a6;
            }
        }
    }
  lab_0x4125a6:;
    int32_t v92 = v79; // 0x4125a8
    int32_t v93 = v83; // 0x4125a8
    if (v84 != 0) {
        char v94 = *(char *)((int32_t)v91 + (int32_t)&g520);
        if (v79 == 0) {
            int32_t v95; // 0x412440
            int32_t v96; // 0x412440
            if ((v94 & 4) == 0) {
                // 0x4125cf
                v95 = *a5;
                v96 = v83;
            } else {
                int32_t v97 = *a5 + 1; // 0x4125dd
                *a5 = v97;
                v95 = v97;
                v96 = v83 + 1;
            }
            // 0x4125df
            *a5 = v95 + 1;
            v92 = 0;
            v93 = v96;
        } else {
            char v98 = v91; // 0x4125b9
            int32_t v99 = v79; // 0x4125b9
            int32_t v100 = v83; // 0x4125b9
            if ((v94 & 4) != 0) {
                // 0x4125bb
                *(char *)v79 = v91;
                v100 = v83 + 1;
                *a5 = *a5 + 1;
                v98 = *(char *)v100;
                v99 = v79 + 1;
            }
            // 0x4125c1
            *(char *)v99 = v98;
            *a5 = *a5 + 1;
            v92 = v99 + 1;
            v93 = v100;
        }
    }
    int32_t v52 = v92; // 0x412440
    int32_t v53 = v93 + 1; // 0x412440
    int32_t v54 = v82; // 0x412440
    goto lab_0x41253e;
  lab_0x412577:;
    // 0x412577
    int32_t v72; // 0x412440
    v68 = v72;
    int32_t v67; // 0x412440
    v69 = v67 / 2;
    int32_t v73; // 0x412440
    v70 = v73;
    int32_t v74; // 0x412440
    v71 = v74;
    goto lab_0x41257a;
  lab_0x412570:;
    // 0x412570
    int32_t v75; // 0x412440
    v72 = v75;
    int32_t v76; // 0x412440
    v73 = v76;
    int32_t v55; // 0x412440
    v74 = v55 == 0;
    goto lab_0x412577;
  lab_0x4124e2:;
    int32_t v101 = v13;
    int32_t v102 = v7;
    *a5 = *a5 + 1;
    v12 = v101;
    v8 = 0;
    if (v102 != 0) {
        // 0x4124e8
        *(char *)v102 = *(char *)v101;
        v12 = v101;
        v8 = v102 + 1;
    }
    goto lab_0x4124ed;
  lab_0x4124ed:;
    int32_t v103 = v12 + 1; // 0x4124ed
    char * v104 = (char *)v103;
    char v105 = *v104; // 0x4124ee
    v4 = v105;
    v5 = v104;
    v11 = v103;
    v6 = v8;
    v9 = v8;
    v14 = v103;
    switch (v105) {
        case 34: {
            goto lab_0x4124f3;
        }
        case 0: {
            goto lab_0x4124f3;
        }
        default: {
            goto lab_0x4124c9;
        }
    }
  lab_0x412503:;
    char v36 = *(char *)v15; // 0x412505
    char v37 = v36; // 0x412508
    int32_t v38 = 0; // 0x412508
    int32_t v39 = v15; // 0x412508
    int32_t v40 = v10; // 0x412508
    int32_t v41 = v1; // 0x412508
    int32_t v42 = v1; // 0x412508
    int32_t result = v10; // 0x412508
    if (v36 != 0) {
        while (true) {
            int32_t v43 = v41;
            int32_t v44 = v40;
            char v45 = v37; // 0x41250e
            int32_t v46 = v39; // 0x412513
            int32_t v47 = v39; // 0x412513
            if (v45 != 32 != v45 != 9) {
                int32_t v48 = v46 + 1; // 0x41251a
                char v49 = *(char *)v48; // 0x41250e
                v46 = v48;
                while (v49 != 32 != v49 != 9) {
                    // 0x41251a
                    v48 = v46 + 1;
                    v49 = *(char *)v48;
                    v46 = v48;
                }
                // 0x41251d
                v47 = v48;
                v42 = v43;
                result = v44;
                if (v49 == 0) {
                    // break -> 0x4125f6
                    break;
                }
            }
            int32_t v50 = 0; // 0x41252b
            if (v43 != 0) {
                // 0x41252d
                *(int32_t *)v43 = v44;
                v50 = v43 + 4;
            }
            int32_t v51 = v50;
            *a4 = *a4 + 1;
            v52 = v44;
            v53 = v47;
            v54 = v38;
            while (true) {
              lab_0x41253e:
                // 0x41253e
                v55 = v54;
                v56 = v52;
                char v57 = *(char *)v53; // 0x412545
                int32_t v58 = v53; // 0x412548
                char v59 = v57; // 0x412548
                int32_t v60 = 0; // 0x412548
                int32_t v61 = v53; // 0x412548
                if (v57 == 92) {
                    int32_t v62 = v58 + 1; // 0x41254a
                    int32_t v63 = 1; // 0x41254b
                    char v64 = *(char *)v62; // 0x41254c
                    int32_t v65 = v63; // 0x41254f
                    v58 = v62;
                    v59 = v64;
                    v60 = v63;
                    v61 = v62;
                    while (v64 == 92) {
                        // 0x41254a
                        v62 = v58 + 1;
                        v63 = v65 + 1;
                        v64 = *(char *)v62;
                        v65 = v63;
                        v58 = v62;
                        v59 = v64;
                        v60 = v63;
                        v61 = v62;
                    }
                }
                int32_t v66 = v61;
                v67 = v60;
                v68 = 1;
                v69 = v67;
                v70 = v66;
                v71 = v55;
                if (v59 != 34) {
                    goto lab_0x41257a;
                } else {
                    // 0x412556
                    v72 = 1;
                    v73 = v66;
                    v74 = v55;
                    if ((v67 & 1) != 0) {
                        goto lab_0x412577;
                    } else {
                        if (v55 == 0) {
                            // 0x41256e
                            v75 = 0;
                            v76 = v66;
                            goto lab_0x412570;
                        } else {
                            int32_t v77 = v66 + 1; // 0x412562
                            v75 = 1;
                            v76 = v77;
                            if (*(char *)v77 != 34) {
                                // 0x41256e
                                v75 = 0;
                                v76 = v66;
                                goto lab_0x412570;
                            } else {
                                goto lab_0x412570;
                            }
                        }
                    }
                }
            }
          lab_0x4125e7_2:;
            int32_t v78 = 0; // 0x4125e9
            if (v79 != 0) {
                // 0x4125eb
                *(char *)v79 = 0;
                v78 = v79 + 1;
            }
            // 0x4125ef
            *a5 = *a5 + 1;
            char v80 = *v81; // 0x412505
            v37 = v80;
            v38 = v82;
            v39 = v83;
            v40 = v78;
            v41 = v51;
            v42 = v51;
            result = v78;
            if (v80 == 0) {
                // break -> 0x4125f6
                break;
            }
        }
    }
    // 0x4125f6
    if (v42 != 0) {
        // 0x4125fd
        *(int32_t *)v42 = 0;
    }
    // 0x412607
    *a4 = *a4 + 1;
    return result;
}

// Address range: 0x412620 - 0x4127ac
int32_t function_412620(void) {
    int32_t v1 = g518; // 0x412631
    char * lpszEnvironmentBlock; // 0x412620
    int16_t * lpWideCharStr; // 0x412620
    if (v1 != 0) {
        if (v1 != 1) {
            if (v1 != 2) {
                // 0x412665
                return 0;
            }
            char * v2 = GetEnvironmentStrings(); // 0x41272b
            lpszEnvironmentBlock = v2;
            if (v2 == NULL) {
                // 0x412665
                return 0;
            }
            goto lab_0x412741;
        } else {
            int16_t * v3 = GetEnvironmentStringsW(); // 0x412680
            lpWideCharStr = v3;
            if (v3 == NULL) {
                // 0x412665
                return 0;
            }
            goto lab_0x412692;
        }
    } else {
        int16_t * v4 = GetEnvironmentStringsW(); // 0x412639
        if (v4 == NULL) {
            char * v5 = GetEnvironmentStrings(); // 0x41264d
            if (v5 == NULL) {
                // 0x412665
                return 0;
            }
            // 0x412727
            g518 = 2;
            lpszEnvironmentBlock = v5;
            goto lab_0x412741;
        } else {
            // 0x41267c
            g518 = 1;
            lpWideCharStr = v4;
            goto lab_0x412692;
        }
    }
  lab_0x412741:;
    int32_t v6 = (int32_t)lpszEnvironmentBlock;
    int32_t v7 = v6; // 0x412746
    int32_t v8 = v6; // 0x412746
    if (*lpszEnvironmentBlock != 0) {
        while (true) {
            int32_t v9 = v7;
            int32_t v10 = v9 + 1; // 0x412748
            int32_t v11 = v10; // 0x41274d
            if (*(char *)v10 == 0) {
                // 0x41274f
                v11 = v9 + 2;
                v8 = v11;
                if (*(char *)v11 == 0) {
                    // break -> 0x412756
                    break;
                }
            }
            // 0x412748
            v7 = v11;
        }
    }
    uint32_t v12 = v8 - v6 + 1; // 0x412758
    int32_t v13 = function_4111a0(v12); // 0x41275a
    if (v13 != 0) {
        uint32_t v14 = v12 / 4; // 0x412783
        __asm_rep_movsd_memcpy((char *)v13, lpszEnvironmentBlock, v14);
        bool v15; // 0x412620
        char * v16 = (char *)(v14 * (v15 ? -4 : 4) + v13); // 0x41278e
        __asm_rep_movsb_memcpy(v16, v16, v12 & 3);
        FreeEnvironmentStringsA((char *)&g1001);
        int32_t result; // 0x412620
        return result;
    }
    // 0x41276a
    FreeEnvironmentStringsA(lpszEnvironmentBlock);
    return 0;
  lab_0x412692:;
    int32_t v17 = (int32_t)lpWideCharStr;
    int32_t v18 = v17; // 0x412698
    int32_t v19 = v17; // 0x412698
    if (*lpWideCharStr != 0) {
        while (true) {
            int32_t v20 = v18;
            int32_t v21 = v20 + 2; // 0x41269a
            int32_t v22 = v21; // 0x4126a1
            if (*(int16_t *)v21 == 0) {
                // 0x4126a3
                v22 = v20 + 4;
                v19 = v22;
                if (*(int16_t *)v22 == 0) {
                    // break -> 0x4126ac
                    break;
                }
            }
            // 0x41269a
            v18 = v22;
        }
    }
    int32_t cchWideChar = (v19 - v17 >> 1) + 1; // 0x4126b5
    int32_t cbMultiByte = WideCharToMultiByte(0, 0, lpWideCharStr, cchWideChar, NULL, 0, NULL, NULL); // 0x4126c0
    if (cbMultiByte == 0) {
        // 0x41270d
        FreeEnvironmentStringsW(lpWideCharStr);
        return 0;
    }
    int32_t lpMultiByteStr = function_4111a0(cbMultiByte); // 0x4126cd
    if (lpMultiByteStr == 0) {
        // 0x41270d
        FreeEnvironmentStringsW(lpWideCharStr);
        return 0;
    }
    int32_t v23 = WideCharToMultiByte(0, 0, lpWideCharStr, cchWideChar, (char *)lpMultiByteStr, cbMultiByte, NULL, NULL); // 0x4126e7
    int32_t result2 = lpMultiByteStr; // 0x4126ef
    if (v23 == 0) {
        // 0x4126f1
        function_411250(lpMultiByteStr);
        result2 = 0;
    }
    // 0x4126fc
    FreeEnvironmentStringsW(lpWideCharStr);
    return result2;
}

// Address range: 0x4127b0 - 0x41298b
int32_t function_4127b0(int32_t a1) {
    int32_t CodePage = function_412990(a1); // 0x4127bc
    int32_t result = 0; // 0x4127cc
    if (CodePage == g521) {
      lab_0x4127ce:
        // 0x4127ce
        return result;
    }
    int32_t v1 = &g528; // 0x4127da
    if (CodePage == 0) {
        // 0x4127dc
        function_412a40();
        return 0;
    }
    int32_t v2 = 0;
    while (*(int32_t *)v1 != CodePage) {
        // 0x412800
        v1 += 48;
        if (v1 >= (int32_t)&g532) {
            // 0x41280e
            int32_t lpCPInfo; // bp-20, 0x4127b0
            GetCPInfo(CodePage, (struct _cpinfo *)&lpCPInfo);
            result = -1;
            if (g526 != 0) {
                // 0x41296f
                function_412a40();
                return 0;
            }
            return result;
        }
        v2++;
    }
    // 0x41289b
    __asm_rep_stosd_memset((char *)&g519, 0, 64);
    bool v3; // 0x4127b0
    char * v4 = v3 ? (char *)((int32_t)&g519 - 256) : (char *)((int32_t)&g519 + 256); // 0x4128a9
    *v4 = 0;
    int32_t v5 = 0;
    int32_t v6 = 8 * (v5 + 6 * v2) + (int32_t)&g531; // 0x4128bb
    char v7 = *(char *)v6; // 0x4128c2
    unsigned char v8; // 0x4128d2
    int32_t v9; // 0x4127b0
    char * v10; // 0x4127b0
    char * v11; // 0x4128c7
    unsigned char v12; // 0x4128c7
    int32_t v13; // 0x4128f0
    char v14; // 0x4128f3
    char * v15; // 0x4128e0
    if (v7 != 0) {
        // 0x4128c7
        v10 = (char *)(v5 + (int32_t)&g527);
        v14 = v7;
        v9 = v6;
        v11 = (char *)(v9 | 1);
        v12 = *v11;
        while (v12 != 0) {
            // 0x4128ce
            v8 = v14;
            if (v12 >= v8) {
                for (int32_t i = (int32_t)v8; i < (int32_t)*v11 + 1; i++) {
                    // 0x4128e0
                    v15 = (char *)(i + (int32_t)&g520);
                    *v15 = *v15 | *v10;
                }
            }
            // 0x4128f0
            v13 = v9 + 2;
            v14 = *(char *)v13;
            if (v14 == 0) {
                // break -> 0x4128f8
                break;
            }
            v9 = v13;
            v11 = (char *)(v9 | 1);
            v12 = *v11;
        }
    }
    int32_t v16 = v5 + 1; // 0x4128f8
    while (v16 != 4) {
        // 0x4128b8
        v5 = v16;
        v6 = 8 * (v5 + 6 * v2) + (int32_t)&g531;
        v7 = *(char *)v6;
        if (v7 != 0) {
            // 0x4128c7
            v10 = (char *)(v5 + (int32_t)&g527);
            v14 = v7;
            v9 = v6;
            v11 = (char *)(v9 | 1);
            v12 = *v11;
            while (v12 != 0) {
                // 0x4128ce
                v8 = v14;
                if (v12 >= v8) {
                    for (int32_t i = (int32_t)v8; i < (int32_t)*v11 + 1; i++) {
                        // 0x4128e0
                        v15 = (char *)(i + (int32_t)&g520);
                        *v15 = *v15 | *v10;
                    }
                }
                // 0x4128f0
                v13 = v9 + 2;
                v14 = *(char *)v13;
                if (v14 == 0) {
                    // break -> 0x4128f8
                    break;
                }
                v9 = v13;
                v11 = (char *)(v9 | 1);
                v12 = *v11;
            }
        }
        // 0x4128f8
        v16 = v5 + 1;
    }
    // 0x4128fe
    g521 = CodePage;
    g522 = function_4129e0(CodePage);
    int32_t v17 = 48 * v2;
    g523 = *(int32_t *)(v17 + (int32_t)&g529);
    g524 = *(int32_t *)(v17 + (int32_t)&g530);
    g525 = *(int32_t *)(v17 + (int32_t)&g529 + 8);
    return 0;
}

// Address range: 0x412990 - 0x4129dd
int32_t function_412990(int32_t a1) {
    // 0x412990
    g526 = 0;
    if (a1 == -2) {
        // 0x4129a3
        g526 = 1;
        return GetOEMCP();
    }
    if (a1 == -3) {
        // 0x4129b8
        g526 = 1;
        return GetACP();
    }
    int32_t result = a1; // 0x4129cb
    if (a1 == -4) {
        // 0x4129cd
        g526 = 1;
        result = g562;
    }
    // 0x4129dc
    return result;
}

// Address range: 0x4129e0 - 0x412a18
int32_t function_4129e0(int32_t a1) {
    unsigned char v1 = *(char *)(a1 + (int32_t)&g1 - 932); // 0x4129f0
    g1003 = v1;
    int32_t result = 0; // 0x4129f6
    switch (v1) {
        case 0: {
            // 0x412a00
            result = 1041;
            // break -> 0x4129fd
            break;
        }
        case 1: {
            // 0x412a06
            result = 2052;
            // break -> 0x4129fd
            break;
        }
        case 2: {
            // 0x412a0c
            result = 1042;
            // break -> 0x4129fd
            break;
        }
        case 3: {
            // 0x412a12
            result = 1028;
            // break -> 0x4129fd
            break;
        }
    }
    // 0x4129fd
    return result;
}

// Address range: 0x412a40 - 0x412a6c
int32_t function_412a40(void) {
    // 0x412a40
    __asm_rep_stosd_memset((char *)&g519, 0, 64);
    bool v1; // 0x412a40
    char * v2 = v1 ? (char *)((int32_t)&g519 - 256) : (char *)((int32_t)&g519 + 256); // 0x412a4f
    *v2 = 0;
    g523 = 0;
    g521 = 0;
    g522 = 0;
    g524 = 0;
    g525 = 0;
    return 0;
}

// Address range: 0x412a70 - 0x412a7b
int32_t function_412a70(void) {
    // 0x412a70
    return function_4127b0(-3);
}

// Address range: 0x412a80 - 0x412c58
int32_t function_412a80(int32_t a1) {
    struct _STARTUPINFOA * v1 = (struct _STARTUPINFOA *)256; // bp-88, 0x412a87
    int32_t v2 = function_4111a0(256); // 0x412a8c
    if (v2 == 0) {
        // 0x412a9a
        v1 = (struct _STARTUPINFOA *)27;
        function_411170(27);
    }
    // 0x412aa4
    g985 = v2;
    g987 = false;
    if ((v2 ^ -256) >= 256) {
        *(char *)(v2 + 4) = 0;
        int32_t v3 = v2 + 8; // 0x412ac8
        *(int32_t *)v2 = -1;
        *(char *)(v2 + 5) = 10;
        while (g985 + 256 > v3) {
            int32_t v4 = v3;
            *(char *)(v4 + 4) = 0;
            v3 = v4 + 8;
            *(int32_t *)v4 = -1;
            *(char *)(v4 + 5) = 10;
        }
    }
    // 0x412ae3
    int32_t lpStartupInfo; // bp-68, 0x412a80
    v1 = (struct _STARTUPINFOA *)&lpStartupInfo;
    int32_t v5 = (int32_t)&v1; // 0x412ae7
    GetStartupInfoA((struct _STARTUPINFOA *)&lpStartupInfo);
    int32_t v6 = v5; // 0x412af4
    int32_t v7; // 0x412a80
    int32_t v8; // 0x412a80
    uint32_t v9; // 0x412a80
    int32_t v10; // 0x412a80
    int32_t v11; // 0x412a80
    int32_t v12; // 0x412a80
    int32_t v13; // 0x412a80
    int32_t v14; // 0x412a80
    int32_t v15; // 0x412a80
    uint32_t v16; // 0x412a80
    int32_t v17; // 0x412a80
    char * v18; // 0x412b90
    int16_t v19; // 0x412a80
    if (v17 != 0 && v19 != 0) {
        int32_t v20 = *(int32_t *)v17; // 0x412b09
        v16 = v20 < 2048 ? v20 : 2048;
        if (v16 > (int32_t)g987) {
            int32_t v21 = &g986; // 0x412a80
            *(int32_t *)(v5 - 4) = 256;
            int32_t v22 = function_4111a0((int32_t)&g1001); // 0x412b30
            v6 = v5;
            while (v22 != 0) {
                int32_t * v23 = (int32_t *)v21; // 0x412b42
                *v23 = v22;
                int32_t v24 = v22; // 0x412b4e
                if (v22 < 0xffffff00) {
                    *(char *)(v24 + 4) = 0;
                    int32_t v25 = v24 + 8; // 0x412b55
                    *(int32_t *)v24 = -1;
                    *(char *)(v24 + 5) = 10;
                    v24 = v25;
                    while (*v23 + 256 > v25) {
                        // 0x412b52
                        *(char *)(v24 + 4) = 0;
                        v25 = v24 + 8;
                        *(int32_t *)v24 = -1;
                        *(char *)(v24 + 5) = 10;
                        v24 = v25;
                    }
                }
                // 0x412b70
                v21 += 4;
                if (v16 <= (int32_t)g987) {
                    goto lab_0x412b83;
                }
                *(int32_t *)(v5 - 4) = 256;
                v22 = function_4111a0((int32_t)&g1001);
                v6 = v5;
            }
        } else {
          lab_0x412b83:;
            int32_t v26 = v17 + 4; // 0x412b0b
            v10 = v20 + v26;
            v13 = v5;
            v8 = 0;
            v11 = v26;
            v6 = v5;
            if (v16 >= 1) {
                while (true) {
                  lab_0x412b89:
                    // 0x412b89
                    v12 = v11;
                    v9 = v8;
                    int32_t v27 = v13;
                    int32_t * v28 = (int32_t *)v10; // 0x412b89
                    int32_t v29 = *v28; // 0x412b89
                    v15 = v27;
                    if (v29 == -1) {
                        goto lab_0x412bc4;
                    } else {
                        // 0x412b90
                        v18 = (char *)v12;
                        char v30 = *v18; // 0x412b90
                        v15 = v27;
                        if ((v30 & 1) == 0) {
                            goto lab_0x412bc4;
                        } else {
                            // 0x412b96
                            v7 = v29;
                            v14 = v27;
                            if ((v30 & 8) != 0) {
                                goto lab_0x412ba5;
                            } else {
                                int32_t v31 = v27 - 4; // 0x412b9a
                                *(int32_t *)v31 = v29;
                                int32_t v32 = GetFileType(&g1001); // 0x412b9b
                                v15 = v31;
                                if (v32 == 0) {
                                    goto lab_0x412bc4;
                                } else {
                                    // 0x412b9a
                                    v7 = *v28;
                                    v14 = v31;
                                    goto lab_0x412ba5;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
  lab_0x412bcd:;
    int32_t v33 = v6; // 0x412bcf
    int32_t v34 = 0; // 0x412bcf
    int32_t v35; // 0x412a80
    int32_t v36; // 0x412a80
    int32_t v37; // 0x412a80
    char * v38; // 0x412bee
    while (true) {
      lab_0x412bd5:
        // 0x412bd5
        v35 = v34;
        int32_t v39 = v33;
        int32_t v40 = 8 * v35 + g985; // 0x412bdc
        int32_t * v41 = (int32_t *)v40; // 0x412be2
        if (*v41 != -1) {
            char * v42 = (char *)(v40 + 4); // 0x412c3a
            *v42 = *v42 | -128;
            v37 = v39;
            goto lab_0x412c3e;
        } else {
            // 0x412be7
            v38 = (char *)(v40 + 4);
            *v38 = -127;
            int32_t v43 = v39 - 4; // 0x412c02
            *(int32_t *)v43 = v35 == 0 ? -10 : v35 == 1 ? -11 : -12;
            int32_t * v44 = GetStdHandle((int32_t)&g1001); // 0x412c03
            v36 = v43;
            if (v44 == (int32_t *)-1) {
                goto lab_0x412c34;
            } else {
                int32_t v45 = (int32_t)v44; // 0x412c03
                int32_t v46 = v39 - 8; // 0x412c0c
                *(int32_t *)v46 = v45;
                int32_t v47 = GetFileType(&g1001); // 0x412c0d
                v36 = v46;
                if (v47 == 0) {
                    goto lab_0x412c34;
                } else {
                    int32_t v48 = v47 & 255; // 0x412c17
                    *v41 = v45;
                    if (v48 != 2) {
                        // 0x412c29
                        v37 = v46;
                        if (v48 == 3) {
                            // 0x412c2e
                            *v38 = *v38 | 8;
                            v37 = v46;
                        }
                    } else {
                        // 0x412c23
                        *v38 = *v38 | 64;
                        v37 = v46;
                    }
                    goto lab_0x412c3e;
                }
            }
        }
    }
  lab_0x412c44:;
    // 0x412c44
    int32_t v49; // 0x412a80
    *(int32_t *)(v49 - 4) = (int32_t)g987;
    return SetHandleCount((int32_t)&g1001);
  lab_0x412c3e:
    // 0x412c3e
    v49 = v37;
    int32_t v50 = v35 + 1; // 0x412c3e
    v33 = v49;
    v34 = v50;
    if (v50 == 3) {
        // break -> 0x412c44
        goto lab_0x412c44;
    }
    goto lab_0x412bd5;
  lab_0x412c34:
    // 0x412c34
    *v38 = *v38 | 64;
    v37 = v36;
    goto lab_0x412c3e;
  lab_0x412bc4:;
    int32_t v51 = v9 + 1; // 0x412bc4
    v10 += 4;
    v13 = v15;
    v8 = v51;
    v11 = v12 + 1;
    v6 = v15;
    if (v51 >= v16) {
        // break -> 0x412bcd
        goto lab_0x412bcd;
    }
    goto lab_0x412b89;
  lab_0x412ba5:;
    int32_t v52 = *(int32_t *)((v9 / 8 & 0xffffffc) + (int32_t)&g985); // 0x412bb2
    int32_t v53 = v52 + (8 * v9 & 248); // 0x412bba
    *(int32_t *)v53 = v7;
    *(char *)(v53 + 4) = *v18;
    v15 = v14;
    goto lab_0x412bc4;
}

// Address range: 0x412c60 - 0x412c99
int32_t function_412c60(void) {
    int32_t * v1 = HeapCreate(1, 0x1000, 0); // 0x412c69
    g984 = (int32_t)v1;
    if (v1 == NULL) {
        // 0x412c78
        return 0;
    }
    // 0x412c7b
    if (function_412ff0() != 0) {
        // 0x412c78
        return 1;
    }
    // 0x412c84
    HeapDestroy((int32_t *)g984);
    return 0;
}

// Address range: 0x412c9c - 0x412d61
int32_t function_412c9c(int32_t a1, int32_t a2, int32_t a3) {
    // 0x412c9c
    int32_t v1; // 0x412c9c
    int32_t v2 = v1;
    *(char *)v2 = (char)(v1 / 256 ^ v2 ^ v1);
    char * v3 = (char *)v1; // bp-4, 0x412ca4
    int32_t v4 = (int32_t)&v3; // 0x412ca5
    int32_t v5 = v4; // bp-28, 0x412cad
    if ((*(int32_t *)(a1 + 4) & 6) != 0) {
        // 0x412d44
        __local_unwind2();
        // 0x412d59
        return 1;
    }
    int32_t v6 = a1; // bp-12, 0x412cc2
    int32_t v7 = &v6; // 0x412ccb
    *(int32_t *)(a2 - 4) = v7;
    int32_t v8 = *(int32_t *)(a2 + 12); // 0x412cd1
    if (v8 == -1) {
        // 0x412d59
        return 1;
    }
    int32_t v9 = &v5;
    int32_t v10 = 12 * v8;
    int32_t v11 = v10; // 0x412ce4
    int32_t v12 = v7; // 0x412ce4
    int32_t v13 = a2; // 0x412ce4
    int32_t v14 = v9; // 0x412ce4
    int32_t v15 = v4; // 0x412ce4
    int32_t v16; // 0x412ce6
    int32_t * v17; // 0x412ce6
    int32_t * v18; // 0x412ce7
    int32_t v19; // 0x412cf0
    int32_t v20; // 0x412cf1
    int32_t v21; // 0x412c9c
    int32_t v22; // 0x412d21
    if (*(int32_t *)(*(int32_t *)(a2 + 8) + 4 + v10) != 0) {
        // 0x412ce6
        v16 = v9 - 4;
        v17 = (int32_t *)v16;
        *v17 = v8;
        v18 = (int32_t *)(v9 - 8);
        *v18 = v4;
        v19 = *v17;
        v20 = *(int32_t *)(v4 + 12);
        if (v7 == 0) {
            // 0x412ce6
            v11 = 12 * v19;
            v12 = 0;
            v13 = v20;
            v14 = v9;
            v15 = v4;
        } else {
            // 0x412cf8
            if (v7 < 0) {
                // break -> 0x412d59
                break;
            }
            // 0x412cfa
            *v17 = v20;
            __global_unwind2();
            *v17 = v19;
            *v18 = v20;
            __local_unwind2();
            *v17 = 1;
            __NLG_Notify();
            v21 = 12 * v19;
            v22 = *(int32_t *)(*(int32_t *)(v20 + 8) + v21);
            *(int32_t *)(v20 + 12) = v22;
            v11 = v21;
            v12 = v22;
            v13 = v20;
            v14 = v16;
            v15 = v20 + 16;
        }
    }
    int32_t v23 = v13;
    int32_t v24 = *(int32_t *)(v23 + 8); // 0x412d2b
    int32_t v25 = *(int32_t *)(v24 + v11); // 0x412d31
    int32_t result = 1; // 0x412cda
    while (v25 != -1) {
        int32_t v26 = v25;
        v9 = v14;
        int32_t v27 = v15;
        int32_t v28 = v12;
        v10 = 12 * v26;
        v11 = v10;
        v12 = v28;
        v13 = v23;
        v14 = v9;
        v15 = v27;
        if (*(int32_t *)(v24 + 4 + v10) != 0) {
            // 0x412ce6
            v16 = v9 - 4;
            v17 = (int32_t *)v16;
            *v17 = v26;
            v18 = (int32_t *)(v9 - 8);
            *v18 = v27;
            v19 = *v17;
            v20 = *(int32_t *)(v27 + 12);
            if (v28 == 0) {
                // 0x412ce6
                v11 = 12 * v19;
                v12 = 0;
                v13 = v20;
                v14 = v9;
                v15 = v27;
            } else {
                // 0x412cf8
                result = 0;
                if (v28 < 0) {
                    // break -> 0x412d59
                    break;
                }
                // 0x412cfa
                *v17 = v20;
                __global_unwind2();
                *v17 = v19;
                *v18 = v20;
                __local_unwind2();
                *v17 = 1;
                __NLG_Notify();
                v21 = 12 * v19;
                v22 = *(int32_t *)(*(int32_t *)(v20 + 8) + v21);
                *(int32_t *)(v20 + 12) = v22;
                v11 = v21;
                v12 = v22;
                v13 = v20;
                v14 = v16;
                v15 = v20 + 16;
            }
        }
        // 0x412d2b
        v23 = v13;
        v24 = *(int32_t *)(v23 + 8);
        v25 = *(int32_t *)(v24 + v11);
        result = 1;
    }
    // 0x412d59
    return result;
}

// Address range: 0x412d80 - 0x412dbd
int32_t function_412d80(void) {
    // 0x412d80
    if (g500 == 1) {
        // 0x412d97
        function_412dc0(252);
        // 0x412dbc
        return function_412dc0(255);
    }
    // 0x412d8a
    if (g500 != 0 || g501 != 1) {
        // 0x412dbc
        return g500;
    }
    // 0x412d97
    function_412dc0(252);
    // 0x412dbc
    return function_412dc0(255);
}

// Address range: 0x412dc0 - 0x412fb6
int32_t function_412dc0(int32_t a1) {
    int32_t result = &g533; // 0x412dd7
    int32_t v1 = 0; // 0x412dd7
    while (*(int32_t *)result != a1) {
        // 0x412ddc
        result += 8;
        v1++;
        if (result >= (int32_t)&g535) {
            // break -> 0x412de7
            break;
        }
    }
    int32_t v2 = 8 * v1; // 0x412de7
    if (*(int32_t *)(v2 + (int32_t)&g533) != a1) {
        // 0x412fab
        return result;
    }
    // 0x412dfb
    int32_t v3; // bp-444, 0x412dc0
    bool v4; // 0x412dc0
    if (g500 != 1) {
        // 0x412e08
        if (g500 == 0 != (g501 == 1)) {
            // 0x412e1e
            if (a1 == 252) {
                // 0x412fab
                return result;
            }
            // 0x412e2a
            v3 = 260;
            int32_t lpFilename; // bp-260, 0x412dc0
            int32_t v5; // bp-272, 0x412dc0
            if (GetModuleFileNameA(NULL, (char *)&lpFilename, 260) == 0) {
                // 0x412e45
                __asm_rep_movsd_memcpy((char *)&v5, "<program name unknown>", 5);
            }
            int32_t v6 = &v5; // 0x412e5b
            int32_t v7 = v4 ? -1 : 1;
            int32_t v8 = -1; // 0x412e70
            int32_t v9 = v6; // 0x412e70
            int32_t v10 = 0; // 0x412e70
            while (v8 != 0) {
                int32_t v11 = v9;
                v8--;
                v9 = v11 + v7;
                v10 = v8;
                if (*(char *)v11 == 0) {
                    // break -> 
                    break;
                }
                v10 = 0;
            }
            int32_t v12 = v10;
            int32_t v13 = v6; // 0x412e77
            int32_t v14; // bp-456, 0x412dc0
            if (v12 != -61 && (v12 ^ -4) >= 60) {
                // 0x412e79
                v14 = 3;
                int32_t v15 = -1; // 0x412e89
                int32_t v16 = v6; // 0x412e89
                int32_t v17 = 0; // 0x412e89
                while (v15 != 0) {
                    int32_t v18 = v16;
                    v15--;
                    v16 = v18 + v7;
                    v17 = v15;
                    if (*(char *)v18 == 0) {
                        // break -> 
                        break;
                    }
                    v17 = 0;
                }
                v13 = (int32_t)&v14 + 124 + -1 - v17;
                function_416300(v13, "...", (int32_t)&g1001);
            }
            // 0x412e9f
            int32_t v19; // bp-432, 0x412dc0
            __asm_rep_movsd_memcpy((char *)&v19, "Runtime Error!\n\nProgram: ", 6);
            int32_t v20 = -1; // 0x412eba
            int32_t v21 = v13;
            int32_t v22 = 0; // 0x412eba
            int32_t v23 = v21; // 0x412eba
            while (v20 != 0) {
                int32_t v24 = v21 + v7; // 0x412eba
                v20--;
                v22 = v20;
                v23 = v24;
                if (*(char *)v21 == 0) {
                    // break -> 
                    break;
                }
                v21 = v24;
                v22 = 0;
                v23 = v21;
            }
            uint32_t v25 = -1 - v22;
            int32_t v26 = &v19; // 0x412ec9
            int32_t v27 = -1; // 0x412ecf
            int32_t v28 = v26;
            int32_t v29 = v28; // 0x412ecf
            while (v27 != 0) {
                int32_t v30 = v28 + v7; // 0x412ecf
                v27--;
                v29 = v30;
                if (*(char *)v28 == 0) {
                    // break -> 
                    break;
                }
                v28 = v30;
                v29 = v28;
            }
            int32_t v31 = v29 - 1; // 0x412ed1
            uint32_t v32 = v25 / 4; // 0x412ed4
            __asm_rep_movsd_memcpy((char *)v31, (char *)(v23 - v25), v32);
            int32_t v33 = v4 ? -4 : 4; // 0x412ed7
            char * v34 = (char *)(v31 + v32 * v33); // 0x412ede
            __asm_rep_movsb_memcpy(v34, v34, v25 & 3);
            int32_t v35 = -1; // 0x412eec
            int32_t v36 = (int32_t)"\n\n";
            int32_t v37 = 0; // 0x412eec
            int32_t v38 = v36; // 0x412eec
            while (v35 != 0) {
                int32_t v39 = v36 + v7; // 0x412eec
                v35--;
                v37 = v35;
                v38 = v39;
                if (*(char *)v36 == 0) {
                    // break -> 
                    break;
                }
                v36 = v39;
                v37 = 0;
                v38 = v36;
            }
            uint32_t v40 = -1 - v37;
            int32_t v41 = -1; // 0x412f01
            int32_t v42 = v26;
            int32_t v43 = v42; // 0x412f01
            while (v41 != 0) {
                int32_t v44 = v42 + v7; // 0x412f01
                v41--;
                v43 = v44;
                if (*(char *)v42 == 0) {
                    // break -> 
                    break;
                }
                v42 = v44;
                v43 = v42;
            }
            int32_t v45 = v43 - 1; // 0x412f03
            uint32_t v46 = v40 / 4; // 0x412f06
            __asm_rep_movsd_memcpy((char *)v45, (char *)(v38 - v40), v46);
            char * v47 = (char *)(v45 + v46 * v33); // 0x412f10
            __asm_rep_movsb_memcpy(v47, v47, v40 & 3);
            int32_t v48 = -1; // 0x412f1f
            int32_t v49 = *(int32_t *)(v2 + (int32_t)&g534);
            int32_t v50 = 0; // 0x412f1f
            int32_t v51 = v49; // 0x412f1f
            while (v48 != 0) {
                int32_t v52 = v49 + v7; // 0x412f1f
                v48--;
                v50 = v48;
                v51 = v52;
                if (*(char *)v49 == 0) {
                    // break -> 
                    break;
                }
                v49 = v52;
                v50 = 0;
                v51 = v49;
            }
            uint32_t v53 = -1 - v50;
            int32_t v54 = -1; // 0x412f34
            int32_t v55 = v26;
            int32_t v56 = v55; // 0x412f34
            while (v54 != 0) {
                int32_t v57 = v55 + v7; // 0x412f34
                v54--;
                v56 = v57;
                if (*(char *)v55 == 0) {
                    // break -> 
                    break;
                }
                v55 = v57;
                v56 = v55;
            }
            int32_t v58 = v56 - 1; // 0x412f36
            uint32_t v59 = v53 / 4; // 0x412f39
            __asm_rep_movsd_memcpy((char *)v58, (char *)(v51 - v53), v59);
            v14 = 0x12010;
            char * v60 = (char *)(v58 + v59 * v33); // 0x412f4d
            __asm_rep_movsb_memcpy(v60, v60, v53 & 3);
            return function_416260(&v19);
        }
    }
    // 0x412f67
    int32_t v61; // 0x412dc0
    int32_t * v62; // 0x412dc0
    if (g985 == 0) {
        goto lab_0x412f7d;
    } else {
        int32_t v63 = *(int32_t *)(g985 + 16); // 0x412f75
        int32_t v64; // bp-440, 0x412dc0
        v62 = &v64;
        v61 = v63;
        if (v63 != -1) {
            goto lab_0x412f87;
        } else {
            goto lab_0x412f7d;
        }
    }
  lab_0x412f7d:
    // 0x412f7d
    v3 = -12;
    int32_t * v65 = GetStdHandle(-12); // 0x412f7f
    v62 = &v3;
    v61 = (int32_t)v65;
    goto lab_0x412f87;
  lab_0x412f87:;
    int32_t v66 = (int32_t)v62;
    int32_t v67 = *(int32_t *)(v2 + (int32_t)&g534); // 0x412f87
    *(int32_t *)(v66 - 4) = 0;
    *(int32_t *)(v66 - 8) = v66 + 16;
    int32_t v68 = -1; // 0x412f9d
    int32_t v69 = v67; // 0x412f9d
    int32_t v70 = 0; // 0x412f9d
    while (v68 != 0) {
        int32_t v71 = v69;
        int32_t v72 = v68 - 1; // 0x412f9d
        v68 = v72;
        v69 = v71 + (v4 ? -1 : 1);
        v70 = v72;
        if (*(char *)v71 == 0) {
            // break -> 
            break;
        }
        v70 = 0;
    }
    *(int32_t *)(v66 - 12) = -2 - v70;
    *(int32_t *)(v66 - 16) = v67;
    *(int32_t *)(v66 - 20) = v61;
    bool result2 = WriteFile(&g1001, &g1001, (int32_t)&g1001, &g1001, (struct _OVERLAPPED *)&g1001); // 0x412fa5
    // 0x412fab
    return result2;
}

// Address range: 0x412fc0 - 0x412fe1
int32_t function_412fc0(int32_t a1) {
    // 0x412fc0
    return a1 != 0 == (g868 != 0);
}

// Address range: 0x412ff0 - 0x413160
int32_t function_412ff0(void) {
    // 0x412ff0
    int32_t v1; // bp-16, 0x412ff0
    int32_t * v2 = &v1; // 0x412ffb
    int32_t result = &g537; // 0x412ffb
    if (g539 != 0) {
        int32_t v3 = g984; // bp-28, 0x413075
        int32_t * v4 = HeapAlloc((int32_t *)g984, 0, 2068); // 0x413076
        v2 = &v3;
        result = (int32_t)v4;
        if (v4 == NULL) {
            // 0x413086
            return 0;
        }
    }
    int32_t v5 = (int32_t)v2;
    *(int32_t *)(v5 - 4) = 4;
    *(int32_t *)(v5 - 8) = 0x2000;
    *(int32_t *)(v5 - 12) = 0x400000;
    int32_t v6 = v5 - 16; // 0x413014
    *(int32_t *)v6 = 0;
    int32_t * memory = VirtualAlloc(&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001); // 0x413016
    int32_t v7 = v6; // 0x41301c
    if (memory != NULL) {
        int32_t v8 = (int32_t)memory; // 0x413016
        *(int32_t *)(v5 - 20) = 4;
        *(int32_t *)(v5 - 24) = 0x1000;
        *(int32_t *)(v5 - 28) = 0x10000;
        *(int32_t *)(v5 - 32) = v8;
        int32_t * memory2 = VirtualAlloc(&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001); // 0x41302f
        if (memory2 != NULL) {
            if (result != (int32_t)&g537) {
                // 0x41308d
                *(int32_t *)result = (int32_t)&g537;
                int32_t * v9 = (int32_t *)(result + 4); // 0x413098
                *v9 = (int32_t)g538;
                *(int32_t *)&g538 = result;
                *(int32_t *)*v9 = result;
            } else {
                // 0x413041
                if (g537 == 0) {
                    // 0x41304a
                    g537 = &g537;
                }
                // 0x413054
                if (g538 == NULL) {
                    // 0x41305d
                    *(int32_t *)&g538 = (int32_t)&g537;
                }
            }
            int32_t * v10 = (int32_t *)(result + 2064); // 0x4130b7
            *v10 = v8;
            *(int32_t *)(result + 8) = 0;
            *(int32_t *)(result + 12) = 16;
            int32_t v11 = 0; // 0x4130c0
            int32_t v12 = v11 + result; // 0x4130c7
            *(char *)(v12 + 16) = v11 > 15 ? -1 : -16;
            v11++;
            *(char *)(v12 + 1040) = -15;
            while (v11 != 1024) {
                // 0x4130c7
                v12 = v11 + result;
                *(char *)(v12 + 16) = v11 > 15 ? -1 : -16;
                v11++;
                *(char *)(v12 + 1040) = -15;
            }
            // 0x4130e6
            __asm_rep_stosd_memset((char *)memory, 0, 0x4000);
            if (*v10 + 0x10000 <= v8) {
                // 0x413086
                return result;
            }
            int32_t v13 = v8;
            *(int32_t *)v13 = v13 + 8;
            *(int32_t *)(v13 + 4) = 240;
            *(char *)(v13 + 248) = -1;
            int32_t v14 = v13 + 0x1000; // 0x413118
            while (*v10 + 0x10000 > v14) {
                // 0x41310a
                v13 = v14;
                *(int32_t *)v13 = v13 + 8;
                *(int32_t *)(v13 + 4) = 240;
                *(char *)(v13 + 248) = -1;
                v14 = v13 + 0x1000;
            }
            // 0x413086
            return result;
        }
        // 0x413134
        *(int32_t *)(v5 - 36) = 0x8000;
        *(int32_t *)(v5 - 40) = 0;
        v7 = v5 - 44;
        *(int32_t *)v7 = v8;
        VirtualFree(&g1001, (int32_t)&g1001, (int32_t)&g1001);
    }
    // 0x413142
    if (result != (int32_t)&g537) {
        // 0x41314a
        *(int32_t *)(v7 - 4) = result;
        *(int32_t *)(v7 - 8) = 0;
        *(int32_t *)(v7 - 12) = g984;
        HeapFree(&g1001, (int32_t)&g1001, &g1001);
    }
    // 0x413086
    return 0;
}

// Address range: 0x413160 - 0x4131be
int32_t function_413160(int32_t a1) {
    int32_t result = VirtualFree((int32_t *)*(int32_t *)(a1 + 2064), 0, 0x8000); // 0x41317f
    if ((int32_t)g540 == a1) {
        // 0x413181
        result = *(int32_t *)(a1 + 4);
        *(int32_t *)&g540 = result;
    }
    if (a1 == (int32_t)&g537) {
        // 0x4131b2
        g539 = 0;
        return result;
    }
    int32_t * lpMem = (int32_t *)a1; // 0x413191
    int32_t * v1 = (int32_t *)(a1 + 4); // 0x413193
    *(int32_t *)*v1 = *lpMem;
    *(int32_t *)(*lpMem + 4) = *v1;
    return HeapFree((int32_t *)g984, 0, lpMem);
}

// Address range: 0x4131c0 - 0x413297
int32_t function_4131c0(int32_t a1) {
    // 0x4131c0
    int32_t v1; // bp-20, 0x4131c0
    int32_t v2 = &v1; // 0x4131cc
    int32_t v3 = (int32_t)g538; // 0x4131cc
    int32_t v4; // 0x4131c0
    int32_t v5; // 0x4131c0
    int32_t v6; // 0x4131c0
    int32_t v7; // 0x4131c0
    while (true) {
      lab_0x4131cd:;
        int32_t v8 = v3;
        int32_t v9 = v2;
        int32_t * v10 = (int32_t *)(v8 + 2064); // 0x4131cd
        v5 = v4;
        v7 = v9;
        v6 = v8;
        if (*v10 != 0) {
            // 0x4131da
            *(int32_t *)(v9 + 16) = 0;
            int32_t * v11 = (int32_t *)(v8 + 12);
            int32_t v12 = 0x3ff000;
            int32_t v13 = 1023;
            int32_t v14 = v9;
            int32_t v15 = v8 + 1039;
            char * v16 = (char *)v15; // 0x4131f2
            int32_t v17 = v14; // 0x4131f5
            int32_t v18; // 0x413209
            bool v19; // 0x41320a
            int32_t v20; // 0x41321d
            int32_t * v21; // 0x41322c
            int32_t * v22; // 0x413230
            int32_t v23; // 0x413230
            if (*v16 == -16) {
                // 0x4131f7
                *(int32_t *)(v14 - 4) = 0x4000;
                *(int32_t *)(v14 - 8) = 0x1000;
                v18 = v14 - 12;
                *(int32_t *)v18 = *v10 + v12;
                v19 = VirtualFree(&g1001, (int32_t)&g1001, (int32_t)&g1001);
                v17 = v18;
                if (v19) {
                    // 0x413214
                    *v16 = -1;
                    g541--;
                    v20 = *v11;
                    if (v20 == -1 || v13 < v20) {
                        // 0x413229
                        *v11 = v13;
                    }
                    // 0x41322c
                    v21 = (int32_t *)(v14 + 4);
                    *v21 = *v21 + 1;
                    v22 = (int32_t *)(v14 + 12);
                    v23 = *v22 - 1;
                    *v22 = v23;
                    v17 = v18;
                    if (v23 == 0) {
                        // break -> 0x413242
                        break;
                    }
                }
            }
            int32_t v24 = v17;
            int32_t v25 = v12 - 0x1000; // 0x413236
            int32_t v26 = v15 - 1; // 0x413240
            int32_t v27 = v13 - 1; // 0x413240
            int32_t v28 = v24; // 0x413240
            while (v25 >= 0) {
                // 0x4131f2
                v12 = v25;
                v13 = v27;
                v14 = v24;
                v15 = v26;
                v16 = (char *)v15;
                v17 = v14;
                if (*v16 == -16) {
                    // 0x4131f7
                    *(int32_t *)(v14 - 4) = 0x4000;
                    *(int32_t *)(v14 - 8) = 0x1000;
                    v18 = v14 - 12;
                    *(int32_t *)v18 = *v10 + v12;
                    v19 = VirtualFree(&g1001, (int32_t)&g1001, (int32_t)&g1001);
                    v17 = v18;
                    if (v19) {
                        // 0x413214
                        *v16 = -1;
                        g541--;
                        v20 = *v11;
                        if (v20 == -1 || v13 < v20) {
                            // 0x413229
                            *v11 = v13;
                        }
                        // 0x41322c
                        v21 = (int32_t *)(v14 + 4);
                        *v21 = *v21 + 1;
                        v22 = (int32_t *)(v14 + 12);
                        v23 = *v22 - 1;
                        *v22 = v23;
                        v17 = v18;
                        v28 = v18;
                        if (v23 == 0) {
                            // break -> 0x413242
                            break;
                        }
                    }
                }
                // 0x413236
                v24 = v17;
                v25 = v12 - 0x1000;
                v26 = v15 - 1;
                v27 = v13 - 1;
                v28 = v24;
            }
            int32_t v29 = v28;
            int32_t v30 = *(int32_t *)(v8 + 4); // 0x413249
            v5 = v8;
            v7 = v29;
            v6 = v30;
            if (*(int32_t *)(v29 + 16) != 0) {
                // 0x41324e
                v5 = v8;
                v7 = v29;
                v6 = v30;
                if (*(char *)(v8 + 16) == -1) {
                    int32_t v31 = 1; // 0x413259
                    int32_t v32 = v8 + 17; // 0x4131c0
                    v5 = v8;
                    v7 = v29;
                    v6 = v30;
                    while (*(char *)v32 == -1) {
                        // 0x413261
                        v31++;
                        v32++;
                        if (v31 >= 1024) {
                            // 0x413273
                            *(int32_t *)(v29 - 4) = v8;
                            v5 = function_413160((int32_t)&g1001);
                            v7 = v29;
                            v6 = v30;
                            goto lab_0x41327c;
                        }
                        v5 = v8;
                        v7 = v29;
                        v6 = v30;
                    }
                }
            }
        }
        goto lab_0x41327c;
    }
    // 0x41328f
    int32_t result; // 0x4131c0
    return result;
  lab_0x41327c:
    // 0x41327c
    v3 = v6;
    result = v5;
    if (v3 == (int32_t)g538) {
        return result;
    }
    // 0x413284
    v2 = v7;
    int32_t v33 = *(int32_t *)(v2 + 24); // 0x413284
    v4 = result;
    if (v33 >= 0 != v33 != 0) {
        return result;
    }
    goto lab_0x4131cd;
}

// Address range: 0x4132a0 - 0x4132f1
int32_t function_4132a0(uint32_t a1, int32_t * a2, int32_t * a3) {
    int32_t v1 = &g537;
    uint32_t v2 = *(int32_t *)(v1 + 2064); // 0x4132a9
    while (v2 < a1 == (v2 != 0) != v2 + 0x400000 > a1) {
        int32_t v3 = *(int32_t *)v1; // 0x4132c0
        if (v3 == (int32_t)&g537) {
            // 0x4132ca
            return 0;
        }
        v1 = v3;
        v2 = *(int32_t *)(v1 + 2064);
    }
    // 0x4132cd
    *a2 = v1;
    int32_t v4 = a1 & -0x1000; // 0x4132d5
    *a3 = v4;
    return (a1 - 256 - v4) / 16 + (v4 | 8);
}

// Address range: 0x413300 - 0x413346
int32_t function_413300(int32_t a1, int32_t a2, int32_t result) {
    int32_t v1 = (a2 - *(int32_t *)(a1 + 2064) >> 12) + a1; // 0x413311
    char * v2 = (char *)result; // 0x413317
    char * v3 = (char *)(v1 + 16); // 0x413319
    *v3 = *v3 + *v2;
    *v2 = 0;
    *(char *)(v1 + 1040) = -15;
    if (*v3 != -16) {
        // 0x413345
        return result;
    }
    int32_t v4 = g541; // 0x41332c
    g541 = v4 + 1;
    int32_t result2 = result; // 0x413339
    if (v4 == 31) {
        // 0x41333b
        result2 = function_4131c0(16);
    }
    // 0x413345
    return result2;
}

// Address range: 0x413350 - 0x4135cb
int32_t function_413350(uint32_t a1) {
    // 0x413350
    int32_t v1; // bp-16, 0x413350
    int32_t v2 = &v1; // 0x413357
    int32_t * v3 = (int32_t *)(v2 - 4);
    int32_t * v4 = (int32_t *)(v2 - 8);
    int32_t * v5 = (int32_t *)(v2 - 12);
    char v6 = a1;
    int32_t v7 = (int32_t)g540; // 0x413358
    int32_t v8; // 0x413350
    int32_t v9; // 0x413350
    int32_t v10; // 0x413350
    int32_t v11; // 0x413350
    int32_t * v12; // 0x413350
    int32_t * v13; // 0x41335e
    while (true) {
      lab_0x41335e:
        // 0x41335e
        v11 = v7;
        v13 = (int32_t *)(v11 + 2064);
        if (*v13 == 0) {
            goto lab_0x41341f;
        } else {
            // 0x41336b
            v12 = (int32_t *)(v11 + 8);
            int32_t v14 = *v12;
            if (v14 > 1023) {
                // 0x41336b
                v8 = v11 + 1040;
                v9 = v11 + 16;
                v10 = v14;
                goto lab_0x4133d3;
            } else {
                int32_t v15 = v11 + 16;
                int32_t v16 = v11 + 1040;
                int32_t v17 = v14;
                int32_t v18 = 0x1000 * v14;
                char * v19 = (char *)(v15 + v17);
                unsigned char v20 = *v19; // 0x41337b
                uint32_t v21 = (int32_t)v20; // 0x41337b
                char * v22; // 0x41338e
                int32_t result; // 0x4133a4
                if (v20 != -1 && v21 >= a1) {
                    // 0x41338c
                    v22 = (char *)(v16 + v17);
                    if ((int32_t)*v22 > a1) {
                        // 0x413399
                        *v3 = a1;
                        *v4 = v21;
                        *v5 = *v13 + v18;
                        result = function_4135d0((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
                        if (result != 0) {
                            // 0x413490
                            *(int32_t *)&g540 = v11;
                            *v19 = *v19 - v6;
                            *v12 = v17;
                            return result;
                        }
                        // 0x4133b4
                        *v22 = v6;
                    }
                }
                int32_t v23 = v18 + 0x1000; // 0x4133bb
                int32_t v24 = v17 + 1; // 0x4133c8
                while (v23 < 0x400000) {
                    // 0x41337b
                    v17 = v24;
                    v18 = v23;
                    v19 = (char *)(v15 + v17);
                    v20 = *v19;
                    v21 = (int32_t)v20;
                    if (v20 != -1 && v21 >= a1) {
                        // 0x41338c
                        v22 = (char *)(v16 + v17);
                        if ((int32_t)*v22 > a1) {
                            // 0x413399
                            *v3 = a1;
                            *v4 = v21;
                            *v5 = *v13 + v18;
                            result = function_4135d0((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
                            if (result != 0) {
                                // 0x413490
                                *(int32_t *)&g540 = v11;
                                *v19 = *v19 - v6;
                                *v12 = v17;
                                return result;
                            }
                            // 0x4133b4
                            *v22 = v6;
                        }
                    }
                    // 0x4133bb
                    v23 = v18 + 0x1000;
                    v24 = v17 + 1;
                }
                int32_t v25 = *v12;
                v8 = v16;
                v9 = v15;
                v10 = v25;
                if (v25 < 1) {
                    goto lab_0x41341f;
                } else {
                    goto lab_0x4133d3;
                }
            }
        }
    }
  lab_0x413439:;
    int32_t v26; // 0x413350
    int32_t v27; // 0x413350
    int32_t v28; // 0x413350
    int32_t v29; // 0x413350
    int32_t v30; // 0x413350
    int32_t * v31; // 0x413350
    int32_t * v32; // 0x413350
    int32_t v33; // 0x413441
    while (true) {
        // 0x413439
        v29 = v28;
        v31 = (int32_t *)(v29 + 2064);
        if (*v31 != 0) {
            // 0x413441
            v32 = (int32_t *)(v29 + 12);
            v33 = *v32;
            if (v33 != -1) {
                int32_t v34 = v33 + 16; // 0x4134b9
                v30 = v34 < 1024 ? v34 : 1024;
                int32_t v35 = v33 + 1; // 0x4134c9
                v27 = v35;
                if (v30 > v35) {
                    // 0x4134d3
                    v26 = v35;
                    goto lab_0x4134d3_2;
                } else {
                    goto lab_0x4134de;
                }
            }
        }
        int32_t v36 = *(int32_t *)v29; // 0x413446
        v28 = v36;
        if (v36 == (int32_t)&g537) {
            // break -> 0x413450
            break;
        }
    }
    int32_t v37 = function_412ff0(); // 0x413450
    if (v37 != 0) {
        int32_t * v38 = (int32_t *)(v37 + 2064); // 0x41345d
        int32_t v39 = *v38; // 0x41345d
        *(char *)(v39 + 8) = v6;
        *(int32_t *)&g540 = v37;
        *(int32_t *)v39 = a1 + 8 + v39;
        *(int32_t *)(v39 + 4) = 240 - a1;
        char * v40 = (char *)(v37 + 16); // 0x413480
        *v40 = *v40 - v6;
        return *v38 + 256;
    }
  lab_0x4135bd:
    // 0x4135bd
    return 0;
  lab_0x41341f:
    // 0x41341f
    v7 = *(int32_t *)v11;
    v28 = &g537;
    if (v7 == (int32_t)g540) {
        // break -> 0x413439
        goto lab_0x413439;
    }
    goto lab_0x41335e;
  lab_0x4133d3:;
    int32_t v41 = v8;
    int32_t v42 = 0;
    int32_t v43 = 0;
    int32_t v44 = v10;
    char * v45 = (char *)(v9 + v42);
    unsigned char v46 = *v45; // 0x4133d3
    uint32_t v47 = (int32_t)v46; // 0x4133d3
    int32_t v48 = v44; // 0x4133dd
    char * v49; // 0x4133e6
    int32_t result2; // 0x4133fc
    if (v46 != -1 && v47 >= a1) {
        // 0x4133e4
        v49 = (char *)(v41 + v42);
        v48 = v44;
        if ((int32_t)*v49 > a1) {
            // 0x4133f1
            *v3 = a1;
            *v4 = v47;
            *v5 = *v13 + v43;
            result2 = function_4135d0((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
            if (result2 != 0) {
                // 0x4134a2
                *(int32_t *)&g540 = v11;
                *v45 = *v45 - v6;
                *v12 = v42;
                return result2;
            }
            // 0x41340c
            *v49 = v6;
            v48 = *v12;
        }
    }
    int32_t v50 = v42 + 1; // 0x413419
    int32_t v51 = v43 + 0x1000; // 0x41341d
    while (v48 > v50) {
        // 0x4133d3
        v42 = v50;
        v43 = v51;
        v44 = v48;
        v45 = (char *)(v9 + v42);
        v46 = *v45;
        v47 = (int32_t)v46;
        v48 = v44;
        if (v46 != -1 && v47 >= a1) {
            // 0x4133e4
            v49 = (char *)(v41 + v42);
            v48 = v44;
            if ((int32_t)*v49 > a1) {
                // 0x4133f1
                *v3 = a1;
                *v4 = v47;
                *v5 = *v13 + v43;
                result2 = function_4135d0((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
                if (result2 != 0) {
                    // 0x4134a2
                    *(int32_t *)&g540 = v11;
                    *v45 = *v45 - v6;
                    *v12 = v42;
                    return result2;
                }
                // 0x41340c
                *v49 = v6;
                v48 = *v12;
            }
        }
        // 0x413413
        v50 = v42 + 1;
        v51 = v43 + 0x1000;
    }
    goto lab_0x41341f;
  lab_0x4134de:
    // 0x4134de
    *v3 = 4;
    int32_t v52 = 0x1000 * v33; // 0x4134e2
    *v4 = 0x1000;
    *v5 = 0x1000 * (v27 - v33);
    *(int32_t *)(v2 - 16) = *v31 + v52;
    int32_t * memory = VirtualAlloc(&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001); // 0x4134fb
    int32_t v53 = *v31; // 0x413501
    int32_t v54; // 0x413350
    int32_t v55; // 0x413350
    if (v53 + v52 != (int32_t)memory) {
        goto lab_0x4135bd;
    } else {
        int32_t v56 = *v32; // 0x41350f
        if (v56 < v27) {
            // 0x413521
            v55 = v56;
            v54 = 0x1000 * v56 + v53;
            goto lab_0x413526;
        } else {
            goto lab_0x413552;
        }
    }
  lab_0x4134d3_2:
    // 0x4134d3
    v27 = v26;
    if (*(char *)(v29 + 16 + v26) != -1) {
        goto lab_0x4134de;
    } else {
        int32_t v57 = v26 + 1; // 0x4134d9
        v26 = v57;
        v27 = v57;
        if (v30 > v57) {
            goto lab_0x4134d3_2;
        } else {
            goto lab_0x4134de;
        }
    }
  lab_0x413552:
    // 0x413552
    *(int32_t *)&g540 = v29;
    int32_t v58 = v29 + 16;
    int32_t v59 = v27; // 0x41355e
    if (v27 > 1023) {
        goto lab_0x413574;
    } else {
        goto lab_0x413565;
    }
  lab_0x413526:;
    int32_t v60 = v54;
    int32_t v61 = v55 + 1; // 0x413529
    *(int32_t *)v60 = v60 + 8;
    int32_t v62 = v55 + v29; // 0x413533
    *(int32_t *)(v60 + 4) = 240;
    *(char *)(v60 + 248) = -1;
    *(char *)(v62 + 16) = -16;
    *(char *)(v62 + 1040) = -15;
    v55 = v61;
    v54 = v60 + 0x1000;
    if (v61 == v27) {
        goto lab_0x413552;
    } else {
        goto lab_0x413526;
    }
  lab_0x413574:;
    int32_t v63 = -1; // 0x413350
    int32_t v64 = *v32; // 0x413350
    goto lab_0x413589;
  lab_0x413565:;
    int32_t v69 = v59;
    if (*(char *)(v69 + v58) == -1) {
        // 0x413586
        *v32 = -1;
        v63 = v69;
        v64 = *v32;
        goto lab_0x413589;
    } else {
        int32_t v70 = v69 + 1; // 0x41356b
        v59 = v70;
        if (v70 < 1024) {
            goto lab_0x413565;
        } else {
            goto lab_0x413574;
        }
    }
  lab_0x413589:
    // 0x413589
    *v32 = v63;
    int32_t v65 = 0x1000 * v64; // 0x413591
    int32_t v66 = *v31 + v65; // 0x413594
    *(char *)(v66 + 8) = v6;
    *(int32_t *)(v29 + 8) = v64;
    char * v67 = (char *)(v64 + v58); // 0x41359c
    *v67 = *v67 - v6;
    *(int32_t *)v66 = a1 + 8 + v66;
    int32_t * v68 = (int32_t *)(v66 + 4); // 0x4135aa
    *v68 = *v68 - a1;
    return *v31 + (v65 | 256);
}

// Address range: 0x4135d0 - 0x41374c
int32_t function_4135d0(int32_t a1, int32_t a2, uint32_t a3) {
    int32_t * v1 = (int32_t *)(a1 + 4); // 0x4135db
    uint32_t v2 = *v1; // 0x4135db
    int32_t * v3 = (int32_t *)a1; // 0x4135df
    uint32_t v4 = *v3; // 0x4135df
    if (v2 >= a3) {
        // 0x4135e7
        *(char *)v4 = (char)a3;
        if (v4 + a3 >= a1 + 248) {
            // 0x4135fd
            *v1 = 0;
            *v3 = a1 + 8;
        } else {
            // 0x4135f6
            *v3 = *v3 + a3;
            *v1 = *v1 - a3;
        }
        // 0x413609
        return a1 + 128 + 16 * (v4 - a1);
    }
    int32_t v5 = v4 + v2; // 0x41361a
    int32_t v6 = *(char *)v5 == 0 ? v4 : v5;
    uint32_t v7 = a1 + 248; // 0x413626
    int32_t v8 = a2; // 0x413632
    if (v6 + a3 < v7) {
        char * v9 = (char *)v6;
        unsigned char v10 = *v9; // 0x413638
        int32_t v11; // 0x4135d0
        int32_t v12; // 0x4135d0
        int32_t v13; // 0x4135d0
        uint32_t v14; // 0x4135d0
        int32_t v15; // 0x4135d0
        int32_t v16; // 0x4135d0
        int32_t v17; // 0x4135d0
        int32_t v18; // 0x4135d0
        int32_t v19; // 0x41363f
        int32_t v20; // 0x41364c
        int32_t v21; // 0x41364d
        uint32_t v22; // 0x413688
        int32_t v23; // 0x413662
        if (v10 != 0) {
            // 0x41366c
            v11 = v6 + (int32_t)v10;
            v18 = a2;
        } else {
            // 0x41363f
            v19 = v6 + 1;
            v15 = v19;
            v16 = v19;
            v13 = 1;
            if (*(char *)v19 == 0) {
                v20 = v15 + 1;
                v21 = 2;
                v15 = v20;
                v12 = v21;
                v16 = v20;
                v13 = v21;
                while (*(char *)v20 == 0) {
                    // 0x41364c
                    v20 = v15 + 1;
                    v21 = v12 + 1;
                    v15 = v20;
                    v12 = v21;
                    v16 = v20;
                    v13 = v21;
                }
            }
            // 0x413653
            v14 = v13;
            if (v14 >= a3) {
                // 0x413688
                v22 = v6 + a3;
                if (v22 >= v7) {
                    // 0x41369e
                    *v1 = 0;
                    *v3 = a1 + 8;
                    // 0x4136aa
                    *v9 = (char)a3;
                    return a1 + 128 + 16 * (v6 - a1);
                }
                // 0x413695
                *v3 = v22;
                *v1 = v14 - a3;
                // 0x4136aa
                *v9 = (char)a3;
                return a1 + 128 + 16 * (v6 - a1);
            }
            // 0x413657
            v17 = v16;
            if (v4 != v6) {
                // 0x413662
                v23 = a2 - v14;
                v11 = v17;
                v18 = v23;
                if (v23 < a3) {
                    // 0x413681
                    return 0;
                }
            } else {
                // 0x41365b
                *v1 = v14;
                v11 = v17;
                v18 = a2;
            }
        }
        int32_t v24 = v18;
        int32_t v25 = v11;
        v8 = v24;
        while (v25 + a3 < v7) {
            int32_t v26 = v24;
            int32_t v27 = v25;
            v9 = (char *)v27;
            v10 = *v9;
            if (v10 != 0) {
                // 0x41366c
                v11 = v27 + (int32_t)v10;
                v18 = v26;
            } else {
                // 0x41363f
                v19 = v27 + 1;
                v15 = v19;
                v16 = v19;
                v13 = 1;
                if (*(char *)v19 == 0) {
                    v20 = v15 + 1;
                    v21 = 2;
                    v15 = v20;
                    v12 = v21;
                    v16 = v20;
                    v13 = v21;
                    while (*(char *)v20 == 0) {
                        // 0x41364c
                        v20 = v15 + 1;
                        v21 = v12 + 1;
                        v15 = v20;
                        v12 = v21;
                        v16 = v20;
                        v13 = v21;
                    }
                }
                // 0x413653
                v14 = v13;
                if (v14 >= a3) {
                    // 0x413688
                    v22 = v27 + a3;
                    if (v22 >= v7) {
                        // 0x41369e
                        *v1 = 0;
                        *v3 = a1 + 8;
                        // 0x4136aa
                        *v9 = (char)a3;
                        return a1 + 128 + 16 * (v27 - a1);
                    }
                    // 0x413695
                    *v3 = v22;
                    *v1 = v14 - a3;
                    // 0x4136aa
                    *v9 = (char)a3;
                    return a1 + 128 + 16 * (v27 - a1);
                }
                // 0x413657
                v17 = v16;
                if (v4 != v27) {
                    // 0x413662
                    v23 = v26 - v14;
                    v11 = v17;
                    v18 = v23;
                    if (v23 < a3) {
                        // 0x413681
                        return 0;
                    }
                } else {
                    // 0x41365b
                    *v1 = v14;
                    v11 = v17;
                    v18 = v26;
                }
            }
            // 0x413672
            v24 = v18;
            v25 = v11;
            v8 = v24;
        }
    }
    int32_t v28 = a1 + 8; // 0x4136be
    if (v4 <= v28) {
        // 0x413681
        return 0;
    }
    int32_t v29 = v8; // 0x4135d0
    int32_t v30 = v28;
    uint32_t v31 = v30 + a3; // 0x4136c8
    while (v31 <= a1 + 247) {
        int32_t v32 = v29;
        char * v33 = (char *)v30;
        unsigned char v34 = *v33; // 0x4136d5
        int32_t v35; // 0x4135d0
        if (v34 != 0) {
            // 0x4136fe
            v29 = v32;
            v35 = v30 + (int32_t)v34;
        } else {
            int32_t v36 = v30 + 1; // 0x4136dc
            int32_t v37 = v36; // 0x4136e7
            int32_t v38 = v36; // 0x4136e7
            int32_t v39 = 1; // 0x4136e7
            if (*(char *)v36 == 0) {
                int32_t v40 = v37 + 1; // 0x4136e9
                int32_t v41 = 2; // 0x4136ea
                v37 = v40;
                int32_t v42 = v41; // 0x4136ee
                v38 = v40;
                v39 = v41;
                while (*(char *)v40 == 0) {
                    // 0x4136e9
                    v40 = v37 + 1;
                    v41 = v42 + 1;
                    v37 = v40;
                    v42 = v41;
                    v38 = v40;
                    v39 = v41;
                }
            }
            uint32_t v43 = v39;
            if (v43 >= a3) {
                if (v31 >= v7) {
                    // 0x41372c
                    *v1 = 0;
                    *v3 = v28;
                    // 0x413738
                    *v33 = (char)a3;
                    return a1 + 128 + 16 * (v30 - a1);
                }
                // 0x413723
                *v3 = v31;
                *v1 = v43 - a3;
                // 0x413738
                *v33 = (char)a3;
                return a1 + 128 + 16 * (v30 - a1);
            }
            int32_t v44 = v32 - v43; // 0x4136f4
            v29 = v44;
            v35 = v38;
            if (v44 < a3) {
                // break -> 0x413681
                break;
            }
        }
        // 0x413704
        if (v4 <= v35) {
            // break -> 0x413681
            break;
        }
        v30 = v35;
        v31 = v30 + a3;
    }
    // 0x413681
    return 0;
}

// Address range: 0x413750 - 0x413817
int32_t function_413750(uint32_t a1) {
    // 0x413750
    if ((int32_t)g987 <= a1) {
        // 0x4137f9
        g484 = 9;
        g485 = 0;
        return -1;
    }
    int32_t * v1 = (int32_t *)((a1 / 8 & -4) + (int32_t)&g985); // 0x413777
    int32_t v2 = 8 * a1 & 248 | 4;
    if ((*(char *)(*v1 + v2) & 1) == 0) {
        // 0x4137f9
        g484 = 9;
        g485 = 0;
        return -1;
    }
    int32_t v3; // 0x413750
    int32_t v4; // bp-20, 0x413750
    int32_t errorCode; // 0x413750
    if (a1 != 1 == (a1 != 2)) {
        goto lab_0x4137ab;
    } else {
        // 0x413791
        v4 = 2;
        int32_t v5 = function_416600(2); // 0x413793
        v4 = 1;
        int32_t v6 = function_416600(1); // 0x41379f
        int32_t v7; // bp-16, 0x413750
        v3 = &v7;
        errorCode = 0;
        if (v5 == v6) {
            goto lab_0x4137cb;
        } else {
            goto lab_0x4137ab;
        }
    }
  lab_0x4137ab:;
    int32_t hObject = function_416600(a1); // 0x4137ac
    v4 = hObject;
    int32_t v8 = &v4; // 0x4137b4
    v3 = v8;
    errorCode = 0;
    if (!CloseHandle((int32_t *)hObject)) {
        // 0x4137bf
        v3 = v8;
        errorCode = GetLastError();
    }
    goto lab_0x4137cb;
  lab_0x4137cb:;
    int32_t * v9 = (int32_t *)(v3 - 4); // 0x4137cb
    *v9 = a1;
    function_416570((int32_t)&g1001);
    if (errorCode == 0) {
        // 0x4137eb
        *(char *)(*v1 + v2) = 0;
        return 0;
    }
    // 0x4137d8
    *v9 = errorCode;
    function_4144a0((int32_t)&g1001);
    return -1;
}

// Address range: 0x413820 - 0x413859
int32_t function_413820(int32_t a1) {
    int32_t * v1 = (int32_t *)(a1 + 12); // 0x413825
    int32_t v2 = *v1; // 0x413825
    int32_t result = v2; // 0x41382a
    if ((v2 & 131) != 0 && (v2 & 8) != 0) {
        int32_t * v3 = (int32_t *)(a1 + 8); // 0x413830
        result = function_411250(*v3);
        *(int32_t *)a1 = 0;
        *v1 = *v1 & -1033;
        *v3 = 0;
        *(int32_t *)(a1 + 4) = 0;
    }
    // 0x413857
    return result;
}

// Address range: 0x413860 - 0x4138ac
int32_t function_413860(int32_t a1) {
    if (a1 == 0) {
        // 0x413869
        return function_413930(0);
    }
    // 0x413875
    if (function_4138b0(a1) != 0) {
        // 0x413882
        return -1;
    }
    // 0x413889
    if ((*(char *)(a1 + 13) & 64) == 0) {
        // 0x413882
        return 0;
    }
    // 0x41388f
    return function_416650(*(int32_t *)(a1 + 16)) != 0;
}

// Address range: 0x4138b0 - 0x413914
int32_t function_4138b0(int32_t a1) {
    int32_t * v1 = (int32_t *)(a1 + 12); // 0x4138b9
    int32_t v2 = *v1; // 0x4138b9
    int32_t * v3 = (int32_t *)(a1 + 8);
    int32_t * v4; // 0x4138b0
    int32_t result; // 0x4138b0
    if ((v2 & 264) == 0 || (v2 & 3) != 2) {
        // 0x4138b0
        v4 = (int32_t *)a1;
        result = 0;
    } else {
        int32_t v5 = *v3; // 0x4138cd
        int32_t * v6 = (int32_t *)a1;
        uint32_t v7 = *v6 - v5; // 0x4138d2
        v4 = v6;
        result = 0;
        if (v7 >= 1) {
            int32_t v8 = function_4141b0(*(int32_t *)(a1 + 16), v5, v7); // 0x4138de
            int32_t v9 = *v1;
            if (v8 != v7) {
                // 0x4138f9
                *v1 = v9 | 32;
                v4 = v6;
                result = -1;
            } else {
                // 0x4138ea
                v4 = v6;
                result = 0;
                if ((char)v9 <= 255) {
                    // 0x4138f1
                    *v1 = v9 & -3;
                    v4 = v6;
                    result = 0;
                }
            }
        }
    }
    // 0x413902
    *v4 = *v3;
    *(int32_t *)(a1 + 4) = 0;
    return result;
}

// Address range: 0x413920 - 0x41392b
int32_t function_413920(void) {
    // 0x413920
    return function_413930(1);
}

// Address range: 0x413930 - 0x4139b9
int32_t function_413930(int32_t a1) {
    // 0x413930
    int32_t v1; // bp-20, 0x413930
    int32_t v2 = &v1; // 0x413938
    int32_t v3 = 0; // 0x413945
    if (g983 >= 1) {
        int32_t * v4 = (int32_t *)(v2 - 4);
        int32_t v5 = 0; // 0x413930
        int32_t v6 = 0; // 0x413997
        int32_t v7 = 0;
        int32_t v8 = *(int32_t *)(g981 + v5); // 0x413952
        int32_t v9 = v7; // 0x413957
        int32_t v10; // 0x413959
        int32_t v11; // 0x41397f
        if (v8 != 0) {
            // 0x413959
            v10 = *(int32_t *)(v8 + 12);
            v9 = v7;
            if ((v10 & 131) != 0) {
                if (a1 != 1) {
                    // 0x413976
                    v9 = v7;
                    if (a1 == 0 && (v10 & 2) != 0) {
                        // 0x41397e
                        *v4 = v8;
                        v11 = function_413860((int32_t)&g1001);
                        v9 = v7;
                        if (v11 == -1) {
                            // 0x41398c
                            *(int32_t *)(v2 + 16) = -1;
                            v9 = v7;
                        }
                    }
                } else {
                    // 0x413965
                    *v4 = v8;
                    v9 = v7 + (int32_t)(function_413860((int32_t)&g1001) != -1);
                }
            }
        }
        int32_t v12 = v9;
        v6++;
        v5 += 4;
        v3 = v12;
        while (v6 < g983) {
            // 0x41394d
            v7 = v12;
            v8 = *(int32_t *)(g981 + v5);
            v9 = v7;
            if (v8 != 0) {
                // 0x413959
                v10 = *(int32_t *)(v8 + 12);
                v9 = v7;
                if ((v10 & 131) != 0) {
                    if (a1 != 1) {
                        // 0x413976
                        v9 = v7;
                        if (a1 == 0 && (v10 & 2) != 0) {
                            // 0x41397e
                            *v4 = v8;
                            v11 = function_413860((int32_t)&g1001);
                            v9 = v7;
                            if (v11 == -1) {
                                // 0x41398c
                                *(int32_t *)(v2 + 16) = -1;
                                v9 = v7;
                            }
                        }
                    } else {
                        // 0x413965
                        *v4 = v8;
                        v9 = v7 + (int32_t)(function_413860((int32_t)&g1001) != -1);
                    }
                }
            }
            // 0x413994
            v12 = v9;
            v6++;
            v5 += 4;
            v3 = v12;
        }
    }
    int32_t result = v3; // 0x4139ab
    if (a1 != 1) {
        // 0x4139ad
        result = *(int32_t *)(v2 + 16);
    }
    // 0x4139b1
    return result;
}

// Address range: 0x4139c0 - 0x413ab0
int32_t function_4139c0(int32_t a1) {
    int32_t * v1 = (int32_t *)(a1 + 12); // 0x4139c5
    int32_t v2 = *v1; // 0x4139c5
    if ((v2 & 131) == 0) {
        // 0x413aa9
        return -1;
    }
    if ((v2 & 64) != 0) {
        // 0x413aa9
        return -1;
    }
    if ((v2 & 2) != 0) {
        // 0x4139dc
        *v1 = v2 | 32;
        return -1;
    }
    // 0x4139e9
    *v1 = v2 | 1;
    int32_t * v3; // 0x4139c0
    if ((v2 & 268) != 0) {
        int32_t * v4 = (int32_t *)(a1 + 8);
        *(int32_t *)a1 = *v4;
        v3 = v4;
    } else {
        // 0x4139f6
        function_4166c0(a1);
        v3 = (int32_t *)(a1 + 8);
    }
    int32_t * v5 = (int32_t *)(a1 + 24); // 0x413a06
    int32_t * v6 = (int32_t *)(a1 + 16); // 0x413a0d
    int32_t v7 = function_413ab0(*v6, *v3, *v5); // 0x413a12
    int32_t * v8 = (int32_t *)(a1 + 4); // 0x413a1a
    *v8 = v7;
    if (v7 < 1) {
        // 0x413a8d
        *v1 = *v1 | (v7 == 0 ? 16 : 32);
        *v8 = 0;
        return -1;
    }
    int32_t v9 = *v1; // 0x413a26
    int32_t v10 = v9; // 0x413a2c
    if ((v9 & 130) == 0) {
        int32_t v11 = *v6; // 0x413a2e
        int32_t v12 = &g532; // 0x413a39
        if (v11 != -1) {
            int32_t v13 = *(int32_t *)((v11 >> 3 & -4) + (int32_t)&g985); // 0x413a46
            v12 = v13 + (8 * v11 & 248);
        }
        // 0x413a4f
        v10 = v9;
        if ((*(char *)(v12 + 4) & -126) == -126) {
            int32_t v14 = v9 | 0x2000; // 0x413a58
            *v1 = v14;
            v10 = v14;
        }
    }
    // 0x413a61
    if (!(((v10 & 8) == 0 | *v5 != 512))) {
        if ((v10 & 1024) == 0) {
            // 0x413a76
            *v5 = 0x1000;
        }
    }
    // 0x413a7d
    *v8 = *v8 - 1;
    int32_t * v15 = (int32_t *)a1; // 0x413a80
    int32_t v16 = *v15; // 0x413a80
    *v15 = v16 + 1;
    return (int32_t)*(char *)v16;
}

// Address range: 0x413ab0 - 0x413d13
int32_t function_413ab0(uint32_t a1, int32_t a2, int32_t a3) {
    // 0x413ab0
    if ((int32_t)g987 <= a1) {
        // 0x413cf2
        g484 = 9;
        g485 = 0;
        return -1;
    }
    int32_t v1 = 8 * a1 & 248; // 0x413ada
    int32_t * v2 = (int32_t *)((a1 / 8 & -4) + (int32_t)&g985); // 0x413ae1
    int32_t v3 = *v2 + v1;
    char v4 = *(char *)(v3 + 4); // 0x413ae6
    if ((v4 & 1) == 0) {
        // 0x413cf2
        g484 = 9;
        g485 = 0;
        return -1;
    }
    // 0x413af0
    if (a3 == 0 || (v4 & 2) != 0) {
        // 0x413b79
        return 0;
    }
    int32_t v5 = v3; // 0x413b16
    char * v6 = NULL; // 0x413b16
    int32_t nNumberOfBytesToRead = a3; // 0x413b16
    int32_t lpBuffer = a2; // 0x413b16
    if ((v4 & 72) != 0) {
        char v7 = *(char *)(v3 + 5); // 0x413b18
        v5 = v3;
        v6 = NULL;
        nNumberOfBytesToRead = a3;
        lpBuffer = a2;
        if (v7 != 10) {
            // 0x413b1f
            *(char *)a2 = v7;
            *(char *)(*v2 + (v1 | 5)) = 10;
            v5 = *v2 + v1;
            v6 = (char *)1;
            nNumberOfBytesToRead = a3 - 1;
            lpBuffer = a2 + 1;
        }
    }
    int32_t hFile = *(int32_t *)v5; // 0x413b3f
    int32_t v8 = hFile; // bp-52, 0x413b42
    int32_t lpNumberOfBytesRead; // bp-8, 0x413ab0
    bool v9 = ReadFile((int32_t *)hFile, (int32_t *)lpBuffer, nNumberOfBytesToRead, &lpNumberOfBytesRead, NULL); // 0x413b43
    if (!v9) {
        int32_t errorCode = GetLastError(); // 0x413b4d
        if (errorCode == 5) {
            // 0x413b58
            g485 = errorCode;
            g484 = 9;
            return -1;
        }
        // 0x413b74
        if (errorCode == 109) {
            // 0x413b79
            return 0;
        }
        // 0x413b83
        function_4144a0(errorCode);
        return -1;
    }
    int32_t v10 = &v8; // 0x413b42
    int32_t v11 = v1 | 4;
    char * v12 = (char *)(*v2 + v11); // 0x413ba8
    char v13 = *v12; // 0x413ba8
    if (v13 > -1) {
        // 0x413b79
        return *(int32_t *)(v10 + 20);
    }
    // 0x413bb3
    char v14; // 0x413ab0
    int32_t v15; // 0x413ab0
    if (v15 == 0) {
        // 0x413bc8
        v14 = v13 & -5;
        goto lab_0x413bcb;
    } else {
        // 0x413bba
        if (*v6 != 10) {
            // 0x413bc8
            v14 = v13 & -5;
            goto lab_0x413bcb;
        } else {
            // 0x413bc3
            v14 = v13 | 4;
            goto lab_0x413bcb;
        }
    }
  lab_0x413cb4:;
    // 0x413cb4
    int32_t v16; // 0x413ab0
    int32_t v17 = v16; // 0x413cb4
    int32_t v18; // 0x413ab0
    int32_t v19 = v18; // 0x413cb4
    int32_t v20; // 0x413ab0
    int32_t v21 = v20 + 1; // 0x413cb4
    goto lab_0x413cb5;
  lab_0x413cb5:;
    int32_t v22 = v17; // 0x413cb9
    int32_t v23 = v19; // 0x413cb9
    int32_t v24 = v21; // 0x413cb9
    int32_t v25 = v17; // 0x413cb9
    int32_t v26 = v21; // 0x413cb9
    if (v19 >= *(int32_t *)(v17 + 28)) {
        goto lab_0x413cd4;
    }
    goto lab_0x413be5;
  lab_0x413cb1:
    // 0x413cb1
    *(char *)v20 = 13;
    int32_t v32; // 0x413c3d
    v16 = v32;
    int32_t v30; // 0x413ab0
    v18 = v30;
    goto lab_0x413cb4;
  lab_0x413c99:;
    // 0x413c99
    int32_t v28; // 0x413ab0
    *(int32_t *)(v28 - 24) = 1;
    *(int32_t *)(v28 - 28) = -1;
    *(int32_t *)(v28 - 32) = *(int32_t *)(v28 + 16);
    function_4143e0((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
    v17 = v32;
    v19 = v30;
    v21 = v20;
    char * v34; // 0x413ab0
    if (*v34 == 10) {
        goto lab_0x413cb5;
    } else {
        goto lab_0x413cb1;
    }
  lab_0x413bcb:;
    int32_t v37 = (int32_t)v6; // 0x413bcb
    *v12 = v14;
    v25 = v10;
    v26 = v37;
    if (v15 - 1 + v15 < -1 - v37) {
        // 0x413be5
        v22 = v10;
        v23 = v37;
        v24 = v37;
        while (true) {
          lab_0x413be5:
            // 0x413be5
            v20 = v24;
            uint32_t v27 = v23;
            v28 = v22;
            char v29 = *(char *)v27; // 0x413be5
            switch (v29) {
                case 26: {
                    goto lab_0x413cc1;
                }
                case 13: {
                    // 0x413bfb
                    v30 = v27 + 1;
                    if (*(int32_t *)(v28 + 28) - 1 > v27) {
                        // 0x413c04
                        if (*(char *)v30 != 10) {
                            // 0x413c17
                            *(char *)v20 = 13;
                            v16 = v28;
                            v18 = v30;
                        } else {
                            // 0x413c0c
                            *(char *)v20 = 10;
                            v16 = v28;
                            v18 = v27 + 2;
                        }
                        goto lab_0x413cb4;
                    } else {
                        // 0x413c20
                        *(int32_t *)(v28 - 4) = 0;
                        *(int32_t *)(v28 - 8) = v28 + 24;
                        int32_t * v31 = (int32_t *)(v28 + 20); // 0x413c2f
                        *v31 = 0;
                        *(int32_t *)(v28 - 12) = 1;
                        *(int32_t *)(v28 - 16) = v28 + 19;
                        v32 = v28 - 20;
                        *(int32_t *)v32 = *(int32_t *)(*v2 + v1);
                        int32_t v33; // 0x413ab0
                        if (ReadFile(&g1001, &g1001, (int32_t)&g1001, &g1001, (struct _OVERLAPPED *)&g1001)) {
                            // 0x413c20
                            v33 = *(int32_t *)v28;
                        } else {
                            int32_t errorCode2 = GetLastError(); // 0x413c48
                            *(int32_t *)v28 = errorCode2;
                            v33 = errorCode2;
                        }
                        // 0x413c52
                        if (v33 != 0) {
                            goto lab_0x413cb1;
                        } else {
                            // 0x413c59
                            if (*(int32_t *)(v28 + 4) == 0) {
                                goto lab_0x413cb1;
                            } else {
                                // 0x413c60
                                if ((*(char *)(*v2 + v11) & 72) == 0) {
                                    // 0x413c87
                                    v34 = (char *)(v28 - 1);
                                    if (v20 != *v31) {
                                        goto lab_0x413c99;
                                    } else {
                                        // 0x413c8d
                                        if (*v34 != 10) {
                                            goto lab_0x413c99;
                                        } else {
                                            // 0x413c94
                                            *(char *)v20 = 10;
                                            v16 = v32;
                                            v18 = v30;
                                            goto lab_0x413cb4;
                                        }
                                    }
                                } else {
                                    char * v35 = (char *)(v28 - 1); // 0x413c6a
                                    char * v36 = (char *)v20;
                                    if (*v35 != 10) {
                                        // 0x413c76
                                        *v36 = 13;
                                        *(char *)(*v2 + (v1 | 5)) = *v35;
                                        v17 = v32;
                                        v19 = v30;
                                        v21 = v20 + 1;
                                        goto lab_0x413cb5;
                                    } else {
                                        // 0x413c71
                                        *v36 = 10;
                                        v16 = v32;
                                        v18 = v30;
                                        goto lab_0x413cb4;
                                    }
                                }
                            }
                        }
                    }
                }
                default: {
                    // 0x413bf3
                    *(char *)v20 = v29;
                    v16 = v28;
                    v18 = v27 + 1;
                    goto lab_0x413cb4;
                }
            }
        }
      lab_0x413cc1:;
        char * v38 = (char *)(*v2 + v11); // 0x413cc8
        char v39 = *v38; // 0x413cc8
        v25 = v28;
        v26 = v20;
        if ((v39 & 64) == 0) {
            // 0x413ccf
            *v38 = v39 | 2;
            v25 = v28;
            v26 = v20;
        }
    }
  lab_0x413cd4:;
    int32_t result = v26 - *(int32_t *)(v25 + 40); // 0x413cd4
    *(int32_t *)(v25 + 20) = result;
    // 0x413b79
    return result;
}

// Address range: 0x413d20 - 0x413dcd
int32_t function_413d20(int32_t a1, uint32_t a2, int32_t a3, uint32_t a4) {
    int32_t * v1 = (int32_t *)(a1 + 12); // 0x413d26
    int32_t v2 = *v1; // 0x413d26
    if ((v2 & 131) == 0) {
        // 0x413dbb
        g484 = 22;
        return -1;
    }
    if (a4 > 1 == (a4 != 2)) {
        // 0x413dbb
        g484 = 22;
        return -1;
    }
    // 0x413d43
    *v1 = v2 & -17;
    int32_t v3 = a3; // 0x413d4c
    int32_t v4 = a2; // 0x413d4c
    int32_t v5 = a4; // 0x413d4c
    if (a4 == 1) {
        // 0x413d4e
        v4 = function_416800(a1) + a2;
        int32_t v6; // 0x413d20
        v3 = v6 + a3 + (int32_t)(v4 < a2);
        v5 = 0;
    }
    // 0x413d61
    function_4138b0(a1);
    int32_t v7 = *v1; // 0x413d6a
    int32_t v8; // 0x413d96
    if ((char)v7 <= -1) {
        // 0x413d71
        *v1 = v7 & -4;
        // 0x413d8d
        v8 = *(int32_t *)(a1 + 16);
        return (function_416710(v8, v4, v3, v5) & v8) == -1;
    }
    if ((v7 & 9) != 9) {
        // 0x413d8d
        v8 = *(int32_t *)(a1 + 16);
        return (function_416710(v8, v4, v3, v5) & v8) == -1;
    }
    if ((v7 & 1024) == 0) {
        // 0x413d86
        *(int32_t *)(a1 + 24) = 512;
    }
    // 0x413d8d
    v8 = *(int32_t *)(a1 + 16);
    return (function_416710(v8, v4, v3, v5) & v8) == -1;
}

// Address range: 0x413dd0 - 0x413f6b
int32_t function_413dd0(int32_t a1, int32_t a2, int32_t a3, int32_t result) {
    // 0x413dd0
    int32_t v1; // bp-20, 0x413dd0
    int32_t v2 = &v1; // 0x413ddf
    g1004 = v2;
    int32_t v3 = 265; // 0x413dd0
    int32_t v4; // 0x413dd0
    int32_t v5; // 0x413dd0
    switch (*(char *)a2) {
        case 114: {
            // 0x413e02
            v4 = 0;
            v5 = g566 | 1;
            // break -> 0x413e1d
            break;
        }
        case 119: {
            // 0x413e14
            v3 = 769;
        }
        case 97: {
            // 0x413e14
            v4 = v3;
            v5 = g566 | 2;
            // break -> 0x413e1d
            break;
        }
        default: {
            // 0x413df1
            return 0;
        }
    }
    int32_t v6 = a2 + 1; // 0x413e22
    int32_t v7 = v6; // 0x413e27
    int32_t v8 = v4; // 0x413e27
    int32_t v9 = v5; // 0x413e27
    if (*(char *)v6 != 0) {
        int32_t v10 = v5;
        int32_t v11 = 1;
        int32_t v12 = v4;
        v8 = v12;
        v9 = v10;
        while (v11 != 0) {
            int32_t v13 = v12; // 0x413e56
            int32_t v14 = 0; // 0x413e56
            int32_t v15 = v10; // 0x413e56
            switch (v2) {
                case 0: {
                    // 0x413e64
                    v13 = v12;
                    v14 = 0;
                    v15 = v10;
                    if ((v12 & 2) == 0) {
                        // 0x413e70
                        v13 = v12 & -4 | 2;
                        v14 = v11;
                        v15 = v10 & -132 | 128;
                    }
                    // break -> 0x413f14
                    break;
                }
                case 8: {
                    // 0x413f05
                    v13 = (v12 & 0xc000) == 0 ? v12 | 0x4000 : v12;
                    v14 = (v12 & 0xc000) == 0 ? v11 : 0;
                    v15 = v10;
                    // break -> 0x413f14
                    break;
                }
                case 4: {
                    // 0x413eb9
                    v13 = v12 | 0x1000;
                    v14 = (v12 & 0x1000) == 0 ? v11 : 0;
                    v15 = v10;
                    // break -> 0x413f14
                    break;
                }
            }
            // 0x413f14
            v7++;
            v8 = v13;
            v9 = v15;
            if (*(char *)v7 == 0) {
                // break -> 0x413f1e
                break;
            }
            v10 = v15;
            v11 = v14;
            v12 = v13;
            v8 = v12;
            v9 = v10;
        }
    }
    int32_t v16 = function_4169e0(a1, v8, a3, 420); // 0x413f2e
    if (v16 < 0) {
        // 0x413df1
        return 0;
    }
    // 0x413f46
    g552++;
    *(int32_t *)(result + 12) = v9;
    *(int32_t *)(result + 4) = 0;
    *(int32_t *)result = 0;
    *(int32_t *)(result + 8) = 0;
    *(int32_t *)(result + 28) = 0;
    *(int32_t *)(result + 16) = v16;
    return result;
}

// Address range: 0x413fe0 - 0x41405e
int32_t function_413fe0(void) {
    // 0x413fe0
    if (g983 < 1) {
        // 0x414059
        return 0;
    }
    int32_t v1 = g981; // 0x413ff4
    int32_t v2 = 0;
    int32_t v3 = *(int32_t *)v1; // 0x413ff9
    int32_t v4; // 0x413fe0
    while (v3 != 0) {
        // 0x413fff
        if ((*(int32_t *)(v3 + 12) & 131) == 0) {
            // 0x414012
            v4 = 4 * v2 + g981;
            goto lab_0x41403e;
        }
        int32_t v5 = v2 + 1; // 0x414007
        v1 += 4;
        if (g983 <= v5) {
            // 0x414059
            return 0;
        }
        v2 = v5;
        v3 = *(int32_t *)v1;
    }
    int32_t v6 = function_4111a0(32); // 0x41401e
    int32_t v7 = 4 * v2; // 0x41402c
    *(int32_t *)(g981 + v7) = v6;
    v4 = g981 + v7;
    goto lab_0x41403e;
  lab_0x41403e:;
    int32_t v8 = *(int32_t *)v4;
    int32_t result = 0; // 0x414042
    if (v8 != 0) {
        // 0x414044
        *(int32_t *)(v8 + 4) = 0;
        *(int32_t *)(v8 + 12) = 0;
        *(int32_t *)(v8 + 8) = 0;
        *(int32_t *)v8 = 0;
        *(int32_t *)(v8 + 28) = 0;
        *(int32_t *)(v8 + 16) = -1;
        result = v8;
    }
    // 0x414059
    return result;
}

// Address range: 0x414060 - 0x4141a8
int32_t function_414060(int32_t a1) {
    int32_t * v1 = (int32_t *)(a1 + 12); // 0x41406b
    int32_t v2 = *v1; // 0x41406b
    if ((v2 & 130) == 0) {
        // 0x414198
        *v1 = v2 | 32;
        return -1;
    }
    if ((v2 & 64) != 0) {
        // 0x414198
        *v1 = v2 | 32;
        return -1;
    }
    int32_t v3 = *(int32_t *)(a1 + 16); // 0x414068
    int32_t * v4 = (int32_t *)(a1 + 4);
    int32_t v5 = v2; // 0x414080
    if ((v2 & 1) != 0) {
        // 0x414082
        *v4 = 0;
        int32_t v6 = *v1; // 0x414089
        if ((v6 & 16) == 0) {
            // 0x414114
            *v1 = v6 | 32;
            return -1;
        }
        // 0x414094
        *(int32_t *)a1 = *(int32_t *)(a1 + 8);
        v5 = *v1 & -2;
        *v1 = v5;
    }
    // 0x41409d
    *v1 = v5 & -19 | 2;
    *v4 = 0;
    if ((*v1 & 268) != 0) {
        goto lab_0x4140e4;
    } else {
        if (a1 != (int32_t)&g549 == (a1 != (int32_t)&g550)) {
            // 0x4140db
            function_4166c0(a1);
            goto lab_0x4140e4;
        } else {
            // 0x4140ce
            if (function_416e00(v3) != 0) {
                goto lab_0x4140e4;
            } else {
                // 0x4140db
                function_4166c0(a1);
                goto lab_0x4140e4;
            }
        }
    }
  lab_0x4140e4:;
    // 0x4140e4
    int32_t v7; // bp-16, 0x414060
    int32_t v8 = &v7; // 0x414067
    int32_t v9; // 0x414060
    int32_t v10; // 0x414060
    if ((*v1 & 264) == 0) {
        // 0x414162
        int32_t v11; // 0x414060
        int32_t v12 = function_4141b0(v3, (int32_t)&v11, 1); // 0x41416e
        v10 = 1;
        v9 = v12;
    } else {
        int32_t * v13 = (int32_t *)(a1 + 8); // 0x4140ed
        int32_t v14 = *v13; // 0x4140ed
        int32_t * v15 = (int32_t *)a1; // 0x4140f0
        int32_t v16 = *v15 - v14; // 0x4140f2
        *v15 = v14 + 1;
        *v4 = *(int32_t *)(a1 + 24) - 1;
        int32_t v17; // 0x414060
        if (v16 < 1) {
            int32_t v18 = &g532; // 0x41412c
            if (v3 != -1) {
                int32_t v19 = *(int32_t *)((v3 >> 3 & -4) + (int32_t)&g985); // 0x41413b
                v18 = v19 + (8 * v3 & 248);
            }
            // 0x414144
            v17 = 0;
            if ((*(char *)(v18 + 4) & 32) != 0) {
                // 0x41414a
                function_4143e0(v3, 0, 2);
                v17 = 0;
            }
        } else {
            // 0x414102
            v17 = function_4141b0(v3, *v13, v16);
        }
        // 0x414157
        *(char *)*v13 = *(char *)(v8 + 20);
        v10 = v16;
        v9 = v17;
    }
    // 0x414178
    if (v9 == v10) {
        // 0x41418a
        return *(int32_t *)(v8 + 20) & 255;
    }
    // 0x41417c
    *v1 = *v1 | 32;
    return -1;
}

// Address range: 0x4141b0 - 0x4143db
int32_t function_4141b0(uint32_t a1, int32_t lpBuffer, uint32_t nNumberOfBytesToWrite) {
    // 0x4141b0
    if ((int32_t)g987 <= a1) {
        // 0x4143b7
        g484 = 9;
        g485 = 0;
        return -1;
    }
    int32_t v1 = 8 * a1 & 248; // 0x4141e4
    int32_t * v2 = (int32_t *)((a1 / 8 & -4) + (int32_t)&g985); // 0x4141e7
    int32_t v3 = *v2; // 0x4141e7
    char v4 = *(char *)(v3 + (v1 | 4)); // 0x4141ef
    if ((v4 & 1) == 0) {
        // 0x4143b7
        g484 = 9;
        g485 = 0;
        return -1;
    }
    if (nNumberOfBytesToWrite == 0) {
        // 0x41420c
        return 0;
    }
    int32_t v5 = v3; // 0x41421b
    if ((v4 & 32) != 0) {
        // 0x41421d
        function_4143e0(a1, 0, 2);
        v5 = *v2;
    }
    int32_t v6 = v5 + v1; // 0x414232
    int32_t v7 = lpBuffer; // 0x414238
    int32_t v8; // bp-1064, 0x4141b0
    int32_t v9 = &v8; // 0x414238
    int32_t v10 = 0; // 0x414238
    int32_t v11; // 0x4141b0
    int32_t v12; // 0x4141b0
    int32_t v13; // 0x4141b0
    int32_t v14; // 0x4141b0
    int32_t v15; // 0x4141b0
    int32_t v16; // 0x4141b0
    int32_t v17; // 0x41425e
    if (*(char *)(v6 + 4) > -1) {
        int32_t hFile = *(int32_t *)v6; // 0x4142d5
        int32_t v18 = hFile; // bp-1084, 0x4142d8
        int32_t v19 = &v18; // 0x4142d8
        int32_t lpNumberOfBytesWritten; // bp-1044, 0x4141b0
        bool v20 = WriteFile((int32_t *)hFile, (int32_t *)lpBuffer, nNumberOfBytesToWrite, &lpNumberOfBytesWritten, NULL); // 0x4142d9
        v15 = v19;
        v12 = 0;
        v16 = v19;
        v13 = 0;
        if (!v20) {
          lab_0x4142f5:
            // 0x4142f5
            *(int32_t *)(v15 + 16) = GetLastError();
            v16 = v15;
            v13 = v12;
        }
    } else {
        while (true) {
          lab_0x41424d:
            // 0x41424d
            v14 = v9;
            int32_t * v21 = (int32_t *)(v14 + 1072); // 0x41424f
            v16 = v14;
            v13 = v10;
            if (v7 - *v21 >= nNumberOfBytesToWrite) {
                // break -> 0x4142ff
                break;
            }
            // 0x41426f
            v17 = v14 + 36;
            int32_t v22 = v10;
            int32_t v23 = v17;
            char v24 = *(char *)v7; // 0x41426f
            int32_t v25 = v22; // 0x414274
            int32_t v26 = v23; // 0x414274
            if (v24 == 10) {
                // 0x414276
                *(char *)v23 = 13;
                v25 = v22 + 1;
                v26 = v23 + 1;
            }
            // 0x41427b
            v7++;
            v10 = v25;
            *(char *)v26 = v24;
            int32_t v27 = v26 + 1; // 0x41427d
            int32_t v28 = v27 - v17;
            v11 = v28;
            while (v28 < 1024) {
                int32_t v29 = v27; // 0x41426d
                int32_t v30 = v7; // 0x41426d
                if (v7 - *v21 >= nNumberOfBytesToWrite) {
                    // 0x414262
                    v11 = v27 - v17;
                    goto lab_0x41428d;
                }
                v22 = v10;
                v23 = v29;
                v24 = *(char *)v30;
                v25 = v22;
                v26 = v23;
                if (v24 == 10) {
                    // 0x414276
                    *(char *)v23 = 13;
                    v25 = v22 + 1;
                    v26 = v23 + 1;
                }
                // 0x41427b
                v7 = v30 + 1;
                v10 = v25;
                *(char *)v26 = v24;
                v27 = v26 + 1;
                v28 = v27 - v17;
                v11 = v28;
            }
            goto lab_0x41428d;
        }
    }
  lab_0x4142ff:;
    int32_t v31 = *(int32_t *)(v16 + 32); // 0x4142ff
    if (v31 != 0) {
        // 0x4143a6
        return v31 - v13;
    }
    int32_t * v32 = (int32_t *)(v16 + 16); // 0x41430a
    int32_t v33 = *v32; // 0x41430a
    if (v33 != 0) {
        if (v33 != 5) {
            // 0x41433b
            *(int32_t *)(v16 - 4) = v33;
            function_4144a0((int32_t)&g1001);
            return -1;
        }
        // 0x414318
        g484 = 9;
        g485 = *v32;
        return -1;
    }
    int32_t v34 = *(int32_t *)*(int32_t *)(v16 + 24); // 0x414360
    if ((*(char *)(*(int32_t *)(v16 + 28) + 4 + v34) & 64) == 0 || *(char *)*(int32_t *)(v16 + 1072) != 26) {
        // 0x414382
        g484 = 28;
        g485 = 0;
        return -1;
    }
    // 0x41420c
    return 0;
  lab_0x41428d:
    // 0x41428d
    *(int32_t *)(v14 - 4) = 0;
    *(int32_t *)(v14 - 8) = v14 + 20;
    *(int32_t *)(v14 - 12) = v11;
    *(int32_t *)(v14 - 16) = v17;
    int32_t v35 = *(int32_t *)*(int32_t *)(v14 + 24); // 0x4142a4
    v9 = v14 - 20;
    *(int32_t *)v9 = *(int32_t *)(*(int32_t *)(v14 + 28) + v35);
    bool v36 = WriteFile(&g1001, &g1001, (int32_t)&g1001, &g1001, (struct _OVERLAPPED *)&g1001); // 0x4142ae
    v15 = v9;
    v12 = v10;
    if (!v36) {
        goto lab_0x4142f5;
    }
    int32_t v37 = *(int32_t *)v14; // 0x4142b8
    int32_t * v38 = (int32_t *)(v14 + 12); // 0x4142bc
    *v38 = *v38 + v37;
    v16 = v9;
    v13 = v10;
    if (v37 < v11) {
        // break -> 0x4142ff
        goto lab_0x4142ff;
    }
    goto lab_0x41424d;
}

// Address range: 0x4143e0 - 0x41449c
int32_t function_4143e0(uint32_t a1, int32_t lDistanceToMove, int32_t dwMoveMethod) {
    // 0x4143e0
    if ((int32_t)g987 <= a1) {
        // 0x41447f
        g484 = 9;
        g485 = 0;
        return -1;
    }
    int32_t * v1 = (int32_t *)((a1 / 8 & -4) + (int32_t)&g985); // 0x414406
    int32_t v2 = 8 * a1 & 248 | 4;
    if ((*(char *)(*v1 + v2) & 1) == 0) {
        // 0x41447f
        g484 = 9;
        g485 = 0;
        return -1;
    }
    int32_t hFile = function_416600(a1); // 0x414417
    if (hFile == -1) {
        // 0x414424
        g484 = 9;
        return -1;
    }
    int32_t result = SetFilePointer((int32_t *)hFile, lDistanceToMove, NULL, dwMoveMethod); // 0x414444
    char * v3; // 0x414475
    if (result != -1) {
        // 0x414472
        v3 = (char *)(*v1 + v2);
        *v3 = *v3 & -3;
        return result;
    }
    int32_t errorCode = GetLastError(); // 0x414456
    if (errorCode != 0) {
        // 0x414460
        function_4144a0(errorCode);
        return -1;
    }
    // 0x414472
    v3 = (char *)(*v1 + v2);
    *v3 = *v3 & -3;
    return result;
}

// Address range: 0x4144a0 - 0x414509
int32_t function_4144a0(int32_t a1) {
    // 0x4144a0
    g485 = a1;
    int32_t v1 = &g543; // 0x4144ab
    int32_t v2 = 0;
    while (*(int32_t *)v1 != a1) {
        // 0x4144b5
        v1 += 8;
        int32_t result = v2 + 1; // 0x4144b8
        if (v1 >= (int32_t)&g545) {
            if (a1 < 37) {
                // 0x4144cb
                g484 = 13;
                return result;
            }
            if (a1 < 203) {
                // 0x4144f3
                g484 = 8;
                return result;
            }
            // 0x4144fe
            g484 = 22;
            return result;
        }
        v2 = result;
    }
    int32_t result2 = *(int32_t *)(8 * v2 + (int32_t)&g544); // 0x4144d6
    g484 = result2;
    return result2;
}

// Address range: 0x414510 - 0x414515
int32_t function_414510(int32_t a1) {
    // 0x414510
    int32_t v1; // 0x414510
    return v1 - 1;
}

// Address range: 0x414526 - 0x4145dc
int32_t function_414526(int32_t a1) {
    // 0x414526
    int32_t v1; // 0x414526
    int32_t v2 = 256 * v1; // 0x414529
    int32_t v3 = v2; // 0x414536
    int32_t v4 = a1; // 0x414536
    int32_t result; // 0x414526
    if ((a1 & 3) == 0) {
      lab_0x41454b:;
        int32_t v5 = v3 | v1; // 0x41454b
        char v6 = v5;
        int32_t v7 = v4; // 0x414554
        while (true) {
            int32_t v8 = v7;
            uint32_t v9 = *(int32_t *)v8; // 0x414556
            int32_t v10 = v9 ^ (0x10000 * v5 | v5); // 0x414561
            if (((v10 ^ -0x7efeff00 ^ v10 + 0x7efefeff) & -0x7efeff00) != 0) {
                char v11 = v9; // 0x41459b
                result = v8;
                if (v11 == v6) {
                    // break -> 0x414594
                    break;
                }
                // 0x41459f
                result = 0;
                if (v11 == 0) {
                    // break -> 0x414594
                    break;
                }
                char v12 = v9 / 256; // 0x4145a3
                if (v12 == v6) {
                    // 0x4145ce
                    return v8 + 1;
                }
                // 0x4145a7
                result = 0;
                if (v12 == 0) {
                    // break -> 0x414594
                    break;
                }
                char v13 = v9 / 0x10000; // 0x4145ae
                if (v13 == v6) {
                    // 0x4145c7
                    return v8 + 2;
                }
                // 0x4145b2
                result = 0;
                if (v13 == 0) {
                    // break -> 0x414594
                    break;
                }
                char v14 = v9 / 0x1000000; // 0x4145b6
                if (v14 == v6) {
                    // 0x4145c0
                    return v8 + 3;
                }
                // 0x4145ba
                result = 0;
                if (v14 == 0) {
                    // break -> 0x414594
                    break;
                }
            } else {
                int32_t v15 = v9 + 0x7efefeff; // 0x414563
                int32_t v16 = v9 ^ -0x7efeff00 ^ v15; // 0x41456f
                if ((v16 & -0x7efeff00) != 0) {
                    // 0x414583
                    result = 0;
                    if (v15 <= -1 != ((v16 & 0x1010100) == 0)) {
                        // break -> 0x414594
                        break;
                    }
                }
            }
            // 0x414556
            v7 = v8 + 4;
        }
    } else {
        int32_t v17 = a1; // 0x41453a
        char v18 = *(char *)v17; // 0x414538
        int32_t v19 = v2; // 0x41453d
        if (v18 == (char)v1) {
            v19 = function_414510((int32_t)&g1001);
        }
        // 0x41453f
        result = 0;
        while (v18 != 0) {
            // 0x414543
            v17++;
            v3 = v19;
            v4 = v17;
            if ((v17 & 3) == 0) {
                goto lab_0x41454b;
            }
            v18 = *(char *)v17;
            if (v18 == (char)v1) {
                v19 = function_414510((int32_t)&g1001);
            }
            // 0x41453f
            result = 0;
        }
    }
    // 0x414594
    return result;
}

// Address range: 0x4145e0 - 0x414672
int32_t function_4145e0(int32_t * a1) {
    int32_t v1 = (int32_t)a1;
    if (function_416e00(*(int32_t *)(v1 + 16)) == 0) {
        // 0x4145f6
        return 0;
    }
    int32_t v2 = &g546; // 0x414601
    if (a1 != &g549) {
        // 0x414607
        v2 = (int32_t)&g546 + 4;
        if (a1 != &g550) {
            // 0x4145f6
            return 0;
        }
    }
    // 0x414614
    g552++;
    int32_t * v3 = (int32_t *)(v1 + 12); // 0x41461a
    if ((*v3 & 268) != 0) {
        // 0x4145f6
        return 0;
    }
    int32_t * v4 = (int32_t *)v2; // 0x41462f
    int32_t v5 = *v4; // 0x41462f
    int32_t v6 = v5; // 0x414632
    if (v5 == 0) {
        // 0x414634
        v6 = function_4111a0(0x1000);
        *v4 = v6;
        if (v6 == 0) {
            // 0x4145f6
            return 0;
        }
    }
    // 0x41464c
    *(int32_t *)(v1 + 8) = v6;
    *a1 = v6;
    *(int32_t *)(v1 + 24) = 0x1000;
    *(int32_t *)(v1 + 4) = 0x1000;
    *v3 = *v3 | 0x1102;
    return 1;
}

// Address range: 0x414680 - 0x4146c9
int32_t function_414680(int32_t a1, int32_t * a2) {
    int32_t v1 = (int32_t)a2;
    char v2 = *(char *)(v1 + 13);
    int32_t result2; // 0x414680
    if (a1 == 0) {
        if ((v2 & 16) != 0) {
            // 0x4146be
            result2 = function_4138b0(v1);
        }
    } else {
        if ((v2 & 16) != 0) {
            int32_t result = function_4138b0(v1); // 0x414693
            int32_t * v3 = (int32_t *)(v1 + 12); // 0x414698
            *v3 = *v3 & -0x1101;
            *(int32_t *)(v1 + 24) = 0;
            *a2 = 0;
            *(int32_t *)(v1 + 8) = 0;
            return result;
        }
    }
    // 0x4146c7
    return result2;
}

// Address range: 0x4146d0 - 0x414791
int32_t function_4146d0(void) {
    int32_t v1 = g983; // 0x4146d0
    int32_t v2; // 0x4146d0
    if (v1 != 0) {
        // 0x4146e6
        v2 = v1;
        if (v1 <= 19) {
            // 0x4146ef
            g983 = 20;
            v2 = 20;
        }
    } else {
        // 0x4146da
        g983 = 512;
        v2 = 512;
    }
    int32_t v3 = function_4117e0(v2, 4); // 0x414701
    g981 = v3;
    if (v3 == 0) {
        // 0x414712
        g983 = 20;
        int32_t v4 = function_4117e0(20, 4); // 0x414720
        g981 = v4;
        if (v4 == 0) {
            // 0x414731
            function_411170(26);
        }
    }
    int32_t v5 = (int32_t)&g547; // 0x414740
    int32_t v6 = 0;
    int32_t v7 = v6 + 4; // 0x414748
    *(int32_t *)(g981 + v6) = v5;
    v5 += 32;
    int32_t v8 = 0; // 0x414755
    while (v7 < 80) {
        // 0x414742
        v6 = v7;
        v7 = v6 + 4;
        *(int32_t *)(g981 + v6) = v5;
        v5 += 32;
        v8 = 0;
    }
    int32_t v9 = &g548;
    int32_t v10 = *(int32_t *)((v8 >> 3 & -4) + (int32_t)&g985); // 0x41476b
    int32_t result = *(int32_t *)((8 * v8 & 248) + v10); // 0x414771
    if (result != -1 != result != 0) {
        // 0x41477d
        *(int32_t *)v9 = -1;
    }
    int32_t v11 = v9 + 32; // 0x414783
    v8++;
    while (v11 < (int32_t)&g551) {
        // 0x41475e
        v9 = v11;
        v10 = *(int32_t *)((v8 >> 3 & -4) + (int32_t)&g985);
        result = *(int32_t *)((8 * v8 & 248) + v10);
        if (result != -1 != result != 0) {
            // 0x41477d
            *(int32_t *)v9 = -1;
        }
        // 0x414783
        v11 = v9 + 32;
        v8++;
    }
    // 0x41478f
    return result;
}

// Address range: 0x4147a0 - 0x4147b4
int32_t function_4147a0(void) {
    int32_t result = function_413920(); // 0x4147a0
    if (g496 == 0) {
        // 0x4147b3
        return result;
    }
    // 0x4147ae
    return function_416e30();
}

// Address range: 0x4147c0 - 0x415057
int32_t function_4147c0(int32_t * a1) {
    char v1 = *(char *)a1; // 0x4147df
    int32_t v2; // bp-600, 0x4147c0
    int32_t v3 = &v2; // 0x4147e1
    if (v1 == 0) {
        // 0x414a06
        return *(int32_t *)(v3 + 36);
    }
    // 0x4147f2
    bool v4; // 0x4147c0
    int32_t v5 = v4 ? -1 : 1;
    char v6 = v1; // 0x4147fa
    int32_t v7 = v3; // 0x4147fa
    int32_t v8; // 0x4147c0
    int32_t v9; // 0x4147c0
    int32_t v10; // 0x4147c0
    int32_t v11; // 0x4147c0
    int32_t v12; // 0x4147c0
    int32_t v13; // 0x4147c0
    int32_t v14; // 0x4147c0
    int32_t v15; // 0x4147c0
    char v16; // 0x4147c0
    int32_t v17; // 0x4147c0
    int32_t v18; // 0x4147c0
    int32_t v19; // 0x4147c0
    int32_t v20; // 0x4147c0
    int32_t v21; // 0x4147c0
    int32_t v22; // 0x4147c0
    int32_t v23; // 0x4147c0
    int32_t v24; // 0x4147c0
    int32_t v25; // 0x4147c0
    int32_t v26; // 0x4147c0
    int32_t v27; // 0x4147c0
    int32_t v28; // 0x4147c0
    int32_t v29; // 0x4147c0
    int32_t v30; // 0x4147c0
    int32_t v31; // 0x4147c0
    int32_t v32; // 0x4147c0
    int32_t v33; // 0x4147c0
    int32_t v34; // 0x4147c0
    int32_t v35; // 0x4147c0
    int32_t v36; // 0x4147c0
    int32_t v37; // 0x4147fe
    while (true) {
      lab_0x4147fe:
        // 0x4147fe
        v31 = v7;
        v37 = v31 + 36;
        int32_t * v38 = (int32_t *)v37; // 0x4147fe
        v33 = v31;
        if (*v38 < 0) {
            // break -> 0x414a06
            break;
        }
        // 0x414809
        v19 = v18;
        v27 = v26;
        v9 = v8;
        v16 = v6;
        v23 = v22;
        int32_t v39 = 0; // 0x41480c
        if (v16 <= 120) {
            char v40 = *(char *)((int32_t)v16 + (int32_t)"known>"); // 0x414818
            v39 = v40 & 15;
        }
        // 0x414825
        v15 = v16;
        int32_t * v41 = (int32_t *)(v31 + 60); // 0x414825
        int32_t v42 = *v41; // 0x414825
        char v43 = *(char *)(v42 + (int32_t)&g10 + 8 * v39); // 0x414829
        int32_t v44 = v43 >> 4; // 0x414833
        *v41 = v44;
        g1005 = v44;
        v24 = v23;
        v32 = v31;
        v10 = v9;
        v28 = v27;
        v20 = v19;
        switch (v44) {
            case 0: {
                goto lab_0x414993;
            }
            case 1: {
                // 0x41484c
                *(int32_t *)(v31 + 76) = 0;
                *(int32_t *)(v31 + 72) = 0;
                *(int32_t *)(v31 + 48) = 0;
                *(int32_t *)(v31 + 52) = 0;
                *(int32_t *)(v31 + 56) = 0;
                v24 = v23;
                v32 = v31;
                v10 = -1;
                v28 = 0;
                v20 = v19;
                goto lab_0x4149ee;
            }
            case 2: {
                unsigned char v45 = *(char *)((int32_t)v16 + (int32_t)&g2 - 32); // 0x41488d
                g1006 = v45;
                v24 = v23;
                v32 = v31;
                v10 = v9;
                v28 = v27;
                v20 = v19;
                switch (v45) {
                    case 0: {
                        // 0x41489a
                        v24 = v23;
                        v32 = v31;
                        v10 = v9;
                        v28 = v27 | 2;
                        v20 = v19;
                        // break -> 0x4149ee
                        break;
                    }
                    case 1: {
                        // 0x4148a2
                        v24 = v23;
                        v32 = v31;
                        v10 = v9;
                        v28 = v27 | 128;
                        v20 = v19;
                        // break -> 0x4149ee
                        break;
                    }
                    case 2: {
                        // 0x4148ad
                        v24 = v23;
                        v32 = v31;
                        v10 = v9;
                        v28 = v27 | 1;
                        v20 = v19;
                        // break -> 0x4149ee
                        break;
                    }
                    case 3: {
                        // 0x4148b5
                        v24 = v23;
                        v32 = v31;
                        v10 = v9;
                        v28 = v27 | 4;
                        v20 = v19;
                        // break -> 0x4149ee
                        break;
                    }
                    case 4: {
                        // 0x4148bd
                        v24 = v23;
                        v32 = v31;
                        v10 = v9;
                        v28 = v27 | 8;
                        v20 = v19;
                        // break -> 0x4149ee
                        break;
                    }
                }
                goto lab_0x4149ee;
            }
            case 3: {
                if (v16 != 42) {
                    int32_t * v46 = (int32_t *)(v31 + 48); // 0x4148f4
                    int32_t v47 = *v46; // 0x4148f4
                    *v46 = (int32_t)v16 - 48 + 10 * v47;
                    v24 = 5 * v47;
                    v32 = v31;
                    v10 = v9;
                    v28 = v27;
                    v20 = v19;
                } else {
                    // 0x4148ca
                    *(int32_t *)(v31 - 4) = v31 + 612;
                    int32_t v48 = function_415240((int32_t)&g1001); // 0x4148d2
                    int32_t * v49 = (int32_t *)(v31 + 48); // 0x4148d7
                    *v49 = v48;
                    v24 = v23;
                    v32 = v31;
                    v10 = v9;
                    v28 = v27;
                    v20 = v19;
                    if (v48 < 0) {
                        // 0x4148e6
                        *v49 = -v48;
                        v24 = v23;
                        v32 = v31;
                        v10 = v9;
                        v28 = v27 | 4;
                        v20 = v19;
                    }
                }
                goto lab_0x4149ee;
            }
            case 4: {
                // 0x41490b
                v24 = v23;
                v32 = v31;
                v10 = 0;
                v28 = v27;
                v20 = v19;
                goto lab_0x4149ee;
            }
            case 5: {
                if (v16 != 42) {
                    // 0x41493b
                    v24 = v23;
                    v32 = v31;
                    v10 = (int32_t)v16 - 48 + 10 * v9;
                    v28 = v27;
                    v20 = v19;
                } else {
                    // 0x414917
                    *(int32_t *)(v31 - 4) = v31 + 612;
                    int32_t v50 = function_415240((int32_t)&g1001); // 0x41491f
                    v24 = v23;
                    v32 = v31;
                    v10 = v50 >= 0 ? v50 : -1;
                    v28 = v27;
                    v20 = v19;
                }
                goto lab_0x4149ee;
            }
            case 6: {
                unsigned char v51 = *(char *)((int32_t)v16 + (int32_t)&g3 - 73); // 0x41495c
                g1007 = v51;
                v24 = v23;
                v32 = v31;
                v10 = v9;
                v28 = v27;
                v20 = v19;
                switch (v51) {
                    case 0: {
                        int32_t * v52 = (int32_t *)(v31 + 608); // 0x414969
                        int32_t v53 = *v52; // 0x414969
                        if (*(char *)v53 != 54) {
                            // 0x41498b
                            *v41 = 0;
                            goto lab_0x414993;
                        } else {
                            // 0x414975
                            if (*(char *)(v53 + 1) != 52) {
                                // 0x41498b
                                *v41 = 0;
                                goto lab_0x414993;
                            } else {
                                // 0x41497b
                                *v52 = v53 + 2;
                                v24 = v23;
                                v32 = v31;
                                v10 = v9;
                                v28 = v27 | 0x8000;
                                v20 = v19;
                                goto lab_0x4149ee;
                            }
                        }
                    }
                    case 1: {
                        // 0x414a15
                        v24 = v23;
                        v32 = v31;
                        v10 = v9;
                        v28 = v27 | 32;
                        v20 = v19;
                        goto lab_0x4149ee;
                    }
                    case 2: {
                        // 0x414a1a
                        v24 = v23;
                        v32 = v31;
                        v10 = v9;
                        v28 = v27 | 16;
                        v20 = v19;
                        goto lab_0x4149ee;
                    }
                    case 3: {
                        // 0x414a1f
                        v24 = v23;
                        v32 = v31;
                        v10 = v9;
                        v28 = v27 | 2048;
                        v20 = v19;
                        goto lab_0x4149ee;
                    }
                    default: {
                        goto lab_0x4149ee;
                    }
                }
            }
            case 7: {
                unsigned char v54 = *(char *)((int32_t)v16 + (int32_t)&g4 - 67); // 0x414a38
                g1008 = v54;
                v35 = v27;
                v17 = v15;
                v36 = v27;
                v11 = v9;
                v25 = v23;
                v34 = v31;
                v14 = v9;
                v30 = v27;
                v21 = v19;
                switch (v54) {
                    case 0: {
                        // 0x414a45
                        v35 = (v27 & 2096) != 0 ? v27 : v27 | 2048;
                        goto lab_0x414a53;
                    }
                    case 1: {
                        // 0x414a94
                        *(int32_t *)(v31 + 76) = 1;
                        v17 = v16 + 32;
                        goto lab_0x414a9f;
                    }
                    case 2: {
                        // 0x414a94
                        *(int32_t *)(v31 + 76) = 1;
                        v17 = v16 + 32;
                        goto lab_0x414a9f;
                    }
                    case 3: {
                        // 0x414abc
                        v36 = (v27 & 2096) != 0 ? v27 : v27 | 2048;
                        goto lab_0x414aca;
                    }
                    case 4: {
                        goto lab_0x414bf8;
                    }
                    case 5: {
                        // 0x414b32
                        *(int32_t *)(v31 - 4) = v31 + 612;
                        int32_t v55 = function_415240((int32_t)&g1001); // 0x414b3a
                        if (v55 == 0) {
                            goto lab_0x414b80;
                        } else {
                            int32_t v56 = *(int32_t *)(v55 + 4); // 0x414b46
                            if (v56 == 0) {
                                goto lab_0x414b80;
                            } else {
                                // 0x414b4d
                                if ((v27 & 2048) == 0) {
                                    // 0x414b6c
                                    int32_t * v57; // 0x4147c0
                                    *v57 = 0;
                                    int16_t v58 = *(int16_t *)v55; // 0x414b74
                                    *(int32_t *)(v31 + 24) = v56;
                                    v25 = v23;
                                    v34 = v31;
                                    v14 = v9;
                                    v30 = v27;
                                    v21 = v58;
                                } else {
                                    // 0x414b55
                                    *(int32_t *)(v31 + 56) = 1;
                                    *(int32_t *)(v31 + 24) = v56;
                                    v25 = v23;
                                    v34 = v31;
                                    v14 = v9;
                                    v30 = v27;
                                    v21 = (int32_t)*(int16_t *)v55 / 2;
                                }
                                goto lab_0x414ef3;
                            }
                        }
                    }
                    case 6: {
                        goto lab_0x414a53;
                    }
                    case 7: {
                        goto lab_0x414b9e;
                    }
                    case 8: {
                        goto lab_0x414a9f;
                    }
                    case 9: {
                        goto lab_0x414b9e;
                    }
                    case 10: {
                        // 0x414bab
                        *(int32_t *)(v31 - 4) = v31 + 612;
                        int32_t v59 = function_415240((int32_t)&g1001); // 0x414bb3
                        if ((v27 & 32) == 0) {
                            // 0x414bcc
                            int32_t v60; // 0x414bb8
                            *(int32_t *)v59 = v60;
                        } else {
                            // 0x414bc7
                            *(int16_t *)v59 = (int16_t)*v38;
                        }
                        // 0x414bce
                        *(int32_t *)(v31 + 72) = 1;
                        v25 = v23;
                        v34 = v31;
                        v14 = v9;
                        v30 = v27;
                        v21 = v19;
                        goto lab_0x414ef3;
                    }
                    case 11: {
                        // 0x414bdb
                        *(int32_t *)(v31 + 64) = 8;
                        v13 = v9;
                        v29 = 4 * v27 & 512 | v27;
                        goto lab_0x414c27;
                    }
                    case 12: {
                        // 0x414bf3
                        v11 = 8;
                        goto lab_0x414bf8;
                    }
                    case 13: {
                        goto lab_0x414aca;
                    }
                    case 14: {
                        // 0x414c4c
                        *(int32_t *)(v31 + 64) = 10;
                        v13 = v9;
                        v29 = v27;
                        goto lab_0x414c27;
                    }
                    case 15: {
                        // 0x414c56
                        *(int32_t *)(v31 + 68) = 39;
                        v12 = v9;
                        goto lab_0x414c00;
                    }
                    default: {
                        goto lab_0x414ef3;
                    }
                }
            }
            default: {
                goto lab_0x4149ee;
            }
        }
    }
  lab_0x414a06:
    // 0x414a06
    return *(int32_t *)(v33 + 36);
  lab_0x414993:
    // 0x414993
    *(int32_t *)(v31 + 56) = 0;
    int32_t * v61 = (int32_t *)(v31 + 604);
    int32_t * v62; // 0x4147c0
    int32_t * v63; // 0x4147c0
    int32_t * v64; // 0x4147c0
    int32_t v65; // 0x4147c0
    if (*(char *)(g558 + (2 * v15 || 1)) > -1) {
        // 0x414993
        v64 = (int32_t *)(v31 - 12);
        v63 = (int32_t *)(v31 - 8);
        v62 = (int32_t *)(v31 - 4);
        v65 = v15;
    } else {
        int32_t * v66 = (int32_t *)(v31 - 4);
        *v66 = v37;
        int32_t * v67 = (int32_t *)(v31 - 8);
        *v67 = *v61;
        int32_t * v68 = (int32_t *)(v31 - 12);
        *v68 = (int32_t)v16;
        function_415170((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
        int32_t * v69 = (int32_t *)(v31 + 608); // 0x4149c2
        int32_t v70 = *v69;
        *v69 = v70 + 1;
        v64 = v68;
        v63 = v67;
        v62 = v66;
        v65 = (int32_t)*(char *)v70;
    }
    int32_t v71 = 0x1000000 * v65 >> 24; // 0x4149e0
    *v62 = v37;
    *v63 = *v61;
    *v64 = v71;
    function_415170((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
    v24 = v71;
    v32 = v31;
    v10 = v9;
    v28 = v27;
    v20 = v19;
    goto lab_0x4149ee;
  lab_0x4149ee:
    // 0x4149ee
    v7 = v32;
    int32_t * v72 = (int32_t *)(v7 + 608); // 0x4149ee
    int32_t v73 = *v72; // 0x4149ee
    *v72 = v73 + 1;
    v6 = *(char *)v73;
    v22 = v24;
    v8 = v10;
    v26 = v28;
    v18 = v20;
    v33 = v7;
    if (v6 == 0) {
        // break -> 0x414a06
        goto lab_0x414a06;
    }
    goto lab_0x4147fe;
  lab_0x414bf8:
    // 0x414bf8
    *(int32_t *)(v31 + 68) = 7;
    v12 = v11;
    goto lab_0x414c00;
  lab_0x414a53:;
    int32_t * v174 = (int32_t *)(v31 - 4); // 0x414a60
    *v174 = v31 + 612;
    int32_t v175; // 0x4147c0
    int32_t v176; // 0x4147c0
    if ((v35 & 2064) == 0) {
        int32_t v177 = function_415240((int32_t)&g1001); // 0x414eb1
        int32_t v178 = v31 + 88;
        *(char *)v178 = (char)v177;
        v175 = v178;
        v176 = 1;
    } else {
        // 0x414a67
        *v174 = function_415270((int32_t)&g1001);
        int32_t v179 = v31 + 88;
        *(int32_t *)(v31 - 8) = v179;
        int32_t v180 = function_416eb0((int32_t)&g1001, (int32_t)&g1001); // 0x414a75
        v175 = v179;
        v176 = v180;
        if (v180 < 0) {
            // 0x414a87
            *(int32_t *)(v31 + 72) = 1;
            v175 = v179;
            v176 = v180;
        }
    }
    // 0x414ebd
    *(int32_t *)(v31 + 24) = v175;
    v25 = v23;
    v34 = v31;
    v14 = v9;
    v30 = v35;
    v21 = v176;
    goto lab_0x414ef3;
  lab_0x414b9e:
    // 0x414b9e
    *(int32_t *)(v31 + 64) = 10;
    v13 = v9;
    v29 = v27 | 64;
    goto lab_0x414c27;
  lab_0x414a9f:;
    int32_t v181 = v17;
    int32_t v182 = v31 + 88; // 0x414aa2
    int32_t * v183 = (int32_t *)(v31 + 24); // 0x414aa6
    *v183 = v182;
    int32_t v184 = 6; // 0x414aac
    if (v9 >= 0) {
        // 0x414e07
        v184 = v9;
        if (v9 == 0) {
            // 0x414e09
            v184 = v181 != 103 ? v9 : 1;
        }
    }
    int32_t * v185 = (int32_t *)(v31 + 612); // 0x414e13
    int32_t v186 = *v185; // 0x414e13
    *v185 = v186 + 8;
    int32_t v187 = v31 + 80; // 0x414e2b
    *(int32_t *)v187 = *(int32_t *)v186;
    *(int32_t *)(v31 + 84) = *(int32_t *)(v186 + 4);
    int32_t * v188 = (int32_t *)(v31 - 4); // 0x414e3b
    *v188 = *(int32_t *)(v31 + 76);
    *(int32_t *)(v31 - 8) = v184;
    *(int32_t *)(v31 - 12) = 0x1000000 * v181 >> 24;
    *(int32_t *)(v31 - 16) = v182;
    *(int32_t *)(v31 - 20) = v187;
    function_415890();
    if ((char)v27 <= -1 && v184 == 0) {
        // 0x414e5e
        *v188 = v182;
        function_415890();
    }
    if ((char)v27 > -1 == v181 == 103) {
        // 0x414e75
        *v188 = v182;
        function_415890();
    }
    // 0x414e83
    int32_t v189; // 0x4147c0
    int32_t v190; // 0x4147c0
    if (*(char *)v182 != 45) {
        // 0x414e83
        v189 = *v183;
        v190 = v27 | 64;
    } else {
        int32_t v191 = v31 + 89; // 0x414e90
        *v183 = v191;
        v189 = v191;
        v190 = v27 | 320;
    }
    int32_t v192 = v189; // 0x414ea3
    int32_t v193 = -1;
    int32_t v194 = 0; // 0x414ea3
    while (v193 != 0) {
        int32_t v195 = v192;
        int32_t v196 = v193 - 1; // 0x414ea3
        int32_t v197 = v196; // 0x414ea3
        v192 = v195 + v5;
        v194 = v196;
        if (*(char *)v195 == 0) {
            // break -> 
            break;
        }
        v193 = v197;
        v194 = 0;
    }
    v25 = v182;
    v34 = v31;
    v14 = v184;
    v30 = v190;
    v21 = -2 - v194;
    goto lab_0x414ef3;
  lab_0x414aca:;
    int32_t v198 = v36;
    int32_t v199 = v9 == -1 ? 0x7fffffff : v9;
    *(int32_t *)(v31 - 4) = v31 + 612;
    int32_t v200 = function_415240((int32_t)&g1001); // 0x414ade
    int32_t * v201 = (int32_t *)(v31 + 24); // 0x414ae3
    *v201 = v200;
    if ((v198 & 2064) == 0) {
        int32_t v202 = v200; // 0x414ecc
        if (v200 == 0) {
            // 0x414ece
            v202 = (int32_t)g553;
            *v201 = v202;
        }
        int32_t v203 = v199; // 0x414ee0
        int32_t v204 = v202; // 0x414ee0
        int32_t v205 = v202; // 0x414ee0
        if (v199 != 0) {
            int32_t v206 = v204;
            v205 = v206;
            while (*(char *)v206 != 0) {
                int32_t v207 = v203 - 1;
                int32_t v208 = v206 + 1; // 0x414ee7
                v203 = v207;
                v204 = v208;
                v205 = v208;
                if (v207 == 0) {
                    // break -> 0x414eef
                    break;
                }
                v206 = v204;
                v205 = v206;
            }
        }
        // 0x414eef
        v25 = v23;
        v34 = v31;
        v14 = v9;
        v30 = v198;
        v21 = v205 - v202;
    } else {
        int32_t v209 = v200; // 0x414af8
        if (v200 == 0) {
            // 0x414afa
            v209 = (int32_t)g554;
            *v201 = v209;
        }
        // 0x414b03
        *(int32_t *)(v31 + 56) = 1;
        int32_t v210 = v199; // 0x414b14
        int32_t v211 = v209; // 0x414b14
        int32_t v212 = v209; // 0x414b14
        if (v199 != 0) {
            int32_t v213 = v211;
            v212 = v213;
            while (*(int16_t *)v213 != 0) {
                int32_t v214 = v210 - 1;
                int32_t v215 = v213 + 2; // 0x414b1c
                v210 = v214;
                v211 = v215;
                v212 = v215;
                if (v214 == 0) {
                    // break -> 0x414b26
                    break;
                }
                v213 = v211;
                v212 = v213;
            }
        }
        // 0x414b26
        v25 = v23;
        v34 = v31;
        v14 = v9;
        v30 = v198;
        v21 = v212 - *v201 >> 1;
    }
    goto lab_0x414ef3;
  lab_0x414ef3:;
    int32_t v93 = v21;
    int32_t v101 = v30;
    int32_t v126 = v14;
    int32_t v91 = v34;
    v24 = v25;
    v32 = v91;
    v10 = v126;
    v28 = v101;
    v20 = v93;
    if (*(int32_t *)(v91 + 72) != 0) {
        goto lab_0x4149ee;
    } else {
        if ((v101 & 64) == 0) {
            goto lab_0x414f39;
        } else {
            if ((v101 & 256) == 0) {
                if ((v101 & 1) == 0) {
                    if ((v101 & 2) == 0) {
                        goto lab_0x414f39;
                    } else {
                        // 0x414f2c
                        *(char *)(v91 + 18) = 32;
                        // 0x414f31
                        *(int32_t *)(v91 + 52) = 1;
                        goto lab_0x414f39;
                    }
                } else {
                    // 0x414f1d
                    *(char *)(v91 + 18) = 43;
                    // 0x414f31
                    *(int32_t *)(v91 + 52) = 1;
                    goto lab_0x414f39;
                }
            } else {
                // 0x414f0e
                *(char *)(v91 + 18) = 45;
                // 0x414f31
                *(int32_t *)(v91 + 52) = 1;
                goto lab_0x414f39;
            }
        }
    }
  lab_0x414c00:;
    int32_t v74 = v12;
    *(int32_t *)(v31 + 64) = 16;
    v13 = v74;
    v29 = v27;
    if ((char)v27 <= 255) {
        // 0x414c10
        *(char *)(v31 + 18) = 48;
        *(int32_t *)(v31 + 52) = 2;
        int32_t v75 = *(int32_t *)(v31 + 68); // 0x414c1d
        *(char *)(v31 + 19) = (char)v75 + 81;
        v13 = v74;
        v29 = v27;
    }
    goto lab_0x414c27;
  lab_0x414b80:;
    int32_t v167 = (int32_t)g553; // 0x414b80
    *(int32_t *)(v31 + 24) = v167;
    int32_t v168 = v167; // 0x414b92
    int32_t v169 = -1;
    int32_t v170 = 0; // 0x414b92
    while (v169 != 0) {
        int32_t v171 = v168;
        int32_t v172 = v169 - 1; // 0x414b92
        int32_t v173 = v172; // 0x414b92
        v168 = v171 + v5;
        v170 = v172;
        if (*(char *)v171 == 0) {
            // break -> 
            break;
        }
        v169 = v173;
        v170 = 0;
    }
    v25 = v23;
    v34 = v31;
    v14 = v9;
    v30 = v27;
    v21 = -2 - v170;
    goto lab_0x414ef3;
  lab_0x414c27:;
    int32_t v76 = v29;
    int32_t v77 = v13;
    int16_t v78 = v76;
    int32_t * v79; // 0x4147c0
    int32_t * v80; // 0x4147c0
    int32_t v81; // 0x4147c0
    int32_t v82; // 0x4147c0
    if (v78 > -1) {
        // 0x414c60
        *(int32_t *)(v31 - 4) = v31 + 612;
        int32_t v83 = function_415240((int32_t)&g1001);
        if ((v76 & 32) == 0) {
            // 0x414c9b
            v81 = v83;
            if ((v76 & 64) == 0) {
                goto lab_0x414cd2_3;
            } else {
                // 0x414cab
                *(int32_t *)(v31 + 28) = v83;
                int32_t v84 = v83 >> 31; // 0x414cb7
                int32_t * v85 = (int32_t *)(v31 + 32);
                *v85 = v84;
                v80 = v85;
                v82 = v84;
                goto lab_0x414cda;
            }
        } else {
            if ((v76 & 64) == 0) {
                // 0x414c8e
                v81 = v83 & 0xffff;
                goto lab_0x414cd2_3;
            } else {
                int32_t v86 = 0x10000 * v83;
                *(int32_t *)(v31 + 28) = v86 >> 16;
                int32_t v87 = v86 >> 31; // 0x414c87
                int32_t * v88 = (int32_t *)(v31 + 32);
                *v88 = v87;
                v80 = v88;
                v82 = v87;
                goto lab_0x414cda;
            }
        }
    } else {
        // 0x414cd2
        *(int32_t *)(v31 - 4) = v31 + 612;
        *(int32_t *)(v31 + 28) = function_415250((int32_t)&g1001);
        int32_t * v89 = (int32_t *)(v31 + 32);
        *v89 = v23;
        v79 = v89;
        v80 = v89;
        v82 = v23;
        if ((v76 & 64) == 0) {
            goto lab_0x414cd2_2;
        } else {
            goto lab_0x414cda;
        }
    }
  lab_0x414f39:;
    int32_t * v90 = (int32_t *)(v91 + 52); // 0x414f3f
    int32_t v92 = *(int32_t *)(v91 + 48) - v93 - *v90; // 0x414f3f
    int32_t * v94 = (int32_t *)(v91 + 40); // 0x414f49
    *v94 = v92;
    int32_t v95 = v91 + 36;
    int32_t * v96 = (int32_t *)(v91 + 604);
    int32_t * v97; // 0x4147c0
    int32_t * v98; // 0x4147c0
    int32_t * v99; // 0x4147c0
    int32_t * v100; // 0x4147c0
    if ((v101 & 12) != 0) {
        // 0x414f39
        v100 = (int32_t *)(v91 - 16);
        v99 = (int32_t *)(v91 - 12);
        v98 = (int32_t *)(v91 - 8);
        v97 = (int32_t *)(v91 - 4);
    } else {
        int32_t * v102 = (int32_t *)(v91 - 4);
        *v102 = v95;
        int32_t * v103 = (int32_t *)(v91 - 8);
        *v103 = *v96;
        int32_t * v104 = (int32_t *)(v91 - 12);
        *v104 = v92;
        int32_t * v105 = (int32_t *)(v91 - 16);
        *v105 = 32;
        function_4151c0((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
        v100 = v105;
        v99 = v104;
        v98 = v103;
        v97 = v102;
    }
    int32_t * v106 = v97;
    int32_t * v107 = v98;
    int32_t * v108 = v99;
    int32_t * v109 = v100;
    int32_t v110 = *v90; // 0x414f76
    *v106 = v95;
    *v107 = *v96;
    *v108 = v110;
    *v109 = v91 + 18;
    function_415200((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
    int32_t v111 = v110; // 0x414f90
    if ((v101 & 8) != 0) {
        // 0x414f92
        v111 = v110;
        if ((v101 & 4) == 0) {
            int32_t v112 = *v94; // 0x414fa5
            *v106 = v95;
            *v107 = *v96;
            *v108 = v112;
            *v109 = 48;
            function_4151c0((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
            v111 = v112;
        }
    }
    // 0x414fb6
    int32_t v113; // 0x4147c0
    if (v93 < 1 | *(int32_t *)(v91 + 56) == 0) {
        int32_t v114 = *(int32_t *)(v91 + 24); // 0x41501a
        *v106 = v95;
        *v107 = *v96;
        *v108 = v93;
        *v109 = v114;
        function_415200((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
        v113 = v114;
    } else {
        int32_t v115 = *(int32_t *)(v91 + 24); // 0x414fc1
        int32_t * v116 = (int32_t *)(v91 + 28); // 0x414fc8
        *v116 = v93 - 1;
        int32_t v117 = v91 + 20; // 0x414fce
        *v106 = v115 & -0x10000 | (int32_t)*(int16_t *)v115;
        *v107 = v117;
        int32_t v118 = function_416eb0((int32_t)&g1001, (int32_t)&g1001); // 0x414fda
        int32_t v119 = v118; // 0x414fe4
        int32_t v120 = v115; // 0x414fe4
        v113 = v111;
        if (v118 >= 1) {
            int32_t v121 = v120;
            int32_t v122 = *v96; // 0x414fea
            *v106 = v95;
            *v107 = v122;
            *v108 = v119;
            *v109 = v117;
            function_415200((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
            int32_t v123 = *v116; // 0x414ffe
            *v116 = v123 - 1;
            v113 = v122;
            while (v123 != 0) {
                int32_t v124 = v121 + 2;
                *v106 = v124 & -0x10000 | (int32_t)*(int16_t *)v124;
                *v107 = v117;
                int32_t v125 = function_416eb0((int32_t)&g1001, (int32_t)&g1001); // 0x414fda
                v119 = v125;
                v120 = v124;
                v113 = v122;
                if (v125 < 1) {
                    // break -> 0x41502a
                    break;
                }
                v121 = v120;
                v122 = *v96;
                *v106 = v95;
                *v107 = v122;
                *v108 = v119;
                *v109 = v117;
                function_415200((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
                v123 = *v116;
                *v116 = v123 - 1;
                v113 = v122;
            }
        }
    }
    // 0x41502a
    v24 = v113;
    v32 = v91;
    v10 = v126;
    v28 = v101;
    v20 = v93;
    if ((v101 & 4) != 0) {
        int32_t v127 = *v94; // 0x415041
        *v106 = v95;
        *v107 = *v96;
        *v108 = v127;
        *v109 = 32;
        function_4151c0((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
        v24 = v127;
        v32 = v91;
        v10 = v126;
        v28 = v101;
        v20 = v93;
    }
    goto lab_0x4149ee;
  lab_0x414cd2_2:;
    int32_t v128 = *v79; // 0x4147c0
    int32_t v129 = v23; // 0x4147c0
    goto lab_0x414d09;
  lab_0x414cda:;
    int32_t v161 = v82;
    int32_t v162 = *v80; // 0x414cda
    v128 = v162;
    v129 = v161;
    int32_t * v131; // 0x4147c0
    int16_t v133; // 0x4147c0
    int32_t v132; // 0x4147c0
    int32_t v134; // 0x4147c0
    if (v162 >= 0 || v162 >= 0 == (v162 != 0)) {
        goto lab_0x414d09;
    } else {
        int32_t v163 = *(int32_t *)(v31 + 28); // 0x414cea
        *(int32_t *)(v31 + 40) = -v163;
        int32_t v164 = v76 | 256; // 0x414cfd
        int32_t * v165 = (int32_t *)(v31 + 44);
        *v165 = -((v162 + (int32_t)(v163 != 0)));
        v131 = v165;
        v132 = v161;
        v133 = v164;
        v134 = v164;
        goto lab_0x414d19;
    }
  lab_0x414cd2_3:
    // 0x414cd2
    *(int32_t *)(v31 + 28) = v81;
    int32_t * v166 = (int32_t *)(v31 + 32);
    *v166 = 0;
    v79 = v166;
    goto lab_0x414cd2_2;
  lab_0x414d09:
    // 0x414d09
    *(int32_t *)(v31 + 40) = *(int32_t *)(v31 + 28);
    int32_t * v130 = (int32_t *)(v31 + 44);
    *v130 = v128;
    v131 = v130;
    v132 = v129;
    v133 = v78;
    v134 = v76;
    goto lab_0x414d19;
  lab_0x414d19:;
    int32_t v135 = v134;
    int32_t * v136 = v131;
    int32_t v137; // 0x4147c0
    if (v133 <= -1) {
        // 0x414d19
        v137 = *v136;
    } else {
        // 0x414d21
        *v136 = 0;
        v137 = 0;
    }
    // 0x414d2b
    if (v137 == 0) {
        // 0x414d40
        if (*(int32_t *)(v31 + 40) == 0) {
            // 0x414d47
            *(int32_t *)(v31 + 52) = 0;
        }
    }
    int32_t v138 = v77 >= 0 ? v135 & -9 : v135;
    *(int32_t *)(v31 + 24) = v31 + 599;
    int32_t v139 = v132; // 0x414d56
    int32_t v140 = v31; // 0x414d56
    int32_t v141 = v77 >= 0 ? v77 : 1; // 0x414d56
    int32_t v142; // 0x4147c0
    int32_t v143; // 0x414d5c
    while (true) {
        int32_t v144 = v141;
        v142 = v140;
        v143 = v144 - 1;
        int32_t v145 = *(int32_t *)(v142 + 44);
        if (v144 >= 0 != v144 != 0 && v145 == 0) {
            // 0x414d68
            if (*(int32_t *)(v142 + 40) == 0) {
                // break -> 0x414dca
                break;
            }
        }
        int32_t v146 = *(int32_t *)(v142 + 64); // 0x414d6f
        int32_t v147 = v146 >> 31; // 0x414d77
        int32_t * v148 = (int32_t *)(v142 + 28); // 0x414d78
        *v148 = v146;
        *(int32_t *)(v142 + 32) = v147;
        *(int32_t *)(v142 - 4) = v147;
        int32_t * v149 = (int32_t *)(v142 - 8); // 0x414d8d
        *v149 = *v148;
        *(int32_t *)(v142 - 12) = v145;
        *(int32_t *)(v142 - 16) = *(int32_t *)(v142 + 40);
        int32_t v150 = __aullrem() + 48; // 0x414d95
        int32_t * v151 = (int32_t *)(v142 + 12); // 0x414da0
        int32_t v152 = *v151; // 0x414da0
        *(int32_t *)(v142 - 20) = v147;
        *(int32_t *)(v142 - 24) = v152;
        *(int32_t *)(v142 - 28) = *v148;
        int32_t v153 = v142 - 32; // 0x414da7
        *(int32_t *)v153 = *(int32_t *)(v142 + 24);
        *(int32_t *)(v142 + 8) = __aulldiv();
        *v151 = v152;
        int32_t v154 = v150; // 0x414db8
        if (v150 >= 58) {
            // 0x414dba
            v154 = *(int32_t *)(v142 + 36) + v150;
        }
        int32_t v155 = *v149; // 0x414dbe
        *v149 = v155 - 1;
        *(char *)v155 = (char)v154;
        v139 = v152;
        v140 = v153;
        v141 = v143;
    }
    int32_t v156 = v139;
    int32_t * v157 = (int32_t *)(v142 + 24); // 0x414dd1
    int32_t v158 = *v157; // 0x414dd1
    int32_t v159 = v142 + 599 - v158; // 0x414dd1
    int32_t v160 = v158 + 1; // 0x414dd5
    *v157 = v160;
    v25 = v156;
    v34 = v142;
    v14 = v143;
    v30 = v138;
    v21 = v159;
    if ((v138 & 512) != 0) {
        // 0x414de5
        v25 = v156;
        v34 = v142;
        v14 = v143;
        v30 = v138;
        v21 = v159;
        if (v159 != 0 != (*(char *)v160 == 48)) {
            // 0x414df6
            *v157 = v158;
            *(char *)v158 = 48;
            v25 = v156;
            v34 = v142;
            v14 = v143;
            v30 = v138;
            v21 = v159 + 1;
        }
    }
    goto lab_0x414ef3;
}

// Address range: 0x415170 - 0x4151b1
int32_t function_415170(int32_t a1, int32_t a2, int32_t result) {
    int32_t * v1 = (int32_t *)(a2 + 4); // 0x415174
    uint32_t v2 = *v1 - 1; // 0x415177
    *v1 = v2;
    int32_t * v3; // 0x415170
    if (v2 >= 0) {
        int32_t * v4 = (int32_t *)a2; // 0x41517d
        *(char *)*v4 = (char)a1;
        *v4 = *v4 + 1;
        // 0x4151ae
        v3 = (int32_t *)result;
        *v3 = *v3 + 1;
        return result;
    }
    int32_t * v5 = (int32_t *)result;
    if (function_414060(0x1000000 * a1 >> 24) == -1) {
        // 0x4151a7
        *v5 = -1;
        return result;
    }
    // 0x4151ae
    v3 = v5;
    *v3 = *v3 + 1;
    return result;
}

// Address range: 0x4151c0 - 0x4151f1
int32_t function_4151c0(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x4151c0
    int32_t v1; // bp-16, 0x4151c0
    int32_t v2 = &v1; // 0x4151cb
    int32_t v3 = a2; // 0x4151d0
    int32_t result = v3; // 0x4151d9
    while (v3 >= 1) {
        // 0x4151db
        *(int32_t *)(v2 - 4) = a4;
        *(int32_t *)(v2 - 8) = a3;
        *(int32_t *)(v2 - 12) = a1;
        int32_t v4 = function_415170((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001); // 0x4151de
        v3--;
        result = v4;
        if (*(int32_t *)a4 == -1) {
            // break -> 0x4151ec
            break;
        }
        result = v3;
    }
    // 0x4151ec
    return result;
}

// Address range: 0x415200 - 0x415237
int32_t function_415200(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x415200
    int32_t v1; // bp-16, 0x415200
    int32_t v2 = &v1; // 0x41520b
    int32_t v3 = a1; // 0x415210
    int32_t v4 = a2; // 0x415210
    int32_t result = v4; // 0x415219
    while (v4 >= 1) {
        // 0x41521b
        *(int32_t *)(v2 - 4) = a4;
        *(int32_t *)(v2 - 8) = a3;
        *(int32_t *)(v2 - 12) = (int32_t)*(char *)v3;
        int32_t v5 = function_415170((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001); // 0x415224
        v3++;
        v4--;
        result = v5;
        if (*(int32_t *)a4 == -1) {
            // break -> 0x415232
            break;
        }
        result = v4;
    }
    // 0x415232
    return result;
}

// Address range: 0x415240 - 0x41524f
int32_t function_415240(int32_t a1) {
    int32_t * v1 = (int32_t *)a1; // 0x415244
    int32_t v2 = *v1; // 0x415244
    *v1 = v2 + 4;
    return *(int32_t *)v2;
}

// Address range: 0x415250 - 0x415265
int32_t function_415250(int32_t a1) {
    int32_t * v1 = (int32_t *)a1; // 0x415254
    int32_t v2 = *v1; // 0x415254
    *v1 = v2 + 8;
    return *(int32_t *)v2;
}

// Address range: 0x415270 - 0x415280
int32_t function_415270(int32_t a1) {
    int32_t * v1 = (int32_t *)a1; // 0x415274
    int32_t v2 = *v1; // 0x415274
    *v1 = v2 + 4;
    return a1 & -0x10000 | (int32_t)*(int16_t *)v2;
}

// Address range: 0x415280 - 0x4152f8
int32_t function_415280(void) {
    // 0x415280
    int3_t v1; // 0x415280
    int3_t v2 = v1;
    int32_t v3; // 0x415280
    *(char *)(v3 - 144) = -2;
    int3_t v4; // 0x415280
    int32_t v5; // 0x415280
    if ((v3 & 0xff00) != 0) {
        int32_t v6 = function_415421(); // 0x4152d6
        if (v6 == 0) {
            // 0x4152f3
            return function_417226();
        }
        int3_t v7 = v2 + 1;
        float80_t v8 = __frontend_reg_load_fpr(v2); // 0x4152e8
        __frontend_reg_store_fpr(v2, __frontend_reg_load_fpr(v7));
        __frontend_reg_store_fpr(v7, v8);
        __frontend_reg_store_fpr(v2, fabsl(__frontend_reg_load_fpr(v2)));
        v4 = v7;
        v5 = v6 == 2 ? 0 : 0xff00;
    } else {
        int3_t v9 = v2 + 1;
        float80_t v10 = __frontend_reg_load_fpr(v2); // 0x41528b
        __frontend_reg_store_fpr(v2, __frontend_reg_load_fpr(v9));
        __frontend_reg_store_fpr(v9, v10);
        v4 = v9;
    }
    int3_t v11 = v4;
    float80_t v12 = __frontend_reg_load_fpr(v2); // 0x41528d
    __frontend_reg_store_fpr(v11, __frontend_reg_load_fpr(v11) * llvm_log2_f80(v12));
    function_4153de();
    __frontend_reg_store_fpr(v2, 1.0L);
    float80_t v13 = __frontend_reg_load_fpr(v2); // 0x4152a5
    __frontend_reg_store_fpr(v11, v13 + __frontend_reg_load_fpr(v11));
    if ((*(char *)(v3 - 159) & 1) != 0) {
        // 0x4152b0
        __frontend_reg_store_fpr(v2, 1.0L);
        if (g482 == 1) {
            // 0x4152bf
            function_417d11();
        } else {
            float80_t v14 = __frontend_reg_load_fpr(v2); // 0x4152bb
            __frontend_reg_store_fpr(v11, v14 / __frontend_reg_load_fpr(v11));
        }
    }
    int3_t v15 = v11;
    if ((v3 & 64) == 0) {
        float80_t v16 = __frontend_reg_load_fpr(v15); // 0x4152c9
        float80_t v17 = llvm_round_f80(__frontend_reg_load_fpr(v15 + 1)); // 0x4152c9
        __frontend_reg_store_fpr(v15, v16 * llvm_exp2_f80(v17));
    }
    if ((char)(v5 / 256) != 0) {
        // 0x4152cf
        __frontend_reg_store_fpr(v15, -__frontend_reg_load_fpr(v15));
    }
    // 0x4152d1
    return function_417178();
}

// Address range: 0x4152f8 - 0x41530a
int32_t function_4152f8(void) {
    // 0x4152f8
    int32_t result; // 0x4152f8
    *(char *)(result - 144) = 2;
    return result;
}

// Address range: 0x41530a - 0x415324
int32_t function_41530a(void) {
    // 0x41530a
    __asm_wait();
    int32_t v1; // 0x41530a
    *(int16_t *)(v1 - 160) = (int16_t)v1;
    return __asm_wait();
}

// Address range: 0x415324 - 0x415334
int32_t function_415324(void) {
    // 0x415324
    int32_t result; // 0x415324
    *(char *)(result - 144) = 2;
    return result;
}

// Address range: 0x415334 - 0x415390
int32_t function_415334(void) {
    // 0x415334
    int32_t result; // 0x415334
    return result;
}

// Address range: 0x415390 - 0x4153bf
int32_t function_415390(int32_t a1) {
    // 0x415390
    __asm_wait();
    int32_t v1; // 0x415390
    *(int16_t *)(v1 - 160) = (int16_t)v1;
    int32_t result = __asm_wait(); // 0x41539a
    if ((*(char *)(v1 - 159) & 1) == 0) {
        // 0x4153a4
        return result;
    }
    // 0x4153b3
    *(char *)(v1 - 144) = 4;
    return function_417186();
}

// Address range: 0x4153bf - 0x4153d1
int32_t function_4153bf(void) {
    // 0x4153bf
    int32_t result; // 0x4153bf
    *(char *)(result - 144) = 3;
    return result;
}

// Address range: 0x4153d1 - 0x4153de
int32_t function_4153d1(void) {
    // 0x4153d1
    int32_t result; // 0x4153d1
    return result;
}

// Address range: 0x4153de - 0x415421
int32_t function_4153de(void) {
    // 0x4153de
    __asm_wait();
    int32_t v1; // 0x4153de
    int16_t v2 = v1; // 0x4153eb
    int16_t * v3 = (int16_t *)(v1 - 160); // 0x4153eb
    *v3 = v2;
    __asm_wait();
    if ((*(char *)(v1 - 159) & 65) != 0) {
        function_415390((int32_t)&g1001);
    }
    // 0x4153fb
    __asm_wait();
    *v3 = v2;
    __asm_wait();
    int32_t result = __asm_wait(); // 0x415415
    *v3 = v2;
    return result;
}

// Address range: 0x415421 - 0x415455
int32_t function_415421(void) {
    // 0x415421
    int3_t v1; // 0x415421
    float80_t v2 = __frontend_reg_load_fpr(v1); // 0x415421
    int3_t v3 = v1 - 1; // 0x415421
    __frontend_reg_store_fpr(v3, v2);
    __frontend_reg_store_fpr(v3, llvm_round_f80(__frontend_reg_load_fpr(v3)));
    __frontend_reg_load_fpr(v3);
    __frontend_reg_load_fpr(v1);
    __asm_wait();
    int32_t v4; // 0x415421
    int32_t v5 = v4 & 0x4000;
    int32_t result = 0; // 0x41542b
    if (v5 != 0) {
        // 0x41542d
        __frontend_reg_store_fpr(v3, __frontend_reg_load_fpr(v1));
        __frontend_reg_store_fpr(v3, __frontend_reg_load_fpr(v3) * (float80_t)g555);
        int3_t v6 = v1 - 2; // 0x415435
        __frontend_reg_store_fpr(v6, __frontend_reg_load_fpr(v3));
        __frontend_reg_store_fpr(v6, llvm_round_f80(__frontend_reg_load_fpr(v6)));
        __frontend_reg_load_fpr(v6);
        __frontend_reg_load_fpr(v3);
        __asm_wait();
        result = v5 == 0 ? 1 : 2;
    }
    // 0x415446
    return result;
}

// Address range: 0x415455 - 0x415487
int32_t function_415455(void) {
    // 0x415455
    __asm_wait();
    int864_t v1 = __asm_fnsave(); // 0x415469
    int32_t result = function_417250(v1, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001); // 0x41546c
    __asm_frstor(v1);
    return result;
}

// Address range: 0x415504 - 0x41553e
int32_t function_415504(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x415504
    __fload(a1, a2);
    __fload(a3, a4);
    __asm_wait();
    __trandisp2();
    return function_41553e();
}

// Address range: 0x41553e - 0x415545
int32_t function_41553e(void) {
    // 0x41553e
    g870 = 0;
    int32_t result; // 0x41553e
    return result;
}

// Address range: 0x415545 - 0x415675
int32_t function_415545(void) {
    // 0x415545
    int32_t v1; // 0x415545
    int32_t v2 = v1;
    int3_t v3; // 0x415545
    int3_t v4 = v3;
    if (g481 != 0) {
        // 0x41559a
        return __asm_wait();
    }
    // 0x41554e
    *(float64_t *)&g869 = (float64_t)__frontend_reg_load_fpr(v4);
    char v5 = *(char *)(v2 - 144); // 0x415554
    switch (v5) {
        case 0: {
            goto lab_0x415578;
        }
        case -1: {
            goto lab_0x4155a2;
        }
        case -2: {
            goto lab_0x4155a2;
        }
        default: {
            // 0x41556a
            *(int32_t *)(v2 - 142) = (int32_t)v5;
            goto lab_0x415613;
        }
    }
  lab_0x415578:
    // 0x415578
    if ((*(int16_t *)(v2 - 164) & 32) != 0) {
        // 0x41559a
        return __asm_wait();
    }
    // 0x415585
    __asm_wait();
    if ((v1 & 32) == 0) {
        // 0x41559a
        return __asm_wait();
    }
    // 0x41558e
    *(int32_t *)(v2 - 142) = 8;
    goto lab_0x415613;
  lab_0x4155a2:;
    // 0x4155a2
    int16_t v10; // 0x4155a2
    switch (v10 & 0x7ff0) {
        case 0: {
            // 0x4155b9
            *(int32_t *)(v2 - 142) = 4;
            int3_t v11 = v4 - 1; // 0x4155c3
            __frontend_reg_store_fpr(v11, 1536.0L);
            float80_t v12 = __frontend_reg_load_fpr(v11); // 0x4155c9
            __frontend_reg_store_fpr(v11, __frontend_reg_load_fpr(v4));
            __frontend_reg_store_fpr(v4, v12);
            float80_t v13 = __frontend_reg_load_fpr(v11); // 0x4155cb
            __frontend_reg_store_fpr(v11, v13 * llvm_exp2_f80(llvm_round_f80(__frontend_reg_load_fpr(v4))));
            __frontend_reg_store_fpr(v4, __frontend_reg_load_fpr(v11));
            __frontend_reg_store_fpr(v11, __frontend_reg_load_fpr(v4));
            __frontend_reg_store_fpr(v11, fabsl(__frontend_reg_load_fpr(v11)));
            __frontend_reg_load_fpr(v11);
            __asm_wait();
            if ((v1 & 256) != 0) {
                // 0x4155df
                __frontend_reg_store_fpr(v4, 0.0L);
            }
            goto lab_0x415613;
        }
        case 0x7ff0: {
            // 0x4155e7
            *(int32_t *)(v2 - 142) = 3;
            int3_t v14 = v4 - 1; // 0x4155f1
            __frontend_reg_store_fpr(v14, -1536.0L);
            float80_t v15 = __frontend_reg_load_fpr(v14); // 0x4155f7
            __frontend_reg_store_fpr(v14, __frontend_reg_load_fpr(v4));
            __frontend_reg_store_fpr(v4, v15);
            float80_t v16 = __frontend_reg_load_fpr(v14); // 0x4155f9
            __frontend_reg_store_fpr(v14, v16 * llvm_exp2_f80(llvm_round_f80(__frontend_reg_load_fpr(v4))));
            __frontend_reg_store_fpr(v4, __frontend_reg_load_fpr(v14));
            __frontend_reg_store_fpr(v14, __frontend_reg_load_fpr(v4));
            __frontend_reg_store_fpr(v14, fabsl(__frontend_reg_load_fpr(v14)));
            __frontend_reg_load_fpr(v14);
            __asm_wait();
            if ((v1 & 0x4100) == 0) {
                // 0x41560d
                __frontend_reg_store_fpr(v4, INFINITY * __frontend_reg_load_fpr(v4));
            }
            goto lab_0x415613;
        }
        default: {
            goto lab_0x415578;
        }
    }
  lab_0x415613:;
    int32_t * v6 = (int32_t *)(v2 - 148); // 0x415615
    int32_t v7 = *v6; // 0x415615
    *(int32_t *)(v2 - 138) = v7 + 1;
    if (g870 == 0) {
        // 0x41562b
        *(int32_t *)(v2 - 134) = *(int32_t *)(v2 + 8);
        *(int32_t *)(v2 - 130) = *(int32_t *)(v2 + 12);
        if (*(char *)(v7 + 13) != 1) {
            // 0x41563d
            *(int32_t *)(v2 - 126) = *(int32_t *)(v2 + 16);
            *(int32_t *)(v2 - 122) = *(int32_t *)(v2 + 20);
        }
    }
    float80_t v8 = __frontend_reg_load_fpr(v4); // 0x415645
    float64_t * v9 = (float64_t *)(v2 - 118); // 0x415645
    *v9 = (float64_t)v8;
    function_4182b0((int32_t)*(char *)(*v6 + 14), v2 - 142, v2 - 164);
    __frontend_reg_store_fpr(v4, (float80_t)*v9);
    // 0x41559a
    return __asm_wait();
}

// Address range: 0x415675 - 0x4156a1
int32_t function_415675(int32_t a1, int32_t a2) {
    // 0x415675
    __fload(a1, a2);
    __asm_wait();
    __trandisp1();
    return function_41553e();
}

// Address range: 0x4156e0 - 0x415721
int32_t function_4156e0(int32_t a1, int32_t a2) {
    // 0x4156e0
    __asm_wait();
    int32_t v1; // 0x4156e0
    int32_t result = function_415750(v1) & -1 - a2 | a2 & a1; // 0x415706
    function_415800(result);
    return result;
}

// Address range: 0x415730 - 0x415748
int32_t function_415730(int32_t a1, int32_t a2) {
    // 0x415730
    return function_4156e0(a1, a2 & -0x80001);
}

// Address range: 0x415750 - 0x4157f1
int32_t function_415750(uint32_t a1) {
    int32_t v1 = 2 * a1 & 8 | 16 * a1 & 16 | a1 / 2 & 4 | a1 / 8 & 2 | a1 / 32 & 1 | 0x40000 * a1 & 0x80000;
    int32_t v2 = v1; // 0x415750
    switch (a1 & 3072) {
        case 1024: {
            // 0x4157b0
            v2 = v1 | 256;
            // break -> 0x4157c3
            break;
        }
        case 2048: {
            // 0x4157b7
            v2 = v1 | 512;
            // break -> 0x4157c3
            break;
        }
        case 3072: {
            // 0x4157be
            v2 = v1 | 768;
            // break -> 0x4157c3
            break;
        }
    }
    int32_t v3 = v2; // 0x415750
    switch (a1 & 768) {
        case 0: {
            // 0x4157da
            v3 = v2 | 0x20000;
            // break -> 0x4157e6
            break;
        }
        case 512: {
            // 0x4157e1
            v3 = v2 | 0x10000;
            // break -> 0x4157e6
            break;
        }
    }
    // 0x4157e6
    return v3 | 64 * a1 & 0x40000;
}

// Address range: 0x415800 - 0x41588d
int32_t function_415800(uint32_t a1) {
    // 0x415800
    int32_t v1; // 0x415800
    int32_t v2 = a1 / 2 & 4 | a1 / 16 & 1 | 2 * a1 & 8 | 8 * a1 & 16 | 32 * a1 & 32 | a1 / 0x40000 & 2 | v1 & -0x10000;
    int32_t v3 = v2; // 0x415800
    switch (a1 & 768) {
        case 256: {
            // 0x415858
            v3 = v2 | 1024;
            // break -> 0x415865
            break;
        }
        case 512: {
            // 0x41585d
            v3 = v2 | 2048;
            // break -> 0x415865
            break;
        }
        case 768: {
            // 0x415862
            v3 = v2 | 3072;
            // break -> 0x415865
            break;
        }
    }
    int32_t v4 = v3; // 0x415800
    switch (a1 & 0x30000) {
        case 0: {
            // 0x415879
            v4 = v3 | 768;
            // break -> 0x415881
            break;
        }
        case 0x10000: {
            // 0x41587e
            v4 = v3 | 512;
            // break -> 0x415881
            break;
        }
    }
    // 0x415881
    return v4 | a1 / 64 & 0x1000;
}

// Address range: 0x415890 - 0x41589b
int32_t function_415890(void) {
    // 0x415890
    return function_411170(2);
}

// Address range: 0x4158a0 - 0x415931
int32_t function_4158a0(uint32_t a1, int32_t a2) {
    // 0x4158a0
    if (a1 < 256) {
        // 0x4158b2
        return (int32_t)*(int16_t *)(g558 + 2 * a1) & a2;
    }
    uint32_t v1 = a1 / 256; // 0x4158c7
    int32_t v2; // 0x4158a0
    int32_t v3; // 0x4158a0
    int32_t v4; // bp-4, 0x4158a0
    char v5; // 0x4158a0
    if (*(char *)(g558 + (2 * v1 & 510 || 1)) > -1) {
        int32_t v6 = 0x1000000 * a1 / 0x1000000; // 0x4158f2
        v4 = v6;
        v2 = v6;
        v3 = 1;
        v5 = 0;
    } else {
        int32_t v7 = 0x1000000 * v1 / 0x1000000; // 0x4158de
        v4 = v7;
        v2 = v7;
        v3 = 2;
        v5 = a1;
    }
    // 0x4158fb
    int32_t v8; // bp-6, 0x4158a0
    int32_t v9; // 0x4158a0
    int32_t v10 = function_4183d0(1, (char *)&v4, v3, &v8, 0, 0, v9, v2, v5); // 0x41590c
    if (v10 != 0) {
        // 0x41591f
        return a2 & 0xffff & v8;
    }
    // 0x415918
    return 0;
}

// Address range: 0x415940 - 0x415a25
int32_t function_415940(uint32_t result) {
    // 0x415940
    if (g561 == 0) {
        // 0x415951
        return result > 90 ? result : result + 32;
    }
    int32_t v1 = g561; // 0x41596b
    if (result <= 255) {
        // 0x41596d
        int32_t v2; // 0x415940
        if (g556 < 2) {
            // 0x415983
            v2 = (int32_t)(*(int16_t *)(g558 + 2 * result) & 1);
        } else {
            // 0x415976
            v2 = function_4158a0(result, 1);
        }
        // 0x415992
        if (v2 == 0) {
            // 0x41595e
            return result;
        }
        // 0x415992
        v1 = g561;
    }
    uint32_t v3 = result / 256; // 0x41599d
    char v4 = *(char *)(g558 + (2 * v3 & 510 | 1)); // 0x4159a8
    int32_t v5 = v4 > -1 ? 1 : 2;
    int32_t v6 = 0x1000000 * (v4 > -1 ? result : v3) / 0x1000000;
    int32_t v7; // bp-8, 0x415940
    int32_t v8 = function_418500(v1, 256, (char *)&v6, v5, &v7, 3, 0); // 0x4159ec
    if (v8 == 0) {
        // 0x41595e
        return result;
    }
    if (v8 != 1) {
        // 0x415a0f
        char v9; // 0x415940
        return v7 & 255 | 256 * (int32_t)(unsigned char)v9;
    }
    // 0x415a04
    return v7 & 255;
}

// Address range: 0x415a30 - 0x415a94
int32_t function_415a30(int32_t a1, int32_t a2) {
    int32_t v1 = a2 >> 31; // 0x415a3e
    int32_t v2 = (v1 & 31) + a2; // 0x415a44
    int32_t v3 = v2 >> 5; // 0x415a46
    uint32_t v4 = v1 + 31 - ((v1 ^ a2) - v1 ^ v1) & 31; // 0x415a5f
    if ((*(int32_t *)(4 * v3 + a1) & (v4 == 0 ? 0 : -1 - (-1 << v4))) != 0) {
        // 0x415a68
        return 0;
    }
    // 0x415a6e
    if (v2 > 63) {
        // 0x415a68
        return 1;
    }
    int32_t v5 = v3 + 1; // 0x415a6e
    int32_t v6 = 4 * v5 + a1; // 0x415a74
    int32_t v7 = v5; // 0x415a74
    int32_t result = 0; // 0x415a7a
    while (*(int32_t *)v6 == 0) {
        // 0x415a7c
        v7++;
        result = 1;
        v6 += 4;
        if (v7 >= 3) {
            // break -> 0x415a68
            break;
        }
        result = 0;
    }
    // 0x415a68
    return result;
}

// Address range: 0x415aa0 - 0x415b03
int32_t function_415aa0(int32_t a1, int32_t a2) {
    int32_t v1 = a2 >> 31; // 0x415ab0
    int32_t v2 = (v1 & 31) + a2; // 0x415ab4
    int32_t v3 = v2 >> 5; // 0x415ab6
    int32_t v4 = 4 * v3 + a1; // 0x415acf
    int32_t v5 = *(int32_t *)v4; // 0x415ad5
    int32_t result = function_418760(v5, 1 << (v1 + 31 - ((v1 ^ a2) - v1 ^ v1) & 31), v4); // 0x415ad9
    if (v2 < 32) {
        // 0x415aff
        return result;
    }
    // 0x415ae4
    int32_t v6; // bp-12, 0x415aa0
    int32_t v7 = &v6; // 0x415ade
    int32_t v8 = v3 - 1; // 0x415ae1
    int32_t v9 = result; // 0x415ae4
    int32_t v10 = v8; // 0x415ae4
    int32_t v11 = 4 * v8 + a1; // 0x415ae4
    int32_t result2 = 0; // 0x415ae9
    while (v9 != 0) {
        // 0x415aeb
        *(int32_t *)(v7 - 4) = v11;
        *(int32_t *)(v7 - 8) = 1;
        *(int32_t *)(v7 - 12) = *(int32_t *)v11;
        v9 = function_418760((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
        v10--;
        v11 -= 4;
        result2 = v9;
        if (v10 < 0) {
            // break -> 0x415aff
            break;
        }
        result2 = 0;
    }
    // 0x415aff
    return result2;
}

// Address range: 0x415b10 - 0x415bbc
int32_t function_415b10(int32_t * a1, int32_t a2) {
    int32_t v1 = (int32_t)a1;
    int32_t v2 = a2 >> 31; // 0x415b29
    int32_t v3 = (v2 & 31) + a2; // 0x415b32
    int32_t v4 = v3 >> 5; // 0x415b34
    int32_t v5 = 4 * v4 + v1;
    uint32_t v6 = v2 + 31 - ((v2 ^ a2) - v2 ^ v2) & 31; // 0x415b5a
    int32_t * v7 = (int32_t *)v5; // 0x415b60
    int32_t result = 0; // 0x415b62
    if ((*v7 & 1 << v6) != 0) {
        // 0x415b64
        result = 0;
        if (function_415a30(v1, a2 + 1) == 0) {
            // 0x415b77
            result = function_415aa0(v1, a2 - 1);
        }
    }
    // 0x415b89
    *v7 = *v7 & -1 << v6;
    if (v3 <= 63) {
        // 0x415b9e
        __asm_rep_stosd_memset((char *)(v5 + 4), 0, 2 - v4);
    }
    // 0x415bb0
    return result;
}

// Address range: 0x415bc0 - 0x415bdd
int32_t function_415bc0(int32_t * a1, int32_t * a2) {
    int32_t v1 = (int32_t)a1; // 0x415bc9
    int32_t v2 = 3; // 0x415bc9
    int32_t v3 = (int32_t)a2;
    int32_t result = v3 + 4; // 0x415bd0
    *(int32_t *)v1 = *(int32_t *)v3;
    v2--;
    v1 += 4;
    while (v2 != 0) {
        // 0x415bce
        v3 = result;
        result = v3 + 4;
        *(int32_t *)v1 = *(int32_t *)v3;
        v2--;
        v1 += 4;
    }
    // 0x415bdb
    return result;
}

// Address range: 0x415be0 - 0x415bef
int32_t function_415be0(int32_t * a1) {
    int32_t v1 = (int32_t)a1;
    *a1 = 0;
    *(int32_t *)(v1 + 4) = 0;
    *(int32_t *)(v1 + 8) = 0;
    return 0;
}

// Address range: 0x415bf0 - 0x415c0d
int32_t function_415bf0(int32_t * a1) {
    int32_t v1 = 0; // 0x415bf2
    int32_t v2 = (int32_t)a1; // 0x415bf2
    int32_t result = 0; // 0x415bf9
    while (*(int32_t *)v2 == 0) {
        // 0x415bfb
        v1++;
        v2 += 4;
        result = 1;
        if (v1 >= 3) {
            // break -> 0x415c04
            break;
        }
        result = 0;
    }
    // 0x415c04
    return result;
}

// Address range: 0x415c10 - 0x415cbd
int32_t function_415c10(int32_t * a1, int32_t a2) {
    int32_t v1 = (int32_t)a1;
    int32_t v2 = a2 >> 31; // 0x415c1a
    int32_t v3 = ((v2 ^ a2) - v2 & 31 ^ v2) - v2; // 0x415c36
    uint32_t v4 = v3 & 31; // 0x415c43
    int32_t v5 = v1; // 0x415c5a
    int32_t v6 = 3; // 0x415c5a
    int32_t * v7 = (int32_t *)v5; // 0x415c5c
    uint32_t v8 = *v7; // 0x415c5c
    v6--;
    *v7 = v8 >> v4;
    int32_t v9 = (v8 & (v4 == 0 ? 0 : -1 - (-1 << v4))) << (-v3 & 31); // 0x415c82
    v5 += 4;
    while (v6 != 0) {
        // 0x415c5c
        v7 = (int32_t *)v5;
        v8 = *v7;
        v6--;
        *v7 = v8 >> v4 | v9;
        v9 = (v8 & (v4 == 0 ? 0 : -1 - (-1 << v4))) << (-v3 & 31);
        v5 += 4;
    }
    int32_t v10 = (v2 & 31) + a2 >> 5; // 0x415c23
    int32_t v11 = v1 + 8;
    int32_t v12 = 4 * v10; // 0x415c92
    int32_t v13 = v11 - v12;
    int32_t v14 = 2;
    int32_t v15; // 0x415c10
    int32_t v16; // 0x415ca0
    if (v10 > v14) {
        // 0x415ca6
        *(int32_t *)v11 = 0;
        v15 = v12;
    } else {
        // 0x415ca0
        v16 = *(int32_t *)v13;
        *(int32_t *)v11 = v16;
        v15 = v16;
    }
    int32_t result = v15;
    int32_t v17 = v14 - 1; // 0x415cb3
    int32_t v18 = v13 - 4; // 0x415cb3
    int32_t v19 = v11 - 4; // 0x415cb3
    while (v14 != 0) {
        int32_t v20 = v19;
        v13 = v18;
        v14 = v17;
        if (v10 > v14) {
            // 0x415ca6
            *(int32_t *)v20 = 0;
            v15 = result;
        } else {
            // 0x415ca0
            v16 = *(int32_t *)v13;
            *(int32_t *)v20 = v16;
            v15 = v16;
        }
        // 0x415cac
        result = v15;
        v17 = v14 - 1;
        v18 = v13 - 4;
        v19 = v20 - 4;
    }
    // 0x415cb5
    return result;
}

// Address range: 0x415cc0 - 0x415e8b
int32_t function_415cc0(int32_t a1, int32_t a2) {
    int16_t v1 = *(int16_t *)(a1 + 10); // 0x415cc7
    uint16_t v2 = v1 & 0x7fff;
    int32_t v3 = *(int32_t *)(a1 + 6); // bp-24, 0x415cf1
    int32_t result; // 0x415cc0
    int32_t v4; // 0x415cc0
    int32_t v5; // 0x415cc0
    int32_t v6; // bp-40, 0x415cc0
    if (v2 != 0) {
        // 0x415d46
        int32_t v7; // bp-12, 0x415cc0
        function_415bc0(&v7, &v3);
        int32_t * v8 = (int32_t *)(a2 + 8); // 0x415d60
        int32_t v9 = (function_415b10(&v3, *v8) == 0 ? -0x3fff : -0x3ffe) + (int32_t)v2;
        int32_t v10 = *(int32_t *)(a2 + 4); // 0x415d72
        if (v10 - *v8 > v9) {
            // 0x415d7e
            function_415be0(&v3);
            result = 2;
            v4 = 0;
            v5 = &v6;
        } else {
            if (v10 < v9) {
                int32_t * v11 = (int32_t *)a2; // 0x415de9
                if (*v11 > v9) {
                    // 0x415e1f
                    v3 &= 0x7fffffff;
                    function_415c10(&v3, *(int32_t *)(a2 + 12));
                    result = 0;
                    v4 = *(int32_t *)(a2 + 20) + v9;
                    v5 = &v6;
                } else {
                    // 0x415ded
                    function_415be0(&v3);
                    v3 |= -0x80000000;
                    function_415c10(&v3, *(int32_t *)(a2 + 12));
                    result = 1;
                    v4 = *v11 + *(int32_t *)(a2 + 20);
                    v5 = &v6;
                }
            } else {
                // 0x415d9b
                function_415bc0(&v3, &v7);
                function_415c10(&v3, v10 - v9);
                function_415b10(&v3, *v8);
                function_415c10(&v3, *(int32_t *)(a2 + 12) + 1);
                result = 2;
                v4 = 0;
                v5 = &v6;
            }
        }
    } else {
        int32_t v12 = function_415bf0(&v3); // 0x415d14
        int32_t v13 = &v6; // 0x415d19
        result = 0;
        v4 = 0;
        v5 = v13;
        if (v12 == 0) {
            // 0x415d2b
            function_415be0(&v3);
            result = 2;
            v4 = 0;
            v5 = v13;
        }
    }
    char v14 = *(char *)(a2 + 12); // 0x415e3f
    int32_t v15 = *(int32_t *)(a2 + 16); // 0x415e57
    int32_t v16 = *(int32_t *)(v5 + 16); // 0x415e5a
    int32_t v17 = v16 | 0x10000 * (int32_t)(v1 & -0x8000) | v4 << (int32_t)(31 - v14 & 31); // 0x415e5a
    if (v15 != 64) {
        if (v15 == 32) {
            // 0x415e7d
            *(int32_t *)*(int32_t *)(v5 + 48) = v17;
        }
        // 0x415e83
        return result;
    }
    int32_t v18 = *(int32_t *)(v5 + 48); // 0x415e63
    *(int32_t *)(v18 + 4) = v17;
    *(int32_t *)v18 = *(int32_t *)(v5 + 20);
    return result;
}

// Address range: 0x415e90 - 0x415ea8
int32_t function_415e90(int32_t * a1, int32_t a2) {
    // 0x415e90
    return function_415cc0((int32_t)a1, a2);
}

// Address range: 0x415eb0 - 0x415ec8
int32_t function_415eb0(int32_t * a1, int32_t a2) {
    // 0x415eb0
    return function_415cc0((int32_t)a1, a2);
}

// Address range: 0x415ed0 - 0x415f05
int32_t function_415ed0(int32_t * a1, int32_t a2) {
    // 0x415ed0
    int32_t v1; // bp-12, 0x415ed0
    function_418970(&v1);
    return function_415e90(&v1, (int32_t)a1);
}

// Address range: 0x415f10 - 0x415f45
int32_t function_415f10(int32_t * a1, int32_t a2) {
    // 0x415f10
    int32_t v1; // bp-12, 0x415f10
    function_418970(&v1);
    return function_415eb0(&v1, (int32_t)a1);
}

// Address range: 0x415f50 - 0x415fd1
int32_t function_415f50(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = a1 + 1; // 0x415f60
    int32_t v2 = *(int32_t *)(a3 + 12); // 0x415f63
    char * v3 = (char *)a1; // 0x415f68
    *v3 = 48;
    int32_t v4 = a2; // 0x415f6d
    int32_t result = a2; // 0x415f6d
    int32_t v5 = v2; // 0x415f6d
    int32_t v6 = v1; // 0x415f6d
    if (a2 >= 1) {
        char v7 = *(char *)v2; // 0x415f6f
        int32_t v8; // 0x415f50
        if (v7 == 0) {
            // 0x415f7b
            *(char *)v1 = 48;
            v8 = v2;
        } else {
            // 0x415f76
            *(char *)v1 = v7;
            v8 = v2 + 1;
        }
        int32_t v9 = v8;
        int32_t v10 = v1 + 1; // 0x415f7e
        v4--;
        result = v4;
        v5 = v9;
        v6 = v10;
        while (v4 != 0) {
            int32_t v11 = v10;
            int32_t v12 = v9;
            v7 = *(char *)v12;
            if (v7 == 0) {
                // 0x415f7b
                *(char *)v11 = 48;
                v8 = v12;
            } else {
                // 0x415f76
                *(char *)v11 = v7;
                v8 = v12 + 1;
            }
            // 0x415f7e
            v9 = v8;
            v10 = v11 + 1;
            v4--;
            result = v4;
            v5 = v9;
            v6 = v10;
        }
    }
    // 0x415f82
    *(char *)v6 = 0;
    if (result >= 0) {
        // 0x415f89
        if (*(char *)v5 >= 53) {
            int32_t v13 = v6 - 1; // 0x415f8f
            char * v14 = (char *)v13;
            char v15 = *v14; // 0x415f90
            char * v16 = v14; // 0x415f93
            char v17 = v15; // 0x415f93
            if (v15 == 57) {
                *(char *)v13 = 48;
                int32_t v18 = v13 - 1; // 0x415f98
                char * v19 = (char *)v18;
                char v20 = *v19; // 0x415f99
                int32_t v21 = v18; // 0x415f9c
                v16 = v19;
                v17 = v20;
                while (v20 == 57) {
                    // 0x415f95
                    *(char *)v21 = 48;
                    v18 = v21 - 1;
                    v19 = (char *)v18;
                    v20 = *v19;
                    v21 = v18;
                    v16 = v19;
                    v17 = v20;
                }
            }
            // 0x415f9e
            *v16 = v17 + 1;
        }
    }
    // 0x415fa0
    if (*v3 == 49) {
        int32_t * v22 = (int32_t *)(a3 + 4); // 0x415fa6
        *v22 = *v22 + 1;
        return result;
    }
    int32_t v23 = -1; // 0x415fb4
    int32_t v24 = v1;
    int32_t v25 = 0; // 0x415fb4
    int32_t v26 = v24; // 0x415fb4
    bool v27; // 0x415f50
    while (v23 != 0) {
        int32_t v28 = v24 + (v27 ? -1 : 1); // 0x415fb4
        v23--;
        v25 = v23;
        v26 = v28;
        if (*(char *)v24 == 0) {
            // break -> 
            break;
        }
        v24 = v28;
        v25 = 0;
        v26 = v24;
    }
    uint32_t result2 = -1 - v25;
    uint32_t v29 = result2 / 4; // 0x415fbc
    __asm_rep_movsd_memcpy(v3, (char *)(v26 - result2), v29);
    char * v30 = (char *)(v29 * (v27 ? -4 : 4) + a1); // 0x415fcb
    __asm_rep_movsb_memcpy(v30, v30, result2 & 3);
    return result2;
}

// Address range: 0x415fe0 - 0x416047
int32_t function_415fe0(void) {
    // 0x415fe0
    int32_t v1; // 0x415fe0
    int32_t v2; // bp-12, 0x415fe0
    function_416050(&v2, &v1);
    int32_t v3; // 0x415fe0
    int32_t v4 = function_4190c0(v2, v3, v3, 17, 0, &g871, (int32_t)&g1001); // 0x41600d
    g876 = v4;
    g877 = &g873;
    g874 = g872;
    g875 = (int32_t)*(int16_t *)&g871;
    return &g874;
}

// Address range: 0x416050 - 0x41610c
int32_t function_416050(int32_t * a1, int32_t * a2) {
    int32_t v1 = (int32_t)a2;
    int32_t v2 = (int32_t)a1;
    int16_t v3 = *(int16_t *)(v1 + 6); // 0x416055
    uint16_t v4 = v3 & 0x7ff0; // 0x41605e
    int32_t v5 = v4 / 16; // 0x416064
    int32_t v6 = *(int32_t *)(v1 + 4) & 0xfffff; // 0x416075
    uint32_t v7 = *a2; // 0x41607b
    int32_t v8 = -0x80000000; // 0x416050
    int32_t v9 = 0x7fff; // 0x416050
    int32_t v10; // 0x4160db
    int32_t result2; // 0x4160ef
    switch (v4) {
        case 0: {
            if ((v6 || v7) == 0) {
                // 0x41609c
                *(int16_t *)(v2 + 8) = 0;
                *(int32_t *)(v2 + 4) = 0;
                *a1 = 0;
                return 0;
            }
            // 0x4160ae
            v8 = 0;
            v9 = v5 + 0x3c01;
        }
        case 0x7ff0: {
          lab_0x4160bb:;
            int32_t result = v7 / 0x200000; // 0x4160c4
            int32_t v11 = 2048 * v6 | result | v8; // 0x4160cc
            *a1 = 2048 * v7;
            int32_t * v12 = (int32_t *)(v2 + 4); // 0x4160d6
            *v12 = v11;
            v10 = v9;
            if (v11 <= -1) {
                // 0x416100
                *(int16_t *)(v2 + 8) = v3 & -0x8000 | (int16_t)v9;
                return result;
            }
            int32_t v13 = v11; // 0x4160e1
            v10 = v10 + 0xffff & 0xffff;
            uint32_t v14 = *a1; // 0x4160dd
            result2 = 2 * v14;
            int32_t v15 = v14 / 0x80000000 | 2 * v13; // 0x4160f1
            *a1 = result2;
            *v12 = v15;
            while ((v13 & 0x40000000) == 0) {
                // 0x4160db
                v13 = v15;
                v10 = v10 + 0xffff & 0xffff;
                v14 = *a1;
                result2 = 2 * v14;
                v15 = v14 / 0x80000000 | 2 * v13;
                *a1 = result2;
                *v12 = v15;
            }
            // break -> 0x416100
            break;
        }
        default: {
            // 0x41608b
            v8 = -0x80000000;
            v9 = v5 + 0x3c00;
            // branch (via goto) -> 0x4160bb
            goto lab_0x4160bb;
        }
    }
    // 0x416100
    *(int16_t *)(v2 + 8) = v3 & -0x8000 | (int16_t)v10;
    return result2;
}

// Address range: 0x416110 - 0x41625e
int32_t function_416110(uint32_t result, uint32_t a2, uint32_t a3) {
    uint32_t v1 = a3 + a2; // 0x416124
    int32_t v2 = a3 & 3;
    if (result > a2 == v1 > result) {
        // 0x4161bc
        __asm_rep_movsd_memcpy((char *)(result - 4 + a3), (char *)(v1 - 4), a3 / 4);
        g1000 = v2;
        return result;
    }
    // 0x416136
    __asm_rep_movsd_memcpy((char *)result, (char *)a2, a3 / 4);
    g999 = v2;
    return result;
}

// Address range: 0x416260 - 0x4162f2
int32_t function_416260(int32_t * a1) {
    // 0x416260
    int32_t v1; // 0x416260
    int32_t * v2; // 0x416260
    if (g563 != 0) {
        // 0x416260
        v1 = g565;
        int32_t v3; // bp-12, 0x416260
        v2 = &v3;
    } else {
        int32_t * moduleHandle = LoadLibraryA("user32.dll"); // 0x416272
        if (moduleHandle == NULL) {
            // 0x4162ec
            return 0;
        }
        int32_t (*func)() = GetProcAddress(moduleHandle, "MessageBoxA"); // 0x41628a
        g563 = (int32_t)func;
        if (func == NULL) {
            // 0x4162ec
            return 0;
        }
        // 0x416295
        g564 = (int32_t)GetProcAddress(moduleHandle, "GetActiveWindow");
        int32_t v4 = (int32_t)moduleHandle; // bp-40, 0x4162a7
        int32_t func2 = (int32_t)GetProcAddress(moduleHandle, "GetLastActivePopup"); // 0x4162a8
        g565 = func2;
        v1 = func2;
        v2 = &v4;
    }
    int32_t v5 = (int32_t)v2;
    int32_t v6 = v5; // 0x4162be
    if (v1 != 0 && g564 != 0) {
        // 0x4162c9
        v6 = v5 - 4;
        *(int32_t *)v6 = g564;
    }
    int32_t v7 = v6;
    int32_t result = *(int32_t *)(v7 + 24); // 0x4162d2
    *(int32_t *)(v7 - 4) = result;
    *(int32_t *)(v7 - 8) = *(int32_t *)(v7 + 20);
    *(int32_t *)(v7 - 12) = *(int32_t *)(v7 + 16);
    *(int32_t *)(v7 - 16) = g564;
    return result;
}

// Address range: 0x416300 - 0x4163fe
int32_t function_416300(int32_t result, char * a2, int32_t a3) {
    if (a3 == 0) {
        // 0x416352
        return result;
    }
    int32_t v1 = (int32_t)a2; // 0x41630d
    int32_t v2 = a3; // 0x41631b
    int32_t v3 = v1; // 0x41631b
    int32_t v4 = result; // 0x41631b
    int32_t v5; // 0x416300
    int32_t v6; // 0x416300
    int32_t v7; // 0x416300
    int32_t v8; // 0x416300
    int32_t v9; // 0x416300
    int32_t v10; // 0x416300
    int32_t v11; // 0x416300
    if ((v1 & 3) != 0) {
        char v12 = *(char *)v3; // 0x416324
        *(char *)v4 = v12;
        v2--;
        while (v2 != 0) {
            // 0x41632d
            v4++;
            if (v12 == 0) {
                // 0x41635a
                v6 = v2;
                v9 = v4;
                v7 = v2;
                v10 = v4;
                if ((v4 & 3) == 0) {
                    goto lab_0x416374;
                } else {
                    goto lab_0x416362;
                }
            }
            // 0x416331
            v3++;
            if ((v3 & 3) == 0) {
                // 0x416339
                v5 = v2;
                v11 = v3;
                v8 = v4;
                if (v2 >= 4) {
                    goto lab_0x416391;
                } else {
                    goto lab_0x416340;
                }
            }
            v12 = *(char *)v3;
            *(char *)v4 = v12;
            v2--;
        }
      lab_0x416352:
        // 0x416352
        return result;
    }
    // 0x41631d
    v2 = a3;
    v3 = v1;
    v4 = result;
    int32_t v13 = a3; // 0x416320
    v11 = v1;
    v8 = result;
    if (a3 >= 4) {
        goto lab_0x416391;
    } else {
        goto lab_0x416345;
    }
  lab_0x416391:;
    uint32_t v14 = *(int32_t *)v3;
    int32_t v15; // 0x416300
    if (((v14 ^ -0x7efeff00 ^ v14 + 0x7efefeff) & -0x7efeff00) != 0) {
        if ((char)v14 == 0) {
            // 0x4163db
            *(int32_t *)v15 = 0;
            goto lab_0x4163df;
        }
        if ((v14 & 0xff00) == 0) {
            // 0x4163d1
            *(int32_t *)v15 = v14 & 255;
            goto lab_0x4163df;
        }
        if ((v14 & 0xff0000) == 0) {
            // 0x4163c7
            *(int32_t *)v15 = v14 & 0xffff;
            goto lab_0x4163df;
        }
        if (v14 < 0x1000000) {
            // 0x4163c3
            *(int32_t *)v15 = v14;
            goto lab_0x4163df;
        }
    }
    int32_t v16 = v3 + 4; // 0x4163a1
    *(int32_t *)v4 = v14;
    int32_t v17 = v4 + 4; // 0x41638b
    int32_t v18 = v2 / 4 - 1; // 0x41638e
    v5 = v2;
    v11 = v16;
    v8 = v17;
    int32_t v19 = v18; // 0x41638f
    int32_t v20 = v16; // 0x41638f
    int32_t v21 = v17; // 0x41638f
    while (v18 != 0) {
        // 0x416391
        v14 = *(int32_t *)v20;
        if (((v14 ^ -0x7efeff00 ^ v14 + 0x7efefeff) & -0x7efeff00) != 0) {
            if ((char)v14 == 0) {
                // 0x4163db
                *(int32_t *)v15 = 0;
                goto lab_0x4163df;
            }
            if ((v14 & 0xff00) == 0) {
                // 0x4163d1
                *(int32_t *)v15 = v14 & 255;
                goto lab_0x4163df;
            }
            if ((v14 & 0xff0000) == 0) {
                // 0x4163c7
                *(int32_t *)v15 = v14 & 0xffff;
                goto lab_0x4163df;
            }
            if (v14 < 0x1000000) {
                // 0x4163c3
                *(int32_t *)v15 = v14;
                goto lab_0x4163df;
            }
        }
        // 0x416389
        v16 = v20 + 4;
        *(int32_t *)v21 = v14;
        v17 = v21 + 4;
        v18 = v19 - 1;
        v5 = v2;
        v11 = v16;
        v8 = v17;
        v19 = v18;
        v20 = v16;
        v21 = v17;
    }
    goto lab_0x416340;
  lab_0x416345:;
    int32_t v22 = v11;
    int32_t v23 = v13;
    char v24 = *(char *)v22; // 0x416345
    *(char *)v8 = v24;
    int32_t v25 = v8 + 1; // 0x41634a
    int32_t v26 = v23; // 0x41634d
    int32_t v27 = v25; // 0x41634d
    while (v24 != 0) {
        int32_t v28 = v23 - 1; // 0x41634f
        if (v28 == 0) {
            // 0x416352
            return result;
        }
        v22++;
        v23 = v28;
        v24 = *(char *)v22;
        *(char *)v25 = v24;
        v25++;
        v26 = v23;
        v27 = v25;
    }
    goto lab_0x41637e;
  lab_0x416340:
    // 0x416340
    v13 = v5 & 3;
    if (v13 == 0) {
        // 0x416352
        return result;
    }
    goto lab_0x416345;
  lab_0x41637e:;
    int32_t v29 = v26 - 1; // 0x41637e
    int32_t v30 = v29; // 0x41637f
    int32_t v31 = v27; // 0x41637f
    if (v29 == 0) {
        // 0x416352
        return result;
    }
    goto lab_0x41637b;
  lab_0x41637b:
    // 0x41637b
    *(char *)v31 = 0;
    v26 = v30;
    v27 = v31 + 1;
    goto lab_0x41637e;
  lab_0x416374:
    // 0x416374
    v30 = v7;
    v31 = v10;
    if (v7 >= 4) {
        goto lab_0x4163e7;
    } else {
        goto lab_0x41637b;
    }
  lab_0x416362:
    // 0x416362
    *(char *)v9 = 0;
    int32_t v32 = v6 - 1; // 0x416365
    if (v32 == 0) {
        goto lab_0x416352;
    } else {
        int32_t v33 = v9 + 1; // 0x416364
        v6 = v32;
        v9 = v33;
        v7 = v32;
        v10 = v33;
        if ((v33 & 3) != 0) {
            goto lab_0x416362;
        } else {
            goto lab_0x416374;
        }
    }
  lab_0x4163e7:;
    int32_t v34 = v7 / 4; // 0x4163e7
    int32_t v35 = v10; // 0x4163e7
    goto lab_0x4163e9;
  lab_0x4163e9:
    // 0x4163e9
    *(int32_t *)v35 = 0;
    int32_t v36 = v35 + 4; // 0x4163eb
    int32_t v37 = v34 - 1; // 0x4163ee
    v34 = v37;
    v35 = v36;
    int32_t v38 = v36; // 0x4163ef
    if (v37 != 0) {
        goto lab_0x4163e9;
    } else {
        goto lab_0x4163f1;
    }
  lab_0x4163f1:;
    int32_t v39 = v7 & 3; // 0x4163f1
    v30 = v39;
    v31 = v38;
    if (v39 != 0) {
        goto lab_0x41637b;
    } else {
        goto lab_0x416352;
    }
  lab_0x4163df:
    // 0x4163df
    v38 = v15 + 4;
    int32_t v40; // 0x416300
    if (v40 == 1) {
        goto lab_0x4163f1;
    } else {
        goto lab_0x4163e7;
    }
}

// Address range: 0x416400 - 0x4164ba
int32_t function_416400(void) {
    int32_t v1 = &g985; // 0x41640d
    int32_t v2 = 0; // 0x41640d
    int32_t v3 = -1; // 0x41640d
    int32_t v4 = 0; // 0x41640d
    int32_t v5; // 0x416400
    int32_t result2; // 0x416400
    while (true) {
        // 0x416412
        v5 = v4;
        result2 = v3;
        int32_t * v6 = (int32_t *)v1; // 0x416412
        uint32_t v7 = *v6; // 0x416412
        if (v7 == 0) {
            // break -> 0x416460
            break;
        }
        int32_t v8 = v2;
        uint32_t v9 = v7 + 256; // 0x416418
        int32_t v10 = v7; // 0x416420
        int32_t v11 = result2; // 0x416420
        if (v7 < 0xffffff00) {
            int32_t v12 = v10;
            while ((*(char *)(v12 + 4) & 1) != 0) {
                int32_t v13 = v12 + 8; // 0x41642c
                v10 = v13;
                v11 = result2;
                if (v13 >= v9) {
                    goto lab_0x416445;
                }
                v12 = v10;
            }
            // 0x416435
            *(int32_t *)v12 = -1;
            v11 = (v12 - *v6 >> 3) + v8;
        }
      lab_0x416445:
        // 0x416445
        v3 = v11;
        int32_t result = v3; // 0x416448
        if (v3 != -1) {
            // 0x416459
            return result;
        }
        // 0x41644a
        v1 += 4;
        v2 = v8 + 32;
        v4 = v5 + 1;
        result = v3;
        if (v1 >= (int32_t)&g987) {
            // 0x416459
            return result;
        }
    }
    int32_t v14 = function_4111a0(256); // 0x416465
    if (v14 == 0) {
        // 0x416459
        return result2;
    }
    int32_t * v15 = (int32_t *)(4 * v5 + (int32_t)&g985); // 0x416485
    *v15 = v14;
    if (v14 >= 0xffffff00) {
        // 0x416459
        return 32 * v5;
    }
    *(char *)(v14 + 4) = 0;
    int32_t v16 = v14 + 8; // 0x416495
    *(int32_t *)v14 = -1;
    *(char *)(v14 + 5) = 10;
    while (*v15 + 256 > v16) {
        int32_t v17 = v16;
        *(char *)(v17 + 4) = 0;
        v16 = v17 + 8;
        *(int32_t *)v17 = -1;
        *(char *)(v17 + 5) = 10;
    }
    // 0x416459
    return 32 * v5;
}

// Address range: 0x4164c0 - 0x416563
int32_t function_4164c0(uint32_t a1, int32_t hHandle) {
    // 0x4164c0
    if ((int32_t)g987 <= a1) {
        // 0x416546
        g484 = 9;
        g485 = 0;
        return -1;
    }
    int32_t * v1 = (int32_t *)((a1 / 8 & -4) + (int32_t)&g985); // 0x4164e2
    int32_t v2 = 8 * a1 & 248; // 0x4164e4
    if (*(int32_t *)(*v1 + v2) != -1) {
        // 0x416546
        g484 = 9;
        g485 = 0;
        return -1;
    }
    // 0x4164f1
    if (g501 != 1) {
        // 0x41653b
        *(int32_t *)(*v1 + v2) = hHandle;
        return 0;
    }
    switch (a1) {
        case 0: {
            // 0x41650a
            SetStdHandle(-10, (int32_t *)hHandle);
            // break -> 0x41653b
            break;
        }
        case 1: {
            // 0x416519
            SetStdHandle(-11, (int32_t *)hHandle);
            // break -> 0x41653b
            break;
        }
        case 2: {
            // 0x416528
            SetStdHandle(-12, (int32_t *)hHandle);
            // break -> 0x41653b
            break;
        }
    }
    // 0x41653b
    *(int32_t *)(*v1 + v2) = hHandle;
    return 0;
}

// Address range: 0x416570 - 0x416600
int32_t function_416570(uint32_t a1) {
    // 0x416570
    if ((int32_t)g987 <= a1) {
        // 0x4165e4
        g484 = 9;
        g485 = 0;
        return -1;
    }
    int32_t v1 = 8 * a1 & 248; // 0x416591
    int32_t * v2 = (int32_t *)((a1 / 8 & -4) + (int32_t)&g985); // 0x416598
    int32_t v3 = *v2 + v1;
    if ((*(char *)(v3 + 4) & 1) == 0) {
        // 0x4165e4
        g484 = 9;
        g485 = 0;
        return -1;
    }
    int32_t * v4 = (int32_t *)v3;
    if (*v4 == -1) {
        // 0x4165e4
        g484 = 9;
        g485 = 0;
        return -1;
    }
    // 0x4165a7
    if (g501 != 1) {
        // 0x4165d6
        *v4 = -1;
        return 0;
    }
    int32_t nStdHandle = -10; // 0x416570
    int32_t * v5 = v4; // 0x416570
    switch (a1) {
        case 1: {
            // 0x4165c6
            nStdHandle = -11;
        }
        case 0: {
          lab_0x4165d0:
            // 0x4165d0
            SetStdHandle(nStdHandle, NULL);
            v5 = (int32_t *)(*v2 + v1);
            // break -> 0x4165d6
            break;
        }
        case 2: {
            // 0x4165cc
            nStdHandle = -12;
            // branch (via goto) -> 0x4165d0
            goto lab_0x4165d0;
        }
    }
    // 0x4165d6
    *v5 = -1;
    return 0;
}

// Address range: 0x416600 - 0x416643
int32_t function_416600(uint32_t a1) {
    // 0x416600
    if ((int32_t)g987 <= a1) {
        // 0x416629
        g484 = 9;
        g485 = 0;
        return -1;
    }
    int32_t v1 = *(int32_t *)((a1 / 8 & -4) + (int32_t)&g985); // 0x416617
    int32_t v2 = v1 + (8 * a1 & 248); // 0x41661d
    if ((*(char *)(v2 + 4) & 1) != 0) {
        // 0x416626
        return *(int32_t *)v2;
    }
    // 0x416629
    g484 = 9;
    g485 = 0;
    return -1;
}

// Address range: 0x416650 - 0x4166bf
int32_t function_416650(uint32_t a1) {
    // 0x416650
    if ((int32_t)g987 <= a1) {
        // 0x4166af
        g484 = 9;
        // 0x4166be
        return -1;
    }
    int32_t v1 = *(int32_t *)((a1 / 8 & -4) + (int32_t)&g985); // 0x416669
    if ((*(char *)(v1 + (8 * a1 & 248 | 4)) & 1) == 0) {
        // 0x4166af
        g484 = 9;
        // 0x4166be
        return -1;
    }
    // 0x416677
    if (FlushFileBuffers((int32_t *)function_416600(a1))) {
        // 0x4166be
        return 0;
    }
    int32_t errorCode = GetLastError(); // 0x416690
    if (errorCode == 0) {
        // 0x4166be
        return 0;
    }
    // 0x41669a
    g484 = 9;
    g485 = errorCode;
    return -1;
}

// Address range: 0x4166c0 - 0x41670b
int32_t function_4166c0(int32_t a1) {
    // 0x4166c0
    g552++;
    int32_t v1 = function_4111a0(0x1000); // 0x4166d0
    int32_t * v2 = (int32_t *)(a1 + 8); // 0x4166d8
    *v2 = v1;
    int32_t * v3 = (int32_t *)(a1 + 12);
    int32_t v4 = *v3;
    if (v1 == 0) {
        // 0x4166ec
        *v3 = v4 | 4;
        *v2 = a1 + 20;
        *(int32_t *)(a1 + 24) = 2;
    } else {
        // 0x4166df
        *v3 = v4 | 8;
        *(int32_t *)(a1 + 24) = 0x1000;
    }
    int32_t result = *v2; // 0x4166fd
    *(int32_t *)a1 = result;
    *(int32_t *)(a1 + 4) = 0;
    return result;
}

// Address range: 0x416710 - 0x4167f6
int32_t function_416710(uint32_t a1, int32_t lDistanceToMove, int32_t a3, int32_t dwMoveMethod) {
    // 0x416710
    if ((int32_t)g987 <= a1) {
        // 0x4167d5
        g484 = 9;
        g485 = 0;
        return -1;
    }
    int32_t * v1 = (int32_t *)((a1 / 8 & -4) + (int32_t)&g985); // 0x416738
    int32_t v2 = 8 * a1 & 248 | 4;
    if ((*(char *)(*v1 + v2) & 1) == 0) {
        // 0x4167d5
        g484 = 9;
        g485 = 0;
        return -1;
    }
    int32_t lpDistanceToMoveHigh = a3; // bp-4, 0x416759
    int32_t hFile = function_416600(a1); // 0x41675d
    if (hFile == -1) {
        // 0x41676a
        g484 = 9;
        return -1;
    }
    int32_t result = SetFilePointer((int32_t *)hFile, lDistanceToMove, &lpDistanceToMoveHigh, dwMoveMethod); // 0x416791
    char * v3; // 0x4167c2
    if (result != -1) {
        // 0x4167c0
        v3 = (char *)(*v1 + v2);
        *v3 = *v3 & -3;
        return result;
    }
    int32_t errorCode = GetLastError(); // 0x4167a0
    if (errorCode != 0) {
        // 0x4167aa
        function_4144a0(errorCode);
        return -1;
    }
    // 0x4167c0
    v3 = (char *)(*v1 + v2);
    *v3 = *v3 & -3;
    return result;
}

// Address range: 0x416800 - 0x4169dc
int32_t function_416800(int32_t a1) {
    // 0x416800
    int32_t v1; // 0x416800
    int32_t v2 = v1;
    int32_t v3 = *(int32_t *)(a1 + 16); // 0x41680b
    int32_t * v4 = (int32_t *)(a1 + 4); // 0x41680e
    if (*v4 < 0) {
        // 0x416818
        *v4 = 0;
    }
    int32_t result2 = function_416710(v3, 0, 0, 1); // 0x41682a
    if (v2 < 0 && v2 >= 0 != v2 != 0) {
        // 0x416847
        return -1;
    }
    int32_t * v5 = (int32_t *)(a1 + 12); // 0x416856
    int32_t v6 = *v5; // 0x416856
    if ((v6 & 264) == 0) {
        // 0x416861
        return result2 - *v4;
    }
    uint32_t v7 = *(int32_t *)a1; // 0x41687d
    int32_t * v8 = (int32_t *)(a1 + 8); // 0x41687f
    uint32_t v9 = *v8; // 0x41687f
    int32_t v10 = v7 - v9; // 0x416884
    int32_t result; // 0x416800
    if ((v6 & 3) == 0) {
        // 0x4168db
        result = v10;
        if ((char)v6 > -1) {
            // 0x4168e0
            g484 = 22;
            return -1;
        }
    } else {
        int32_t v11 = *(int32_t *)((v3 >> 3 & -4) + (int32_t)&g985); // 0x4168a0
        result = v10;
        if (!((v7 <= v9 | *(char *)(v11 + (8 * v3 & 248 | 4)) > -1))) {
            int32_t v12 = v10 + (int32_t)(*(char *)v9 == 10);
            int32_t v13 = v9 + 1; // 0x4168ba
            int32_t v14 = v12; // 0x4168bd
            int32_t v15 = v13; // 0x4168bd
            result = v12;
            while (v13 < v7) {
                // 0x4168b1
                v12 = v14 + (int32_t)(*(char *)v15 == 10);
                v13 = v15 + 1;
                v14 = v12;
                v15 = v13;
                result = v12;
            }
        }
    }
    // 0x4168bf
    if ((result2 || v2) == 0) {
        // 0x416847
        return result;
    }
    // 0x4168f9
    if ((v6 & 1) == 0) {
        // 0x4169c6
        return result + result2;
    }
    int32_t v16 = *v4; // 0x416902
    if (v16 == 0) {
        // 0x4169c6
        return result2;
    }
    int32_t v17 = v16 + v10; // 0x416916
    int32_t * v18 = (int32_t *)((v3 >> 3 & -4) + (int32_t)&g985); // 0x416930
    int32_t v19 = 8 * v3 & 248 | 4;
    int32_t v20 = v17; // 0x41693f
    int32_t v21; // 0x416800
    if (*(char *)(*v18 + v19) > -1) {
        return result + result2 - v20;
    } else {
        // 0x416941
        if (v6 == v2 == function_416710(v3, 0, 0, 2) == result2) {
            uint32_t v22 = *v8; // 0x416960
            uint32_t v23 = v22 + v17; // 0x416963
            int32_t v24 = v17; // 0x416968
            if (v17 != 0 && v23 >= v22) {
                int32_t v25 = v17 + (int32_t)(*(char *)v22 == 10);
                int32_t v26 = v22 + 1; // 0x416970
                int32_t v27 = v26; // 0x416973
                int32_t v28 = v25; // 0x416973
                v24 = v25;
                while (v23 > v26) {
                    // 0x41696a
                    v25 = v28 + (int32_t)(*(char *)v27 == 10);
                    v26 = v27 + 1;
                    v27 = v26;
                    v28 = v25;
                    v24 = v25;
                }
            }
            // 0x416975
            v20 = v24;
            if ((*(char *)(a1 + 13) & 32) == 0) {
                return result + result2 - v20;
            } else {
                // 0x4169bc
                v20 = v24 + 1;
                return result + result2 - v20;
            }
        } else {
            // 0x41697d
            function_416710(v3, result2, v2, 0);
            if (v17 < 513) {
                // 0x41699e
                v21 = 512;
                if ((*v5 & 1032) == 8) {
                    goto lab_0x4169b2;
                } else {
                    // 0x4169af
                    v21 = *(int32_t *)(a1 + 24);
                    goto lab_0x4169b2;
                }
            } else {
                // 0x4169af
                v21 = *(int32_t *)(a1 + 24);
                goto lab_0x4169b2;
            }
        }
    }
  lab_0x4169bd:
    // 0x4169c6
    return result + result2 - v20;
  lab_0x4169b2:
    // 0x4169b2
    v20 = v21;
    if ((*(char *)(*v18 + v19) & 4) == 0) {
        return result + result2 - v20;
    } else {
        // 0x4169bc
        v20 = v21 + 1;
        return result + result2 - v20;
    }
}

// Address range: 0x4169e0 - 0x416daf
int32_t function_4169e0(int32_t lpFileName, uint32_t a2, int32_t a3, int32_t a4) {
    int32_t lpSecurityAttributes = 12; // bp-12, 0x4169ea
    int32_t v1 = a2 / 8 & 16;
    int32_t v2 = v1; // 0x416a19
    if ((int16_t)a2 > -1) {
        // 0x416a1b
        v2 = (a2 & 0x4000) == 0 == g569 == 0x8000 ? v1 : v1 | 128;
    }
    int32_t v3 = v2;
    int32_t v4 = -0x80000000; // 0x4169e0
    switch (a2 & 3) {
        case 0: {
            goto lab_0x416a80;
        }
        case 1: {
            // 0x416a6e
            v4 = 0x40000000;
            goto lab_0x416a80;
        }
        case 2: {
            // 0x416a78
            v4 = -0x40000000;
            goto lab_0x416a80;
        }
        default: {
            // 0x416a43
            g484 = 22;
            g485 = 0;
            return -1;
        }
    }
  lab_0x416a80:;
    unsigned char v5 = *(char *)(a3 + (int32_t)&g5 - 16); // 0x416a8e
    g991 = v5;
    int32_t dwShareMode = 0; // 0x416a94
    switch (v5) {
        case 0: {
            goto lab_0x416ae2;
        }
        case 1: {
            // 0x416ac6
            dwShareMode = 1;
            goto lab_0x416ae2;
        }
        case 2: {
            // 0x416ad0
            dwShareMode = 2;
            goto lab_0x416ae2;
        }
        case 3: {
            // 0x416ada
            dwShareMode = 3;
            goto lab_0x416ae2;
        }
        default: {
            // 0x416a9b
            g484 = 22;
            g485 = 0;
            return -1;
        }
    }
  lab_0x416ae2:;
    uint32_t v6 = a2 & 1792; // 0x416ae4
    int32_t dwCreationDisposition; // 0x4169e0
    if (v6 > 256) {
        if (v6 > 768) {
            if (v6 > 1280) {
                // 0x416b1c
                dwCreationDisposition = 5;
                switch (v6) {
                    case 1536: {
                        goto lab_0x416b7b;
                    }
                    case 1792: {
                        // 0x416b73
                        dwCreationDisposition = 1;
                        goto lab_0x416b7b;
                    }
                    default: {
                        // 0x416b2a
                        g484 = 22;
                        g485 = 0;
                        return -1;
                    }
                }
            } else {
                // 0x416b11
                dwCreationDisposition = 3;
                switch (v6) {
                    case 1280: {
                        // 0x416b73
                        dwCreationDisposition = 1;
                        goto lab_0x416b7b;
                    }
                    case 1024: {
                        goto lab_0x416b7b;
                    }
                    default: {
                        // 0x416b2a
                        g484 = 22;
                        g485 = 0;
                        return -1;
                    }
                }
            }
        } else {
            // 0x416aff
            dwCreationDisposition = 5;
            switch (v6) {
                case 768: {
                    // 0x416b69
                    dwCreationDisposition = 2;
                    goto lab_0x416b7b;
                }
                case 512: {
                    goto lab_0x416b7b;
                }
                default: {
                    // 0x416b2a
                    g484 = 22;
                    g485 = 0;
                    return -1;
                }
            }
        }
    } else {
        // 0x416af0
        dwCreationDisposition = 3;
        switch (v6) {
            case 256: {
                // 0x416b55
                dwCreationDisposition = 4;
                goto lab_0x416b7b;
            }
            case 0: {
                goto lab_0x416b7b;
            }
            default: {
                // 0x416b2a
                g484 = 22;
                g485 = 0;
                return -1;
            }
        }
    }
  lab_0x416b7b:;
    int32_t v7 = 128; // 0x416b86
    if ((a2 & 256) != 0) {
        // 0x416b88
        v7 = (char)((g486 ^ 128) & a4) <= -1 ? 128 : 1;
    }
    int32_t v8 = a2 & 64; // 0x416b9c
    int32_t v9 = a2 / 16 & 256 | 0x100000 * v8 | v7;
    int32_t dwFlagsAndAttributes; // 0x4169e0
    if ((a2 & 32) == 0) {
        // 0x416bd0
        dwFlagsAndAttributes = v9 | 0x1000000 * a2 & 0x10000000;
    } else {
        // 0x416bc8
        dwFlagsAndAttributes = v9 | 0x8000000;
    }
    int32_t result = function_416400(); // 0x416bde
    if (result == -1) {
        // 0x416bea
        g484 = 24;
        g485 = 0;
        return -1;
    }
    int32_t * fileHandle = CreateFileA((char *)lpFileName, v4 | 1024 * v8, dwShareMode, (struct _SECURITY_ATTRIBUTES *)&lpSecurityAttributes, dwCreationDisposition, dwFlagsAndAttributes, NULL); // 0x416c2d
    if (fileHandle == (int32_t *)-1) {
        // 0x416c36
        function_4144a0(GetLastError());
        return -1;
    }
    int32_t v10 = GetFileType(fileHandle); // 0x416c53
    if (v10 == 0) {
        // 0x416c5d
        CloseHandle(fileHandle);
        function_4144a0(GetLastError());
        return -1;
    }
    int32_t v11; // 0x4169e0
    if (v10 != 2) {
        // 0x416c8a
        v11 = v10 != 3 ? v3 : v3 | 8;
    } else {
        // 0x416c85
        v11 = v3 | 64;
    }
    // 0x416c92
    function_4164c0(result, (int32_t)fileHandle);
    int32_t * v12 = (int32_t *)((result >> 3 & -4) + (int32_t)&g985); // 0x416cb2
    char v13 = v11;
    int32_t v14 = 8 * result & 248 | 4;
    *(char *)(*v12 + v14) = v13 | 1;
    if ((a2 & 2) != 0 && v13 <= -1 && (v13 & 72) == 0) {
        int32_t v15 = function_4143e0(result, -1, 2); // 0x416ce8
        if (v15 != -1) {
            char v16 = 0; // bp-57, 0x416d23
            if (function_413ab0(result, (int32_t)&v16, 1) == 0) {
                // 0x416d36
                if (v16 == 26) {
                    // 0x416d3d
                    if (function_419460(result, v15) == -1) {
                        // 0x416d4c
                        function_413750(result);
                        return -1;
                    }
                }
            }
            // 0x416d62
            if (function_4143e0(result, 0, 0) == -1) {
                // 0x416d74
                function_413750(result);
                return -1;
            }
        } else {
            // 0x416cf7
            if (g485 != 131) {
                // 0x416d07
                function_413750(result);
                return -1;
            }
        }
    }
    if ((a2 & 8) != 0 && (v13 & 72) == 0) {
        char * v17 = (char *)(*v12 + v14); // 0x416da0
        *v17 = *v17 | 32;
    }
    // 0x416da5
    return result;
}

// Address range: 0x416e00 - 0x416e2a
int32_t function_416e00(uint32_t a1) {
    // 0x416e00
    if ((int32_t)g987 <= a1) {
        // 0x416e0c
        return 0;
    }
    int32_t v1 = *(int32_t *)((a1 / 8 & -4) + (int32_t)&g985); // 0x416e1a
    return (int32_t)(*(char *)(v1 + (8 * a1 & 248 | 4)) & 64);
}

// Address range: 0x416e30 - 0x416ea3
int32_t function_416e30(void) {
    // 0x416e30
    if (g983 < 4) {
        // 0x416e9c
        return 0;
    }
    // 0x416e4d
    int32_t v1; // bp-16, 0x416e30
    int32_t * v2 = (int32_t *)((int32_t)&v1 - 4);
    int32_t v3 = 3; // 0x416e93
    int32_t v4 = 0;
    uint32_t v5 = 12;
    int32_t v6 = *(int32_t *)(g981 + v5); // 0x416e52
    int32_t v7 = v4; // 0x416e57
    int32_t v8; // 0x416e30
    int32_t v9; // 0x416e30
    if (v6 != 0) {
        // 0x416e59
        v8 = v4;
        if ((*(int32_t *)(v6 + 12) & 131) != 0) {
            // 0x416e5e
            *v2 = v6;
            v8 = v4 + (int32_t)(function_4112a0((int32_t)&g1001) != -1);
        }
        // 0x416e6d
        v9 = v8;
        v7 = v9;
        if (v5 >= 80) {
            // 0x416e72
            *v2 = *(int32_t *)(g981 + v5);
            function_411250((int32_t)&g1001);
            *(int32_t *)(g981 + v5) = 0;
            v7 = v9;
        }
    }
    int32_t result = v7;
    v3++;
    int32_t v10 = v5 + 4; // 0x416e9a
    while (v3 < g983) {
        // 0x416e4d
        v4 = result;
        v5 = v10;
        v6 = *(int32_t *)(g981 + v5);
        v7 = v4;
        if (v6 != 0) {
            // 0x416e59
            v8 = v4;
            if ((*(int32_t *)(v6 + 12) & 131) != 0) {
                // 0x416e5e
                *v2 = v6;
                v8 = v4 + (int32_t)(function_4112a0((int32_t)&g1001) != -1);
            }
            // 0x416e6d
            v9 = v8;
            v7 = v9;
            if (v5 >= 80) {
                // 0x416e72
                *v2 = *(int32_t *)(g981 + v5);
                function_411250((int32_t)&g1001);
                *(int32_t *)(g981 + v5) = 0;
                v7 = v9;
            }
        }
        // 0x416e90
        result = v7;
        v3++;
        v10 = v5 + 4;
    }
    // 0x416e9c
    return result;
}

// Address range: 0x416eb0 - 0x416f42
int32_t function_416eb0(int32_t lpMultiByteStr, int32_t a2) {
    int32_t v1 = 0x10000 * a2 >> 16;
    int32_t lpWideCharStr = v1;
    if (lpMultiByteStr == 0) {
        // 0x416ebb
        return 0;
    }
    // 0x416ec1
    if (g561 == 0) {
        if ((int16_t)v1 < 256) {
            // 0x416ee6
            *(char *)lpMultiByteStr = (char)v1;
            return 1;
        }
        // 0x416ed3
        g484 = 42;
        return -1;
    }
    int32_t lpUsedDefaultChar = 0; // bp-4, 0x416eff
    int32_t v2 = WideCharToMultiByte(g562, 544, (int16_t *)&lpWideCharStr, 1, (char *)lpMultiByteStr, g556, NULL, (bool *)&lpUsedDefaultChar); // 0x416f1e
    int32_t result = v2; // 0x416f26
    if (g562 == 0 != v2 != 0) {
        // 0x416f2f
        g484 = 42;
        result = -1;
    }
    // 0x416ebb
    return result;
}

// Address range: 0x417178 - 0x41717d
int32_t function_417178(void) {
    // 0x417178
    int32_t result; // 0x417178
    return result;
}

// Address range: 0x41717d - 0x417184
int32_t function_41717d(void) {
    // 0x41717d
    int32_t result; // 0x41717d
    return result;
}

// Address range: 0x417186 - 0x41718b
int32_t function_417186(void) {
    // 0x417186
    int32_t result; // 0x417186
    return result;
}

// Address range: 0x41718b - 0x417192
int32_t function_41718b(void) {
    // 0x41718b
    int32_t result; // 0x41718b
    return result;
}

// Address range: 0x417192 - 0x4171bd
int32_t function_417192(void) {
    // 0x417192
    int32_t result; // 0x417192
    char * v1 = (char *)(result - 144);
    if ((*(char *)(result - 151) & 64) == 0) {
        // 0x4171af
        *v1 = 1;
        return result;
    }
    // 0x4171a7
    *v1 = 7;
    return result;
}

// Address range: 0x4171bd - 0x4171e7
int32_t function_4171bd(void) {
    // 0x4171bd
    int32_t result; // 0x4171bd
    int32_t v1 = result;
    *(char *)(v1 - 144) = (*(char *)(v1 - 151) & 64) == 0 ? 1 : 7;
    return result;
}

// Address range: 0x4171e7 - 0x417226
int32_t function_4171e7(void) {
    // 0x4171e7
    int32_t result; // 0x4171e7
    char * v1 = (char *)(result - 151); // 0x4171f3
    if ((*v1 & 64) == 0 || (*v1 & 64) == 0) {
        // 0x41721c
        *(char *)(result - 144) = 1;
        // 0x417223
        return result;
    }
    // 0x417213
    *(char *)(result - 144) = 7;
    // 0x417223
    return result;
}

// Address range: 0x417226 - 0x417243
int32_t function_417226(void) {
    // 0x417226
    int32_t result; // 0x417226
    char * v1 = (char *)(result - 144); // 0x417230
    char v2 = *v1; // 0x417230
    if (v2 >= 0 != v2 != 0) {
        // 0x417239
        *v1 = 1;
    }
    // 0x417240
    return result;
}

// Address range: 0x417243 - 0x41724a
int32_t function_417243(void) {
    // 0x417243
    int32_t result; // 0x417243
    return result;
}

// Address range: 0x417250 - 0x417498
int32_t function_417250(int864_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5) {
    // 0x417250
    int3_t v1; // 0x417250
    int3_t v2 = v1 - 1; // 0x417250
    __frontend_reg_store_fpr(v2, (float80_t)(float64_t)(int64_t)a1);
    __frontend_reg_store_fpr(v2, fabsl(__frontend_reg_load_fpr(v2)));
    __frontend_reg_load_fpr(v2);
    int32_t v3; // 0x417250
    if (a3 == 0 == a4 == 0x7ff00000) {
        // 0x417270
        __frontend_reg_store_fpr(v2, 1.0L);
        __frontend_reg_load_fpr(v2);
        if ((v3 & 256) != 0) {
            // 0x41727d
            *(int32_t *)(a5 + 4) = g571;
            *(int32_t *)a5 = (int32_t)(float32_t)g570;
            return 0;
        }
        // 0x417298
        __frontend_reg_store_fpr(v2, 1.0L);
        __frontend_reg_load_fpr(v2);
        if ((v3 & 0x4100) != 0) {
            // 0x4172bd
            *(int32_t *)(a5 + 4) = g573;
            *(int32_t *)a5 = g572;
            return 1;
        }
        // 0x4172a9
        *(int32_t *)a5 = 0;
        *(int32_t *)(a5 + 4) = 0;
        return 0;
    }
    if (a3 == 0 == a4 == -0x100000) {
        // 0x4172ea
        __frontend_reg_store_fpr(v2, 1.0L);
        __frontend_reg_load_fpr(v2);
        if ((v3 & 256) != 0) {
            // 0x4172f7
            *(int32_t *)a5 = 0;
            *(int32_t *)(a5 + 4) = 0;
            return 0;
        }
        // 0x41730f
        __frontend_reg_store_fpr(v2, 1.0L);
        __frontend_reg_load_fpr(v2);
        if ((v3 & 0x4100) != 0) {
            // 0x417337
            *(int32_t *)(a5 + 4) = g573;
            *(int32_t *)a5 = g572;
            return 1;
        }
        // 0x417320
        *(int32_t *)(a5 + 4) = g571;
        *(int32_t *)a5 = (int32_t)(float32_t)g570;
        return 0;
    }
    if (a2 == 0x7ff00000) {
        if ((int32_t)(float32_t)(float64_t)(int64_t)a1 == 0) {
            // 0x417364
            __frontend_reg_store_fpr(v2, 0.0L);
            __frontend_reg_load_fpr(v2);
            if ((v3 & 256) != 0) {
                // 0x417371
                *(int32_t *)(a5 + 4) = g571;
                *(int32_t *)a5 = (int32_t)(float32_t)g570;
                return 0;
            }
            // 0x41738c
            __frontend_reg_store_fpr(v2, 0.0L);
            __frontend_reg_load_fpr(v2);
            *(int32_t *)a5 = 0;
            int32_t * v4 = (int32_t *)(a5 + 4);
            if ((v3 & 0x4100) != 0) {
                // 0x4173b1
                *v4 = 0x3ff00000;
                return 0;
            }
            // 0x4173a3
            *v4 = 0;
            return 0;
        }
    }
    if (a2 != -0x100000) {
        // 0x417491
        return 0;
    }
    if ((int32_t)(float32_t)(float64_t)(int64_t)a1 != 0) {
        // 0x417491
        return 0;
    }
    int32_t v5 = function_4174a0(a3, a4); // 0x4173e2
    __frontend_reg_store_fpr(v2, 0.0L);
    __frontend_reg_load_fpr(v2);
    if ((v3 & 256) != 0) {
        int32_t v6; // 0x417250
        float64_t v7; // 0x417250
        if (v5 != 1) {
            // 0x41740c
            v6 = g571;
            v7 = g570;
        } else {
            // 0x4173fe
            __frontend_reg_store_fpr(v2, (float80_t)g570);
            __frontend_reg_store_fpr(v2, -__frontend_reg_load_fpr(v2));
            v7 = __frontend_reg_load_fpr(v2);
        }
        // 0x41741f
        *(int32_t *)(a5 + 4) = v6;
        *(int32_t *)a5 = (int32_t)(float32_t)v7;
        return 0;
    }
    // 0x417437
    __frontend_reg_store_fpr(v2, 0.0L);
    __frontend_reg_load_fpr(v2);
    if ((v3 & 0x4100) != 0) {
        // 0x417480
        *(int32_t *)a5 = 0;
        *(int32_t *)(a5 + 4) = 0x3ff00000;
        // 0x417491
        return 0;
    }
    int32_t v8 = 0; // 0x417447
    int32_t v9 = 0; // 0x417447
    if (v5 == 1) {
        // 0x417449
        v9 = g577;
        v8 = (float32_t)(float64_t)(int64_t)g576;
    }
    // 0x417468
    *(int32_t *)(a5 + 4) = v9;
    *(int32_t *)a5 = v8;
    return 0;
}

// Address range: 0x4174a0 - 0x41751f
int32_t function_4174a0(int32_t a1, int32_t a2) {
    // 0x4174a0
    if ((function_419790(a1, a2, (int32_t)&g1001) & 144) != 0) {
        // 0x4174b9
        return 0;
    }
    // 0x4174bf
    function_419770(a1);
    int32_t result = 0; // 0x4174da
    int32_t v1; // 0x4174a0
    if ((v1 & 0x4000) != 0) {
        // 0x4174dc
        function_419770((int32_t)(float32_t)(0.5 * (float64_t)(int64_t)a1));
        result = 2;
    }
    // 0x4174b9
    return result;
}

// Address range: 0x417644 - 0x41764a
int32_t function_417644(void) {
    // 0x417644
    int32_t result; // 0x417644
    return result;
}

// Address range: 0x41764a - 0x417655
int32_t function_41764a(void) {
    // 0x41764a
    __asm_int(6);
    int32_t result; // 0x41764a
    return result;
}

// Address range: 0x417655 - 0x417660
int32_t function_417655(void) {
    // 0x417655
    __asm_int(6);
    int32_t result; // 0x417655
    return result;
}

// Address range: 0x417660 - 0x417666
int32_t function_417660(void) {
    // 0x417660
    int32_t result; // 0x417660
    return result;
}

// Address range: 0x417666 - 0x41766c
int32_t function_417666(void) {
    // 0x417666
    int32_t result; // 0x417666
    return result;
}

// Address range: 0x41766c - 0x417672
int32_t function_41766c(void) {
    // 0x41766c
    int32_t result; // 0x41766c
    return result;
}

// Address range: 0x417672 - 0x41768e
int32_t function_417672(void) {
    // 0x417672
    float80_t v1; // 0x417672
    return _fdiv_main_routine(v1);
}

// Address range: 0x41768e - 0x4176a9
int32_t function_41768e(void) {
    // 0x41768e
    __asm_int(6);
    float80_t v1; // 0x41768e
    return _fdiv_main_routine(v1);
}

// Address range: 0x4176a9 - 0x4176ca
int32_t function_4176a9(void) {
    // 0x4176a9
    __asm_int(6);
    float80_t v1; // 0x4176a9
    return _fdiv_main_routine(v1);
}

// Address range: 0x4176ca - 0x4176da
int32_t function_4176ca(void) {
    // 0x4176ca
    float80_t v1; // 0x4176ca
    return _fdiv_main_routine(v1);
}

// Address range: 0x4176da - 0x4176ee
int32_t function_4176da(void) {
    // 0x4176da
    float80_t v1; // 0x4176da
    return _fdiv_main_routine(v1);
}

// Address range: 0x4176ee - 0x4176fe
int32_t function_4176ee(void) {
    // 0x4176ee
    float80_t v1; // 0x4176ee
    return _fdiv_main_routine(v1);
}

// Address range: 0x4176fe - 0x41771e
int32_t function_4176fe(void) {
    // 0x4176fe
    float80_t v1; // 0x4176fe
    return _fdiv_main_routine(v1);
}

// Address range: 0x41771e - 0x41773d
int32_t function_41771e(void) {
    // 0x41771e
    __asm_int(6);
    float80_t v1; // 0x41771e
    return _fdiv_main_routine(v1);
}

// Address range: 0x41773d - 0x417762
int32_t function_41773d(void) {
    // 0x41773d
    __asm_int(6);
    float80_t v1; // 0x41773d
    return _fdiv_main_routine(v1);
}

// Address range: 0x417762 - 0x417776
int32_t function_417762(void) {
    // 0x417762
    float80_t v1; // 0x417762
    return _fdiv_main_routine(v1);
}

// Address range: 0x417776 - 0x41778e
int32_t function_417776(void) {
    // 0x417776
    float80_t v1; // 0x417776
    return _fdiv_main_routine(v1);
}

// Address range: 0x41778e - 0x4177a2
int32_t function_41778e(void) {
    // 0x41778e
    float80_t v1; // 0x41778e
    return _fdiv_main_routine(v1);
}

// Address range: 0x4177a2 - 0x4177c2
int32_t function_4177a2(void) {
    // 0x4177a2
    float80_t v1; // 0x4177a2
    return _fdiv_main_routine(v1);
}

// Address range: 0x4177c2 - 0x4177e1
int32_t function_4177c2(void) {
    // 0x4177c2
    __asm_int(6);
    float80_t v1; // 0x4177c2
    return _fdiv_main_routine(v1);
}

// Address range: 0x4177e1 - 0x417806
int32_t function_4177e1(void) {
    // 0x4177e1
    __asm_int(6);
    float80_t v1; // 0x4177e1
    return _fdiv_main_routine(v1);
}

// Address range: 0x417806 - 0x41781a
int32_t function_417806(void) {
    // 0x417806
    float80_t v1; // 0x417806
    return _fdiv_main_routine(v1);
}

// Address range: 0x41781a - 0x417832
int32_t function_41781a(void) {
    // 0x41781a
    float80_t v1; // 0x41781a
    return _fdiv_main_routine(v1);
}

// Address range: 0x417832 - 0x417846
int32_t function_417832(void) {
    // 0x417832
    float80_t v1; // 0x417832
    return _fdiv_main_routine(v1);
}

// Address range: 0x417846 - 0x417866
int32_t function_417846(void) {
    // 0x417846
    float80_t v1; // 0x417846
    return _fdiv_main_routine(v1);
}

// Address range: 0x417866 - 0x417885
int32_t function_417866(void) {
    // 0x417866
    __asm_int(6);
    float80_t v1; // 0x417866
    return _fdiv_main_routine(v1);
}

// Address range: 0x417885 - 0x4178aa
int32_t function_417885(void) {
    // 0x417885
    __asm_int(6);
    float80_t v1; // 0x417885
    return _fdiv_main_routine(v1);
}

// Address range: 0x4178aa - 0x4178be
int32_t function_4178aa(void) {
    // 0x4178aa
    float80_t v1; // 0x4178aa
    return _fdiv_main_routine(v1);
}

// Address range: 0x4178be - 0x4178d6
int32_t function_4178be(void) {
    // 0x4178be
    float80_t v1; // 0x4178be
    return _fdiv_main_routine(v1);
}

// Address range: 0x4178d6 - 0x4178ea
int32_t function_4178d6(void) {
    // 0x4178d6
    float80_t v1; // 0x4178d6
    return _fdiv_main_routine(v1);
}

// Address range: 0x4178ea - 0x41790a
int32_t function_4178ea(void) {
    // 0x4178ea
    float80_t v1; // 0x4178ea
    return _fdiv_main_routine(v1);
}

// Address range: 0x41790a - 0x417929
int32_t function_41790a(void) {
    // 0x41790a
    __asm_int(6);
    float80_t v1; // 0x41790a
    return _fdiv_main_routine(v1);
}

// Address range: 0x417929 - 0x41794e
int32_t function_417929(void) {
    // 0x417929
    __asm_int(6);
    float80_t v1; // 0x417929
    return _fdiv_main_routine(v1);
}

// Address range: 0x41794e - 0x417962
int32_t function_41794e(void) {
    // 0x41794e
    float80_t v1; // 0x41794e
    return _fdiv_main_routine(v1);
}

// Address range: 0x417962 - 0x41797a
int32_t function_417962(void) {
    // 0x417962
    float80_t v1; // 0x417962
    return _fdiv_main_routine(v1);
}

// Address range: 0x41797a - 0x41798e
int32_t function_41797a(void) {
    // 0x41797a
    float80_t v1; // 0x41797a
    return _fdiv_main_routine(v1);
}

// Address range: 0x41798e - 0x4179ae
int32_t function_41798e(void) {
    // 0x41798e
    float80_t v1; // 0x41798e
    return _fdiv_main_routine(v1);
}

// Address range: 0x4179ae - 0x4179cd
int32_t function_4179ae(void) {
    // 0x4179ae
    __asm_int(6);
    float80_t v1; // 0x4179ae
    return _fdiv_main_routine(v1);
}

// Address range: 0x4179cd - 0x4179f2
int32_t function_4179cd(void) {
    // 0x4179cd
    __asm_int(6);
    float80_t v1; // 0x4179cd
    return _fdiv_main_routine(v1);
}

// Address range: 0x4179f2 - 0x417a06
int32_t function_4179f2(void) {
    // 0x4179f2
    float80_t v1; // 0x4179f2
    return _fdiv_main_routine(v1);
}

// Address range: 0x417a06 - 0x417a1e
int32_t function_417a06(void) {
    // 0x417a06
    float80_t v1; // 0x417a06
    return _fdiv_main_routine(v1);
}

// Address range: 0x417a1e - 0x417a32
int32_t function_417a1e(void) {
    // 0x417a1e
    float80_t v1; // 0x417a1e
    return _fdiv_main_routine(v1);
}

// Address range: 0x417a32 - 0x417a52
int32_t function_417a32(void) {
    // 0x417a32
    float80_t v1; // 0x417a32
    return _fdiv_main_routine(v1);
}

// Address range: 0x417a52 - 0x417a71
int32_t function_417a52(void) {
    // 0x417a52
    __asm_int(6);
    float80_t v1; // 0x417a52
    return _fdiv_main_routine(v1);
}

// Address range: 0x417a71 - 0x417a96
int32_t function_417a71(void) {
    // 0x417a71
    __asm_int(6);
    float80_t v1; // 0x417a71
    return _fdiv_main_routine(v1);
}

// Address range: 0x417a96 - 0x417aaa
int32_t function_417a96(void) {
    // 0x417a96
    float80_t v1; // 0x417a96
    return _fdiv_main_routine(v1);
}

// Address range: 0x417aaa - 0x417ac2
int32_t function_417aaa(void) {
    // 0x417aaa
    float80_t v1; // 0x417aaa
    return _fdiv_main_routine(v1);
}

// Address range: 0x417ac2 - 0x417ad6
int32_t function_417ac2(void) {
    // 0x417ac2
    float80_t v1; // 0x417ac2
    return _fdiv_main_routine(v1);
}

// Address range: 0x417ad6 - 0x417ae9
int32_t function_417ad6(void) {
    // 0x417ad6
    float80_t v1; // 0x417ad6
    return _fdiv_main_routine(v1);
}

// Address range: 0x417ae9 - 0x417afc
int32_t function_417ae9(void) {
    // 0x417ae9
    float80_t v1; // 0x417ae9
    return _fdiv_main_routine(v1);
}

// Address range: 0x417cfc - 0x417d11
int32_t function_417cfc(void) {
    // 0x417cfc
    float80_t v1; // 0x417cfc
    _fdiv_main_routine(v1);
    int32_t result; // 0x417cfc
    return result;
}

// Address range: 0x417d11 - 0x417d26
int32_t function_417d11(void) {
    // 0x417d11
    float80_t v1; // 0x417d11
    _fdiv_main_routine(v1);
    int32_t result; // 0x417d11
    return result;
}

// Address range: 0x418299 - 0x41829f
int32_t function_418299(void) {
    // 0x418299
    return __adj_fprem();
}

// Address range: 0x41829f - 0x4182a5
int32_t function_41829f(void) {
    // 0x41829f
    return __adj_fprem1();
}

// Address range: 0x4182a5 - 0x4182a8
int32_t function_4182a5(void) {
    // 0x4182a5
    float80_t v1; // 0x4182a5
    __asm_fpatan(v1, v1);
    int32_t result; // 0x4182a5
    return result;
}

// Address range: 0x4182a8 - 0x4182ab
int32_t function_4182a8(void) {
    // 0x4182a8
    int3_t v1; // 0x4182a8
    float80_t v2 = __frontend_reg_load_fpr(v1); // 0x4182a8
    if (v2 < 9223372036854775808.0L) {
        __frontend_reg_store_fpr(v1, __asm_fptan(v2));
        __frontend_reg_store_fpr(v1 - 1, 1.0L);
    }
    int32_t result; // 0x4182a8
    return result;
}

// Address range: 0x4182b0 - 0x4183af
int32_t function_4182b0(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = (int32_t)*(int16_t *)a3; // 0x4182ba
    int32_t v2 = v1; // bp-92, 0x4182c3
    int32_t * v3 = (int32_t *)a2; // 0x4182c7
    int32_t v4 = *v3; // 0x4182c7
    g992 = v4 - 1;
    int32_t v5 = 8; // 0x4182cf
    switch (v4) {
        case 2: {
            // 0x4182dd
            v5 = 4;
        }
        case 1: {
        }
        case 5: {
          lab_0x4182fe:;
            int32_t v6 = a2 + 24; // 0x4182fe
            if (function_419bb0(v5, v6, v1) == 0) {
                // 0x418314
                int32_t v7; // bp-88, 0x4182b0
                function_419840(&v7, &v2, v5, a1, a2 + 8, v6);
            }
            // break -> 0x41836f
            break;
        }
        case 3: {
            // 0x4182e4
            v5 = 17;
            // branch (via goto) -> 0x4182fe
            goto lab_0x4182fe;
        }
        case 4: {
            // 0x4182eb
            v5 = 18;
            // branch (via goto) -> 0x4182fe
            goto lab_0x4182fe;
        }
        case 7: {
            // 0x4182f2
            *v3 = 1;
            // break -> 0x41836f
            break;
        }
        case 8: {
            // 0x41832e
            v5 = 16;
            // branch (via goto) -> 0x4182fe
            goto lab_0x4182fe;
        }
    }
    // 0x41836f
    function_419ef0(v2, 0xffff);
    int32_t v8 = *v3; // 0x418383
    if (v8 == 8) {
        // 0x4183a8
        return function_419e70(8);
    }
    // 0x418388
    if (g579 != 0) {
        // 0x4183a8
        return function_419e70(v8);
    }
    int32_t result = function_419ea0(); // 0x418391
    if (result != 0) {
        // 0x4183a8
        return result;
    }
    // 0x4183a8
    return function_419e70(*v3);
}

// Address range: 0x4183d0 - 0x4184f3
int32_t function_4183d0(int32_t a1, char * a2, int32_t a3, int32_t * a4, int32_t a5, int32_t a6, int32_t a7, int32_t a8, char a9) {
    int32_t result = g567; // 0x4183d3
    int32_t v1; // 0x4183d0
    int32_t v2; // 0x4183d0
    if (result != 0) {
        // 0x418432
        int32_t v3; // bp-20, 0x4183d0
        int32_t v4 = &v3;
        v1 = v4;
        if (result != 2) {
            // 0x418469
            v2 = v4;
            if (result != 1) {
                // 0x418422
                return result;
            }
            goto lab_0x418473;
        } else {
            goto lab_0x41843c;
        }
    } else {
        int32_t v5 = 0; // bp-40, 0x4183f4
        int32_t lpCharType; // bp-2, 0x4183d0
        if (!GetStringTypeA(0, 1, (char *)&g11, 1, (int16_t *)&lpCharType)) {
            int32_t v6 = 1; // bp-56, 0x41840f
            int32_t lpCharType2; // bp-22, 0x4183d0
            if (!GetStringTypeW(1, (int16_t *)&g12, 1, (int16_t *)&lpCharType2)) {
                // 0x418422
                return 0;
            }
            // 0x418469
            g567 = 1;
            v2 = &v6;
            goto lab_0x418473;
        } else {
            // 0x418432
            g567 = 2;
            v1 = &v5;
            goto lab_0x41843c;
        }
    }
  lab_0x41843c:;
    int32_t v7 = v1;
    int32_t v8 = *(int32_t *)(v7 + 44); // 0x41843c
    *(int32_t *)(v7 - 4) = *(int32_t *)(v7 + 36);
    *(int32_t *)(v7 - 8) = *(int32_t *)(v7 + 32);
    *(int32_t *)(v7 - 12) = *(int32_t *)(v7 + 28);
    *(int32_t *)(v7 - 16) = *(int32_t *)(v7 + 24);
    *(int32_t *)(v7 - 20) = v8 != 0 ? v8 : g561;
    bool result2 = GetStringTypeA((int32_t)&g1001, (int32_t)&g1001, (char *)&g1001, (int32_t)&g1001, (int16_t *)&g1001); // 0x41845f
    return result2;
  lab_0x418473:;
    int32_t v9 = v2;
    int32_t v10 = *(int32_t *)(v9 + 40); // 0x418477
    int32_t v11 = v10 != 0 ? v10 : g562;
    *(int32_t *)(v9 - 4) = 0;
    *(int32_t *)(v9 - 8) = 0;
    int32_t * v12 = (int32_t *)(v9 - 12); // 0x418491
    *v12 = *(int32_t *)(v9 + 32);
    *(int32_t *)(v9 - 16) = *(int32_t *)(v9 + 28);
    *(int32_t *)(v9 - 20) = 9;
    int32_t v13 = v9 - 24; // 0x418495
    int32_t * v14 = (int32_t *)v13; // 0x418495
    *v14 = v11;
    int32_t v15 = MultiByteToWideChar((int32_t)&g1001, (int32_t)&g1001, (char *)&g1001, (int32_t)&g1001, (int16_t *)&g1001, (int32_t)&g1001); // 0x418496
    int32_t v16 = v13; // 0x4184a0
    int32_t v17 = 0; // 0x4184a0
    int32_t result3 = 0; // 0x4184a0
    if (v15 != 0) {
        int32_t * v18 = (int32_t *)(v9 - 28); // 0x4184a2
        *v18 = v15;
        int32_t * v19 = (int32_t *)(v9 - 32); // 0x4184a3
        *v19 = 2;
        int32_t v20 = function_4117e0((int32_t)&g1001, (int32_t)&g1001); // 0x4184a5
        v16 = v13;
        v17 = 0;
        result3 = 0;
        if (v20 != 0) {
            // 0x4184b3
            *v18 = v15;
            *v19 = v20;
            *(int32_t *)(v9 - 36) = *(int32_t *)(v9 + 8);
            *(int32_t *)(v9 - 40) = *(int32_t *)(v9 + 4);
            *(int32_t *)(v9 - 44) = 1;
            int32_t v21 = v9 - 48; // 0x4184c1
            *(int32_t *)v21 = v11;
            int32_t v22 = MultiByteToWideChar((int32_t)&g1001, (int32_t)&g1001, (char *)&g1001, (int32_t)&g1001, (int16_t *)&g1001, (int32_t)&g1001); // 0x4184c2
            v16 = v21;
            v17 = v20;
            result3 = 0;
            if (v22 != 0) {
                // 0x4184cc
                *(int32_t *)(v9 - 52) = *v12;
                *(int32_t *)(v9 - 56) = v22;
                *(int32_t *)(v9 - 60) = v20;
                int32_t v23 = v9 - 64; // 0x4184d7
                *(int32_t *)v23 = *v14;
                bool v24 = GetStringTypeW((int32_t)&g1001, (int16_t *)&g1001, (int32_t)&g1001, (int16_t *)&g1001); // 0x4184d8
                v16 = v23;
                v17 = v20;
                result3 = v24;
            }
        }
    }
    // 0x4184e0
    *(int32_t *)(v16 - 4) = v17;
    function_411250((int32_t)&g1001);
    // 0x418422
    return result3;
}

// Address range: 0x418500 - 0x41872b
int32_t function_418500(int32_t a1, int32_t a2, char * a3, int32_t a4, int32_t * a5, int32_t a6, int32_t a7) {
    int32_t v1 = g568; // 0x41850b
    int32_t v2; // bp-16, 0x418500
    int32_t * v3 = &v2; // 0x41850b
    if (g568 == 0) {
        int32_t v4 = 0; // bp-40, 0x418523
        int32_t v5 = LCMapStringA(0, 256, (char *)&g11, 1, NULL, 0); // 0x418525
        v1 = 2;
        v3 = &v4;
        if (v5 == 0) {
            int32_t v6 = 0; // bp-64, 0x418542
            int32_t v7 = LCMapStringW(0, 256, (int16_t *)&g12, 1, NULL, 0); // 0x418544
            v1 = 1;
            v3 = &v6;
            if (v7 == 0) {
                // 0x418555
                return 0;
            }
        }
    }
    int32_t v8 = (int32_t)v3;
    uint32_t v9 = *(int32_t *)(v8 + 32); // 0x418562
    g568 = v1;
    int32_t result2 = v1; // 0x41856d
    int32_t v10 = v9; // 0x41856d
    if (v9 >= 1) {
        // 0x41856f
        *(int32_t *)(v8 - 4) = v9;
        *(int32_t *)(v8 - 8) = *(int32_t *)(v8 + 28);
        v10 = function_418730((int32_t)&g1001, (int32_t)&g1001);
        result2 = g568;
    }
    // 0x418584
    g568 = result2;
    if (result2 == 2) {
        // 0x41858e
        *(int32_t *)(v8 - 4) = *(int32_t *)(v8 + 40);
        *(int32_t *)(v8 - 8) = *(int32_t *)(v8 + 36);
        *(int32_t *)(v8 - 12) = v10;
        *(int32_t *)(v8 - 16) = *(int32_t *)(v8 + 28);
        *(int32_t *)(v8 - 20) = *(int32_t *)(v8 + 24);
        *(int32_t *)(v8 - 24) = *(int32_t *)(v8 + 20);
        int32_t result = LCMapStringA((int32_t)&g1001, (int32_t)&g1001, (char *)&g1001, (int32_t)&g1001, (char *)&g1001, (int32_t)&g1001); // 0x4185a8
        return result;
    }
    // 0x4185af
    g568 = result2;
    if (result2 != 1) {
        // 0x418555
        return result2;
    }
    int32_t * v11 = (int32_t *)(v8 + 44); // 0x4185bf
    if (*v11 == 0) {
        // 0x4185c5
        *v11 = g562;
    }
    // 0x4185ce
    *(int32_t *)(v8 - 4) = 0;
    *(int32_t *)(v8 - 8) = 0;
    *(int32_t *)(v8 - 12) = v10;
    *(int32_t *)(v8 - 16) = *(int32_t *)(v8 + 28);
    *(int32_t *)(v8 - 20) = 9;
    int32_t * v12 = (int32_t *)(v8 - 24); // 0x4185de
    *v12 = *v11;
    int32_t v13 = MultiByteToWideChar((int32_t)&g1001, (int32_t)&g1001, (char *)&g1001, (int32_t)&g1001, (int16_t *)&g1001, (int32_t)&g1001); // 0x4185df
    if (v13 == 0) {
        // 0x418555
        return 0;
    }
    int32_t * v14 = (int32_t *)(v8 - 28); // 0x4185f9
    *v14 = 2 * v13;
    int32_t v15 = function_4111a0((int32_t)&g1001); // 0x4185fa
    if (v15 == 0) {
        // 0x418555
        return 0;
    }
    // 0x41860f
    *v14 = v13;
    int32_t * v16 = (int32_t *)(v8 - 32); // 0x418618
    *v16 = v15;
    int32_t * v17 = (int32_t *)(v8 - 36); // 0x418619
    *v17 = v10;
    *(int32_t *)(v8 - 40) = *(int32_t *)(v8 + 4);
    *(int32_t *)(v8 - 44) = 1;
    int32_t v18 = v8 - 48; // 0x41861d
    int32_t * v19 = (int32_t *)v18; // 0x41861d
    *v19 = *(int32_t *)(v8 + 20);
    int32_t v20 = MultiByteToWideChar((int32_t)&g1001, (int32_t)&g1001, (char *)&g1001, (int32_t)&g1001, (int16_t *)&g1001, (int32_t)&g1001); // 0x41861e
    int32_t v21 = v18; // 0x418626
    int32_t v22 = 0; // 0x418626
    int32_t v23; // 0x418500
    int32_t result3; // 0x418500
    int32_t v24; // 0x418500
    if (v20 == 0) {
        goto lab_0x41867b;
    } else {
        int32_t * v25 = (int32_t *)(v8 - 52); // 0x41862c
        *v25 = 0;
        int32_t * v26 = (int32_t *)(v8 - 56); // 0x418632
        *v26 = 0;
        int32_t * v27 = (int32_t *)(v8 - 60); // 0x418634
        *v27 = v13;
        *(int32_t *)(v8 - 64) = v15;
        *(int32_t *)(v8 - 68) = *v12;
        int32_t v28 = v8 - 72; // 0x418637
        *(int32_t *)v28 = *v14;
        int32_t v29 = LCMapStringW((int32_t)&g1001, (int32_t)&g1001, (int16_t *)&g1001, (int32_t)&g1001, (int16_t *)&g1001, (int32_t)&g1001); // 0x418638
        v21 = v28;
        v22 = 0;
        if (v29 == 0) {
            goto lab_0x41867b;
        } else {
            // 0x418644
            if ((*(char *)(v8 - 47) & 4) == 0) {
                int32_t * v30 = (int32_t *)(v8 - 76); // 0x41869b
                *v30 = 2 * v29;
                int32_t v31 = function_4111a0((int32_t)&g1001); // 0x41869c
                v21 = v28;
                v22 = 0;
                if (v31 == 0) {
                    goto lab_0x41867b;
                } else {
                    // 0x4186aa
                    *v30 = v29;
                    *(int32_t *)(v8 - 80) = v31;
                    *(int32_t *)(v8 - 84) = v13;
                    *(int32_t *)(v8 - 88) = v15;
                    *(int32_t *)(v8 - 92) = *v19;
                    int32_t v32 = v8 - 96; // 0x4186b7
                    *(int32_t *)v32 = *v25;
                    int32_t v33 = LCMapStringW((int32_t)&g1001, (int32_t)&g1001, (int16_t *)&g1001, (int32_t)&g1001, (int16_t *)&g1001, (int32_t)&g1001); // 0x4186b8
                    v21 = v32;
                    v22 = v31;
                    if (v33 == 0) {
                        goto lab_0x41867b;
                    } else {
                        int32_t v34 = *v26; // 0x4186c2
                        *(int32_t *)(v8 - 100) = 0;
                        *(int32_t *)(v8 - 104) = 0;
                        int32_t v35 = *v25;
                        int32_t * v36 = (int32_t *)(v8 - 108);
                        if (v34 != 0) {
                            // 0x4186ee
                            *v36 = v34;
                            *(int32_t *)(v8 - 112) = *v27;
                            *(int32_t *)(v8 - 116) = v29;
                            *(int32_t *)(v8 - 120) = v31;
                            *(int32_t *)(v8 - 124) = 544;
                            int32_t v37 = v8 - 128; // 0x418705
                            *(int32_t *)v37 = v35;
                            int32_t v38 = WideCharToMultiByte((int32_t)&g1001, (int32_t)&g1001, (int16_t *)&g1001, (int32_t)&g1001, (char *)&g1001, (int32_t)&g1001, (char *)&g1001, (bool *)&g1001); // 0x418706
                            v21 = v37;
                            v22 = v31;
                            v24 = v37;
                            result3 = v38;
                            v23 = v31;
                            if (v38 == 0) {
                                goto lab_0x41867b;
                            } else {
                                goto lab_0x418712;
                            }
                        } else {
                            // 0x4186ce
                            *v36 = 0;
                            *(int32_t *)(v8 - 112) = 0;
                            *(int32_t *)(v8 - 116) = v29;
                            *(int32_t *)(v8 - 120) = v31;
                            *(int32_t *)(v8 - 124) = 544;
                            int32_t v39 = v8 - 128; // 0x4186e3
                            *(int32_t *)v39 = v35;
                            int32_t v40 = WideCharToMultiByte((int32_t)&g1001, (int32_t)&g1001, (int16_t *)&g1001, (int32_t)&g1001, (char *)&g1001, (int32_t)&g1001, (char *)&g1001, (bool *)&g1001); // 0x4186e4
                            v21 = v39;
                            v22 = v31;
                            v24 = v39;
                            result3 = v40;
                            v23 = v31;
                            if (v40 != 0) {
                                goto lab_0x418712;
                            } else {
                                goto lab_0x41867b;
                            }
                        }
                    }
                }
            } else {
                int32_t v41 = *v16; // 0x41864b
                v24 = v28;
                result3 = v29;
                v23 = 0;
                if (v41 == 0) {
                    goto lab_0x418712;
                } else {
                    // 0x418657
                    v21 = v28;
                    v22 = 0;
                    if (v29 > v41) {
                        goto lab_0x41867b;
                    } else {
                        // 0x41865b
                        *(int32_t *)(v8 - 76) = v41;
                        *(int32_t *)(v8 - 80) = *v17;
                        *(int32_t *)(v8 - 84) = v13;
                        *(int32_t *)(v8 - 88) = v15;
                        *(int32_t *)(v8 - 92) = *v19;
                        int32_t v42 = v8 - 96; // 0x41866c
                        *(int32_t *)v42 = *v25;
                        int32_t v43 = LCMapStringW((int32_t)&g1001, (int32_t)&g1001, (int16_t *)&g1001, (int32_t)&g1001, (int16_t *)&g1001, (int32_t)&g1001); // 0x41866d
                        v21 = v42;
                        v22 = 0;
                        v24 = v42;
                        result3 = v29;
                        v23 = 0;
                        if (v43 != 0) {
                            goto lab_0x418712;
                        } else {
                            goto lab_0x41867b;
                        }
                    }
                }
            }
        }
    }
  lab_0x41867b:;
    int32_t * v44 = (int32_t *)(v21 - 4); // 0x41867b
    *v44 = v15;
    function_411250((int32_t)&g1001);
    *v44 = v22;
    function_411250((int32_t)&g1001);
    // 0x418555
    return 0;
  lab_0x418712:;
    int32_t * v45 = (int32_t *)(v24 - 4); // 0x418712
    *v45 = v15;
    function_411250((int32_t)&g1001);
    *v45 = v23;
    function_411250((int32_t)&g1001);
    return result3;
}

// Address range: 0x418730 - 0x41875c
int32_t function_418730(int32_t a1, int32_t result) {
    int32_t v1 = result; // 0x418741
    int32_t v2 = a1; // 0x418741
    int32_t v3 = a1; // 0x418741
    int32_t v4; // 0x418730
    if (result == 0) {
      lab_0x418750:
        // 0x418750
        v4 = v3;
        if (*(char *)v3 != 0) {
            // 0x418759
            return result;
        }
    } else {
        v4 = v2;
        while (*(char *)v2 != 0) {
            // 0x418748
            v1--;
            v2++;
            v3 = v2;
            if (v1 == 0) {
                goto lab_0x418750;
            }
            v4 = v2;
        }
    }
    // 0x418759
    return v4 - a1;
}

// Address range: 0x418760 - 0x418783
int32_t function_418760(uint32_t a1, uint32_t a2, int32_t a3) {
    uint32_t v1 = a2 + a1; // 0x41876b
    *(int32_t *)a3 = v1;
    return v1 < a2 | a2 != 0 == v1 <= a1;
}

// Address range: 0x418790 - 0x4187f6
int32_t function_418790(int32_t a1, int32_t a2) {
    int32_t v1 = function_418760(*(int32_t *)a1, *(int32_t *)a2, a1); // 0x4187a1
    int32_t v2 = a1 + 4;
    int32_t * v3 = (int32_t *)v2;
    if (v1 != 0) {
        // 0x4187ad
        if (function_418760(*v3, 1, v2) != 0) {
            int32_t * v4 = (int32_t *)(a1 + 8); // 0x4187c2
            *v4 = *v4 + 1;
        }
    }
    int32_t v5 = function_418760(*v3, *(int32_t *)(a2 + 4), v2); // 0x4187d0
    int32_t v6 = a1 + 8;
    int32_t * v7 = (int32_t *)v6;
    int32_t v8 = *v7;
    int32_t v9 = v8; // 0x4187da
    if (v5 != 0) {
        // 0x4187dc
        v9 = v8 + 1;
        *v7 = v9;
    }
    // 0x4187df
    return function_418760(v9, *(int32_t *)(a2 + 8), v6);
}

// Address range: 0x418800 - 0x41883e
int32_t function_418800(int32_t a1) {
    int32_t * v1 = (int32_t *)a1; // 0x418806
    uint32_t v2 = *v1; // 0x418806
    int32_t * v3 = (int32_t *)(a1 + 4); // 0x41880a
    uint32_t v4 = *v3; // 0x41880a
    *v1 = 2 * v2;
    *v3 = 2 * v4 | v2 / 0x80000000;
    int32_t * v5 = (int32_t *)(a1 + 8); // 0x418832
    int32_t result = 2 * *v5 | v4 / 0x80000000; // 0x418837
    *v5 = result;
    return result;
}

// Address range: 0x418840 - 0x418876
int32_t function_418840(int32_t a1) {
    int32_t * v1 = (int32_t *)(a1 + 8); // 0x418846
    uint32_t v2 = *v1; // 0x418846
    int32_t * v3 = (int32_t *)(a1 + 4); // 0x418849
    uint32_t v4 = *v3; // 0x418849
    *v1 = v2 / 2;
    *v3 = v4 / 2 | 0x80000000 * v2;
    int32_t * v5 = (int32_t *)a1; // 0x41886a
    int32_t result = *v5 / 2 | 0x80000000 * v4; // 0x41886f
    *v5 = result;
    return result;
}

// Address range: 0x418880 - 0x418968
int32_t function_418880(int32_t a1, int32_t a2, int32_t a3) {
    // 0x418880
    int32_t v1; // bp-28, 0x418880
    int32_t v2 = &v1; // 0x41888e
    int32_t * v3 = (int32_t *)a3; // 0x418893
    *v3 = 0;
    int32_t * v4 = (int32_t *)(a3 + 4); // 0x418899
    *v4 = 0;
    int32_t * v5 = (int32_t *)(a3 + 8); // 0x4188a0
    *v5 = 0;
    int32_t result; // 0x418880
    int32_t v6; // 0x418880
    if (a2 == 0) {
        goto lab_0x41891e;
    } else {
        int32_t v7 = v2 + 16; // 0x4188af
        int32_t * v8 = (int32_t *)(v2 - 4); // 0x4188b8
        int32_t * v9 = (int32_t *)v7; // 0x4188b9
        int32_t * v10 = (int32_t *)(v2 + 20); // 0x4188be
        int32_t * v11 = (int32_t *)(v2 + 24); // 0x4188c1
        int32_t * v12 = (int32_t *)(v2 - 8);
        int32_t v13 = a2; // 0x4188cc
        int32_t v14 = a1; // 0x418880
        *v8 = a3;
        *v9 = *v3;
        *v10 = *v4;
        *v11 = *v5;
        function_418800((int32_t)&g1001);
        v13--;
        *v8 = a3;
        function_418800((int32_t)&g1001);
        *v8 = v7;
        *v12 = a3;
        function_418790((int32_t)&g1001, (int32_t)&g1001);
        *v8 = a3;
        function_418800((int32_t)&g1001);
        *v10 = 0;
        *v11 = 0;
        *v9 = (int32_t)*(char *)v14;
        *v8 = v7;
        *v12 = a3;
        int32_t v15 = function_418790((int32_t)&g1001, (int32_t)&g1001); // 0x41890c
        v14++;
        while (v13 != 0) {
            // 0x4188af
            *v8 = a3;
            *v9 = *v3;
            *v10 = *v4;
            *v11 = *v5;
            function_418800((int32_t)&g1001);
            v13--;
            *v8 = a3;
            function_418800((int32_t)&g1001);
            *v8 = v7;
            *v12 = a3;
            function_418790((int32_t)&g1001, (int32_t)&g1001);
            *v8 = a3;
            function_418800((int32_t)&g1001);
            *v10 = 0;
            *v11 = 0;
            *v9 = (int32_t)*(char *)v14;
            *v8 = v7;
            *v12 = a3;
            v15 = function_418790((int32_t)&g1001, (int32_t)&g1001);
            v14++;
        }
        // 0x418918
        result = v15;
        v6 = 0x404e;
        if (*v5 != 0) {
            goto lab_0x418945;
        } else {
            goto lab_0x41891e;
        }
    }
  lab_0x41891e:;
    int32_t v16 = *v3; // 0x418880
    int32_t v17 = 0x403e; // 0x41891e
    uint32_t v18 = *v4; // 0x418922
    *v5 = v18 / 0x10000;
    int32_t v19 = 0x10000 * v16; // 0x418937
    *v4 = 0x10000 * v18 | v16 / 0x10000;
    *v3 = v19;
    v16 = v19;
    int32_t v20 = v17; // 0x418943
    result = v19;
    v6 = v17;
    while (v18 < 0x10000) {
        // 0x41891e
        v17 = v20 + 0xfff0 & 0xffff;
        v18 = *v4;
        *v5 = v18 / 0x10000;
        v19 = 0x10000 * v16;
        *v4 = 0x10000 * v18 | v16 / 0x10000;
        *v3 = v19;
        v16 = v19;
        v20 = v17;
        result = v19;
        v6 = v17;
    }
    goto lab_0x418945;
  lab_0x418945:;
    char * v21 = (char *)(a3 + 9); // 0x418945
    if (*v21 <= -1) {
        // 0x41895c
        *(int16_t *)(a3 + 10) = (int16_t)v6;
        return result;
    }
    int32_t v22 = v6 + 0xffff & 0xffff; // 0x41894b
    *(int32_t *)(v2 - 4) = a3;
    int32_t result2 = function_418800((int32_t)&g1001); // 0x41894e
    int32_t v23 = v22; // 0x41895a
    while (*v21 > 255) {
        // 0x41894b
        v22 = v23 + 0xffff & 0xffff;
        *(int32_t *)(v2 - 4) = a3;
        result2 = function_418800((int32_t)&g1001);
        v23 = v22;
    }
    // 0x41895c
    *(int16_t *)(a3 + 10) = (int16_t)v22;
    return result2;
}

// Address range: 0x418970 - 0x418f97
int32_t function_418970(int32_t * a1) {
    int32_t v1 = (int32_t)a1; // 0x4189b0
    while (true) {
      lab_0x4189b4:;
        int32_t v2 = v1;
        char v3 = *(char *)v2; // 0x4189b4
        switch (v3) {
            case 32: {
                // 0x4189c6
                v1 = v2 + 1;
                goto lab_0x4189b4;
            }
            case 9: {
                // 0x4189c6
                v1 = v2 + 1;
                goto lab_0x4189b4;
            }
            case 10: {
                // 0x4189c6
                v1 = v2 + 1;
                goto lab_0x4189b4;
            }
            default: {
                if (v3 != 13) {
                    // break -> 0x4189c9
                    break;
                }
                // 0x4189c6
                v1 = v2 + 1;
                goto lab_0x4189b4;
            }
        }
    }
    char v4; // 0x418970
    int32_t v5; // 0x418970
    int32_t v6; // 0x418970
    int32_t v7; // 0x418970
    int32_t v8; // 0x418970
    int32_t v9; // 0x418970
    int32_t v10; // 0x418970
    int32_t v11; // 0x418970
    int32_t v12; // 0x418970
    int32_t v13; // 0x418970
    int32_t v14; // 0x418970
    int32_t v15; // 0x418970
    int32_t v16; // 0x418970
    int32_t v17; // 0x418970
    int32_t v18; // 0x418970
    int32_t v19; // 0x418970
    int32_t v20; // 0x418970
    int32_t v21; // 0x418970
    int32_t v22; // 0x418970
    int32_t v23; // 0x418970
    int32_t v24; // 0x418970
    int32_t v25; // 0x418970
    int32_t v26; // 0x418970
    int32_t v27; // 0x418970
    int32_t v28; // 0x418970
    int32_t v29; // 0x418970
    int32_t v30; // 0x418970
    int32_t v31; // 0x418970
    int32_t v32; // 0x418970
    int32_t * v33; // 0x418970
    int32_t * v34; // 0x418970
    int32_t * v35; // 0x418970
    int16_t * v36; // 0x418970
    int32_t v37; // 0x4189cb
    int32_t * v38; // 0x418970
    int32_t * v39; // 0x418970
    int32_t * v40; // 0x418970
    int32_t * v41; // 0x418970
    int32_t * v42; // 0x418970
    while (true) {
      lab_0x4189c9:
        // 0x4189c9
        v19 = v18;
        int32_t v43 = v25;
        v6 = v5;
        int32_t v44 = v14;
        char v45 = v4; // 0x4189c9
        int32_t v46 = v45; // 0x4189c9
        v37 = v43 + 1;
        g995 = v44;
        v17 = v44;
        v13 = v6;
        v28 = v37;
        v24 = v19;
        int32_t * v47; // 0x418970
        switch (v44) {
            case 0: {
                // 0x4189dc
                v15 = 3;
                v10 = v6;
                v32 = v37;
                v21 = v19;
                if (v45 > 57) {
                    char v48 = g557; // 0x4189f0
                    v23 = v19;
                    v27 = v37;
                    v12 = v6;
                    v16 = 5;
                    if (v48 != v45) {
                        // 0x418a02
                        v9 = v6;
                        v31 = v37;
                        v20 = v19;
                        v23 = v19;
                        v27 = v37;
                        v12 = v6;
                        v16 = 1;
                        switch (v45) {
                            case 43: {
                                // 0x418a19
                                *v36 = 0;
                                v23 = v19;
                                v27 = v37;
                                v12 = v6;
                                v16 = 2;
                                goto lab_0x418e25_2;
                            }
                            case 45: {
                                // 0x418a2a
                                *v36 = -0x8000;
                                v23 = v19;
                                v27 = v37;
                                v12 = v6;
                                v16 = 2;
                                goto lab_0x418e25_2;
                            }
                            case 48: {
                                goto lab_0x418e25_2;
                            }
                            default: {
                                goto lab_0x418e1f;
                            }
                        }
                    } else {
                        goto lab_0x418e25_2;
                    }
                } else {
                    goto lab_0x418e24;
                }
            }
            case 1: {
                // 0x418a45
                *v33 = 1;
                v15 = 3;
                v10 = v6;
                v32 = v37;
                v21 = v19;
                if (v45 > 57) {
                    char v49 = g557; // 0x418a61
                    v23 = v19;
                    v27 = v37;
                    v12 = v6;
                    v16 = 4;
                    if (v49 != v45) {
                        unsigned char v50 = *(char *)((int32_t)v45 + (int32_t)&g6 - 43); // 0x418a84
                        g996 = v50;
                        v9 = v6;
                        v31 = v37;
                        v20 = v19;
                        v23 = v19;
                        v23 = v19;
                        v27 = v43;
                        v27 = v43;
                        v12 = v6;
                        v12 = v6;
                        v16 = 11;
                        v16 = 11;
                        switch (v50) {
                            case 0: {
                                goto lab_0x418e25_2;
                            }
                            case 1: {
                                goto lab_0x418e25_2;
                            }
                            case 2: {
                                // 0x418a9c
                                v23 = v19;
                                v27 = v37;
                                v12 = v6;
                                v16 = 1;
                                goto lab_0x418e25_2;
                            }
                            case 3: {
                                goto lab_0x418aa6;
                            }
                            case 4: {
                                goto lab_0x418aa6;
                            }
                            default: {
                                goto lab_0x418e1f;
                            }
                        }
                    } else {
                        goto lab_0x418e25_2;
                    }
                } else {
                    goto lab_0x418e24;
                }
            }
            case 2: {
                // 0x418ab0
                v15 = 3;
                v10 = v6;
                v32 = v37;
                v21 = v19;
                if (v45 > 57) {
                    char v51 = g557; // 0x418ac4
                    v23 = v19;
                    v27 = v37;
                    v12 = v6;
                    v16 = 5;
                    if (v51 != v45) {
                        // 0x418ad6
                        v23 = v19;
                        v27 = v37;
                        v12 = v6;
                        v16 = 1;
                        if (v45 != 48) {
                            int32_t v52 = *v47; // 0x418ae3
                            v22 = v19;
                            v26 = v52;
                            v11 = v6;
                            goto lab_0x418e2e_3;
                        }
                    }
                    goto lab_0x418e25_2;
                } else {
                    goto lab_0x418e24;
                }
            }
            case 3: {
                // 0x418af6
                *v33 = 1;
                int32_t v53 = v46; // 0x418af6
                int32_t v54 = v6; // 0x418af6
                int32_t v55 = v37; // 0x418af6
                int32_t v56; // 0x418970
                while (true) {
                    int32_t v57 = v55;
                    v7 = v54;
                    int32_t v58 = v53;
                    int32_t v59 = v58; // 0x418970
                    int32_t v60 = v57; // 0x418970
                    v29 = v60;
                    v56 = v59;
                    int32_t v61 = g556; // 0x418afe
                    int32_t v62; // 0x418970
                    int32_t v63; // 0x418b1a
                    int16_t v64; // 0x418b24
                    int32_t v65; // 0x418b0e
                    if (v61 < 2) {
                        // 0x418b18
                        v63 = g558;
                        v64 = *(int16_t *)(v63 + (2 * v56 & 510));
                        v62 = v64 & 4;
                    } else {
                        // 0x418b07
                        *v40 = 4;
                        *v41 = v56;
                        v65 = function_4158a0((int32_t)&g1001, (int32_t)&g1001);
                        v62 = v65;
                    }
                    int32_t v66 = v62;
                    if (v66 == 0) {
                        // break (via goto) -> 0x418b50
                        goto lab_0x418b50;
                    }
                    uint32_t v67 = *v34; // 0x418b2f
                    while (v67 >= 25) {
                        unsigned char v68 = *(char *)v29; // 0x418b47
                        int32_t v69 = *v35; // 0x418b4a
                        *v35 = v69 + 1;
                        v59 = v68;
                        v60 = v29 + 1;
                        v29 = v60;
                        v56 = v59;
                        v61 = g556;
                        if (v61 < 2) {
                            // 0x418b18
                            v63 = g558;
                            v64 = *(int16_t *)(v63 + (2 * v56 & 510));
                            v62 = v64 & 4;
                        } else {
                            // 0x418b07
                            *v40 = 4;
                            *v41 = v56;
                            v65 = function_4158a0((int32_t)&g1001, (int32_t)&g1001);
                            v62 = v65;
                        }
                        // 0x418b2b
                        v66 = v62;
                        if (v66 == 0) {
                            // break (via goto) -> 0x418b50
                            goto lab_0x418b50;
                        }
                        // 0x418b2f
                        v67 = *v34;
                    }
                    // 0x418b36
                    *v34 = v67 + 1;
                    *(char *)v7 = (char)v56 - 48;
                    unsigned char v70 = *(char *)v29; // 0x418b42
                    v53 = v70;
                    v54 = v7 + 1;
                    v55 = v29 + 1;
                }
              lab_0x418b50:;
                char v71 = g557; // 0x418b50
                v23 = v19;
                v27 = v29;
                v12 = v7;
                v16 = 4;
                if (v71 != (char)v56) {
                    unsigned char v72 = *(char *)((0x1000000 * v56 >> 24) + (int32_t)&g7 - 43); // 0x418b73
                    g997 = v72;
                    v9 = v7;
                    v31 = v29;
                    v20 = v19;
                    v23 = v19;
                    v23 = v19;
                    v27 = v29;
                    v27 = v29;
                    v12 = v7;
                    v12 = v7;
                    v16 = 6;
                    v16 = 6;
                    switch (v72) {
                        case 0: {
                            goto lab_0x418b80;
                        }
                        case 1: {
                            goto lab_0x418b80;
                        }
                        case 2: {
                            goto lab_0x418e25_2;
                        }
                        case 3: {
                            goto lab_0x418e25_2;
                        }
                        default: {
                            goto lab_0x418e1f;
                        }
                    }
                } else {
                    goto lab_0x418e25_2;
                }
            }
            case 4: {
                // 0x418b95
                *v33 = 1;
                *v42 = 1;
                int32_t v73 = *v34; // 0x418ba5
                int32_t v74 = v46; // 0x418baa
                int32_t v75 = v37; // 0x418baa
                if (v45 == 48 == v73 == 0) {
                    int32_t v76 = *v35;
                    int32_t v77 = v76; // 0x418970
                    int32_t v78 = v37; // 0x418970
                    int32_t v79 = v78;
                    int32_t v80 = v77; // 0x418bb4
                    unsigned char v81 = *(char *)v79; // 0x418bb1
                    int32_t v82 = v79 + 1; // 0x418bb3
                    int32_t v83 = v80 - 1; // 0x418bb4
                    *v35 = v83;
                    v77 = v83;
                    v78 = v82;
                    while (v81 == 48) {
                        // 0x418bb1
                        v79 = v78;
                        v80 = v77;
                        v81 = *(char *)v79;
                        v82 = v79 + 1;
                        v83 = v80 - 1;
                        *v35 = v83;
                        v77 = v83;
                        v78 = v82;
                    }
                    // 0x418bbd
                    v74 = v81;
                    v75 = v82;
                }
                int32_t v84 = v75;
                int32_t v85 = v74;
                int32_t v86 = v85; // 0x418970
                int32_t v87 = v6; // 0x418970
                int32_t v88 = v84; // 0x418970
                v30 = v88;
                v8 = v87;
                int32_t v89 = v86;
                int32_t v90 = g556; // 0x418bbd
                int32_t v91; // 0x418970
                int32_t v92; // 0x418bd9
                int16_t v93; // 0x418be3
                int32_t v94; // 0x418bcd
                if (v90 < 2) {
                    // 0x418bd7
                    v92 = g558;
                    v93 = *(int16_t *)(v92 + (2 * v89 & 510));
                    v91 = v93 & 4;
                } else {
                    // 0x418bc6
                    *v40 = 4;
                    *v41 = v89;
                    v94 = function_4158a0((int32_t)&g1001, (int32_t)&g1001);
                    v91 = v94;
                }
                while (v91 != 0) {
                    uint32_t v95 = *v34; // 0x418bee
                    int32_t v96 = v8; // 0x418bf3
                    if (v95 < 25) {
                        // 0x418bf5
                        *v34 = v95 + 1;
                        int32_t v97 = *v35; // 0x418bfd
                        *v35 = v97 - 1;
                        *(char *)v8 = (char)v89 - 48;
                        v96 = v8 + 1;
                    }
                    int32_t v98 = v96;
                    unsigned char v99 = *(char *)v30; // 0x418c04
                    v86 = v99;
                    v87 = v98;
                    v88 = v30 + 1;
                    v30 = v88;
                    v8 = v87;
                    v89 = v86;
                    v90 = g556;
                    if (v90 < 2) {
                        // 0x418bd7
                        v92 = g558;
                        v93 = *(int16_t *)(v92 + (2 * v89 & 510));
                        v91 = v93 & 4;
                    } else {
                        // 0x418bc6
                        *v40 = 4;
                        *v41 = v89;
                        v94 = function_4158a0((int32_t)&g1001, (int32_t)&g1001);
                        v91 = v94;
                    }
                }
                unsigned char v100 = *(char *)((0x1000000 * v89 >> 24) + (int32_t)&g8 - 43); // 0x418c1a
                g998 = v100;
                v9 = v8;
                v31 = v30;
                v20 = v19;
                v23 = v19;
                v23 = v19;
                v27 = v30;
                v27 = v30;
                v12 = v8;
                v12 = v8;
                v16 = 6;
                v16 = 6;
                switch (v100) {
                    case 0: {
                        goto lab_0x418c27;
                    }
                    case 1: {
                        goto lab_0x418c27;
                    }
                    case 2: {
                        goto lab_0x418e25_2;
                    }
                    case 3: {
                        goto lab_0x418e25_2;
                    }
                    default: {
                        goto lab_0x418e1f;
                    }
                }
            }
            case 5: {
                // 0x418c3c
                *v42 = 1;
                int32_t v101 = g556; // 0x418c44
                int32_t v102; // 0x418970
                if (v101 < 2) {
                    int32_t v103 = g558; // 0x418c60
                    int16_t v104 = *(int16_t *)(v103 + 2 * v46); // 0x418c6a
                    v102 = v104 & 4;
                } else {
                    // 0x418c4d
                    *v40 = 4;
                    *v41 = v46;
                    int32_t v105 = function_4158a0((int32_t)&g1001, (int32_t)&g1001); // 0x418c54
                    v102 = v105;
                }
                int32_t v106 = v102;
                v15 = 4;
                v10 = v6;
                v32 = v37;
                v21 = v19;
                if (v106 == 0) {
                    int32_t v107 = *v47; // 0x418c84
                    v22 = v19;
                    v26 = v107;
                    v11 = v6;
                    goto lab_0x418e2e_3;
                }
                goto lab_0x418e24;
            }
            case 6: {
                int32_t v108 = v43 - 1; // 0x418c8d
                *v47 = v108;
                v15 = 9;
                v10 = v6;
                v32 = v37;
                v21 = v19;
                if (v45 > 57) {
                    // 0x418ca8
                    v23 = v19;
                    v27 = v37;
                    v12 = v6;
                    v16 = 7;
                    v22 = v19;
                    v26 = v108;
                    v11 = v6;
                    switch (v45) {
                        case 43: {
                            goto lab_0x418e25_2;
                        }
                        case 45: {
                            // 0x418cd2
                            *v38 = -1;
                            v23 = v19;
                            v27 = v37;
                            v12 = v6;
                            v16 = 7;
                            goto lab_0x418e25_2;
                        }
                        case 48: {
                            // 0x418ce4
                            v23 = v19;
                            v27 = v37;
                            v12 = v6;
                            v16 = 8;
                            goto lab_0x418e25_2;
                        }
                        default: {
                            goto lab_0x418e2e_3;
                        }
                    }
                } else {
                    goto lab_0x418e24;
                }
            }
            case 7: {
                // 0x418cee
                v15 = 9;
                v10 = v6;
                v32 = v37;
                v21 = v19;
                if (v45 > 57) {
                    // 0x418d02
                    v23 = v19;
                    v27 = v37;
                    v12 = v6;
                    v16 = 8;
                    if (v45 != 48) {
                        int32_t v109 = *v47; // 0x418d0f
                        v22 = v19;
                        v26 = v109;
                        v11 = v6;
                        goto lab_0x418e2e_3;
                    }
                    goto lab_0x418e25_2;
                } else {
                    goto lab_0x418e24;
                }
            }
            case 8: {
                // 0x418d22
                *v39 = 1;
                int32_t v110 = v37; // 0x418d2d
                char v111 = v45; // 0x418d2d
                int32_t v112 = v37; // 0x418d2d
                if (v45 == 48) {
                    int32_t v113 = v110;
                    char v114 = *(char *)v113; // 0x418d2f
                    int32_t v115 = v113 + 1; // 0x418d31
                    v110 = v115;
                    v111 = v114;
                    v112 = v115;
                    while (v114 == 48) {
                        // 0x418d2f
                        v113 = v110;
                        v114 = *(char *)v113;
                        v115 = v113 + 1;
                        v110 = v115;
                        v111 = v114;
                        v112 = v115;
                    }
                }
                int32_t v116 = v112;
                char v117 = v111;
                v9 = v6;
                v31 = v116;
                v20 = v19;
                v15 = 9;
                v10 = v6;
                v32 = v116;
                v21 = v19;
                if (v117 > 57) {
                    goto lab_0x418e1f;
                } else {
                    goto lab_0x418e24;
                }
            }
            case 9: {
                // 0x418d53
                *v39 = 1;
                int32_t v118 = v46; // 0x418d5b
                int32_t v119 = v37; // 0x418d5b
                int32_t v120 = 0; // 0x418d5b
                int32_t v121 = v120;
                int32_t v122 = v119;
                int32_t v123 = v118;
                int32_t v124 = g556; // 0x418d5d
                int32_t v125; // 0x418970
                int32_t v126; // 0x418d79
                int16_t v127; // 0x418d83
                int32_t v128; // 0x418d6d
                if (v124 < 2) {
                    // 0x418d77
                    v126 = g558;
                    v127 = *(int16_t *)(v126 + 2 * v123);
                    v125 = v127 & 4;
                } else {
                    // 0x418d66
                    *v40 = 4;
                    *v41 = v123;
                    v128 = function_4158a0((int32_t)&g1001, (int32_t)&g1001);
                    v125 = v128;
                }
                int32_t v129 = v125;
                int32_t v130 = v121; // 0x418d8c
                while (v129 != 0) {
                    int32_t v131 = (0x1000000 * v123 >> 24) - 48 + 10 * v121; // 0x418d94
                    v130 = 0x1451;
                    if (v131 > 0x1450) {
                        // break -> 0x418daa
                        break;
                    }
                    unsigned char v132 = *(char *)v122; // 0x418da0
                    v118 = v132;
                    v119 = v122 + 1;
                    v120 = v131;
                    v121 = v120;
                    v122 = v119;
                    v123 = v118;
                    v124 = g556;
                    if (v124 < 2) {
                        // 0x418d77
                        v126 = g558;
                        v127 = *(int16_t *)(v126 + 2 * v123);
                        v125 = v127 & 4;
                    } else {
                        // 0x418d66
                        *v40 = 4;
                        *v41 = v123;
                        v128 = function_4158a0((int32_t)&g1001, (int32_t)&g1001);
                        v125 = v128;
                    }
                    // 0x418d8a
                    v129 = v125;
                    v130 = v121;
                }
                int32_t v133 = v130;
                int32_t v134 = v123; // 0x418970
                int32_t v135 = v122; // 0x418970
                int32_t v136 = v135;
                int32_t v137 = v134;
                int32_t v138 = g556; // 0x418daa
                int32_t v139; // 0x418970
                int32_t v140; // 0x418dc6
                int16_t v141; // 0x418dd0
                int32_t v142; // 0x418dba
                if (v138 < 2) {
                    // 0x418dc4
                    v140 = g558;
                    v141 = *(int16_t *)(v140 + (2 * v137 & 510));
                    v139 = v141 & 4;
                } else {
                    // 0x418db3
                    *v40 = 4;
                    *v41 = v137;
                    v142 = function_4158a0((int32_t)&g1001, (int32_t)&g1001);
                    v139 = v142;
                }
                int32_t v143 = v139;
                v9 = v6;
                v31 = v136;
                v20 = v133;
                while (v143 != 0) {
                    unsigned char v144 = *(char *)v136; // 0x418ddb
                    v134 = v144;
                    v135 = v136 + 1;
                    v136 = v135;
                    v137 = v134;
                    v138 = g556;
                    if (v138 < 2) {
                        // 0x418dc4
                        v140 = g558;
                        v141 = *(int16_t *)(v140 + (2 * v137 & 510));
                        v139 = v141 & 4;
                    } else {
                        // 0x418db3
                        *v40 = 4;
                        *v41 = v137;
                        v142 = function_4158a0((int32_t)&g1001, (int32_t)&g1001);
                        v139 = v142;
                    }
                    // 0x418dd7
                    v143 = v139;
                    v9 = v6;
                    v31 = v136;
                    v20 = v133;
                }
                goto lab_0x418e1f;
            }
            case 11: {
                // 0x418de0
                int32_t * v145; // 0x418970
                int32_t v146 = *v145; // 0x418de0
                v9 = v6;
                v31 = v37;
                v20 = v19;
                if (v146 == 0) {
                    goto lab_0x418e1f;
                } else {
                    // 0x418dea
                    *v47 = v43;
                    v23 = v19;
                    v27 = v37;
                    v12 = v6;
                    v16 = 7;
                    v22 = v19;
                    v26 = v43;
                    v11 = v6;
                    switch (v45) {
                        case 43: {
                            goto lab_0x418e25_2;
                        }
                        case 45: {
                            // 0x418e10
                            *v38 = -1;
                            v23 = v19;
                            v27 = v37;
                            v12 = v6;
                            v16 = 7;
                            goto lab_0x418e25_2;
                        }
                        default: {
                            goto lab_0x418e2e_3;
                        }
                    }
                }
            }
            default: {
                goto lab_0x418e25;
            }
        }
    }
  lab_0x418e25:;
    int32_t v147 = v24;
    int32_t v148 = v28;
    int32_t v149 = v13;
    int32_t v150 = v17;
    v23 = v147;
    v27 = v148;
    v12 = v149;
    v16 = v150;
    v22 = v147;
    v26 = v148;
    v11 = v149;
    if (v150 == 10) {
        // break -> 0x418e2e
        goto lab_0x418e2e_3;
    }
    goto lab_0x418e25_2;
  lab_0x418e25_2:;
    int32_t v151 = v16;
    int32_t v152 = v12;
    int32_t v153 = v27;
    int32_t v154 = v23;
    char v155 = *(char *)v153;
    v4 = v155;
    v14 = v151;
    v5 = v152;
    v25 = v153;
    v18 = v154;
    goto lab_0x4189c9;
  lab_0x418e24:;
    int32_t v156 = v21;
    int32_t v157 = v32;
    int32_t v158 = v10;
    int32_t v159 = v15;
    v17 = v159;
    v13 = v158;
    v28 = v157 - 1;
    v24 = v156;
    goto lab_0x418e25;
  lab_0x418c27:
    // 0x418c27
    v23 = v19;
    v27 = v30 - 1;
    v12 = v8;
    v16 = 11;
    goto lab_0x418e25_2;
  lab_0x418e1f:;
    int32_t v160 = v20;
    int32_t v161 = v31;
    int32_t v162 = v9;
    v15 = 10;
    v10 = v162;
    v32 = v161;
    v21 = v160;
    goto lab_0x418e24;
  lab_0x418b80:
    // 0x418b80
    v23 = v19;
    v27 = v29 - 1;
    v12 = v7;
    v16 = 11;
    goto lab_0x418e25_2;
  lab_0x418e2e_3:;
    int32_t v163 = v11;
    int32_t v164 = v26;
    int32_t v165 = v22;
    int32_t v166; // 0x41897e
    int32_t v167 = *(int32_t *)(v166 + 108); // 0x418e2e
    int32_t v168 = *v33; // 0x418e32
    *(int32_t *)v167 = v164;
    int32_t v169; // 0x418970
    int32_t v170; // 0x418970
    int32_t v171; // 0x418970
    int32_t v172; // 0x418970
    int16_t v173; // 0x418970
    int32_t v174; // 0x418970
    int16_t v175; // 0x418970
    if (v168 == 0) {
        // 0x418e2e
        v169 = v166 + 60;
        goto lab_0x418f10;
    } else {
        uint32_t v176 = *v34;
        if (v176 < 25) {
            // 0x418e5e
            v170 = v176;
            v171 = v163;
            v172 = 0;
            v174 = 0;
            v175 = 0;
            v173 = 0;
            if (v176 == 0) {
                goto lab_0x418f22;
            } else {
                goto lab_0x418e69;
            }
        } else {
            char * v177 = (char *)(v166 + 83); // 0x418e46
            unsigned char v178 = *v177; // 0x418e46
            if (v178 >= 5) {
                // 0x418e4d
                *v177 = v178 + 1;
            }
            int32_t v179 = *v35; // 0x418e52
            *v35 = v179 + 1;
            *v34 = 24;
            v170 = 24;
            v171 = v163 - 1;
            goto lab_0x418e69;
        }
    }
  lab_0x418aa6:
    // 0x418aa6
    v23 = v19;
    v27 = v37;
    v12 = v6;
    v16 = 6;
    goto lab_0x418e25_2;
  lab_0x418f10:;
    int32_t v180 = v169;
    int16_t v181 = *(int16_t *)v180; // 0x418f10
    int32_t v182 = *(int32_t *)v180; // 0x418f15
    v172 = v182;
    v174 = v182;
    v175 = v181;
    v173 = v181;
    goto lab_0x418f22;
  lab_0x418f22:;
    int32_t v183 = *v33; // 0x418f22
    int32_t * v184; // 0x418970
    int32_t v185; // 0x418970
    int16_t v186; // 0x418970
    int32_t v187; // 0x418970
    int16_t v188; // 0x418970
    if (v183 != 0) {
        int32_t v189 = *(int32_t *)(v166 + 52); // 0x418f3d
        if (v189 == 0) {
            int16_t v190 = v173;
            int16_t v191 = v175;
            int32_t v192 = v174;
            int32_t v193 = v172;
            int32_t v194 = *(int32_t *)(v166 + 56); // 0x418f5c
            int32_t * v195 = (int32_t *)(v166 + 36);
            v184 = v195;
            v185 = v193;
            v187 = v192;
            v188 = v191;
            v186 = v190;
            if (v194 != 0) {
                // 0x418f63
                *v195 = 1;
                v184 = v195;
                v185 = 0;
                v187 = 0;
                v188 = 0;
                v186 = 0;
            }
        } else {
            int32_t * v196 = (int32_t *)(v166 + 36);
            *v196 = 2;
            v184 = v196;
            v185 = 0;
            v187 = -0x80000000;
            v188 = 0;
            v186 = 0x7fff;
        }
    } else {
        int32_t * v197 = (int32_t *)(v166 + 36);
        *v197 = 4;
        v184 = v197;
        v185 = 0;
        v187 = 0;
        v188 = 0;
        v186 = 0;
    }
    int16_t v198 = v186;
    int16_t v199 = v188;
    int32_t v200 = v187;
    int32_t v201 = v185;
    int32_t * v202 = v184;
    int16_t v203 = *v36; // 0x418f75
    int32_t v204 = *(int32_t *)(v166 + 104); // 0x418f7a
    *(int16_t *)v204 = v199;
    *(int32_t *)(v204 + 2) = v201;
    *(int16_t *)(v204 + 10) = v203 | v198;
    *(int32_t *)(v204 + 6) = v200;
    int32_t result = *v202; // 0x418f8b
    return result;
  lab_0x418e69:;
    int32_t v205 = v171;
    int32_t v206 = v170;
    int32_t v207 = v205 - 1; // 0x418e69
    char v208 = *(char *)v207; // 0x418e6a
    int32_t v209 = v206; // 0x418e6e
    int32_t v210 = v207; // 0x418e6e
    int32_t v211 = v206; // 0x418e6e
    if (v208 == 0) {
        int32_t v212 = v210;
        int32_t v213 = v209; // 0x418e71
        int32_t v214 = v212 - 1; // 0x418e70
        *v34 = v213 - 1;
        int32_t v215 = *v35; // 0x418e75
        *v35 = v215 + 1;
        char v216 = *(char *)v214; // 0x418e79
        int32_t v217 = *v34;
        v209 = v217;
        v210 = v214;
        v211 = v217;
        while (v216 == 0) {
            // 0x418e70
            v212 = v210;
            v213 = v209;
            v214 = v212 - 1;
            *v34 = v213 - 1;
            v215 = *v35;
            *v35 = v215 + 1;
            v216 = *(char *)v214;
            v217 = *v34;
            v209 = v217;
            v210 = v214;
            v211 = v217;
        }
    }
    int32_t v218 = v211; // 0x418e83
    int32_t v219 = v166 + 88; // 0x418e7f
    int32_t v220 = v166 + 60;
    *v40 = v219;
    *v41 = v218;
    int32_t * v221 = (int32_t *)(v166 - 12); // 0x418e8d
    *v221 = v220;
    function_418880((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
    int32_t v222 = *v38; // 0x418e96
    int32_t v223 = v222 >= 0 ? v165 : -v165;
    int32_t v224 = *v35; // 0x418e9f
    int32_t v225 = v223 + v224; // 0x418e9f
    int32_t v226 = *v39; // 0x418ea3
    int32_t v227 = v225; // 0x418ea8
    if (v226 == 0) {
        int32_t v228 = *(int32_t *)(v166 + 120); // 0x418eaa
        v227 = v228 + v225;
    }
    int32_t v229 = v227;
    int32_t v230 = *v42; // 0x418eae
    int32_t v231 = v229; // 0x418eb3
    if (v230 == 0) {
        int32_t v232 = *(int32_t *)(v166 + 124); // 0x418eb5
        v231 = v229 - v232;
    }
    int32_t v233 = v231;
    if (v233 < 0x1451) {
        if (v233 > -0x1451) {
            int32_t v234 = *(int32_t *)(v166 + 116); // 0x418edd
            *v40 = v234;
            *v41 = v233;
            *v221 = v219;
            function_41a240((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
            int16_t v235 = *(int16_t *)v219; // 0x418eed
            int32_t v236 = *(int32_t *)(v166 + 90); // 0x418ef2
            int16_t v237 = *(int16_t *)(v166 + 98); // 0x418ef6
            int32_t v238 = *(int32_t *)(v166 + 94); // 0x418efb
            v172 = v236;
            v174 = v238;
            v175 = v235;
            v173 = v237;
            goto lab_0x418f22;
        } else {
            // 0x418ed3
            *(int32_t *)(v166 + 56) = 1;
            v169 = v220;
            goto lab_0x418f10;
        }
    } else {
        // 0x418ec1
        *(int32_t *)(v166 + 52) = 1;
        v169 = v220;
        goto lab_0x418f10;
    }
}

// Address range: 0x4190c0 - 0x41945b
int32_t function_4190c0(int32_t a1, uint32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t * a6, int32_t a7) {
    char v1 = -52; // bp-24, 0x4190c8
    uint32_t v2 = a4 & 0x7fff; // 0x419118
    char * v3 = (char *)(a7 + 2);
    *v3 = (int16_t)a4 > -1 ? 32 : 45;
    if ((a2 || a1 || v2) == 0) {
        // 0x41913f
        *v3 = 32;
        *(int16_t *)a7 = 0;
        *(char *)(a7 + 3) = 1;
        *(char *)(a7 + 4) = 48;
        *(char *)(a7 + 5) = 0;
        return 1;
    }
    // 0x419161
    int32_t v4; // bp-56, 0x4190c0
    int32_t v5 = &v4; // 0x4190db
    uint16_t v6 = (int16_t)v2; // 0x419161
    if (v6 == 0x7fff) {
        // 0x41916c
        *(int16_t *)a7 = 1;
        if (a1 == 0 == a2 == -0x80000000) {
            // 0x419207
            *(int32_t *)(a7 + 4) = 0x4e492331;
            *(int16_t *)(a7 + 8) = 70;
            *(char *)(a7 + 3) = 5;
            // 0x41941b
            return *(int32_t *)(v5 + 28);
        }
        if ((a3 & 64) == 0) {
            // 0x419189
            *(int32_t *)(a7 + 4) = 0x4e532331;
            *(int16_t *)(a7 + 8) = 0x4e41;
            *(char *)(a7 + 10) = 0;
            *(char *)(a7 + 3) = 6;
            // 0x41941b
            return *(int32_t *)(v5 + 28);
        }
        int32_t * v7 = (int32_t *)(a7 + 4);
        if (a1 == 0 != (a2 == -0x40000000) || (int16_t)a4 > -1) {
            // 0x419230
            *v7 = 0x4e512331;
            *(int16_t *)(a7 + 8) = 0x4e41;
            *(char *)(a7 + 10) = 0;
            *(char *)(a7 + 3) = 6;
        } else {
            // 0x4191cd
            *v7 = 0x4e492331;
            *(int16_t *)(a7 + 8) = 68;
            *(char *)(a7 + 3) = 5;
        }
        // 0x41941b
        return *(int32_t *)(v5 + 28);
    }
    int32_t v8 = (0x4d10 * v2 - 0x134312f4 + 77 * (v2 / 256 + 2 * a2 / 0x1000000)) / 0x10000; // 0x4192ae
    int32_t v9 = 0; // bp-40, 0x4192b8
    function_41a240((int32_t)&v9, -v8, 1);
    int32_t v10 = v8; // 0x4192d6
    if (v6 >= 0x3fff) {
        // 0x4192d8
        function_419f90(&v9, &v1);
        v10 = v8 + 1 & 0xffff;
    }
    int16_t * v11 = (int16_t *)a7; // 0x4192f1
    *v11 = (int16_t)v10;
    int32_t v12 = a5; // 0x4192f4
    if (((int32_t)a6 & 1) != 0) {
        // 0x4192f6
        v12 = (0x10000 * v10 >> 16) + a5;
        if (v12 >= 0 != v12 != 0) {
            // 0x419303
            *v3 = 32;
            *v11 = 0;
            *(char *)(a7 + 3) = 1;
            *(char *)(a7 + 4) = 48;
            *(char *)(a7 + 5) = 0;
            return 1;
        }
    }
    int32_t v13 = v12;
    int32_t v14 = v5 + 16; // 0x41934c
    int32_t * v15 = (int32_t *)(v5 - 4);
    for (int32_t i = 8; i > 0; i--) {
        // 0x41934c
        *v15 = v14;
        function_418800((int32_t)&g1001);
    }
    if (v2 < 0x3ffe) {
        int32_t v16 = 254 - a4 & 255; // 0x419362
        if (v16 != 0) {
            *v15 = v14;
            function_418840((int32_t)&g1001);
            int32_t v17 = v16 - 1; // 0x419377
            int32_t v18 = v17; // 0x419378
            while (v17 != 0) {
                // 0x41936a
                *v15 = v14;
                function_418840((int32_t)&g1001);
                v17 = v18 - 1;
                v18 = v17;
            }
        }
    }
    uint32_t v19 = a7 + 4;
    int32_t v20 = (v13 < 21 ? v13 : 21) + 1; // 0x41937d
    int32_t v21 = v19; // 0x419382
    if (v20 >= 1) {
        int32_t v22 = v5 + 44; // 0x419388
        char * v23 = (char *)(v5 + 27);
        int32_t v24 = v20; // 0x4193dc
        int32_t v25 = v19 + 1; // 0x41938c
        *(int32_t *)v22 = *(int32_t *)v14;
        *(int32_t *)(v5 + 48) = *(int32_t *)(v5 + 20);
        *(int32_t *)(v5 + 52) = *(int32_t *)(v5 + 24);
        *v15 = v14;
        function_418800((int32_t)&g1001);
        *v15 = v14;
        function_418800((int32_t)&g1001);
        *v15 = v22;
        *(int32_t *)(v5 - 8) = v14;
        function_418790((int32_t)&g1001, (int32_t)&g1001);
        *v15 = v14;
        function_418800((int32_t)&g1001);
        v24--;
        *(char *)v19 = *v23 + 48;
        *v23 = 0;
        v21 = v25;
        while (v24 != 0) {
            int32_t v26 = v25;
            v25 = v26 + 1;
            *(int32_t *)v22 = *(int32_t *)v14;
            *(int32_t *)(v5 + 48) = *(int32_t *)(v5 + 20);
            *(int32_t *)(v5 + 52) = *(int32_t *)(v5 + 24);
            *v15 = v14;
            function_418800((int32_t)&g1001);
            *v15 = v14;
            function_418800((int32_t)&g1001);
            *v15 = v22;
            *(int32_t *)(v5 - 8) = v14;
            function_418790((int32_t)&g1001, (int32_t)&g1001);
            *v15 = v14;
            function_418800((int32_t)&g1001);
            v24--;
            *(char *)v26 = *v23 + 48;
            *v23 = 0;
            v21 = v25;
        }
    }
    int32_t v27 = v21 - 2; // 0x4193eb
    int32_t v28; // 0x4190c0
    int32_t v29; // 0x4190c0
    int32_t v30; // 0x4190c0
    if (*(char *)(v21 - 1) < 53) {
        int32_t v31 = v27; // 0x419429
        if (v27 < v19) {
            goto lab_0x419439;
        } else {
            int32_t v32 = v31; // 0x41942e
            while (*(char *)v31 == 48) {
                int32_t v33 = v31 - 1; // 0x419430
                v31 = v33;
                v32 = v33;
                if (v33 < v19) {
                    // break -> 0x419435
                    break;
                }
                v32 = v31;
            }
            // 0x419435
            v30 = v32;
            if (v32 >= v19) {
                goto lab_0x41940b;
            } else {
                goto lab_0x419439;
            }
        }
    } else {
        int32_t v34 = v27; // 0x4193f2
        v28 = v27;
        if (v27 < v19) {
            goto lab_0x419405;
        } else {
            char * v35 = (char *)v34; // 0x4193f4
            int32_t v36 = v34; // 0x4193f7
            while (*v35 == 57) {
                // 0x4193f9
                *v35 = 48;
                int32_t v37 = v34 - 1; // 0x4193fc
                v34 = v37;
                v36 = v37;
                if (v37 < v19) {
                    // break -> 0x419401
                    break;
                }
                v35 = (char *)v34;
                v36 = v34;
            }
            // 0x419401
            v28 = v36;
            v29 = v28;
            if (v28 >= v19) {
                goto lab_0x419409;
            } else {
                goto lab_0x419405;
            }
        }
    }
  lab_0x419439:
    // 0x419439
    *v11 = 0;
    *(char *)v19 = 48;
    *v3 = 32;
    *(char *)(a7 + 3) = 1;
    *(char *)(a7 + 5) = 0;
    return 1;
  lab_0x419405:
    // 0x419405
    *v11 = *v11 + 1;
    v29 = v28 + 1;
    goto lab_0x419409;
  lab_0x41940b:;
    int32_t v39 = v30 - a7 + 253; // 0x41940d
    *(char *)(a7 + 3) = (char)v39;
    *(char *)((0x1000000 * v39 >> 24) + v19) = 0;
    // 0x41941b
    return *(int32_t *)(v5 + 28);
  lab_0x419409:;
    char * v38 = (char *)v29; // 0x419409
    *v38 = *v38 + 1;
    v30 = v29;
    goto lab_0x41940b;
}

// Address range: 0x419460 - 0x4195c7
int32_t function_419460(uint32_t a1, int32_t a2) {
    // 0x419460
    function_41a340((int32_t)&g1001);
    if ((int32_t)g987 <= a1) {
        // 0x4195ad
        g484 = 9;
        return -1;
    }
    int32_t v1 = *(int32_t *)((a1 / 8 & -4) + (int32_t)&g985); // 0x419490
    if ((*(char *)(v1 + (8 * a1 & 248 | 4)) & 1) == 0) {
        // 0x4195ad
        g484 = 9;
        return -1;
    }
    int32_t v2 = 1; // bp-20, 0x4194a1
    if (function_4143e0(a1, 0, 1) == -1) {
        // 0x41959d
        return -1;
    }
    // 0x4194ba
    v2 = 2;
    int32_t v3 = function_4143e0(a1, 0, 2); // 0x4194be
    if (v3 == -1) {
        // 0x41959d
        return -1;
    }
    // 0x4194cf
    int32_t v4; // bp-16, 0x419460
    int32_t v5 = &v4; // 0x4194c3
    int32_t v6 = a2 - v3; // 0x4194d8
    int32_t result; // 0x419460
    int32_t v7; // 0x419460
    if (v6 < 1) {
        // 0x419543
        result = 0;
        v7 = v5;
        if (v6 != 0) {
            // 0x419545
            function_4143e0(a1, a2, 0);
            int32_t hFile = function_416600(a1); // 0x419552
            v2 = hFile;
            int32_t v8 = &v2; // 0x41955a
            result = 0;
            v7 = v8;
            if (!SetEndOfFile((int32_t *)hFile)) {
                // 0x41956b
                g484 = 13;
                g485 = GetLastError();
                result = -1;
                v7 = v8;
            }
        }
    } else {
        // 0x4194de
        v2 = 0x8000;
        int32_t v9; // 0x419460
        __asm_rep_stosd_memset((char *)&v9, 0, 1024);
        int32_t v10 = function_41a2c0(a1, (int32_t)&g1001); // 0x4194f1
        int32_t * v11 = (int32_t *)(v5 - 4);
        int32_t * v12 = (int32_t *)(v5 - 8);
        int32_t v13 = v6;
        *v11 = v13 < 0x1000 ? v13 : 0x1000;
        *v12 = v5 + 20;
        *(int32_t *)(v5 - 12) = a1;
        int32_t v14 = function_4141b0((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001); // 0x41950d
        int32_t v15; // 0x419460
        while (v14 != -1) {
            int32_t v16 = v13 - v14; // 0x41951a
            v15 = 0;
            if (v16 >= 0 != v16 != 0) {
                goto lab_0x419537;
            }
            v13 = v16;
            *v11 = v13 < 0x1000 ? v13 : 0x1000;
            *v12 = v5 + 20;
            *(int32_t *)(v5 - 12) = a1;
            v14 = function_4141b0((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
        }
        // 0x419522
        v15 = -1;
        if (g485 == 5) {
            // 0x41952b
            g484 = 13;
            v15 = -1;
        }
      lab_0x419537:
        // 0x419537
        *v11 = v10;
        *v12 = a1;
        function_41a2c0((int32_t)&g1001, (int32_t)&g1001);
        result = v15;
        v7 = v5;
    }
    int32_t v17 = v7;
    *(int32_t *)(v17 - 4) = 0;
    *(int32_t *)(v17 - 8) = *(int32_t *)(v17 + 16);
    *(int32_t *)(v17 - 12) = a1;
    function_4143e0((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
    return result;
}

// Address range: 0x4195d0 - 0x419609
int32_t function_4195d0(int32_t a1, int32_t a2, int32_t a3, int32_t a4) {
    // 0x4195d0
    return a4 & -0x10000 | a3 & 0x800f | 16 * a4 + 0x3fe0 & 0xfff0;
}

// Address range: 0x419610 - 0x419673
int32_t function_419610(int32_t a1, int32_t a2, int32_t a3) {
    // 0x419610
    if (a1 == 0 == a2 == 0x7ff00000) {
        // 0x419621
        return 1;
    }
    // 0x419627
    if (a1 == 0 == a2 == -0x100000) {
        // 0x419621
        return 2;
    }
    int32_t v1 = a3 & 0x7ff8; // 0x419643
    if (v1 == 0x7ff8) {
        // 0x419621
        return 3;
    }
    if (v1 != 0x7ff0) {
        // 0x419621
        return 0;
    }
    // 0x419659
    if ((a2 & 0x7ffff || a1) != 0) {
        // 0x419621
        return 4;
    }
    // 0x419621
    return 0;
}

// Address range: 0x419680 - 0x41976e
int32_t function_419680(int32_t a1, int32_t a2, int32_t * a3, int32_t a4, int32_t result) {
    float64_t v1 = 0.0; // 0x419692
    int32_t v2 = 0; // 0x419692
    int3_t v3; // 0x419680
    int3_t v4; // 0x419680
    uint16_t v5; // 0x4196a8
    if ((a2 & 0x7fffffff || a1) != 0) {
        int32_t v6 = (int32_t)a3;
        v5 = (int16_t)v6 & 0x7ff0;
        if (v5 != 0) {
            goto lab_0x419739;
        } else {
            if ((a2 & 0xfffff || a1) == 0) {
                goto lab_0x419739;
            } else {
                int3_t v7 = v4 - 1; // 0x4196c4
                __frontend_reg_store_fpr(v7, 0.0L);
                __frontend_reg_load_fpr(v7);
                int32_t v8 = a1; // 0x4196e2
                int32_t v9 = a2; // 0x4196e2
                int32_t v10 = -1021; // 0x4196e2
                if ((v6 & 16) == 0) {
                    int32_t v11 = 2 * a2 | (int32_t)(a1 < 0);
                    int32_t v12 = -1022; // 0x419702
                    int32_t v13 = 2 * a1; // 0x419703
                    int32_t v14 = v13; // 0x41970d
                    int32_t v15 = v11; // 0x41970d
                    int32_t v16 = v12; // 0x41970d
                    v8 = v13;
                    v9 = v11;
                    v10 = v12;
                    while ((v6 & 16) == 0) {
                        // 0x4196f3
                        v11 = 2 * v15 | (int32_t)(v14 < 0);
                        v12 = v16 - 1;
                        v13 = 2 * v14;
                        v14 = v13;
                        v15 = v11;
                        v16 = v12;
                        v8 = v13;
                        v9 = v11;
                        v10 = v12;
                    }
                }
                // 0x41970f
                function_4195d0(v8, v9, 0, (int32_t)&g1001);
                v1 = __frontend_reg_load_fpr(v4);
                v3 = v4 + 1;
                v2 = v10;
                goto lab_0x41975e;
            }
        }
    } else {
        goto lab_0x41975e;
    }
  lab_0x41975e:
    // 0x41975e
    __frontend_reg_store_fpr(v3 - 1, (float80_t)v1);
    *(int32_t *)result = v2;
    return result;
  lab_0x419739:;
    // 0x419739
    int32_t v17; // 0x419680
    function_4195d0(a1, a2, 0, v17);
    v1 = __frontend_reg_load_fpr(v4);
    v3 = v4 + 1;
    v2 = (int32_t)(v5 / 16) - 1022;
    goto lab_0x41975e;
}

// Address range: 0x419770 - 0x419785
int32_t function_419770(int32_t a1) {
    // 0x419770
    int32_t result; // 0x419770
    return result;
}

// Address range: 0x419790 - 0x419832
int32_t function_419790(int32_t a1, int32_t a2, int32_t a3) {
    int32_t v1 = a3 & 0x7ff0; // 0x419795
    if (v1 == 0x7ff0) {
        int32_t v2 = function_419610(a1, a2, (int32_t)&g1001); // 0x4197ab
        int32_t result = 512; // 0x419790
        switch (v2) {
            case 2: {
                // 0x4197c2
                result = 4;
            }
            case 1: {
                // 0x4197c2
                return result;
            }
            default: {
                // 0x4197bd
                result = v2 == 3 ? 2 : 1;
                return result;
            }
        }
    }
    int32_t v3 = a3 & 0x8000; // 0x4197eb
    if ((a2 & 0x7fffffff || a1) == 0) {
        // 0x4197f6
        return v3 == 0 ? 64 : 32;
    }
    if (v1 != 0) {
        // 0x419824
        return v3 == 0 ? 256 : 8;
    }
    if ((a2 & 0xfffff || a1) == 0) {
        // 0x419824
        return v3 == 0 ? 256 : 8;
    }
    // 0x419818
    return v3 == 0 ? 128 : 16;
}

// Address range: 0x419840 - 0x419b9a
int32_t function_419840(int32_t * a1, int32_t * a2, int32_t a3, int32_t a4, int32_t a5, int32_t a6) {
    int32_t v1 = (int32_t)a1;
    int32_t lpArguments = v1;
    *(int32_t *)(v1 + 4) = 0;
    *(int32_t *)(lpArguments + 8) = 0;
    *(int32_t *)(lpArguments + 12) = 0;
    int32_t v2; // 0x419840
    if ((a3 & 16) != 0) {
        int32_t * v3 = (int32_t *)(lpArguments + 4); // 0x41986f
        *v3 = *v3 | 1;
        v2 = -0x3fffff71;
    }
    int32_t v4 = v2; // 0x41987c
    if ((a3 & 2) != 0) {
        int32_t * v5 = (int32_t *)(lpArguments + 4); // 0x419887
        *v5 = *v5 | 2;
        v4 = -0x3fffff6d;
    }
    int32_t v6 = v4; // 0x41988e
    if ((a3 & 1) != 0) {
        int32_t * v7 = (int32_t *)(lpArguments + 4); // 0x419899
        *v7 = *v7 | 4;
        v6 = -0x3fffff6f;
    }
    int32_t v8 = v6; // 0x4198a0
    if ((a3 & 4) != 0) {
        int32_t * v9 = (int32_t *)(lpArguments + 4); // 0x4198ab
        *v9 = *v9 | 8;
        v8 = -0x3fffff72;
    }
    int32_t dwExceptionCode = v8; // 0x4198b2
    if ((a3 & 8) != 0) {
        int32_t * v10 = (int32_t *)(lpArguments + 4); // 0x4198bd
        *v10 = *v10 | 16;
        dwExceptionCode = -0x3fffff70;
    }
    int32_t * v11 = (int32_t *)(lpArguments + 8); // 0x4198d0
    *v11 = (16 * *a2 & 16 | *v11 & -17) ^ 16;
    int32_t * v12 = (int32_t *)(lpArguments + 8); // 0x4198f2
    *v12 = 8 * (int32_t)((*a2 & 4) == 0) | *v12 & -9;
    int32_t * v13 = (int32_t *)(lpArguments + 8); // 0x419913
    *v13 = 4 * (int32_t)((*a2 & 8) == 0) | *v13 & -5;
    int32_t * v14 = (int32_t *)(lpArguments + 8); // 0x41992f
    *v14 = 2 * (int32_t)((*a2 & 16) == 0) | *v14 & -3;
    int32_t * v15 = (int32_t *)(lpArguments + 8); // 0x419954
    *v15 = *v15 & -2 | (int32_t)((*a2 & 32) == 0);
    int32_t v16; // 0x419840
    int32_t v17 = function_419eb0(v16, v16, v16); // 0x419961
    if ((v17 & 1) != 0) {
        int32_t * v18 = (int32_t *)(lpArguments + 12); // 0x41996e
        *v18 = *v18 | 16;
    }
    if ((v17 & 4) != 0) {
        int32_t * v19 = (int32_t *)(lpArguments + 12); // 0x41997a
        *v19 = *v19 | 8;
    }
    if ((v17 & 8) != 0) {
        int32_t * v20 = (int32_t *)(lpArguments + 12); // 0x419986
        *v20 = *v20 | 4;
    }
    if ((v17 & 16) != 0) {
        int32_t * v21 = (int32_t *)(lpArguments + 12); // 0x419992
        *v21 = *v21 | 2;
    }
    if ((v17 & 32) != 0) {
        int32_t * v22 = (int32_t *)(lpArguments + 12); // 0x41999e
        *v22 = *v22 | 1;
    }
    int32_t v23 = *a2 & 3072; // 0x4199a4
    if ((v23 || 1024) == 1024) {
        switch (v23) {
            case 1024: {
                int32_t * v24 = (int32_t *)lpArguments; // 0x4199d9
                *v24 = *v24 & -4 | 1;
                // break -> 0x419a00
                break;
            }
            case 0: {
                int32_t * v25 = (int32_t *)lpArguments; // 0x4199cc
                *v25 = *v25 & -4;
                // break -> 0x419a00
                break;
            }
        }
    } else {
        switch (v23) {
            case 2048: {
                int32_t * v26 = (int32_t *)lpArguments; // 0x4199ed
                *v26 = *v26 & -4 | 2;
                // break -> 0x419a00
                break;
            }
            case 3072: {
                int32_t * v27 = (int32_t *)lpArguments; // 0x4199fd
                *v27 = *v27 | 3;
                // break -> 0x419a00
                break;
            }
        }
    }
    // 0x419a00
    int32_t v28; // 0x419a00
    switch (v28 & 768) {
        case 0: {
            int32_t * v29 = (int32_t *)lpArguments; // 0x419a1d
            *v29 = *v29 & -29 | 8;
            // break -> 0x419a44
            break;
        }
        case 512: {
            int32_t * v30 = (int32_t *)lpArguments; // 0x419a31
            *v30 = *v30 & -29 | 4;
            // break -> 0x419a44
            break;
        }
        case 768: {
            int32_t * v31 = (int32_t *)lpArguments; // 0x419a41
            *v31 = *v31 & -29;
            // break -> 0x419a44
            break;
        }
    }
    int32_t * v32 = (int32_t *)lpArguments; // 0x419a4f
    *v32 = *v32 & -0x1ffe1 | 32 * a4 & 0x1ffe0;
    int32_t * v33 = (int32_t *)(lpArguments + 32); // 0x419a65
    *v33 = *v33 | 1;
    int32_t * v34 = (int32_t *)(lpArguments + 32); // 0x419a6d
    *v34 = *v34 & -31 | 2;
    *(int32_t *)(lpArguments + 20) = *(int32_t *)(a5 + 4);
    *(int32_t *)(lpArguments + 16) = *(int32_t *)a5;
    int32_t * v35 = (int32_t *)(lpArguments + 80); // 0x419a92
    *v35 = *v35 | 1;
    int32_t * v36 = (int32_t *)(lpArguments + 80); // 0x419a9e
    *v36 = *v36 & -31 | 2;
    int32_t * v37 = (int32_t *)(a6 + 4); // 0x419ab0
    *(int32_t *)(lpArguments + 68) = *v37;
    int32_t * v38 = (int32_t *)a6; // 0x419ab6
    *(int32_t *)(lpArguments + 64) = *v38;
    function_419ed0();
    RaiseException(dwExceptionCode, 0, 1, &lpArguments);
    char * v39 = (char *)(v16 + 8); // 0x419ad7
    char v40 = *v39; // 0x419ad7
    char v41 = v40; // 0x419ada
    if ((v40 & 16) != 0) {
        // 0x419adc
        *a2 = *a2 & -2;
        v41 = *v39;
    }
    char v42 = v41; // 0x419ae2
    if ((v41 & 8) != 0) {
        // 0x419ae4
        *a2 = *a2 & -5;
        v42 = *v39;
    }
    char v43 = v42; // 0x419aea
    if ((v42 & 4) != 0) {
        // 0x419aec
        *a2 = *a2 & -9;
        v43 = *v39;
    }
    char v44 = v43; // 0x419af2
    if ((v43 & 2) != 0) {
        // 0x419af4
        *a2 = *a2 & -17;
        v44 = *v39;
    }
    // 0x419af7
    if ((v44 & 1) != 0) {
        // 0x419afc
        *a2 = *a2 & -33;
    }
    int32_t v45 = dwExceptionCode & 3; // 0x419b05
    g993 = v45;
    int32_t v46; // 0x419840
    switch (v45) {
        case 0: {
            int32_t v47 = *a2 & -3073; // 0x419b14
            *a2 = v47;
            v46 = v47;
            // break -> 0x419b42
            break;
        }
        case 1: {
            int32_t v48 = *a2 & -3073 | 1024; // 0x419b23
            *a2 = v48;
            v46 = v48;
            // break -> 0x419b42
            break;
        }
        case 2: {
            int32_t v49 = *a2 & -3073 | 2048; // 0x419b33
            *a2 = v49;
            v46 = v49;
            // break -> 0x419b42
            break;
        }
        case 3: {
            int32_t v50 = *a2 | 3072; // 0x419b3c
            *a2 = v50;
            v46 = v50;
            // break -> 0x419b42
            break;
        }
        default: {
            // 0x419b424
            // UNREACHABLE
        }
    }
    // 0x419b42
    uint32_t v51; // 0x419840
    switch (v51 / 4 & 7) {
        case 0: {
            // 0x419b5e
            *a2 = v46 & -3841 | 768;
            // break -> 0x419b84
            break;
        }
        case 1: {
            // 0x419b6e
            *a2 = v46 & -3585 | 512;
            // break -> 0x419b84
            break;
        }
        case 2: {
            // 0x419b7e
            *a2 = v46 & -3073;
            // break -> 0x419b84
            break;
        }
    }
    int32_t result = *(int32_t *)(v16 + 68); // 0x419b88
    *v37 = result;
    *v38 = *(int32_t *)(v16 + 64);
    return result;
}

// Address range: 0x419bb0 - 0x419e70
int32_t function_419bb0(int32_t a1, int32_t a2, int32_t a3) {
    // 0x419bb0
    int3_t v1; // 0x419bb0
    int3_t v2 = v1;
    int32_t v3; // 0x419bb0
    if ((a1 & 8) == 0 || (a3 & 1) == 0) {
        if ((a1 & 4 & a3) == 0) {
            int32_t v4; // 0x419bb0
            if ((a1 & 1) == 0 || (a3 & 8) == 0) {
                // 0x419d43
                v3 = a1 & 31;
                if ((a1 & 2) == 0 || (a3 & 16) == 0) {
                    goto lab_0x419e45;
                } else {
                    int32_t * v5 = (int32_t *)(a2 + 4); // 0x419d6d
                    int32_t v6 = *v5; // 0x419d6d
                    int32_t * v7 = (int32_t *)a2; // 0x419d75
                    int32_t v8 = *v7; // 0x419d75
                    if ((v6 & 0x7fffffff || v8) == 0) {
                        // 0x419e38
                        function_419f30(16);
                        // 0x419e42
                        v3 = a1 & 29;
                        goto lab_0x419e45;
                    } else {
                        // 0x419d7d
                        int32_t v9; // bp-4, 0x419bb0
                        function_419680(v8, v6, &v9, v4, v4);
                        float80_t v10 = __frontend_reg_load_fpr(v2); // 0x419d8e
                        int32_t v11 = v9 - 1536; // 0x419d99
                        if (v11 > -1075) {
                            int32_t v12 = (a1 & 16) != 0;
                            float64_t v13 = v10;
                            __frontend_reg_store_fpr(v2, 0.0L);
                            __frontend_reg_load_fpr(v2);
                            float64_t v14 = v13; // 0x419ddd
                            int32_t v15 = v12; // 0x419ddd
                            int32_t v16; // 0x419bb0
                            if (v11 <= 0xfffffc02) {
                                int32_t v17 = 515 - v9; // 0x419de6
                                int32_t v18 = v12;
                                float64_t v19 = (int64_t)((int32_t)(float32_t)v13 / 2); // 0x419e00
                                int32_t v20; // 0x419bb0
                                if ((v20 & 1) != 0) {
                                    // 0x419e02
                                    v19 = (int64_t)((int32_t)(float32_t)(float64_t)(int64_t)((int32_t)(float32_t)v13 / 2) | -0x80000000);
                                }
                                int32_t v21 = ((int32_t)(float32_t)v13 & 1) == 0 | v18 != 0 ? v18 : 1;
                                float64_t v22 = v19;
                                int32_t v23 = v20 / 2; // 0x419e0a
                                v17--;
                                v20 = v23;
                                v16 = v23;
                                v14 = v22;
                                v15 = v21;
                                while (v17 != 0) {
                                    // 0x419deb
                                    v18 = v21;
                                    float64_t v24 = v22;
                                    v19 = (int64_t)((int32_t)(float32_t)v24 / 2);
                                    if ((v20 & 1) != 0) {
                                        // 0x419e02
                                        v19 = (int64_t)((int32_t)(float32_t)(float64_t)(int64_t)((int32_t)(float32_t)v24 / 2) | -0x80000000);
                                    }
                                    // 0x419e0a
                                    v21 = ((int32_t)(float32_t)v24 & 1) == 0 | v18 != 0 ? v18 : 1;
                                    v22 = v19;
                                    v23 = v20 / 2;
                                    v17--;
                                    v20 = v23;
                                    v16 = v23;
                                    v14 = v22;
                                    v15 = v21;
                                }
                            }
                            float64_t v25 = v14; // 0x419e14
                            if ((v4 & 0x4100) == 0) {
                                // 0x419e16
                                __frontend_reg_store_fpr(v2, (float80_t)v14);
                                __frontend_reg_store_fpr(v2, -__frontend_reg_load_fpr(v2));
                                v25 = __frontend_reg_load_fpr(v2);
                            }
                            // 0x419e34
                            *v5 = v16;
                            *v7 = (int32_t)(float32_t)v25;
                            if (v15 == 0) {
                                // 0x419e42
                                v3 = a1 & 29;
                                goto lab_0x419e45;
                            } else {
                                // 0x419e38
                                function_419f30(16);
                                // 0x419e42
                                v3 = a1 & 29;
                                goto lab_0x419e45;
                            }
                        } else {
                            // 0x419e34
                            *v5 = 0;
                            *v7 = 0;
                            // 0x419e38
                            function_419f30(16);
                            // 0x419e42
                            v3 = a1 & 29;
                            goto lab_0x419e45;
                        }
                    }
                }
            } else {
                // 0x419c19
                function_419f30(8);
                int32_t v26 = 0x1000000 * a3 >> 24 & 3072; // 0x419c27
                if ((v26 || 1024) == 1024) {
                    switch (v26) {
                        case 1024: {
                            int3_t v27 = v2 - 1; // 0x419c98
                            __frontend_reg_store_fpr(v27, 0.0L);
                            __frontend_reg_load_fpr(v27);
                            if ((v4 & 256) == 0) {
                                // 0x419cbf
                                __frontend_reg_store_fpr(v27, (float80_t)g570);
                                __frontend_reg_store_fpr(v27, -__frontend_reg_load_fpr(v27));
                                *(float64_t *)a2 = (float64_t)__frontend_reg_load_fpr(v27);
                                v3 = a1 & 30;
                            } else {
                                // 0x419ca7
                                *(int32_t *)(a2 + 4) = g575;
                                *(int32_t *)a2 = (int32_t)(float32_t)g574;
                                v3 = a1 & 30;
                            }
                            // break -> 0x419e45
                            break;
                        }
                        case 0: {
                            int3_t v28 = v2 - 1; // 0x419c5f
                            __frontend_reg_store_fpr(v28, 0.0L);
                            __frontend_reg_load_fpr(v28);
                            if ((v4 & 256) == 0) {
                                // 0x419c86
                                __frontend_reg_store_fpr(v28, (float80_t)g570);
                                __frontend_reg_store_fpr(v28, -__frontend_reg_load_fpr(v28));
                                *(float64_t *)a2 = (float64_t)__frontend_reg_load_fpr(v28);
                                v3 = a1 & 30;
                            } else {
                                // 0x419c6e
                                *(int32_t *)(a2 + 4) = g571;
                                *(int32_t *)a2 = (int32_t)(float32_t)g570;
                                v3 = a1 & 30;
                            }
                            // break -> 0x419e45
                            break;
                        }
                        default: {
                            // 0x419c39
                            v3 = a1 & 30;
                            // break -> 0x419e45
                            break;
                        }
                    }
                } else {
                    switch (v26) {
                        case 2048: {
                            int3_t v29 = v2 - 1; // 0x419cd1
                            __frontend_reg_store_fpr(v29, 0.0L);
                            __frontend_reg_load_fpr(v29);
                            if ((v4 & 256) == 0) {
                                // 0x419cf8
                                __frontend_reg_store_fpr(v29, (float80_t)g574);
                                __frontend_reg_store_fpr(v29, -__frontend_reg_load_fpr(v29));
                                *(float64_t *)a2 = (float64_t)__frontend_reg_load_fpr(v29);
                                v3 = a1 & 30;
                            } else {
                                // 0x419ce0
                                *(int32_t *)(a2 + 4) = g571;
                                *(int32_t *)a2 = (int32_t)(float32_t)g570;
                                v3 = a1 & 30;
                            }
                            // break -> 0x419e45
                            break;
                        }
                        case 3072: {
                            int3_t v30 = v2 - 1; // 0x419d0a
                            __frontend_reg_store_fpr(v30, 0.0L);
                            __frontend_reg_load_fpr(v30);
                            if ((v4 & 256) == 0) {
                                // 0x419d31
                                __frontend_reg_store_fpr(v30, (float80_t)g574);
                                __frontend_reg_store_fpr(v30, -__frontend_reg_load_fpr(v30));
                                *(float64_t *)a2 = (float64_t)__frontend_reg_load_fpr(v30);
                                v3 = a1 & 30;
                            } else {
                                // 0x419d19
                                *(int32_t *)(a2 + 4) = g575;
                                *(int32_t *)a2 = (int32_t)(float32_t)g574;
                                v3 = a1 & 30;
                            }
                            // break -> 0x419e45
                            break;
                        }
                        default: {
                            // 0x419c57
                            v3 = a1 & 30;
                            // break -> 0x419e45
                            break;
                        }
                    }
                }
                goto lab_0x419e45;
            }
        } else {
            // 0x419bf0
            function_419f30(4);
            v3 = a1 & 27;
            goto lab_0x419e45;
        }
    } else {
        // 0x419bcf
        function_419f30(1);
        v3 = a1 & 23;
        goto lab_0x419e45;
    }
  lab_0x419e45:
    // 0x419e45
    if ((a1 & 16) == 0) {
        // 0x419e61
        return v3 == 0;
    }
    // 0x419e4d
    int32_t v31; // bp-28, 0x419bb0
    int32_t v32 = &v31; // 0x419bba
    int32_t v33 = v3; // 0x419e52
    if ((*(char *)(v32 + 40) & 32) != 0) {
        // 0x419e54
        *(int32_t *)(v32 - 4) = 32;
        function_419f30((int32_t)&g1001);
        v33 = v3 & 15;
    }
    // 0x419e61
    return v33 == 0;
}

// Address range: 0x419e70 - 0x419e9a
int32_t function_419e70(int32_t result) {
    if (result == 1) {
        // 0x419e84
        g484 = 33;
        return 1;
    }
    if ((result & -2) == 2) {
        // 0x419e8f
        g484 = 34;
    }
    // 0x419e83
    return result;
}

// Address range: 0x419ea0 - 0x419ea3
int32_t function_419ea0(void) {
    // 0x419ea0
    return 0;
}

// Address range: 0x419eb0 - 0x419ec1
int32_t function_419eb0(int32_t a1, int32_t a2, int32_t a3) {
    // 0x419eb0
    __asm_wait();
    int32_t v1; // 0x419eb0
    return 0x10000 * v1 >> 16;
}

// Address range: 0x419ed0 - 0x419ee2
int32_t function_419ed0(void) {
    // 0x419ed0
    __asm_fnclex();
    int32_t v1; // 0x419ed0
    return 0x10000 * v1 >> 16;
}

// Address range: 0x419ef0 - 0x419f22
int32_t function_419ef0(int32_t a1, int32_t a2) {
    // 0x419ef0
    __asm_wait();
    int16_t result; // 0x419ef0
    return result;
}

// Address range: 0x419f30 - 0x419f8b
int32_t function_419f30(int32_t a1) {
    // 0x419f30
    int32_t v1; // 0x419f30
    if ((a1 & 1) != 0) {
        // 0x419f3c
        v1 = __asm_wait();
    }
    int32_t v2 = v1; // 0x419f4a
    if ((a1 & 8) != 0) {
        // 0x419f4c
        __asm_wait();
        __asm_wait();
        int32_t v3; // 0x419f30
        v2 = __asm_wait() & -0x10000 | v3 & 0xffff;
    }
    int32_t v4 = v2; // 0x419f60
    if ((a1 & 16) != 0) {
        // 0x419f62
        v4 = __asm_wait();
    }
    int32_t v5 = v4; // 0x419f70
    if ((a1 & 4) != 0) {
        // 0x419f72
        v5 = __asm_wait();
    }
    int32_t result = v5; // 0x419f7e
    if ((a1 & 32) != 0) {
        // 0x419f80
        result = __asm_wait();
    }
    // 0x419f87
    return result;
}

// Address range: 0x419f90 - 0x41a236
int32_t function_419f90(int32_t * a1, char * a2) {
    int32_t v1 = (int32_t)a2;
    int32_t v2 = (int32_t)a1;
    int16_t * v3 = (int16_t *)(v2 + 10); // 0x419f9a
    int16_t v4 = *v3; // 0x419f9a
    int16_t v5 = *(int16_t *)(v1 + 10); // 0x419fa5
    uint16_t v6 = v4 & 0x7fff; // 0x419fbf
    uint16_t v7 = v5 & 0x7fff; // 0x419fc4
    int32_t result; // 0x41a222
    if (v6 != 0x7fff != v7 != 0x7fff) {
        // 0x41a20c
        *(int32_t *)(v2 + 4) = 0;
        result = (v5 ^ v4) > 0xffff ? 0x7fff8000 : -0x8000;
        *a1 = 0;
        *(int32_t *)(v2 + 8) = result;
        return result;
    }
    // 0x419fec
    int32_t v8; // 0x419f90
    int32_t result2 = (v1 & -0x10000 | (int32_t)v7) + (v8 & -0x10000 | (int32_t)v6); // 0x419fce
    uint16_t v9 = (int16_t)result2; // 0x419fec
    if (v9 >= 0xbffe) {
        // 0x41a20c
        *(int32_t *)(v2 + 4) = 0;
        result = (v5 ^ v4) > -1 ? 0x7fff8000 : -0x8000;
        *a1 = 0;
        *(int32_t *)(v2 + 8) = result;
        return result;
    }
    if (v9 < 0x3fc0) {
        // 0x419ffc
        *(int32_t *)(v2 + 8) = 0;
        *(int32_t *)(v2 + 4) = 0;
        *a1 = 0;
        return result2;
    }
    if (v6 == 0) {
        // 0x41a011
        if ((*(int32_t *)(v2 + 8) & 0x7fffffff) == 0) {
            // 0x41a01f
            if (*(int32_t *)(v2 + 4) == 0) {
                // 0x41a025
                if (*a1 == 0) {
                    // 0x41a02a
                    *v3 = 0;
                    return result2;
                }
            }
        }
    }
    if (v7 == 0) {
        // 0x41a03f
        if ((*(int32_t *)(v1 + 8) & 0x7fffffff) == 0) {
            // 0x41a051
            if (*(int32_t *)(v1 + 4) == 0) {
                // 0x41a056
                if (*(int32_t *)a2 == 0) {
                    // 0x41a05a
                    *(int32_t *)(v2 + 8) = 0;
                    *(int32_t *)(v2 + 4) = 0;
                    *a1 = 0;
                    return 0;
                }
            }
        }
    }
    // 0x41a06a
    int32_t v10; // bp-44, 0x419f90
    int32_t v11 = &v10; // 0x419f9e
    int32_t * v12 = (int32_t *)(v11 + 32); // 0x41a074
    int32_t * v13 = (int32_t *)(v11 + 40); // 0x41a088
    int32_t * v14 = (int32_t *)(v11 + 36);
    int32_t v15 = v11 + 20;
    int32_t * v16 = (int32_t *)(v11 - 4);
    int32_t v17 = v11 + 24;
    int32_t v18 = *v12; // 0x41a074
    uint32_t v19 = 5 - v18; // 0x41a084
    *v13 = v19;
    int32_t v20; // 0x419f90
    int32_t v21; // 0x419f90
    int32_t v22; // 0x41a094
    uint16_t v23; // 0x41a09e
    uint16_t v24; // 0x41a0a4
    int32_t v25; // 0x41a0b1
    int32_t v26; // 0x41a0cc
    int16_t * v27; // 0x41a0c1
    if (v19 >= 1) {
        // 0x41a090
        v22 = *v14 + v15;
        v20 = 8;
        v21 = 2 * v18;
        v23 = *(int16_t *)(*(int32_t *)(v11 + 52) + v20);
        v24 = *(int16_t *)(v21 + v2);
        *v16 = v22;
        *(int32_t *)(v11 - 8) = (int32_t)v24 * (int32_t)v23;
        *(int32_t *)(v11 - 12) = *(int32_t *)v22;
        v25 = function_418760((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
        if (v25 != 0) {
            // 0x41a0bd
            v27 = (int16_t *)(*v14 + v17);
            *v27 = *v27 + 1;
        }
        // 0x41a0c6
        v26 = *v13 - 1;
        *v13 = v26;
        v20 -= 2;
        v21 += 2;
        while (v26 != 0) {
            // 0x41a098
            v23 = *(int16_t *)(*(int32_t *)(v11 + 52) + v20);
            v24 = *(int16_t *)(v21 + v2);
            *v16 = v22;
            *(int32_t *)(v11 - 8) = (int32_t)v24 * (int32_t)v23;
            *(int32_t *)(v11 - 12) = *(int32_t *)v22;
            v25 = function_418760((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
            if (v25 != 0) {
                // 0x41a0bd
                v27 = (int16_t *)(*v14 + v17);
                *v27 = *v27 + 1;
            }
            // 0x41a0c6
            v26 = *v13 - 1;
            *v13 = v26;
            v20 -= 2;
            v21 += 2;
        }
    }
    // 0x41a0d2
    *v14 = *v14 + 2;
    int32_t v28 = *v12 + 1; // 0x41a0d7
    *v12 = v28;
    while (v28 < 5) {
        // 0x41a074
        v18 = v28;
        v19 = 5 - v18;
        *v13 = v19;
        if (v19 >= 1) {
            // 0x41a090
            v22 = *v14 + v15;
            v20 = 8;
            v21 = 2 * v18;
            v23 = *(int16_t *)(*(int32_t *)(v11 + 52) + v20);
            v24 = *(int16_t *)(v21 + v2);
            *v16 = v22;
            *(int32_t *)(v11 - 8) = (int32_t)v24 * (int32_t)v23;
            *(int32_t *)(v11 - 12) = *(int32_t *)v22;
            v25 = function_418760((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
            if (v25 != 0) {
                // 0x41a0bd
                v27 = (int16_t *)(*v14 + v17);
                *v27 = *v27 + 1;
            }
            // 0x41a0c6
            v26 = *v13 - 1;
            *v13 = v26;
            v20 -= 2;
            v21 += 2;
            while (v26 != 0) {
                // 0x41a098
                v23 = *(int16_t *)(*(int32_t *)(v11 + 52) + v20);
                v24 = *(int16_t *)(v21 + v2);
                *v16 = v22;
                *(int32_t *)(v11 - 8) = (int32_t)v24 * (int32_t)v23;
                *(int32_t *)(v11 - 12) = *(int32_t *)v22;
                v25 = function_418760((int32_t)&g1001, (int32_t)&g1001, (int32_t)&g1001);
                if (v25 != 0) {
                    // 0x41a0bd
                    v27 = (int16_t *)(*v14 + v17);
                    *v27 = *v27 + 1;
                }
                // 0x41a0c6
                v26 = *v13 - 1;
                *v13 = v26;
                v20 -= 2;
                v21 += 2;
            }
        }
        // 0x41a0d2
        *v14 = *v14 + 2;
        v28 = *v12 + 1;
        *v12 = v28;
    }
    int16_t * v29 = (int16_t *)(v11 + 18); // 0x41a0e2
    int16_t v30 = *v29 - 0x3ffe; // 0x41a0e2
    *v29 = v30;
    int16_t v31 = v30; // 0x41a0ef
    if (v30 < 1) {
        goto lab_0x41a11e;
    } else {
        int32_t * v32 = (int32_t *)(v11 + 28); // 0x41a0f6
        int16_t v33 = v30; // 0x41a0fa
        if (*v32 > -1) {
            *v16 = v15;
            function_418800((int32_t)&g1001);
            int16_t v34 = *v29 - 1; // 0x41a106
            *v29 = v34;
            v33 = v34;
            while (v34 >= 0 == (v34 != 0)) {
                // 0x41a0f6
                v33 = v34;
                if (*v32 <= -1) {
                    // break -> 0x41a116
                    break;
                }
                *v16 = v15;
                function_418800((int32_t)&g1001);
                v34 = *v29 - 1;
                *v29 = v34;
                v33 = v34;
            }
        }
        // 0x41a116
        v31 = v33;
        if (v31 >= 0 == (v31 != 0)) {
            goto lab_0x41a163;
        } else {
            goto lab_0x41a11e;
        }
    }
  lab_0x41a11e:;
    int16_t v35 = v31 - 1; // 0x41a11e
    *v29 = v35;
    int32_t v36 = *(int32_t *)v15;
    int32_t v37 = v36; // 0x41a123
    if (v35 < 0) {
        // 0x41a125
        *v29 = 0;
        int32_t v38 = v36; // 0x41a136
        int16_t v39 = 1 - v31; // 0x41a136
        v38 += (int32_t)((*(int16_t *)v15 & 1) != 0);
        *v16 = v15;
        function_418840((int32_t)&g1001);
        v39--;
        v37 = v38;
        while (v39 != 0) {
            // 0x41a13b
            v38 += (int32_t)((*(int16_t *)v15 & 1) != 0);
            *v16 = v15;
            function_418840((int32_t)&g1001);
            v39--;
            v37 = v38;
        }
    }
    // 0x41a15a
    if (v37 != 0) {
        char * v40 = (char *)v15; // 0x41a15e
        *v40 = *v40 | 1;
    }
    goto lab_0x41a163;
  lab_0x41a163:;
    int16_t v41 = *(int16_t *)v15; // 0x41a168
    int16_t v42; // 0x419f90
    if (v41 > -1 || v41 == -0x8000) {
        // 0x41a1ad
        v42 = *v29;
        goto lab_0x41a1ad_2;
    } else {
        int32_t * v43 = (int32_t *)(v11 + 22); // 0x41a16f
        int32_t v44 = *v43; // 0x41a16f
        if (v44 != -1) {
            // 0x41a1a9
            *v43 = v44 + 1;
            // 0x41a1ad
            v42 = *v29;
            goto lab_0x41a1ad_2;
        } else {
            // 0x41a176
            *v43 = 0;
            int32_t * v45 = (int32_t *)(v11 + 26); // 0x41a17c
            int32_t v46 = *v45; // 0x41a17c
            if (v46 != -1) {
                // 0x41a1a3
                *v45 = v46 + 1;
                // 0x41a1ad
                v42 = *v29;
                goto lab_0x41a1ad_2;
            } else {
                // 0x41a183
                *v45 = 0;
                int16_t * v47 = (int16_t *)(v11 + 30); // 0x41a187
                int16_t v48 = *v47; // 0x41a187
                if (v48 != -1) {
                    // 0x41a19c
                    *v47 = v48 + 1;
                    // 0x41a1ad
                    v42 = *v29;
                    goto lab_0x41a1ad_2;
                } else {
                    // 0x41a190
                    *v47 = -0x8000;
                    int16_t v49 = *v29 + 1; // 0x41a195
                    *v29 = v49;
                    v42 = v49;
                    goto lab_0x41a1ad_2;
                }
            }
        }
    }
  lab_0x41a1ad_2:
    // 0x41a1ad
    if (v42 >= 0x7fff) {
        // 0x41a1b6
        *(int32_t *)(v2 + 4) = 0;
        int32_t result3 = *(int16_t *)(v11 + 16) == 0 ? 0x7fff8000 : -0x8000; // 0x41a1cc
        *a1 = 0;
        *(int32_t *)(v2 + 8) = result3;
        return result3;
    }
    // 0x41a1e0
    *(int16_t *)a1 = *(int16_t *)(v11 + 22);
    uint16_t result4 = *(int16_t *)(v11 + 16) | *v29; // 0x41a1f1
    *(int32_t *)(v2 + 2) = *(int32_t *)v17;
    *v3 = result4;
    *(int32_t *)(v2 + 6) = *(int32_t *)(v11 + 28);
    return result4;
}

// Address range: 0x41a240 - 0x41a2bb
int32_t function_41a240(int32_t a1, int32_t a2, int32_t a3) {
    if (a2 == 0) {
        // 0x41a2b4
        int32_t result; // 0x41a240
        return result;
    }
    if (a3 == 0) {
        // 0x41a267
        *(int16_t *)a1 = 0;
    }
    // 0x41a26c
    int32_t v1; // bp-24, 0x41a240
    int32_t v2 = &v1; // 0x41a245
    int32_t v3 = v2 + 12;
    int32_t * v4 = (int32_t *)(v2 + 14);
    int32_t v5 = a2 >= 0 ? (int32_t)&g578 : (int32_t)&g580; // 0x41a270
    int32_t v6 = a2 >= 0 ? a2 : -a2; // 0x41a275
    v5 += 84;
    int32_t v7 = v6 & 7; // 0x41a278
    int32_t result2 = 0; // 0x41a27d
    int32_t v8; // 0x41a240
    int32_t v9; // 0x41a282
    if (v7 != 0) {
        // 0x41a27f
        v9 = 12 * v7 + v5;
        v8 = v9;
        if (*(int16_t *)v9 <= 0xffff) {
            // 0x41a28c
            *(int32_t *)v3 = *(int32_t *)v9;
            *(int32_t *)(v2 + 16) = *(int32_t *)(v9 + 4);
            *(int32_t *)(v2 + 20) = *(int32_t *)(v9 + 8);
            *v4 = *v4 - 1;
            v8 = v3;
        }
        // 0x41a2a6
        *(int32_t *)(v2 - 4) = v8;
        *(int32_t *)(v2 - 8) = a1;
        result2 = function_419f90(&g1001, (char *)&g1001);
    }
    // 0x41a2b0
    v6 >>= 3;
    while (v6 != 0) {
        // 0x41a270
        v5 += 84;
        v7 = v6 & 7;
        result2 = 0;
        if (v7 != 0) {
            // 0x41a27f
            v9 = 12 * v7 + v5;
            v8 = v9;
            if (*(int16_t *)v9 <= 0xffff) {
                // 0x41a28c
                *(int32_t *)v3 = *(int32_t *)v9;
                *(int32_t *)(v2 + 16) = *(int32_t *)(v9 + 4);
                *(int32_t *)(v2 + 20) = *(int32_t *)(v9 + 8);
                *v4 = *v4 - 1;
                v8 = v3;
            }
            // 0x41a2a6
            *(int32_t *)(v2 - 4) = v8;
            *(int32_t *)(v2 - 8) = a1;
            result2 = function_419f90(&g1001, (char *)&g1001);
        }
        // 0x41a2b0
        v6 >>= 3;
    }
    // 0x41a2b4
    return result2;
}

// Address range: 0x41a2c0 - 0x41a340
int32_t function_41a2c0(uint32_t a1, int32_t a2) {
    // 0x41a2c0
    if ((int32_t)g987 <= a1) {
        // 0x41a32f
        g484 = 9;
        return -1;
    }
    int32_t v1 = *(int32_t *)((a1 / 8 & -4) + (int32_t)&g985); // 0x41a2d8
    char * v2 = (char *)(v1 + (8 * a1 & 248 | 4)); // 0x41a2e2
    unsigned char v3 = *v2; // 0x41a2e2
    if ((v3 & 1) == 0) {
        // 0x41a32f
        g484 = 9;
        return -1;
    }
    if (a2 == 0x8000) {
        // 0x41a30b
        *v2 = v3 & 127;
        return v3 > 255 ? 0x8000 : 0x4000;
    }
    if (a2 != 0x4000) {
        // 0x41a31e
        g484 = 22;
        return -1;
    }
    // 0x41a30b
    *v2 = v3 | -128;
    return v3 > -1 ? 0x8000 : 0x4000;
}

// Address range: 0x41a340 - 0x41a36f
int32_t function_41a340(int32_t result) {
    // 0x41a340
    int32_t v1; // 0x41a340
    int32_t v2 = &v1; // 0x41a346
    int32_t v3 = v2; // 0x41a34a
    int32_t v4; // 0x41a340
    if ((uint32_t)v4 < 0x1000) {
        // 0x41a360
        int32_t v5; // 0x41a340
        *(int32_t *)(-4 - v5 + v2) = result;
        return result;
    }
    v3 -= 0x1000;
    int32_t v6; // 0x41a340
    int32_t v7 = v6 - 0x1000; // 0x41a352
    while (v7 >= 0x1000) {
        // 0x41a34c
        v3 -= 0x1000;
        v7 -= 0x1000;
    }
    // 0x41a360
    *(int32_t *)(-4 - v7 + v3) = result;
    return result;
}

// Address range: 0x41a370 - 0x41a376
void _RtlUnwind_40_16(int32_t * TargetFrame, int32_t * TargetIp, struct _EXCEPTION_RECORD * ExceptionRecord, int32_t * ReturnValue) {
    // 0x41a370
    RtlUnwind(TargetFrame, TargetIp, ExceptionRecord, ReturnValue);
}

// Address range: 0x41a380 - 0x41a40c
int32_t function_41a380(int32_t a1, int32_t a2) {
    int32_t v1 = (int32_t)&g560 | 255; // 0x41a396
    int32_t v2 = a2; // 0x41a396
    int32_t v3 = a1; // 0x41a396
    if (g561 == 0) {
        int32_t v4; // 0x41a380
        while (true) {
            // 0x41a39c
            v4 = v1;
            if ((char)v1 == 0) {
                return 0x1000000 * v4 >> 24;
            }
            unsigned char v5 = *(char *)v2; // 0x41a3a0
            v2++;
            unsigned char v6 = *(char *)v3; // 0x41a3a3
            int32_t v7 = v6; // 0x41a3a3
            int32_t v8 = 256 * v7 | (int32_t)v5; // 0x41a3a3
            v3++;
            int32_t v9 = v8; // 0x41a3a8
            int32_t v10 = v2; // 0x41a3a8
            int32_t v11 = v3; // 0x41a3a8
            while (v5 == v6) {
                // 0x41a39c
                v4 = v9;
                if ((char)v9 == 0) {
                    return 0x1000000 * v4 >> 24;
                }
                // 0x41a3a0
                v5 = *(char *)v10;
                v2 = v10 + 1;
                v6 = *(char *)v11;
                v7 = v6;
                v8 = 256 * v7 | (int32_t)v5;
                v3 = v11 + 1;
                v9 = v8;
                v10 = v2;
                v11 = v3;
            }
            int32_t v12 = v8 + 191; // 0x41a3aa
            int32_t v13 = (char)v12 < 26 ? 32 : 0; // 0x41a3ae
            int32_t v14 = (v13 - (v13 | (int32_t)(v6 < 91)) & 32) + (v7 | 256); // 0x41a3c4
            unsigned char v15 = (char)v14;
            unsigned char v16 = (char)((256 * (v13 + v12) + 0x4100) / 256);
            v1 = v14 & 255;
            if (v15 != v16) {
                char v17 = v15 < v16; // 0x41a3ca
                unsigned char v18 = v17 + v15; // 0x41a3ca
                char v19 = v15 < v16; // 0x41a3ca
                bool v20 = v15 < v16 ? v19 - v17 > v15 | v18 != -1 : v18 > v15; // 0x41a3ca
                v4 = (char)!v20 + v19;
                return 0x1000000 * v4 >> 24;
            }
        }
      lab_0x41a3ce:
        // 0x41a407
        return 0x1000000 * v4 >> 24;
    }
    // 0x41a3dc
    int32_t v21; // bp-16, 0x41a380
    int32_t v22 = &v21; // 0x41a385
    int32_t v23 = a1; // 0x41a380
    int32_t v24 = a2; // 0x41a380
    unsigned char v25 = *(char *)v24; // 0x41a3e0
    int32_t v26 = v25; // 0x41a3e0
    unsigned char v27 = *(char *)v23; // 0x41a3e3
    int32_t v28 = v27; // 0x41a3e3
    uint32_t v29 = v26; // 0x41a3e8
    int32_t v30 = v28; // 0x41a3e8
    int32_t result; // 0x41a380
    unsigned char v31; // 0x41a380
    unsigned char v32; // 0x41a380
    int32_t v33; // 0x41a402
    uint32_t v34; // 0x41a402
    int32_t v35; // 0x41a402
    bool v36; // 0x41a402
    if (v25 != v27) {
        // 0x41a3ea
        *(int32_t *)(v22 - 4) = v26;
        *(int32_t *)(v22 - 8) = v28;
        v30 = function_415940((int32_t)&g1001);
        v29 = function_415940((int32_t)&g1001);
        v31 = (char)v30;
        v32 = (char)v29;
        if (v31 != v32) {
            // 0x41a402
            v33 = v31 < v32;
            v34 = v29 + v33;
            v35 = v31 < v32;
            v36 = v31 < v32 ? v29 < v35 - v33 | v34 != -1 : v29 < v34;
            result = (int32_t)!v36 + v35;
            return result;
        }
    }
    int32_t v37 = v29;
    v23++;
    v24++;
    result = v37;
    while ((char)v37 != 0) {
        // 0x41a3e0
        v25 = *(char *)v24;
        v26 = v37 & -256 | (int32_t)v25;
        v27 = *(char *)v23;
        v28 = v30 & -256 | (int32_t)v27;
        int32_t v38 = v26; // 0x41a3e8
        v30 = v28;
        if (v25 != v27) {
            // 0x41a3ea
            *(int32_t *)(v22 - 4) = v26;
            *(int32_t *)(v22 - 8) = v28;
            v30 = function_415940((int32_t)&g1001);
            v29 = function_415940((int32_t)&g1001);
            v31 = (char)v30;
            v32 = (char)v29;
            v38 = v29;
            if (v31 != v32) {
                // 0x41a402
                v33 = v31 < v32;
                v34 = v29 + v33;
                v35 = v31 < v32;
                v36 = v31 < v32 ? v29 < v35 - v33 | v34 != -1 : v29 < v34;
                result = (int32_t)!v36 + v35;
                return result;
            }
        }
        // 0x41a3dc
        v37 = v38;
        v23++;
        v24++;
        result = v37;
    }
  lab_0x41a407:
    // 0x41a407
    return result;
}

// Address range: 0x456000 - 0x45617c
int32_t function_456000(void) {
    int32_t v1 = g104 - g102; // 0x456008
    int64_t v2 = v1;
    g131 = v2;
    int32_t v3 = g106 - g102; // 0x456013
    int64_t v4 = v3 != 0 ? (int64_t)v3 : 1;
    g132 = v4;
    int64_t v5 = 0x7fffffff; // 0x456031
    if (v3 != v1) {
        // 0x45603a
        v5 = (int32_t)(0x100000000 * v2 / (v4 & 0xffffffff)) / 2;
    }
    // 0x456044
    g138 = v5;
    int32_t v6 = g103 - g101;
    g134 = v6;
    int32_t v7 = v5 * (int64_t)(2 * (g105 - g101)) / 0x100000000;
    g135 = v7;
    int32_t v8 = v5 * (int64_t)(2 * (g111 - g107)) / 0x100000000;
    g136 = v8;
    int32_t v9 = v5 * (int64_t)(2 * (g112 - g108)) / 0x100000000;
    g137 = v9;
    int32_t v10 = v7 - v6; // 0x456093
    int64_t v11 = v10 > 2 ? v10 : v10 & -8 | 4;
    g133 = v11;
    int32_t v12 = v8 - g109 + g107; // 0x4560b9
    int64_t v13 = v11 & 0xffffffff;
    int32_t v14 = (0x100000000 * (int64_t)(v12 >> 16) | (int64_t)(0x10000 * v12)) / v13; // 0x4560c4
    g113 = v14;
    int32_t v15 = -v14 >> 3; // 0x4560d1
    g115 = 0;
    g116 = v15;
    g117 = 2 * v15;
    g118 = 3 * v15;
    g119 = 4 * v15;
    g120 = 5 * v15;
    g121 = 6 * v15;
    g122 = 7 * v15;
    int32_t v16 = v9 - g110 + g108; // 0x45611e
    int32_t v17 = (0x100000000 * (int64_t)(v16 >> 16) | (int64_t)(0x10000 * v16)) / v13; // 0x456129
    g114 = v17;
    int32_t result = -v17 >> 3; // 0x456136
    g123 = 0;
    g124 = result;
    g125 = 2 * result;
    g126 = 3 * result;
    g127 = 4 * result;
    g128 = 5 * result;
    g129 = 6 * result;
    g130 = 7 * result;
    return result;
}

// Address range: 0x456180 - 0x4561bb
int32_t function_456180(void) {
    // 0x456180
    int32_t v1; // 0x456180
    int32_t v2 = *(int32_t *)(v1 + 4) >> 8; // 0x456184
    *(int32_t *)v1 = v2;
    int32_t v3 = (*(int32_t *)(v1 + 12) >> 8) - v2; // 0x45618f
    *(int32_t *)(v1 + 4) = v3;
    int32_t result = 0; // 0x456196
    if (v3 != 0) {
        // 0x456198
        function_456a50();
        result = function_4567a0();
    }
    // 0x4561b9
    return result;
}

// Address range: 0x4561c0 - 0x4561fb
int32_t function_4561c0(void) {
    // 0x4561c0
    int32_t v1; // 0x4561c0
    int32_t v2 = *(int32_t *)(v1 + 4) >> 8; // 0x4561c4
    *(int32_t *)v1 = v2;
    int32_t v3 = (*(int32_t *)(v1 + 12) >> 8) - v2; // 0x4561cf
    *(int32_t *)(v1 + 4) = v3;
    int32_t result = 0; // 0x4561d6
    if (v3 != 0) {
        // 0x4561d8
        function_456a50();
        result = function_456760();
    }
    // 0x4561f9
    return result;
}

// Address range: 0x456520 - 0x45663a
int32_t function_456520(void) {
    // 0x456520
    int32_t v1; // 0x456520
    int32_t * v2 = (int32_t *)(v1 + 12); // 0x456521
    if (g919 >= *v2) {
        // 0x45652c
        *(int32_t *)(v1 + 4) = 0;
        int32_t result = g921; // 0x456533
        *(int32_t *)v1 = result;
        // 0x456638
        return result;
    }
    int32_t * v3 = (int32_t *)(v1 + 4); // 0x45653f
    if (g924 <= *v3) {
        // 0x45654a
        *(int32_t *)(v1 + 4) = 0;
        *(int32_t *)v1 = g920;
        // 0x456638
        return g920;
    }
    // 0x45655d
    function_4567f0();
    int32_t v4 = v1 + 8; // 0x456564
    g143 = v4;
    int32_t v5 = *v3 >> 8; // 0x456570
    *(int32_t *)v1 = v5;
    int32_t v6 = (*v2 >> 8) - v5; // 0x45657b
    int32_t * v7 = (int32_t *)(v1 + 4); // 0x45657d
    *v7 = v6;
    int32_t result2 = 0; // 0x456582
    if (v6 != 0) {
        // 0x456584
        function_456a50();
        result2 = function_4567a0();
        g143 = v4;
    }
    // 0x4565ad
    if (g146 != 1) {
        // 0x456638
        return result2;
    }
    int32_t * v8 = (int32_t *)(v1 + 8); // 0x4565bb
    *(int32_t *)v1 = *v8;
    *v3 = *v2;
    int32_t * v9 = (int32_t *)(v1 + 24); // 0x4565c6
    *(int32_t *)(v1 + 16) = *v9;
    int32_t * v10 = (int32_t *)(v1 + 28); // 0x4565cc
    *(int32_t *)(v1 + 20) = *v10;
    *v8 = g147;
    *v2 = g148;
    *v9 = g149;
    *v10 = g150;
    function_456a09();
    int32_t v11 = (*v2 >> 8) - (*v3 >> 8); // 0x456603
    g151 = v11;
    int32_t result3 = 0; // 0x45660c
    if (v11 != 0) {
        // 0x45660e
        *v7 = *v7 + v11;
        function_456a50();
        result3 = function_4567a0();
    }
    // 0x456638
    return result3;
}

// Address range: 0x456640 - 0x45675a
int32_t function_456640(void) {
    // 0x456640
    int32_t v1; // 0x456640
    int32_t * v2 = (int32_t *)(v1 + 12); // 0x456641
    if (g919 >= *v2) {
        // 0x45664c
        *(int32_t *)(v1 + 4) = 0;
        int32_t result = g921; // 0x456653
        *(int32_t *)v1 = result;
        // 0x456758
        return result;
    }
    int32_t * v3 = (int32_t *)(v1 + 4); // 0x45665f
    if (g924 <= *v3) {
        // 0x45666a
        *(int32_t *)(v1 + 4) = 0;
        *(int32_t *)v1 = g920;
        // 0x456758
        return g920;
    }
    // 0x45667d
    function_4567f0();
    int32_t v4 = v1 + 8; // 0x456684
    g152 = v4;
    int32_t v5 = *v3 >> 8; // 0x456690
    *(int32_t *)v1 = v5;
    int32_t v6 = (*v2 >> 8) - v5; // 0x45669b
    int32_t * v7 = (int32_t *)(v1 + 4); // 0x45669d
    *v7 = v6;
    int32_t result2 = 0; // 0x4566a2
    if (v6 != 0) {
        // 0x4566a4
        function_456a50();
        result2 = function_456760();
        g152 = v4;
    }
    // 0x4566cd
    if (g146 != 1) {
        // 0x456758
        return result2;
    }
    int32_t * v8 = (int32_t *)(v1 + 8); // 0x4566db
    *(int32_t *)v1 = *v8;
    *v3 = *v2;
    int32_t * v9 = (int32_t *)(v1 + 24); // 0x4566e6
    *(int32_t *)(v1 + 16) = *v9;
    int32_t * v10 = (int32_t *)(v1 + 28); // 0x4566ec
    *(int32_t *)(v1 + 20) = *v10;
    *v8 = g147;
    *v2 = g148;
    *v9 = g149;
    *v10 = g150;
    function_456a09();
    int32_t v11 = (*v2 >> 8) - (*v3 >> 8); // 0x456723
    g153 = v11;
    int32_t result3 = 0; // 0x45672c
    if (v11 != 0) {
        // 0x45672e
        *v7 = *v7 + v11;
        function_456a50();
        result3 = function_456760();
    }
    // 0x456758
    return result3;
}

// Address range: 0x456760 - 0x456793
int32_t function_456760(void) {
    // 0x456760
    int32_t v1; // 0x456760
    *(int32_t *)(v1 + 4) = v1 >> 16;
    *(int32_t *)v1 = v1 >> 16;
    *(int32_t *)(v1 + 8) = v1 >> 16;
    int32_t result = v1 + (int32_t)g142; // 0x456790
    if ((int16_t)v1 > 1) {
        result = function_456760();
    }
    // 0x456792
    return result;
}

// Address range: 0x4567a0 - 0x4567e6
int32_t function_4567a0(void) {
    // 0x4567a0
    int32_t v1; // 0x4567a0
    int32_t v2 = v1 / 2048 & 28; // 0x4567a5
    int32_t v3 = *(int32_t *)(v2 + (int32_t)&g115); // 0x4567a8
    *(int32_t *)(v1 + 4) = v3 + v1 >> 8;
    int32_t v4 = *(int32_t *)(v2 + (int32_t)&g123); // 0x4567bc
    *(int32_t *)v1 = v4 + v1 >> 8;
    *(int32_t *)(v1 + 8) = v1 >> 16;
    int32_t result = v1 + (int32_t)g142; // 0x4567e3
    if (v1 > 1) {
        result = function_4567a0();
    }
    // 0x4567e5
    return result;
}

// Address range: 0x4567f0 - 0x456a09
int32_t function_4567f0(void) {
    // 0x4567f0
    int32_t v1; // 0x4567f0
    int32_t v2 = v1;
    int32_t * v3 = (int32_t *)(v2 + 4); // 0x4567f0
    int32_t v4 = *v3; // 0x4567f0
    int32_t * v5 = (int32_t *)(v2 + 12);
    int32_t v6 = v4; // 0x4567f9
    int32_t v7 = v4; // 0x4567f9
    if (g919 > v4) {
        int32_t v8 = *v5; // 0x4567fb
        int32_t v9 = *(int32_t *)(v2 + 28); // 0x456810
        int32_t * v10 = (int32_t *)(v2 + 20); // 0x456813
        int32_t v11 = *v10; // 0x456813
        int64_t v12 = (int32_t)(0x100000000 * (int64_t)(g919 - v4) / (int64_t)(v8 - v4)) / 2;
        *v10 = v11 + (int32_t)((int64_t)(2 * (v9 - v11)) * v12 / 0x100000000);
        int32_t v13 = *(int32_t *)(v2 + 24); // 0x45681d
        int32_t * v14 = (int32_t *)(v2 + 16); // 0x456820
        int32_t v15 = *v14; // 0x456820
        *v14 = v15 + (int32_t)((int64_t)(2 * (v13 - v15)) * v12 / 0x100000000);
        uint64_t v16 = (int64_t)(2 * (*(int32_t *)(v2 + 8) - v2)) * v12; // 0x456831
        *(int32_t *)v2 = v2 + (int32_t)(v16 / 0x100000000);
        v6 = g919;
        *v3 = v6;
        v7 = v16;
    }
    int32_t v17 = *v5; // 0x45683e
    int32_t * v18; // 0x4567f0
    int32_t v19; // 0x4567f0
    if (v17 > g924) {
        int32_t * v20 = (int32_t *)(v2 + 28); // 0x45685c
        int32_t v21 = *v20; // 0x45685c
        int32_t v22 = *(int32_t *)(v2 + 20); // 0x45685f
        int64_t v23 = (int32_t)(0x100000000 * (int64_t)(v17 - g924) / (int64_t)(v17 - v6)) / 2;
        *v20 = v21 - (int32_t)((int64_t)(2 * (v21 - v22)) * v23 / 0x100000000);
        int32_t * v24 = (int32_t *)(v2 + 24); // 0x456869
        int32_t v25 = *v24; // 0x456869
        int32_t v26 = *(int32_t *)(v2 + 16); // 0x45686c
        *v24 = v25 - (int32_t)((int64_t)(2 * (v25 - v26)) * v23 / 0x100000000);
        int32_t * v27 = (int32_t *)(v2 + 8);
        int32_t v28 = *v27; // 0x456876
        uint64_t v29 = (int64_t)(2 * (v28 - v2)) * v23; // 0x45687d
        *v27 = v28 - (int32_t)(v29 / 0x100000000);
        *v5 = g924;
        v18 = v27;
        v19 = v29;
    } else {
        // 0x45683e
        v18 = (int32_t *)(v2 + 8);
        v19 = v7;
    }
    // 0x45688b
    g146 = 0;
    int32_t result = v19; // 0x45689d
    if (g927 < v2) {
        int32_t v30 = *v18; // 0x4568a3
        int32_t * v31; // 0x4567f0
        int32_t * v32; // 0x4567f0
        if (v30 < g927) {
            // 0x4568e3
            g146 = 1;
            g147 = *v18;
            g148 = *v5;
            int32_t * v33 = (int32_t *)(v2 + 24); // 0x4568fd
            g149 = *v33;
            int32_t * v34 = (int32_t *)(v2 + 28); // 0x456905
            g150 = *v34;
            int32_t v35 = *v18; // 0x456915
            int32_t v36 = *v33; // 0x456924
            int32_t * v37 = (int32_t *)(v2 + 16);
            int64_t v38 = (int32_t)(0x100000000 * (int64_t)(g927 - v35) / (int64_t)(v2 - v35)) / 2;
            *v33 = v36 - (int32_t)((int64_t)(2 * (v36 - *v37)) * v38 / 0x100000000);
            int32_t v39 = *v34; // 0x456931
            int32_t * v40 = (int32_t *)(v2 + 20);
            *v34 = v39 - (int32_t)((int64_t)(2 * (v39 - *v40)) * v38 / 0x100000000);
            int32_t v41 = *v5; // 0x45693e
            *v5 = v41 - (int32_t)((int64_t)(2 * (v41 - *v3)) * v38 / 0x100000000);
            v32 = v40;
            v31 = v37;
        } else {
            int64_t v42 = v30 - g927; // 0x4568b9
            uint64_t v43 = (0x100000000 * g113 >> 32) * v42; // 0x4568b9
            int32_t * v44 = (int32_t *)(v2 + 24); // 0x4568c5
            *v44 = *v44 - ((int32_t)v43 / 0x10000 | 0x10000 * (int32_t)(v43 / 0x100000000));
            uint64_t v45 = (0x100000000 * g114 >> 32) * v42; // 0x4568ca
            int32_t * v46 = (int32_t *)(v2 + 28); // 0x4568d6
            *v46 = *v46 - ((int32_t)v45 / 0x10000 | 0x10000 * (int32_t)(v45 / 0x100000000));
            v32 = (int32_t *)(v2 + 20);
            v31 = (int32_t *)(v2 + 16);
        }
        // 0x456953
        *v18 = g927;
        int64_t v47 = v2 - g927; // 0x45695d
        uint64_t v48 = (0x100000000 * g113 >> 32) * v47; // 0x45695d
        int32_t v49 = *v31; // 0x456969
        *v31 = v49 - ((int32_t)v48 / 0x10000 | 0x10000 * (int32_t)(v48 / 0x100000000));
        uint64_t v50 = (0x100000000 * g114 >> 32) * v47; // 0x45696e
        int32_t v51 = *v32; // 0x45697a
        *v32 = v51 - ((int32_t)v50 / 0x10000 | 0x10000 * (int32_t)(v50 / 0x100000000));
        result = g927;
        *(int32_t *)v2 = result;
    }
    // 0x456984
    if (g927 >= *v18) {
        // 0x456a08
        return result;
    }
    // 0x45698f
    g146 = 1;
    g147 = *v18;
    g148 = *v5;
    int32_t * v52 = (int32_t *)(v2 + 24); // 0x4569a9
    g149 = *v52;
    int32_t * v53 = (int32_t *)(v2 + 28); // 0x4569b1
    g150 = *v53;
    int32_t v54 = *v18; // 0x4569b9
    uint32_t v55 = v54 - g927; // 0x4569be
    uint32_t v56 = v54 - v2; // 0x4569c4
    int64_t v57 = 0x7fffffff; // 0x4569ca
    if (v55 != v56) {
        // 0x4569d3
        v57 = (int32_t)(0x100000000 * (int64_t)v55 / (int64_t)v56) / 2;
    }
    int32_t v58 = *v52; // 0x4569d9
    int32_t v59 = *(int32_t *)(v2 + 16); // 0x4569dc
    *v52 = v58 - (int32_t)(v57 * (int64_t)(2 * (v58 - v59)) / 0x100000000);
    int32_t v60 = *v53; // 0x4569e6
    int32_t v61 = *(int32_t *)(v2 + 20); // 0x4569e9
    *v53 = v60 - (int32_t)(v57 * (int64_t)(2 * (v60 - v61)) / 0x100000000);
    int32_t v62 = *v5; // 0x4569f3
    int32_t v63 = *v3; // 0x4569f6
    *v5 = v62 - (int32_t)(v57 * (int64_t)(2 * (v62 - v63)) / 0x100000000);
    *v18 = g927;
    // 0x456a08
    return g927;
}

// Address range: 0x456a09 - 0x456a48
int32_t function_456a09(void) {
    // 0x456a09
    int32_t v1; // 0x456a09
    int32_t * v2 = (int32_t *)(v1 + 8); // 0x456a09
    int32_t v3 = *v2; // 0x456a09
    int32_t result = v3; // 0x456a12
    if (v3 > g927) {
        int64_t v4 = v3 - g927; // 0x456a1f
        uint64_t v5 = (0x100000000 * g113 >> 32) * v4; // 0x456a1f
        int32_t * v6 = (int32_t *)(v1 + 24); // 0x456a2b
        *v6 = *v6 - ((int32_t)v5 / 0x10000 | 0x10000 * (int32_t)(v5 / 0x100000000));
        uint64_t v7 = (0x100000000 * g114 >> 32) * v4; // 0x456a30
        int32_t * v8 = (int32_t *)(v1 + 28); // 0x456a3c
        *v8 = *v8 - ((int32_t)v7 / 0x10000 | 0x10000 * (int32_t)(v7 / 0x100000000));
        result = g927;
        *v2 = result;
    }
    // 0x456a47
    return result;
}

// Address range: 0x456a50 - 0x456b17
int32_t function_456a50(void) {
    // 0x456a50
    int32_t v1; // 0x456a50
    int32_t * v2 = (int32_t *)(v1 + 4); // 0x456a53
    uint32_t v3 = *(int32_t *)(v1 + 12) - *v2; // 0x456a53
    int32_t * v4 = (int32_t *)(v1 + 8);
    int32_t v5 = v3; // 0x456a59
    if (v3 < 65) {
        int32_t v6 = *v4 - v1; // 0x456a5e
        v5 = 65;
        if ((v6 >= 0 == (v6 != 0) ? v6 : -v6) >= 0x10001) {
            // 0x456a75
            v5 = v3 > 3 ? v3 : 3;
        }
    }
    int32_t * v7 = (int32_t *)(v1 + 20); // 0x456a82
    int32_t v8 = *(int32_t *)(v1 + 28) - *v7; // 0x456a82
    int64_t v9 = v5; // 0x456a8d
    int64_t v10 = 0x100000000 * (0x100000000 * (int64_t)(v8 >> 31) | (int64_t)(0x10000 * v8)) / v9 >> 32;
    g142 = v10;
    int32_t * v11 = (int32_t *)(v1 + 16); // 0x456a97
    int32_t v12 = *(int32_t *)(v1 + 24) - *v11; // 0x456a97
    int64_t v13 = 0x100000000 * (0x100000000 * (int64_t)(v12 >> 31) | (int64_t)(0x10000 * v12)) / v9 >> 32;
    g141 = v13;
    int32_t v14 = *v4 - v1; // 0x456aac
    int32_t v15 = (0x100000000 * (int64_t)(v14 >> 16) | (int64_t)(0x10000 * v14)) / v9;
    g145 = v15;
    int32_t v16 = 256 - (*v2 & 255); // 0x456aca
    g139 = (v16 * (int32_t)v13 >> 8) + 256 * *v11;
    g140 = (v16 * (int32_t)v10 >> 8) + 256 * *v7;
    int32_t result = v15 >> 8; // 0x456b08
    g144 = v16 * result + 256 * v1;
    return result;
}

// Address range: 0x456b20 - 0x456c64
int32_t function_456b20(void) {
    uint32_t v1 = g434 - g432; // 0x456b36
    uint32_t v2 = g436 - g432; // 0x456b38
    int64_t v3 = 0x7fffffff; // 0x456b3c
    if (v2 != v1) {
        // 0x456b45
        v3 = (int32_t)(0x100000000 * (int64_t)v1 / (int64_t)v2) / 2;
    }
    int32_t v4 = g431; // 0x456b50
    int32_t v5 = v4 - g433 + (int32_t)(v3 * (int64_t)(2 * (g435 - v4)) / 0x100000000); // 0x456b5d
    int64_t v6 = v5 > 3 ? v5 : v5 & -8 | 4;
    g448 = v6;
    int32_t v7 = v3 * (int64_t)(2 * (g442 - g438)) / 0x100000000;
    int32_t v8 = g437; // 0x456b84
    g465 = v7;
    int32_t v9 = (int32_t)(v3 * (int64_t)(2 * (g441 - v8)) / 0x100000000) - g439 + v8; // 0x456b9b
    int64_t v10 = v6 & 0xffffffff;
    int32_t v11 = (0x100000000 * (int64_t)(v9 >> 16) | (int64_t)(0x10000 * v9)) / v10; // 0x456bab
    g446 = v11;
    int32_t v12 = -v11; // 0x456bb2
    int32_t v13 = v12 >> 3; // 0x456bb6
    g450 = v13;
    g451 = 2 * v13;
    g452 = 3 * v13;
    g453 = 4 * v13;
    g454 = 5 * v13;
    g455 = 6 * v13;
    g456 = 7 * v13;
    int32_t v14 = v7 - g440 + g438; // 0x456bf9
    int32_t v15 = (0x100000000 * (int64_t)(v14 >> 16) | (int64_t)(0x10000 * v14)) / v10; // 0x456c04
    g447 = v15;
    int32_t v16 = -v15; // 0x456c0f
    g443 = v12 / 0x10000;
    g444 = v16 / 256 & 0xffff | 0x10000 * v12;
    int32_t result = v16 >> 3; // 0x456c28
    g458 = result;
    g459 = 2 * result;
    g460 = 3 * result;
    g461 = 4 * result;
    g462 = 5 * result;
    g463 = 6 * result;
    g464 = 7 * result;
    return result;
}

// Address range: 0x456c70 - 0x456cab
int32_t function_456c70(void) {
    // 0x456c70
    int32_t v1; // 0x456c70
    int32_t v2 = *(int32_t *)(v1 + 4) >> 8; // 0x456c74
    *(int32_t *)v1 = v2;
    int32_t v3 = (*(int32_t *)(v1 + 12) >> 8) - v2; // 0x456c7f
    *(int32_t *)(v1 + 4) = v3;
    int32_t result = 0; // 0x456c86
    if (v3 != 0) {
        // 0x456c88
        function_457210();
        result = function_456f60();
    }
    // 0x456ca9
    return result;
}

// Address range: 0x456cb0 - 0x456ce0
int32_t function_456cb0(void) {
    // 0x456cb0
    int32_t v1; // 0x456cb0
    int32_t v2 = *(int32_t *)(v1 + 4) >> 8; // 0x456cb4
    *(int32_t *)v1 = v2;
    int32_t v3 = (*(int32_t *)(v1 + 12) >> 8) - v2; // 0x456cbf
    *(int32_t *)(v1 + 4) = v3;
    int32_t result = 0; // 0x456cc6
    if (v3 != 0) {
        // 0x456cc8
        function_457440();
        result = function_456ef0();
    }
    // 0x456cde
    return result;
}

// Address range: 0x456ce0 - 0x456dfc
int32_t function_456ce0(void) {
    // 0x456ce0
    int32_t v1; // 0x456ce0
    int32_t * v2 = (int32_t *)(v1 + 12); // 0x456ce1
    if (g202 >= *v2) {
        // 0x456cec
        *(int32_t *)(v1 + 4) = 0;
        *(int32_t *)v1 = g194;
        // 0x456dfa
        return g194;
    }
    int32_t * v3 = (int32_t *)(v1 + 4); // 0x456cff
    if (g204 <= *v3) {
        // 0x456d0a
        *(int32_t *)(v1 + 4) = 0;
        *(int32_t *)v1 = g196;
        // 0x456dfa
        return g196;
    }
    // 0x456d1d
    function_456fb0();
    int32_t v4 = v1 + 8; // 0x456d24
    g470 = v4;
    int32_t v5 = *v3 >> 8; // 0x456d30
    *(int32_t *)v1 = v5;
    int32_t v6 = (*v2 >> 8) - v5; // 0x456d3b
    int32_t * v7 = (int32_t *)(v1 + 4); // 0x456d3d
    *v7 = v6;
    int32_t result = 0; // 0x456d42
    if (v6 != 0) {
        // 0x456d44
        function_457210();
        result = function_456f60();
        g470 = v4;
    }
    // 0x456d6d
    if (g473 != 1) {
        // 0x456dfa
        return result;
    }
    int32_t * v8 = (int32_t *)(v1 + 8); // 0x456d7b
    *(int32_t *)v1 = *v8;
    *v3 = *v2;
    int32_t * v9 = (int32_t *)(v1 + 24); // 0x456d86
    int32_t * v10 = (int32_t *)(v1 + 28); // 0x456d89
    *(int32_t *)(v1 + 16) = *v9;
    *(int32_t *)(v1 + 20) = *v10;
    *v8 = g474;
    *v2 = g475;
    *v9 = g476;
    *v10 = g477;
    function_4571cb();
    int32_t v11 = (*v2 >> 8) - (*v3 >> 8); // 0x456dc5
    g478 = v11;
    int32_t result2 = 0; // 0x456dce
    if (v11 != 0) {
        // 0x456dd0
        *v7 = *v7 + v11;
        function_457210();
        result2 = function_456f60();
    }
    // 0x456dfa
    return result2;
}

// Address range: 0x456e00 - 0x456ee5
int32_t function_456e00(void) {
    // 0x456e00
    int32_t v1; // 0x456e00
    int32_t * v2 = (int32_t *)(v1 + 12); // 0x456e01
    if (g202 >= *v2) {
        // 0x456e0c
        *(int32_t *)(v1 + 4) = 0;
        *(int32_t *)v1 = g194;
        // 0x456ee3
        return g194;
    }
    int32_t * v3 = (int32_t *)(v1 + 4); // 0x456e1f
    if (g204 <= *v3) {
        // 0x456e2a
        *(int32_t *)(v1 + 4) = 0;
        *(int32_t *)v1 = g196;
        // 0x456ee3
        return g196;
    }
    // 0x456e3d
    function_4572e0();
    int32_t v4 = v1 + 8; // 0x456e44
    g479 = v4;
    int32_t v5 = *v3 >> 8; // 0x456e50
    *(int32_t *)v1 = v5;
    int32_t v6 = (*v2 >> 8) - v5; // 0x456e5b
    int32_t * v7 = (int32_t *)(v1 + 4); // 0x456e5d
    *v7 = v6;
    int32_t result = 0; // 0x456e62
    if (v6 != 0) {
        // 0x456e64
        function_457440();
        result = function_456f20();
        g479 = v4;
    }
    // 0x456e82
    if (g473 != 1) {
        // 0x456ee3
        return result;
    }
    int32_t * v8 = (int32_t *)(v1 + 8); // 0x456e8c
    *(int32_t *)v1 = *v8;
    *v3 = *v2;
    *v8 = g474;
    *v2 = g475;
    function_45741a();
    int32_t v9 = (*v2 >> 8) - (*v3 >> 8); // 0x456eb9
    g480 = v9;
    int32_t result2 = 0; // 0x456ec2
    if (v9 != 0) {
        // 0x456ec4
        *v7 = *v7 + v9;
        function_457440();
        result2 = function_456f20();
    }
    // 0x456ee3
    return result2;
}

// Address range: 0x456ef0 - 0x456f13
int32_t function_456ef0(void) {
    int32_t result = g472 >> 16; // 0x456f00
    int32_t v1; // 0x456ef0
    int32_t v2 = v1 >> 16; // 0x456f03
    uint32_t v3 = 0x10000 * v1;
    int32_t v4; // 0x456ef0
    uint32_t v5 = v4;
    int32_t v6; // 0x456ef0
    *(int32_t *)v6 = v2;
    int32_t v7 = v3 + 0x10000 * g472; // 0x456f08
    v4 = v5 - 1;
    v2 = v2 + result + (int32_t)(v7 < v3);
    v6 += 4;
    while (v5 > 1) {
        // 0x456f06
        v3 = v7;
        v5 = v4;
        *(int32_t *)v6 = v2;
        v7 = v3 + 0x10000 * g472;
        v4 = v5 - 1;
        v2 = v2 + result + (int32_t)(v7 < v3);
        v6 += 4;
    }
    // 0x456f12
    return result;
}

// Address range: 0x456f20 - 0x456f5a
int32_t function_456f20(void) {
    int32_t v1 = 0x10000 * g472; // 0x456f2d
    int32_t result = g472 >> 16; // 0x456f30
    int32_t v2; // 0x456f20
    int32_t v3 = v2 >> 16; // 0x456f36
    int32_t v4 = 0x10000 * v2; // 0x456f36
    while (true) {
        uint32_t v5 = v4;
        int32_t v6 = v3;
        int32_t v7; // 0x456f20
        uint32_t v8 = v7;
        int32_t v9; // 0x456f20
        int32_t * v10 = (int32_t *)v9;
        if (v6 - g193 < 0) {
            // 0x456f4d
            *v10 = g193;
            int32_t v11 = v5 + v1; // 0x456f4f
            v3 = v6 + result + (int32_t)(v11 < v5);
            v4 = v11;
            if (v8 <= 1) {
                // break -> 0x456f4c
                break;
            }
        } else {
            // 0x456f40
            *v10 = v6;
            int32_t v12 = v5 + v1; // 0x456f42
            v3 = v6 + result + (int32_t)(v12 < v5);
            v4 = v12;
            if (v8 <= 1) {
                // break -> 0x456f4c
                break;
            }
        }
        // 0x456f3c
        v7 = v8 - 1;
        v9 += 4;
    }
    // 0x456f4c
    return result;
}

// Address range: 0x456f60 - 0x456fac
int32_t function_456f60(void) {
    int32_t v1; // 0x456f60
    uint32_t v2 = v1;
    int32_t v3; // 0x456f60
    int32_t v4 = v3 / 2048 & 28;
    int32_t v5 = *(int32_t *)(v4 + (int32_t)&g449); // 0x456f68
    int32_t v6 = *(int32_t *)(v4 + (int32_t)&g457); // 0x456f6e
    int32_t v7; // 0x456f60
    int32_t v8; // 0x456f60
    *(int32_t *)(v7 + 4) = v5 + v8;
    int32_t v9; // 0x456f60
    *(int32_t *)v7 = v6 + v9;
    *(int32_t *)(v7 + 8) = v3 >> 16;
    int32_t result = v9 + (int32_t)g469; // 0x456fa0
    v1 = v2 - 1;
    v3 += g472;
    v7 += 12;
    v8 += (int32_t)g468;
    while (v2 > 1) {
        // 0x456f68
        v2 = v1;
        v4 = v3 / 2048 & 28;
        v5 = *(int32_t *)(v4 + (int32_t)&g449);
        v6 = *(int32_t *)(v4 + (int32_t)&g457);
        *(int32_t *)(v7 + 4) = v5 + v8;
        *(int32_t *)v7 = v6 + result;
        *(int32_t *)(v7 + 8) = v3 >> 16;
        result += (int32_t)g469;
        v1 = v2 - 1;
        v3 += g472;
        v7 += 12;
        v8 += (int32_t)g468;
    }
    // 0x456fab
    return result;
}

// Address range: 0x456fb0 - 0x4571cb
int32_t function_456fb0(void) {
    // 0x456fb0
    int32_t v1; // 0x456fb0
    int32_t v2 = v1;
    int32_t * v3 = (int32_t *)(v2 + 4); // 0x456fb0
    int32_t v4 = *v3; // 0x456fb0
    int32_t * v5 = (int32_t *)(v2 + 12);
    int32_t v6 = v4; // 0x456fb9
    int32_t v7 = v4; // 0x456fb9
    if (g202 > v4) {
        int32_t v8 = *v5; // 0x456fbb
        int32_t v9 = *(int32_t *)(v2 + 28); // 0x456fd0
        int32_t * v10 = (int32_t *)(v2 + 20); // 0x456fd3
        int32_t v11 = *v10; // 0x456fd3
        int64_t v12 = (int32_t)(0x100000000 * (int64_t)(g202 - v4) / (int64_t)(v8 - v4)) / 2;
        *v10 = v11 + (int32_t)((int64_t)(2 * (v9 - v11)) * v12 / 0x100000000);
        int32_t v13 = *(int32_t *)(v2 + 24); // 0x456fdd
        int32_t * v14 = (int32_t *)(v2 + 16); // 0x456fe0
        int32_t v15 = *v14; // 0x456fe0
        *v14 = v15 + (int32_t)((int64_t)(2 * (v13 - v15)) * v12 / 0x100000000);
        uint64_t v16 = (int64_t)(2 * (*(int32_t *)(v2 + 8) - v2)) * v12; // 0x456ff1
        *(int32_t *)v2 = v2 + (int32_t)(v16 / 0x100000000);
        v6 = g202;
        *v3 = v6;
        v7 = v16;
    }
    int32_t v17 = *v5; // 0x456ffe
    int32_t * v18; // 0x456fb0
    int32_t v19; // 0x456fb0
    if (v17 > g204) {
        int32_t * v20 = (int32_t *)(v2 + 28); // 0x45701c
        int32_t v21 = *v20; // 0x45701c
        int32_t v22 = *(int32_t *)(v2 + 20); // 0x45701f
        int64_t v23 = (int32_t)(0x100000000 * (int64_t)(v17 - g204) / (int64_t)(v17 - v6)) / 2;
        *v20 = v21 - (int32_t)((int64_t)(2 * (v21 - v22)) * v23 / 0x100000000);
        int32_t * v24 = (int32_t *)(v2 + 24); // 0x457029
        int32_t v25 = *v24; // 0x457029
        int32_t v26 = *(int32_t *)(v2 + 16); // 0x45702c
        *v24 = v25 - (int32_t)((int64_t)(2 * (v25 - v26)) * v23 / 0x100000000);
        int32_t * v27 = (int32_t *)(v2 + 8);
        int32_t v28 = *v27; // 0x457036
        uint64_t v29 = (int64_t)(2 * (v28 - v2)) * v23; // 0x45703d
        *v27 = v28 - (int32_t)(v29 / 0x100000000);
        *v5 = g204;
        v18 = v27;
        v19 = v29;
    } else {
        // 0x456ffe
        v18 = (int32_t *)(v2 + 8);
        v19 = v7;
    }
    // 0x45704b
    g473 = 0;
    int32_t result = v19; // 0x45705d
    if (g203 < v2) {
        int32_t v30 = *v18; // 0x457063
        int32_t * v31; // 0x456fb0
        int32_t * v32; // 0x456fb0
        if (v30 < g203) {
            // 0x4570a3
            g473 = 1;
            g474 = *v18;
            g475 = *v5;
            int32_t * v33 = (int32_t *)(v2 + 24); // 0x4570bd
            g476 = *v33;
            int32_t * v34 = (int32_t *)(v2 + 28); // 0x4570c5
            g477 = *v34;
            int32_t v35 = *v18; // 0x4570d5
            int32_t v36 = *v33; // 0x4570e4
            int32_t * v37 = (int32_t *)(v2 + 16);
            int64_t v38 = (int32_t)(0x100000000 * (int64_t)(g203 - v35) / (int64_t)(v2 - v35)) / 2;
            *v33 = v36 - (int32_t)((int64_t)(2 * (v36 - *v37)) * v38 / 0x100000000);
            int32_t v39 = *v34; // 0x4570f1
            int32_t * v40 = (int32_t *)(v2 + 20);
            *v34 = v39 - (int32_t)((int64_t)(2 * (v39 - *v40)) * v38 / 0x100000000);
            int32_t v41 = *v5; // 0x4570fe
            *v5 = v41 - (int32_t)((int64_t)(2 * (v41 - *v3)) * v38 / 0x100000000);
            v32 = v40;
            v31 = v37;
        } else {
            int64_t v42 = v30 - g203; // 0x457079
            uint64_t v43 = (0x100000000 * g446 >> 32) * v42; // 0x457079
            int32_t * v44 = (int32_t *)(v2 + 24); // 0x457085
            *v44 = *v44 - ((int32_t)v43 / 0x10000 | 0x10000 * (int32_t)(v43 / 0x100000000));
            uint64_t v45 = (0x100000000 * g447 >> 32) * v42; // 0x45708a
            int32_t * v46 = (int32_t *)(v2 + 28); // 0x457096
            *v46 = *v46 - ((int32_t)v45 / 0x10000 | 0x10000 * (int32_t)(v45 / 0x100000000));
            v32 = (int32_t *)(v2 + 20);
            v31 = (int32_t *)(v2 + 16);
        }
        // 0x457113
        *v18 = g203;
        int64_t v47 = v2 - g203; // 0x45711d
        uint64_t v48 = (0x100000000 * g446 >> 32) * v47; // 0x45711d
        int32_t v49 = *v31; // 0x457129
        *v31 = v49 - ((int32_t)v48 / 0x10000 | 0x10000 * (int32_t)(v48 / 0x100000000));
        uint64_t v50 = (0x100000000 * g447 >> 32) * v47; // 0x45712e
        int32_t v51 = *v32; // 0x45713a
        *v32 = v51 - ((int32_t)v50 / 0x10000 | 0x10000 * (int32_t)(v50 / 0x100000000));
        result = g203;
        *(int32_t *)v2 = result;
    }
    // 0x457144
    if (g203 >= *v18) {
        // 0x4571ca
        return result;
    }
    // 0x45714f
    g473 = 1;
    g474 = *v18;
    g475 = *v5;
    int32_t * v52 = (int32_t *)(v2 + 24); // 0x45716a
    int32_t * v53 = (int32_t *)(v2 + 28); // 0x45716d
    g476 = *v52;
    g477 = *v53;
    int32_t v54 = *v18; // 0x45717b
    uint32_t v55 = v54 - g203; // 0x457180
    uint32_t v56 = v54 - v2; // 0x457186
    int64_t v57 = 0x7fffffff; // 0x45718c
    if (v55 != v56) {
        // 0x457195
        v57 = (int32_t)(0x100000000 * (int64_t)v55 / (int64_t)v56) / 2;
    }
    int32_t v58 = *v52; // 0x45719b
    int32_t v59 = *(int32_t *)(v2 + 16); // 0x45719e
    *v52 = v58 - (int32_t)(v57 * (int64_t)(2 * (v58 - v59)) / 0x100000000);
    int32_t v60 = *v53; // 0x4571a8
    int32_t v61 = *(int32_t *)(v2 + 20); // 0x4571ab
    *v53 = v60 - (int32_t)(v57 * (int64_t)(2 * (v60 - v61)) / 0x100000000);
    int32_t v62 = *v5; // 0x4571b5
    int32_t v63 = *v3; // 0x4571b8
    *v5 = v62 - (int32_t)(v57 * (int64_t)(2 * (v62 - v63)) / 0x100000000);
    *v18 = g203;
    // 0x4571ca
    return g203;
}

// Address range: 0x4571cb - 0x45720a
int32_t function_4571cb(void) {
    // 0x4571cb
    int32_t v1; // 0x4571cb
    int32_t * v2 = (int32_t *)(v1 + 8); // 0x4571cb
    int32_t v3 = *v2; // 0x4571cb
    int32_t result = v3; // 0x4571d4
    if (v3 > g203) {
        int64_t v4 = v3 - g203; // 0x4571e1
        uint64_t v5 = (0x100000000 * g446 >> 32) * v4; // 0x4571e1
        int32_t * v6 = (int32_t *)(v1 + 24); // 0x4571ed
        *v6 = *v6 - ((int32_t)v5 / 0x10000 | 0x10000 * (int32_t)(v5 / 0x100000000));
        uint64_t v7 = (0x100000000 * g447 >> 32) * v4; // 0x4571f2
        int32_t * v8 = (int32_t *)(v1 + 28); // 0x4571fe
        *v8 = *v8 - ((int32_t)v7 / 0x10000 | 0x10000 * (int32_t)(v7 / 0x100000000));
        result = g203;
        *v2 = result;
    }
    // 0x457209
    return result;
}

// Address range: 0x457210 - 0x4572df
int32_t function_457210(void) {
    // 0x457210
    int32_t v1; // 0x457210
    int32_t * v2 = (int32_t *)(v1 + 4); // 0x457213
    uint32_t v3 = *(int32_t *)(v1 + 12) - *v2; // 0x457216
    int32_t * v4 = (int32_t *)(v1 + 8);
    int32_t v5 = v3; // 0x45721b
    if (v3 < 65) {
        int32_t v6 = *v4 - v1; // 0x457220
        v5 = 65;
        if ((v6 >= 0 == (v6 != 0) ? v6 : -v6) >= 0x10001) {
            // 0x457237
            v5 = v3 > 3 ? v3 : 3;
        }
    }
    int32_t * v7 = (int32_t *)(v1 + 20); // 0x457244
    int32_t v8 = *(int32_t *)(v1 + 28) - *v7; // 0x457247
    int64_t v9 = v5; // 0x457251
    int64_t v10 = 0x100000000 * (0x100000000 * (int64_t)(v8 >> 31) | (int64_t)(0x10000 * v8)) / v9 >> 32;
    g469 = v10;
    int32_t * v11 = (int32_t *)(v1 + 16); // 0x457258
    int32_t v12 = *(int32_t *)(v1 + 24) - *v11; // 0x45725e
    int64_t v13 = 0x100000000 * (0x100000000 * (int64_t)(v12 >> 31) | (int64_t)(0x10000 * v12)) / v9 >> 32;
    g468 = v13;
    int32_t v14 = *v4 - v1; // 0x457274
    int32_t v15 = (0x100000000 * (int64_t)(v14 >> 16) | (int64_t)(0x10000 * v14)) / v9;
    g472 = v15;
    int32_t v16 = 256 - (*v2 & 255); // 0x457292
    g466 = (v16 * (int32_t)v13 >> 8) + 256 * *v11;
    g467 = (v16 * (int32_t)v10 >> 8) + 256 * *v7;
    int32_t result = v15 >> 8; // 0x4572d0
    g471 = v16 * result + 256 * v1;
    return result;
}

// Address range: 0x4572e0 - 0x45741a
int32_t function_4572e0(void) {
    // 0x4572e0
    int32_t v1; // 0x4572e0
    int32_t v2 = v1;
    int32_t * v3 = (int32_t *)(v2 + 4); // 0x4572e0
    int32_t v4 = *v3; // 0x4572e0
    int32_t * v5 = (int32_t *)(v2 + 12);
    int32_t v6 = v4; // 0x4572e9
    int32_t v7 = v4; // 0x4572e9
    if (g202 > v4) {
        int32_t v8 = *v5; // 0x4572eb
        int32_t v9 = *(int32_t *)(v2 + 8); // 0x457300
        uint64_t v10 = (int64_t)(2 * (v9 - v2)) * (int64_t)((int32_t)(0x100000000 * (int64_t)(g202 - v4) / (int64_t)(v8 - v4)) / 2); // 0x457307
        *(int32_t *)v2 = v2 + (int32_t)(v10 / 0x100000000);
        v6 = g202;
        *v3 = v6;
        v7 = v10;
    }
    int32_t v11 = *v5; // 0x457314
    int32_t * v12; // 0x4572e0
    int32_t v13; // 0x4572e0
    if (v11 > g204) {
        int32_t * v14 = (int32_t *)(v2 + 8);
        int32_t v15 = *v14; // 0x457332
        uint64_t v16 = (int64_t)(2 * (v15 - v2)) * (int64_t)((int32_t)(0x100000000 * (int64_t)(v11 - g204) / (int64_t)(v11 - v6)) / 2); // 0x457339
        *v14 = v15 - (int32_t)(v16 / 0x100000000);
        *v5 = g204;
        v12 = v14;
        v13 = v16;
    } else {
        // 0x457314
        v12 = (int32_t *)(v2 + 8);
        v13 = v7;
    }
    // 0x457347
    g473 = 0;
    int32_t v17 = g203; // 0x457359
    int32_t result = v13; // 0x457359
    if (g203 < v2) {
        // 0x45735b
        if (g203 > *v12) {
            // 0x457370
            g473 = 1;
            int32_t v18 = *v12; // 0x45737a
            g474 = v18;
            g475 = *v5;
            int32_t v19 = *v3; // 0x45739f
            int32_t v20 = *v5; // 0x4573a2
            *v5 = v20 - (int32_t)((int64_t)(2 * (v20 - v19)) * (int64_t)((int32_t)(0x100000000 * (int64_t)(g203 - v18) / (int64_t)(v2 - v18)) / 2) / 0x100000000);
        }
        // 0x4573b6
        *v12 = g203;
        result = g203;
        *(int32_t *)v2 = result;
        v17 = g203;
    }
    // 0x4573bd
    if (v17 >= *v12) {
        // 0x457419
        return result;
    }
    // 0x4573c8
    g473 = 1;
    g475 = *v5;
    int32_t v21 = *v12; // 0x4573de
    g474 = *v12;
    uint32_t v22 = v21 - v2; // 0x4573ed
    uint32_t v23 = v21 - v17; // 0x4573ef
    int64_t v24 = 0x7fffffff; // 0x4573f5
    if (v23 != v22) {
        // 0x4573fe
        v24 = (int32_t)(0x100000000 * (int64_t)v23 / (int64_t)v22) / 2;
    }
    int32_t v25 = *v5; // 0x457404
    int32_t v26 = *v3; // 0x457407
    *v5 = v25 - (int32_t)(v24 * (int64_t)(2 * (v25 - v26)) / 0x100000000);
    *v12 = g203;
    // 0x457419
    return g203;
}

// Address range: 0x45741a - 0x457437
int32_t function_45741a(void) {
    // 0x45741a
    int32_t v1; // 0x45741a
    int32_t * v2 = (int32_t *)(v1 + 8); // 0x45741a
    int32_t result = *v2; // 0x45741a
    if (result < result) {
        // 0x457425
        *v2 = result;
    }
    // 0x457436
    return result;
}

// Address range: 0x457440 - 0x4574af
int32_t function_457440(void) {
    // 0x457440
    int32_t v1; // 0x457440
    int32_t v2 = v1;
    int32_t * v3 = (int32_t *)(v2 + 4); // 0x457440
    uint32_t v4 = *(int32_t *)(v2 + 12) - *v3; // 0x457446
    int32_t v5 = *(int32_t *)(v2 + 8) - v2;
    int32_t v6 = v4; // 0x45744b
    if (v4 < 65) {
        // 0x45744d
        v6 = 65;
        if ((v5 >= 0 == (v5 != 0) ? v5 : -v5) >= 0x10001) {
            // 0x457467
            v6 = v4 > 3 ? v4 : 3;
        }
    }
    int32_t v7 = (0x100000000 * (int64_t)(v5 >> 16) | (int64_t)(0x10000 * v5)) / (int64_t)v6; // 0x457480
    g472 = v7;
    int32_t result = v7 >> 8; // 0x4574a0
    g471 = (256 - (*v3 & 255)) * result + 256 * v2;
    return result;
}

// Address range: 0xc000000 - 0xc000001
int32_t function_c000000(void) {
    // 0xc000000
    int32_t result; // 0xc000000
    return result;
}

// Address range: 0xc40a319 - 0xc40a31a
int32_t function_c40a319(void) {
    // 0xc40a319
    int32_t result; // 0xc40a319
    return result;
}

// --------------- Statically Linked Functions ----------------

// int32_t __adj_fprem(void);
// int32_t __adj_fprem1(void);
// int32_t __aulldiv(void);
// int32_t __aullrem(void);
// int32_t __cintrindisp1(void);
// int32_t __cintrindisp2(void);
// int32_t __fload(int32_t a1, int32_t a2);
// int32_t __ftol(void);
// int32_t __global_unwind2(void);
// int32_t __local_unwind2(void);
// int32_t __ms_p5_mp_test_fdiv(void);
// int32_t __NLG_Notify(void);
// int32_t __trandisp1(void);
// int32_t __trandisp2(void);
// int32_t _fdiv_main_routine(float80_t a1);

// --------------------- Meta-Information ---------------------

// Detected compiler/packer: msvc (4.x)
// Detected functions: 551

