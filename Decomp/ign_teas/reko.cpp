// tmp_9wvpzh__text_0000.c
// Generated by decompiling tmp_9wvpzh_
// using Reko decompiler version 0.11.6.0.

#include "tmp_9wvpzh_.h"

// 00401000: void fn00401000(Stack (ptr32 word16) dwArg04, Stack ui32 dwArg08)
// Called from:
//      fn004011A0
//      fn004012A0
void fn00401000(word16 * dwArg04, ui32 dwArg08)
{
	int32 edx_30 = 0x00;
	struct Eq_6 * ebx_14 = (struct Eq_6 *) g_a452A20;
	word16 * edi_19 = dwArg04;
	word16 * esi_20 = g_a452E30;
	do
	{
		*esi_20 = *edi_19;
		++edx_30;
		++ebx_14;
		ebx_14->dwFFFFFFFC = (int32) ((char *) dwArg04 + 511)[edx_30] << 0x04;
		++edi_19;
		++esi_20;
	} while (esi_20 < &g_w453030);
	g_dw452E20 = 0x80;
	g_ptr453034 = dwArg04 + 384;
	g_w453030 = 0x00;
	g_t453038.u0 = (int32) (dwArg08 * 0x02 + ~0x05FF);
	g_t45303C.u0 = 0x00;
}

// 00401080: Register Eq_50 fn00401080(Stack Eq_57 dwArg04, Stack Eq_50 dwArg08)
// Called from:
//      fn004012A0
Eq_50 fn00401080(Eq_57 dwArg04, Eq_50 dwArg08)
{
	if (g_t45303C.u0 == g_t453038.u0)
		return 0x00;
	Eq_50 ecx_34 = dwArg08;
	if (dwArg08 > g_t453038.u0)
		ecx_34.u0 = g_t453038.u0;
	Eq_50 ebx_43;
	ebx_43.u0 = g_t45303C.u0;
	Eq_57 edi_40 = dwArg04;
	word32 edx_101 = g_dw452E20;
	bcu8 * esi_46 = g_ptr453034 + (ebx_43 >> 0x01);
	word16 bx_105 = g_w453030;
	if ((ebx_43 & 0x01) != 0x00)
	{
		ui32 edx_57 = edx_101 + (uint32) (*esi_46 >> 0x04);
		bx_105 += g_a452E30[edx_57];
		edx_101 = g_a452A20[edx_57];
		dwArg04->u1 = bx_105;
		edi_40.u1 = (word32) dwArg04 + 2;
		++esi_46;
		--ecx_34;
		if (ecx_34 == 0x00)
			goto l00401151;
	}
	do
	{
		ui32 edx_75 = edx_101 + (uint32) (*esi_46 & 0x0F);
		word16 bx_77 = bx_105 + g_a452E30[edx_75];
		word32 edx_78 = g_a452A20[edx_75];
		edi_40->u1 = bx_77;
		ui32 edx_84 = edx_78 + (uint32) (*esi_46 >> 0x04);
		bx_105 = bx_77 + g_a452E30[edx_84];
		edx_101 = g_a452A20[edx_84];
		((word32) edi_40 + 2)->u1 = bx_105;
		edi_40.u1 = &edi_40.u1->b0004;
		++esi_46;
		ecx_34 -= 0x02;
	} while (ecx_34 > 0x01);
	if (ecx_34 >= 0x01)
	{
		ui32 edx_98 = edx_101 + (uint32) (*esi_46 & 0x0F);
		bx_105 += g_a452E30[edx_98];
		edx_101 = g_a452A20[edx_98];
		edi_40->u1 = bx_105;
	}
l00401151:
	g_dw452E20 = edx_101;
	g_w453030 = bx_105;
	Eq_50 eax_125 = (word32) dwArg08.u0 + g_t45303C.u0;
	if (g_t453038.u0 >= eax_125)
	{
		g_t45303C.u0 = (int32) eax_125;
		return dwArg08;
	}
	else
	{
		Eq_50 eax_140 = g_t453038.u0 - g_t45303C.u0;
		g_t45303C.u0 = g_t453038.u0;
		return eax_140;
	}
}

// 004011A0: Register word32 fn004011A0(Register out word32 ebpOut)
// Called from:
//      fn004023F0
word32 fn004011A0(word32 & ebpOut)
{
	word32 ebp_20;
	word32 ebx_21;
	struct Eq_198 * edi_10 = null;
	Eq_200 esi_14 = (Eq_200) &g_t41C038;
	word32 ebp_45;
	do
	{
		Eq_231 eax_19 = fn004044D0(esi_14, out ebx_21, out ebp_20);
		edi_10[1110248] = (struct Eq_198) eax_19;
		if (eax_19 < 0x0300)
		{
			ebpOut = ebp_20;
			return <invalid>;
		}
		struct Eq_210 * eax_44 = fn004043A0(esi_14, out ebp_45);
		edi_10[1110262] = (struct Eq_198) eax_44;
		if (eax_44 == null)
		{
			ebpOut = ebp_45;
			return <invalid>;
		}
		++edi_10;
		esi_14 = (Eq_200) (esi_14 + 50);
	} while (esi_14 < &g_t41C1FA);
	ui32 eax_72 = g_a41C200[g_dw41C520];
	fn00401000(*((char *) g_a43C3D8 + eax_72 * 0x04), (&g_a43C3A0->u0)[eax_72]);
	g_dw453098 = 0x14;
	if (fn00403D20() == 0x01)
	{
		g_dw43C3C8 = g_dw453088;
		g_dw43C400 = g_dw453084;
		g_t43C3D0.u0 = g_t453090.u0;
		Eq_50 eax_108;
		eax_108.u0 = g_t45308C.u0;
		g_t43C3FC.u0 = (int32) eax_108;
		if (g_t453080.u0 >= 44000)
			eax_108 >>= 0x01;
		Eq_282 ecx_119;
		ecx_119.u0 = g_t453080.u0;
		g_t43C3FC.u0 = (int32) eax_108;
		g_t43C3C4.u0 = (int32) ecx_119;
		Eq_57 eax_130 = fn00403630(0x00, eax_108 * 0x02);
		g_t43C3CC.u1 = (DWORD) eax_130;
		if (eax_130 != 0x00)
		{
			g_dw41C030 = 0x01;
			ebpOut = ebp_45;
			return <invalid>;
		}
		else
		{
			ebpOut = ebp_45;
			return <invalid>;
		}
	}
	else
	{
		ebpOut = ebp_45;
		return <invalid>;
	}
}

// 004012A0: void fn004012A0()
// Called from:
//      fn00402410
void fn004012A0()
{
	if (g_dw41C030 == 0x01)
	{
		struct Eq_313 * eax_19 = fn00403910();
		struct Eq_313 * ebx_102 = eax_19;
		if (eax_19 != null)
		{
			struct Eq_313 * eax_156;
			do
			{
				Eq_50 eax_41 = fn00401080(g_t43C3CC.u1, g_t43C3FC.u0);
				if (g_t43C3FC.u0 > eax_41)
				{
					++g_dw41C520;
					if (g_a41C200[g_dw41C520] == ~0x00)
						g_dw41C520 = 0x09;
					ui32 eax_61 = g_a41C200[g_dw41C520];
					fn00401000(*((char *) g_a43C3D8 + eax_61 * 0x04), (&g_a43C3A0->u0)[eax_61]);
					fn00401080((char *) &g_t43C3CC.u1->dw0000 + eax_41 * 0x02, g_t43C3FC.u0 - eax_41);
				}
				fn004013C0(ebx_102->ptr0000, g_t43C3CC.u1, ebx_102->dw0008, 0x00);
				union Eq_320 * edx_120 = ebx_102->ptr0004;
				if (edx_120 != null)
				{
					int32 ecx_125 = ebx_102->dw000C;
					if (ecx_125 != 0x00)
						fn004013C0(edx_120, g_t43C3CC.u1, ecx_125, ebx_102->dw0008);
				}
				fn00403BF0();
				eax_156 = fn00403910();
				ebx_102 = eax_156;
			} while (eax_156 != null);
		}
	}
}

// 004013A0: void fn004013A0()
// Called from:
//      fn00402520
void fn004013A0()
{
	g_dw41C030 = 0x01;
	fn00403CB0();
	g_dw41C030 = 0x00;
}

// 004013C0: void fn004013C0(Stack (ptr32 Eq_320) dwArg04, Stack Eq_57 dwArg08, Stack int32 dwArg0C, Stack int32 dwArg10)
// Called from:
//      fn004012A0
void fn004013C0(union Eq_320 * dwArg04, Eq_57 dwArg08, int32 dwArg0C, int32 dwArg10)
{
	int32 esi_13 = dwArg0C;
	union Eq_320 * edi_19;
	int32 eax_18;
	union Eq_320 * dwLoc04;
	if (g_t43C3C4.u0 >= 44000)
	{
		edi_19 = dwArg0C & 0x01;
		esi_13 = dwArg0C >> 0x01;
		eax_18 = dwArg10 >> 0x01;
	}
	else
	{
		eax_18 = dwArg10;
		edi_19 = dwLoc04;
	}
	struct Eq_434 * eax_245 = (struct Eq_434 *) ((char *) &dwArg08.u1->dw0000 + eax_18 * 0x02 + 1 + 1 + 1 + 1);
	union Eq_320 * ecx_222;
	union Eq_320 * ebx_440;
	if (g_dw43C400 == 0x10)
	{
		if (g_dw43C3C8 == 0x01 && (g_t43C3D0.u0 == 0x00 && g_t43C3C4.u0 < 44000))
		{
			ecx_222 = dwArg04;
			ebx_440 = (union Eq_320 *) ((char *) dwArg04 + 2);
			if (esi_13 > 0x00)
			{
				do
				{
					struct Eq_464 * ebx_609 = (struct Eq_464 *) &ebx_440->u0.t0000.u0;
					word16 dx_607 = eax_245->w0000;
					ebx_609->wFFFFFFFE = dx_607 ^ 0x8000;
					ebx_609->w0000 = dx_607 ^ 0x8000;
					ebx_440 = (union Eq_320 *) (&ebx_609->w0000 + 1);
					++eax_245;
					--esi_13;
				} while (esi_13 != 0x00);
			}
			goto l00401976;
		}
		if (g_dw43C400 != 0x10)
			goto l00401522;
		if (g_dw43C3C8 == 0x01 && (g_t43C3D0.u0 == 0x00 && g_t43C3C4.u0 >= 44000))
		{
			ecx_222 = dwArg04;
			ebx_440 = (union Eq_320 *) ((char *) dwArg04 + 2);
			if (esi_13 > 0x00)
			{
				do
				{
					ci16 dx_581 = eax_245->w0000;
					struct Eq_1085 * ebx_583 = (struct Eq_1085 *) &ebx_440->u0.t0000.u0;
					ebx_583->wFFFFFFFE = dx_581 ^ 0x8000;
					ebx_583->w0000 = dx_581 ^ 0x8000;
					ebx_583->w0002 = dx_581 ^ 0x8000;
					ebx_583->w0004 = dx_581 ^ 0x8000;
					ebx_440 = (union Eq_320 *) (&ebx_583->w0004 + 1);
					++eax_245;
					--esi_13;
				} while (esi_13 != 0x00);
			}
l00401976:
			if (g_t43C3C4.u0 >= 44000 && edi_19 == (union Eq_320 *) 0x01)
			{
				if (g_dw43C400 == 0x10)
					ecx_222 = ebx_440;
				if (g_dw43C400 == 0x08)
					ecx_222->u0.t0000.u0 = ecx_222->u0.bFFFFFFFF;
				else if (g_dw43C400 == 0x10 && g_dw43C3C8 == 0x00)
					ecx_222->u0.t0000.u1 = ecx_222->u0.wFFFFFFFE;
				else
					ecx_222->u0.t0000.u2 = ecx_222->u0.dwFFFFFFFC;
			}
			return;
		}
	}
	if (g_dw43C400 != 0x10)
		goto l00401585;
	if (g_dw43C3C8 == 0x01 && (g_t43C3D0.u0 == 0x01 && g_t43C3C4.u0 < 44000))
	{
		ecx_222 = dwArg04;
		ebx_440 = (union Eq_320 *) ((char *) dwArg04 + 2);
		if (esi_13 > 0x00)
		{
			do
			{
				word16 dx_560 = eax_245->w0000;
				struct Eq_511 * ebx_562 = (struct Eq_511 *) &ebx_440->u0.t0000.u0;
				ebx_562->wFFFFFFFE = dx_560;
				ebx_562->w0000 = dx_560;
				ebx_440 = (union Eq_320 *) (&ebx_562->w0000 + 1);
				++eax_245;
				--esi_13;
			} while (esi_13 != 0x00);
		}
		goto l00401976;
	}
l00401522:
	if (g_dw43C400 != 0x10)
		goto l004015D8;
	if (g_dw43C3C8 == 0x01 && (g_t43C3D0.u0 == 0x01 && g_t43C3C4.u0 >= 44000))
	{
		ecx_222 = dwArg04;
		ebx_440 = (union Eq_320 *) ((char *) dwArg04 + 2);
		if (esi_13 > 0x00)
		{
			do
			{
				word16 dx_535 = eax_245->w0000;
				struct Eq_548 * ebx_537 = (struct Eq_548 *) &ebx_440->u0.t0000.u0;
				ebx_537->wFFFFFFFE = dx_535;
				ebx_537->w0000 = dx_535;
				ebx_537->w0002 = dx_535;
				ebx_537->w0004 = dx_535;
				ebx_440 = (union Eq_320 *) (&ebx_537->w0004 + 1);
				++eax_245;
				--esi_13;
			} while (esi_13 != 0x00);
		}
		goto l00401976;
	}
l00401585:
	if (g_dw43C400 != 0x10)
		goto l0040163B;
	if (g_dw43C3C8 == 0x00 && (g_t43C3D0.u0 == 0x00 && g_t43C3C4.u0 < 44000))
	{
		ecx_222 = dwArg04;
		ebx_440 = dwArg04;
		if (esi_13 > 0x00)
		{
			do
			{
				ebx_440 = (union Eq_320 *) ((char *) ebx_440 + 2);
				ebx_440->u0.wFFFFFFFE = eax_245->w0000 ^ 0x8000;
				++eax_245;
				--esi_13;
			} while (esi_13 != 0x00);
		}
		goto l00401976;
	}
l004015D8:
	if (g_dw43C400 != 0x10)
		goto l00401689;
	if (g_dw43C3C8 == 0x00 && (g_t43C3D0.u0 == 0x00 && g_t43C3C4.u0 >= 44000))
	{
		ecx_222 = dwArg04;
		ebx_440 = (union Eq_320 *) ((char *) dwArg04 + 2);
		if (esi_13 > 0x00)
		{
			do
			{
				struct Eq_1041 * ebx_493 = (struct Eq_1041 *) &ebx_440->u0.t0000.u0;
				ebx_493->wFFFFFFFE = eax_245->w0000 ^ 0x8000;
				++eax_245;
				ebx_493->w0000 = eax_245->wFFFFFFFE ^ 0x8000;
				ebx_440 = (union Eq_320 *) (&ebx_493->w0000 + 1);
				--esi_13;
			} while (esi_13 != 0x00);
		}
		goto l00401976;
	}
l0040163B:
	if (g_dw43C400 != 0x10)
		goto l004016DD;
	if (g_dw43C3C8 == 0x00 && (g_t43C3D0.u0 == 0x01 && g_t43C3C4.u0 < 44000))
	{
		ecx_222 = dwArg04;
		ebx_440 = dwArg04;
		if (esi_13 > 0x00)
		{
			do
			{
				ebx_440 = (union Eq_320 *) ((char *) ebx_440 + 2);
				ebx_440->u0.wFFFFFFFE = eax_245->w0000;
				++eax_245;
				--esi_13;
			} while (esi_13 != 0x00);
		}
		goto l00401976;
	}
l00401689:
	if (g_dw43C400 == 0x10 && (g_dw43C3C8 == 0x00 && (g_t43C3D0.u0 == 0x01 && g_t43C3C4.u0 >= 44000)))
	{
		ecx_222 = dwArg04;
		ebx_440 = (union Eq_320 *) ((char *) dwArg04 + 2);
		if (esi_13 > 0x00)
		{
			do
			{
				struct Eq_819 * ebx_452 = (struct Eq_819 *) &ebx_440->u0.t0000.u0;
				ebx_452->wFFFFFFFE = eax_245->w0000;
				ebx_452->w0000 = eax_245->w0000;
				ebx_440 = (union Eq_320 *) (&ebx_452->w0000 + 1);
				++eax_245;
				--esi_13;
			} while (esi_13 != 0x00);
		}
		goto l00401976;
	}
l004016DD:
	if (g_dw43C400 == 0x08)
	{
		if (g_dw43C3C8 == 0x01 && (g_t43C3D0.u0 == 0x00 && g_t43C3C4.u0 < 44000))
		{
			ecx_222 = (union Eq_320 *) ((char *) dwArg04 + 1);
			if (esi_13 > 0x00)
			{
				do
				{
					struct Eq_683 * ecx_413 = (struct Eq_683 *) &ecx_222->u0.t0000.u0;
					ecx_413->bFFFFFFFF = (byte) (eax_245->w0000 >> 0x08) ^ 0x80;
					++eax_245;
					ecx_413->b0000 = (byte) (eax_245->wFFFFFFFE >> 0x08) ^ 0x80;
					ecx_222 = (union Eq_320 *) (&ecx_413->b0000 + 1);
					--esi_13;
				} while (esi_13 != 0x00);
			}
			goto l00401972;
		}
		if (g_dw43C400 != 0x08)
			goto l004017E9;
		if (g_dw43C3C8 == 0x01 && (g_t43C3D0.u0 == 0x00 && g_t43C3C4.u0 >= 44000))
		{
			ecx_222 = (union Eq_320 *) ((char *) dwArg04 + 1);
			if (esi_13 > 0x00)
			{
				do
				{
					struct Eq_732 * ecx_386 = (struct Eq_732 *) &ecx_222->u0.t0000.u0;
					byte dl_389 = (byte) (eax_245->w0000 >> 0x08);
					ecx_386->bFFFFFFFF = dl_389 ^ 0x80;
					ecx_386->b0000 = dl_389 ^ 0x80;
					ecx_386->b0001 = dl_389 ^ 0x80;
					ecx_386->b0002 = dl_389 ^ 0x80;
					ecx_222 = (union Eq_320 *) (&ecx_386->b0002 + 1);
					++eax_245;
					--esi_13;
				} while (esi_13 != 0x00);
			}
			goto l00401972;
		}
	}
	if (g_dw43C400 != 0x08)
		goto l0040183D;
	if (g_dw43C3C8 == 0x01 && (g_t43C3D0.u0 == 0x01 && g_t43C3C4.u0 < 44000))
	{
		ecx_222 = (union Eq_320 *) ((char *) dwArg04 + 1);
		if (esi_13 > 0x00)
		{
			do
			{
				struct Eq_783 * ecx_363 = (struct Eq_783 *) &ecx_222->u0.t0000.u0;
				ecx_363->tFFFFFFFF.u1 = (byte) eax_245->w0000;
				++eax_245;
				ecx_363->b0000 = eax_245->b0003;
				ecx_222 = (union Eq_320 *) (&ecx_363->b0000 + 1);
				--esi_13;
			} while (esi_13 != 0x00);
		}
		goto l00401972;
	}
l004017E9:
	if (g_dw43C400 != 0x08)
		goto l0040188B;
	if (g_dw43C3C8 == 0x01 && (g_t43C3D0.u0 == 0x01 && g_t43C3C4.u0 >= 44000))
	{
		ecx_222 = (union Eq_320 *) ((char *) dwArg04 + 1);
		if (esi_13 > 0x00)
		{
			do
			{
				Eq_966 dl_337;
				dl_337.u0 = eax_245->w0000;
				struct Eq_969 * ecx_339 = (struct Eq_969 *) &ecx_222->u0.t0000.u0;
				ecx_339->tFFFFFFFF.u1 = (byte) dl_337;
				ecx_339->t0000.u1 = (byte) dl_337;
				ecx_339->t0001.u1 = (byte) dl_337;
				ecx_339->t0002.u1 = (byte) dl_337;
				++eax_245;
				ecx_222 = (union Eq_320 *) ((char *) &ecx_339->t0002 + 1);
				--esi_13;
			} while (esi_13 != 0x00);
		}
		goto l00401972;
	}
l0040183D:
	if (g_dw43C400 != 0x08)
		goto l004018E8;
	if (g_dw43C3C8 == 0x00 && (word32) (g_t43C3D0.u0 < 0x01) < 44000)
	{
		ecx_222 = dwArg04;
		if (esi_13 > 0x00)
		{
			do
			{
				ecx_222 = (union Eq_320 *) ((char *) ecx_222 + 1);
				ecx_222->u0.bFFFFFFFF = (byte) (eax_245->w0000 >> 0x08) ^ 0x80;
				++eax_245;
				--esi_13;
			} while (esi_13 != 0x00);
		}
		goto l00401972;
	}
l0040188B:
	if (g_dw43C400 != 0x08)
		goto l00401927;
	if (g_dw43C3C8 == 0x00 && (word32) (g_t43C3D0.u0 < 0x01) >= 44000)
	{
		ecx_222 = (union Eq_320 *) ((char *) dwArg04 + 1);
		if (esi_13 > 0x00)
		{
			do
			{
				struct Eq_894 * ecx_291 = (struct Eq_894 *) &ecx_222->u0.t0000.u0;
				ecx_291->bFFFFFFFF = (byte) (eax_245->w0000 >> 0x08) ^ 0x80;
				++eax_245;
				ecx_291->b0000 = (byte) (eax_245->wFFFFFFFE >> 0x08) ^ 0x80;
				ecx_222 = (union Eq_320 *) (&ecx_291->b0000 + 1);
				--esi_13;
			} while (esi_13 != 0x00);
		}
		goto l00401972;
	}
l004018E8:
	if (g_dw43C400 != 0x08)
		goto l0040196E;
	if (g_dw43C3C8 == 0x00 && (word32) (g_t43C3D0.u0 < 0x02) < 44000)
	{
		ecx_222 = dwArg04;
		if (esi_13 > 0x00)
		{
			do
			{
				ecx_222 = (union Eq_320 *) ((char *) ecx_222 + 1);
				ecx_222->u0.bFFFFFFFF = (byte) eax_245->w0000;
				++eax_245;
				--esi_13;
			} while (esi_13 != 0x00);
		}
		goto l00401972;
	}
l00401927:
	if (g_dw43C400 == 0x08 && (g_dw43C3C8 == 0x00 && (word32) (g_t43C3D0.u0 < 0x02) >= 44000))
	{
		ecx_222 = (union Eq_320 *) ((char *) dwArg04 + 1);
		if (esi_13 > 0x00)
		{
			do
			{
				struct Eq_1005 * ecx_249 = (struct Eq_1005 *) &ecx_222->u0.t0000.u0;
				ecx_249->tFFFFFFFF.u1 = (byte) eax_245->w0000;
				++eax_245;
				ecx_249->b0000 = eax_245->b0003;
				ecx_222 = (union Eq_320 *) (&ecx_249->b0000 + 1);
				--esi_13;
			} while (esi_13 != 0x00);
		}
l00401972:
		ebx_440 = dwLoc04;
		goto l00401976;
	}
l0040196E:
	ecx_222 = dwArg04;
	goto l00401972;
}

// 004019D0: void fn004019D0(Stack (ptr32 Eq_210) dwArg04, Stack (ptr32 (arr word32)) dwArg08, Stack (ptr32 word32) dwArg0C)
// Called from:
//      fn004027D0
void fn004019D0(struct Eq_210 * dwArg04, word32 (* dwArg08)[], word32 * dwArg0C)
{
	int32 eax_22 = fn004035A0(g_a41C524);
	g_dw452A10 = eax_22;
	ui32 esi_119 = 0x00;
	if (eax_22 == ~0x00)
		return;
	word32 * ecx_34 = dwArg0C;
	if (*dwArg0C != 0x00)
	{
		word32 * eax_37 = g_a43C420;
		while (eax_37 < &g_t43C460)
		{
			*eax_37 = *ecx_34;
			++ecx_34;
			++eax_37;
			if (*ecx_34 == 0x00)
				break;
		}
	}
	struct Eq_210 * ebp_136 = dwArg04;
	if (dwArg04->dw0000 != 2021157228)
	{
		do
		{
			int32 eax_59 = ebp_136->dw0000;
			if (eax_59 <= 0x3130696C)
			{
				if (eax_59 != 0x3130696C)
				{
					if (eax_59 != 0x3030696C)
						return;
					fn00401BE0(ebp_136);
					++esi_119;
				}
				else
					fn00401C00(ebp_136);
			}
			else if (eax_59 != 0x3230696C)
			{
				if (eax_59 != 0x3330696C)
					return;
				fn00401D20(ebp_136, dwArg08, g_a43C420);
			}
			else
				fn00401C20(ebp_136, dwArg08);
			ebp_136 = (struct Eq_210 *) ((char *) &ebp_136->dw0000 + (ebp_136->dw0004 + 0x08));
		} while (ebp_136->dw0000 != 2021157228);
	}
	Eq_57 eax_155 = fn00403630(g_dw452A10, g_t43C460.u0 >> 0x02);
	g_t43C414.u1 = (DWORD) eax_155;
	if (eax_155 == 0x00)
		return;
	Eq_57 eax_175 = fn00403630(g_dw452A10, g_t43C460.u0);
	g_t43C464.u1 = (DWORD) eax_175;
	if (eax_175 == 0x00)
		return;
	Eq_57 eax_195 = fn00403630(g_dw452A10, g_t43C40C.u0);
	g_t43C418.u1 = (DWORD) eax_195;
	if (eax_195 == 0x00)
		return;
	Eq_57 eax_221 = fn00403630(g_dw452A10, esi_119 * 0x0C);
	g_t43C408.u1 = (DWORD) eax_221;
	if (eax_221 == 0x00)
		return;
	fn00401B60(dwArg04);
}

// 00401B60: void fn00401B60(Stack (ptr32 Eq_210) dwArg04)
// Called from:
//      fn004019D0
void fn00401B60(struct Eq_210 * dwArg04)
{
	int32 dwLoc04;
	struct Eq_210 * esi_11 = dwArg04;
	if (dwArg04->dw0000 != 2021157228)
	{
		int32 edi_17 = 0x00;
		int32 edx_21 = dwLoc04;
		int32 eax_22 = dwLoc04;
		do
		{
			int32 ecx_25 = esi_11->dw0000;
			if (ecx_25 != 0x3030696C)
			{
				if (ecx_25 == 0x3130696C)
				{
					edx_21 = &esi_11->dw0004 + 1;
					eax_22 = esi_11->dw0004 >> 0x02;
				}
			}
			else
			{
				*((char *) &g_t43C408.u1->dw0000 + edi_17) = (DWORD) (&esi_11->dw0004 + 1);
				edi_17 += 0x0C;
				*((char *) &(g_t43C408.u1 - 8)[0] + edi_17) = edx_21;
				*((char *) &(g_t43C408.u1 - 4)[0] + edi_17) = eax_22;
			}
			esi_11 = (struct Eq_210 *) ((char *) &esi_11->dw0000 + (esi_11->dw0004 + 0x08));
		} while (esi_11->dw0000 != 2021157228);
	}
}

// 00401BE0: void fn00401BE0(Stack (ptr32 Eq_210) dwArg04)
// Called from:
//      fn004019D0
void fn00401BE0(struct Eq_210 * dwArg04)
{
	int32 ecx_6 = dwArg04->dw0004;
	if (ecx_6 * 0x06 > g_t43C460.u0)
		g_t43C460.u0 = (int32) (ecx_6 * 0x06);
}

// 00401C00: void fn00401C00(Stack (ptr32 Eq_210) dwArg04)
// Called from:
//      fn004019D0
void fn00401C00(struct Eq_210 * dwArg04)
{
	int32 eax_6 = dwArg04->dw0004;
	if (g_t43C40C.u0 < eax_6 * 0x02)
		g_t43C40C.u0 = (int32) (eax_6 * 0x02);
}

// 00401C20: void fn00401C20(Stack (ptr32 Eq_210) dwArg04, Stack (arr word32) dwArg08)
// Called from:
//      fn004019D0
void fn00401C20(struct Eq_210 * dwArg04, word32 dwArg08[])
{
	int32 eax_16 = dwArg04->dw0004;
	Eq_57 eax_33 = fn00403630(g_dw452A10, (eax_16 >> 0x04) * 0x08 - (eax_16 >> 0x04) << 0x02);
	g_t43C41C.u1 = (DWORD) eax_33;
	struct Eq_1342 * esi_15 = (struct Eq_1342 *) (&dwArg04->dw0004 + 1);
	int32 edi_129 = eax_16 >> 0x04;
	if (eax_33 == 0x00)
		return;
	if (eax_16 >> 0x04 > 0x00)
	{
		int32 ecx_126 = 0x00;
		do
		{
			*((char *) &g_t43C41C.u1->dw0000 + ecx_126) = (uint32) esi_15->w0000;
			struct Eq_1379 * esi_62 = (struct Eq_1379 *) (&esi_15->w0000 + 1);
			(&g_t43C41C.u1->b0004)[ecx_126] = (byte) (uint32) esi_62->w0000;
			*((char *) &(g_t43C41C.u1 + 1)->dw0000 + ecx_126) = (uint32) esi_62->w0002;
			*((char *) &(&g_t43C41C.u1->b0004 + 8)->dw0000 + ecx_126) = (uint32) esi_62->w0004;
			*((char *) &(g_t43C41C.u1 + 2)->dw0000 + ecx_126) = (uint32) esi_62->w0006;
			*((char *) &(&g_t43C41C.u1->b0004 + 16)->dw0000 + ecx_126) = (uint32) esi_62->w0008;
			esi_15 = (struct Eq_1342 *) (&esi_62->dw000A + 1);
			int32 eax_103 = esi_62->dw000A;
			if (eax_103 > 0x1E || eax_103 < 0x00)
				eax_103 = 0x00;
			*((char *) &(g_t43C41C.u1 + 3)->dw0000 + ecx_126) = dwArg08[eax_103];
			ecx_126 += 0x1C;
			--edi_129;
		} while (edi_129 != 0x00);
	}
}

// 00401D20: void fn00401D20(Stack (ptr32 Eq_210) dwArg04, Stack (arr word32) dwArg08, Stack (arr word32) dwArg0C)
// Called from:
//      fn004019D0
void fn00401D20(struct Eq_210 * dwArg04, word32 dwArg08[], word32 dwArg0C[])
{
	int32 eax_19 = dwArg04->dw0004;
	Eq_57 eax_34 = fn00403630(g_dw452A10, eax_19 >> 0x04 << 0x05);
	g_t43C410.u1 = (DWORD) eax_34;
	ptr32 esi_18 = (char *) &(&dwArg04->dw0004 + 1)->dw0000 + 2;
	int32 edi_119 = eax_19 >> 0x04;
	if (eax_34 == 0x00)
		return;
	if (eax_19 >> 0x04 > 0x00)
	{
		int32 ebx_53 = 0x00;
		do
		{
			struct Eq_1462 * esi_62 = esi_18 + 0x00;
			ebx_53 += 0x20;
			*((word32) (g_t43C410.u1 - 32) + ebx_53) = (ptr32) ((int32) esi_62->wFFFFFFFE << 0x08);
			*((char *) &(g_t43C410.u1 - 28)[0] + ebx_53) = (int32) esi_62->w0000 << 0x08;
			*((char *) &(g_t43C410.u1 - 24)[0] + ebx_53) = (uint32) esi_62->w0002 << 0x08;
			*((char *) &(g_t43C410.u1 - 20)[0] + ebx_53) = (uint32) esi_62->w0004 << 0x08;
			*((char *) &(g_t43C410.u1 - 16)[0] + ebx_53) = (uint32) esi_62->w0006 << 0x08;
			*((char *) &(g_t43C410.u1 - 0x0C)[0] + ebx_53) = (uint32) esi_62->w0008 << 0x08;
			*((char *) &(g_t43C410.u1 - 8)[0] + ebx_53) = dwArg08[(uint32) esi_62->w000A];
			*((char *) &(g_t43C410.u1 - 4)[0] + ebx_53) = dwArg0C[(uint32) esi_62->w000C];
			esi_18 = &esi_62->w000C + 1;
			--edi_119;
		} while (edi_119 != 0x00);
	}
}

// 00401E30: Register Eq_57 fn00401E30(Stack ui32 dwArg04, Stack word32 dwArg08, Register out (ptr32 Eq_1565) edxOut)
// Called from:
//      fn00402AA0
Eq_57 fn00401E30(ui32 dwArg04, word32 dwArg08, struct Eq_1565 & edxOut)
{
	struct Eq_1569 * ecx_21 = (struct Eq_1569 *) (&g_t43C408.u1->dw0000 + dwArg04 * 3);
	Eq_57 esi_20;
	esi_20.u1 = g_t43C418.u1;
	byte * eax_114 = ecx_21->ptr0000;
	struct Eq_1565 * edx_101 = ecx_21->ptr0004;
	int32 edi_25 = ecx_21->dw0008;
	if (dwArg08 == 0x00)
	{
		ui32 ecx_54 = edi_25 * 0x02;
		if (edi_25 * 0x02 > 0x00)
		{
			do
			{
				edx_101 += 2;
				esi_20.u1 = &esi_20.u1->b0004;
				((word32) esi_20 - 4)->u1 = (int32) edx_101->wFFFFFFFE << 0x04;
				--ecx_54;
			} while (ecx_54 != 0x00);
		}
	}
	else if (dwArg08 == 0x01 && edi_25 > 0x00)
	{
		do
		{
			struct Eq_1624 * edx_35 = (struct Eq_1624 *) (edx_101 + 2);
			struct Eq_1627 * esi_37 = (struct Eq_1627 *) &esi_20.u1->b0004;
			esi_37->dwFFFFFFFC = (int32) edx_35->wFFFFFFFE << 0x05;
			esi_37->dw0000 = (int32) edx_35->w0000 * 0x26;
			edx_101 = (struct Eq_1565 *) (&edx_35->w0000 + 1);
			esi_20.u1 = &esi_37->dw0000 + 1;
			--edi_25;
		} while (edi_25 != 0x00);
	}
	Eq_57 esi_108;
	esi_108.u1 = g_t43C414.u1;
	Eq_57 edi_107;
	edi_107.u1 = g_t43C464.u1;
	while (*eax_114 != ~0x00)
	{
		struct Eq_1565 * eax_83 = (struct Eq_1565 *) (eax_114 + 1);
		eax_114 = eax_83 + (struct Eq_1664 *) 0x01;
		Eq_1669 ecx_90;
		ecx_90.u1 = (uint32) eax_83->bFFFFFFFF;
		edx_101 = (uint32) eax_83->b0000;
		if (ecx_90 > 0x13 || ecx_90 < 7)
		{
l004023AD:
			edxOut = edx_101;
			return 0x00;
		}
		switch (ecx_90)
		{
		case 0x07:
			if (dwArg08 == 0x00)
			{
				if (edx_101 > null)
				{
					do
					{
						esi_108.u1->dw0000 = (word32) edi_107;
						edi_107.u1->dw0000 = (word32) ecx_90;
						struct Eq_2212 * eax_492 = (struct Eq_2212 *) (eax_114 + 2);
						edi_107.u1 = (word32) edi_107 + 36;
						((word32) edi_107 - 32)->u1 = g_t43C410.u1 + (int32) eax_492->wFFFFFFFE * 4;
						((word32) edi_107 - 28)->u1 = edi_107 - 16;
						((word32) edi_107 - 16)->u1 = (uint32) eax_492->w0000 << 0x08;
						((word32) edi_107 - 0x0C)->u1 = 0x00;
						((word32) edi_107 - 8)->u1 = 0x00;
						((word32) edi_107 - 4)->u1 = (uint32) eax_492->w0002 << 0x08;
						int32 ebx_522 = (int32) eax_492->w0004;
						((word32) edi_107 - 24)->u1 = g_t43C418.u1[ebx_522];
						((word32) edi_107 - 20)->u0 = (&g_t43C418.u1->b0004)[ebx_522 * 0x08];
						esi_108.u1 = &esi_108.u1->b0004;
						eax_114 = (byte *) (&eax_492->w0004 + 1);
						edx_101 -= (struct Eq_2283 *) 0x01;
					} while (edx_101 != null);
				}
			}
			else if (dwArg08 == 0x01 && edx_101 > null)
			{
				do
				{
					esi_108.u1->dw0000 = (word32) edi_107;
					edi_107.u1->dw0000 = (word32) ecx_90;
					struct Eq_2296 * eax_438 = (struct Eq_2296 *) (eax_114 + 2);
					edi_107.u1 = (word32) edi_107 + 36;
					((word32) edi_107 - 32)->u1 = g_t43C410.u1 + (int32) eax_438->wFFFFFFFE * 4;
					((word32) edi_107 - 28)->u1 = edi_107 - 16;
					((word32) edi_107 - 16)->u1 = (uint32) eax_438->w0000 << 0x09;
					((word32) edi_107 - 0x0C)->u1 = 0x00;
					((word32) edi_107 - 8)->u1 = 0x00;
					((word32) edi_107 - 4)->u1 = (uint32) eax_438->w0002 * 0x0266;
					int32 ebx_473 = (int32) eax_438->w0004;
					((word32) edi_107 - 24)->u1 = g_t43C418.u1[ebx_473];
					((word32) edi_107 - 20)->u0 = (&g_t43C418.u1->b0004)[ebx_473 * 0x08];
					esi_108.u1 = &esi_108.u1->b0004;
					eax_114 = (byte *) (&eax_438->w0004 + 1);
					edx_101 -= (struct Eq_2367 *) 0x01;
				} while (edx_101 != null);
			}
			break;
		case 0x08:
		case 0x09:
		case 0x0A:
		case 0x0C:
		case 0x0E:
		case 0x10:
			goto l004023AD;
		case 11:
			if (edx_101 > null)
			{
				do
				{
					esi_108.u1->dw0000 = (word32) edi_107;
					edi_107.u1->dw0000 = (word32) ecx_90;
					struct Eq_2133 * eax_373 = (struct Eq_2133 *) (eax_114 + 2);
					int32 ebx_379 = (int32) eax_373->wFFFFFFFE;
					struct Eq_2141 * edi_371 = (struct Eq_2141 *) &edi_107.u1->b0004;
					edi_371->dw0000 = (word32) g_t43C418.u1[ebx_379];
					edi_371->dw0004 = (word32) (&g_t43C418.u1->b0004)[ebx_379 * 0x08];
					int32 ebx_390 = (int32) eax_373->w0000;
					edi_371->dw000C = (word32) g_t43C418.u1[ebx_390];
					edi_371->dw0010 = (word32) (&g_t43C418.u1->b0004)[ebx_390 * 0x08];
					edi_371->dw0018 = (uint32) eax_373->b0002;
					edi_371->dw001C = 0x00;
					esi_108.u1 = &esi_108.u1->b0004;
					eax_114 = (byte *) (&eax_373->b0002 + 1);
					edi_107.u1 = &edi_371->dw001C + 1;
					edx_101 -= (struct Eq_2197 *) 0x01;
				} while (edx_101 != null);
			}
			break;
		case 0x0D:
			if (edx_101 > null)
				eax_114 = eax_83 + (struct Eq_1664 *) 0x01 - edx_101 + edx_101 * 0x08;
			break;
		case 0x0F:
			if (edx_101 > null)
			{
				do
				{
					esi_108.u1->dw0000 = (word32) edi_107;
					edi_107.u1->dw0000 = (word32) ecx_90;
					struct Eq_2032 * eax_308 = (struct Eq_2032 *) (eax_114 + 2);
					int32 ebx_316 = (int32) eax_308->wFFFFFFFE;
					struct Eq_2040 * edi_306 = (struct Eq_2040 *) &edi_107.u1->b0004;
					edi_306->dw0000 = (word32) g_t43C418.u1[ebx_316];
					edi_306->dw0004 = (word32) (&g_t43C418.u1->b0004)[ebx_316 * 0x08];
					int32 ebx_328 = (int32) eax_308->w0000;
					edi_306->dw000C = (word32) g_t43C418.u1[ebx_328];
					edi_306->dw0010 = (word32) (&g_t43C418.u1->b0004)[ebx_328 * 0x08];
					int32 ebx_335 = (int32) eax_308->w0002;
					edi_306->dw0018 = (word32) g_t43C418.u1[ebx_335];
					edi_306->dw001C = (word32) (&g_t43C418.u1->b0004)[ebx_335 * 0x08];
					edi_306->dw0024 = (uint32) eax_308->b0004;
					edi_306->dw0028 = 0x00;
					esi_108.u1 = &esi_108.u1->b0004;
					eax_114 = (byte *) (&eax_308->b0004 + 1);
					edi_107.u1 = &edi_306->dw0028 + 1;
					--edx_101;
				} while (edx_101 != null);
			}
			break;
		case 0x11:
			if (edx_101 > null)
			{
				do
				{
					esi_108.u1->dw0000 = (word32) edi_107;
					edi_107.u1->dw0000 = (word32) ecx_90;
					struct Eq_1927 * eax_247 = (struct Eq_1927 *) (eax_114 + 2);
					int32 ebx_255 = (int32) eax_247->wFFFFFFFE;
					struct Eq_1935 * edi_245 = (struct Eq_1935 *) &edi_107.u1->b0004;
					edi_245->dw0000 = (word32) g_t43C418.u1[ebx_255];
					edi_245->dw0004 = (word32) (&g_t43C418.u1->b0004)[ebx_255 * 0x08];
					int32 ebx_267 = (int32) eax_247->w0000;
					edi_245->dw0008 = (word32) g_t43C418.u1[ebx_267];
					edi_245->dw000C = (word32) (&g_t43C418.u1->b0004)[ebx_267 * 0x08];
					int32 ebx_274 = (int32) eax_247->w0002;
					edi_245->dw0010 = (word32) g_t43C418.u1[ebx_274];
					edi_245->dw0014 = (word32) (&g_t43C418.u1->b0004)[ebx_274 * 0x08];
					int32 ebx_280 = (int32) eax_247->w0004;
					edi_245->dw0018 = &g_t43C41C.u1->dw0000 + ebx_280 * 7;
					edi_245->dw001C = (word32) (&g_t43C41C.u1->b0004)[ebx_280 * 0x1C + 20];
					esi_108.u1 = &esi_108.u1->b0004;
					eax_114 = (byte *) (&eax_247->w0004 + 1);
					edi_107.u1 = &edi_245->dw001C + 1;
					--edx_101;
				} while (edx_101 != null);
			}
			break;
		case 0x12:
			if (edx_101 > null)
			{
				do
				{
					esi_108.u1->dw0000 = (word32) edi_107;
					edi_107.u1->dw0000 = (word32) ecx_90;
					struct Eq_1708 * eax_178 = (struct Eq_1708 *) (eax_114 + 2);
					int32 ebx_188 = (int32) eax_178->wFFFFFFFE;
					struct Eq_1716 * edi_176 = (struct Eq_1716 *) &edi_107.u1->b0004;
					edi_176->dw0000 = (word32) g_t43C418.u1[ebx_188];
					edi_176->dw0004 = (word32) (&g_t43C418.u1->b0004)[ebx_188 * 0x08];
					int32 ebx_200 = (int32) eax_178->w0000;
					edi_176->dw0008 = (word32) g_t43C418.u1[ebx_200];
					edi_176->dw000C = (word32) (&g_t43C418.u1->b0004)[ebx_200 * 0x08];
					int32 ebx_207 = (int32) eax_178->w0002;
					edi_176->dw0010 = (word32) g_t43C418.u1[ebx_207];
					edi_176->dw0014 = (word32) (&g_t43C418.u1->b0004)[ebx_207 * 0x08];
					int32 ebx_213 = (int32) eax_178->w0004;
					edi_176->dw0018 = &g_t43C41C.u1->dw0000 + ebx_213 * 7;
					edi_176->dw001C = (word32) (&g_t43C41C.u1->b0004)[ebx_213 * 0x1C + 20];
					edi_176->dw0020 = g_a43C420[(uint32) eax_178->b0006];
					esi_108.u1 = &esi_108.u1->b0004;
					eax_114 = (byte *) (&eax_178->b0006 + 1);
					edi_107.u1 = &edi_176->dw0020 + 1;
					--edx_101;
				} while (edx_101 != null);
			}
			break;
		case 0x13:
			if (edx_101 > null)
			{
				do
				{
					esi_108.u1->dw0000 = (word32) edi_107;
					edi_107.u1->dw0000 = (word32) ecx_90;
					struct Eq_1824 * eax_115 = (struct Eq_1824 *) (eax_114 + 2);
					int32 ebx_125 = (int32) eax_115->wFFFFFFFE;
					struct Eq_1832 * edi_113 = (struct Eq_1832 *) &edi_107.u1->b0004;
					edi_113->dw0000 = (word32) g_t43C418.u1[ebx_125];
					edi_113->dw0004 = (word32) (&g_t43C418.u1->b0004)[ebx_125 * 0x08];
					int32 ebx_136 = (int32) eax_115->w0000;
					edi_113->dw0008 = (word32) g_t43C418.u1[ebx_136];
					edi_113->dw000C = (word32) (&g_t43C418.u1->b0004)[ebx_136 * 0x08];
					int32 ebx_143 = (int32) eax_115->w0002;
					edi_113->dw0010 = (word32) g_t43C418.u1[ebx_143];
					edi_113->dw0014 = (word32) (&g_t43C418.u1->b0004)[ebx_143 * 0x08];
					edi_113->dw0018 = (uint32) eax_115->b0004;
					edi_113->dw001C = g_a43C420[(uint32) eax_115->b0005];
					esi_108.u1 = &esi_108.u1->b0004;
					eax_114 = (byte *) (&eax_115->b0005 + 1);
					edi_107.u1 = &edi_113->dw001C + 1;
					--edx_101;
				} while (edx_101 != null);
			}
			break;
		}
	}
	esi_108.u1->dw0000 = 0x00;
	Eq_57 eax_552;
	eax_552.u1 = g_t43C414.u1;
	edxOut = edx_101;
	return eax_552;
}

// 004023F0: Register word32 fn004023F0(Register out word32 ebpOut)
// Called from:
//      fn004032A0
word32 fn004023F0(word32 & ebpOut)
{
	word32 ebp_33;
	fn00402540();
	fn004025D0();
	fn004027D0();
	word32 ebx_34 = fn004011A0(out ebp_33);
	ebpOut = ebp_33;
	return ebx_34;
}

// 00402410: Register word32 fn00402410()
// Called from:
//      fn004032A0
word32 fn00402410()
{
	fn00402E30();
	fn004012A0();
	int32 ecx_109 = g_dw41C548;
	int32 eax_56;
	if (ecx_109 == 0x00)
	{
		g_ptr4528BC = *((char *) &g_ptr4529D0 + g_dw41C544 * 0x04);
		word32 eax_36 = fn00402840(1.0);
		ecx_109 = g_dw41C548;
		if (eax_36 == 0x01)
			++g_dw41C544;
		if (g_dw41C544 == 0x03)
		{
			eax_56 = g_dw41C7B0;
			g_r452950 = (real64) g_dw41C7B0 * 0.02;
			++ecx_109;
l00402480:
			g_dw41C548 = ecx_109;
			word32 ebx;
			if (ecx_109 == 0x01 || ecx_109 == 0x02)
			{
				real64 rLoc1_159 = (real64) eax_56 * 0.02 - g_r452950;
				g_r452A08 = rLoc1_159;
				ebx = fn00402AA0(fn00410DF8(rLoc1_159));
				ecx_109 = g_dw41C548;
			}
			g_dw41C548 = ecx_109;
			if (ecx_109 == 0x03 || ecx_109 == 0x04)
			{
				g_ptr4528BC = *((char *) &g_ptr4529D0 + g_dw41C544 * 0x04);
				word32 eax_126 = fn00402840(5.0);
				ui32 eax_137 = g_dw41C544;
				if (eax_126 == 0x01)
					++eax_137;
				g_dw41C544 = eax_137;
				if (eax_137 == 0x04)
					g_dw41C7A8 = 0x02;
			}
			return ebx;
		}
	}
	eax_56 = g_dw41C7B0;
	goto l00402480;
}

// 00402520: void fn00402520()
// Called from:
//      fn004032A0
void fn00402520()
{
	fn004013A0();
	fn00403820(g_dw452960);
}

// 00402540: void fn00402540()
// Called from:
//      fn004023F0
void fn00402540()
{
	int32 eax_6 = fn004035A0(null);
	g_dw452960 = eax_6;
	g_ptr4528B0 = fn004037D0(eax_6, 0x0004B000);
	g_t4529F8.u1 = (DWORD) fn00403630(g_dw452960, 0x001DFFFF);
	g_t45295C.u1 = (DWORD) fn00403630(g_dw452960, 0x0002FFFF);
	g_t452A00.u1 = (DWORD) fn00403630(g_dw452960, 0x00020000);
	g_t4528C0.u1 = (DWORD) fn00403630(g_dw452960, 0x00020000);
}

// 004025D0: void fn004025D0()
// Called from:
//      fn004023F0
void fn004025D0()
{
	word32 ecx_276;
	word32 ebp_495;
	Eq_2624 ebp_215;
	word32 ebp_494;
	Eq_57 ebx_170;
	word32 ebp_485;
	g_ptr4528B8 = fn004043A0(&g_t41C788, out ebp_485);
	word32 ebp_486;
	g_ptr4528C8 = fn004043A0(&g_t41C778, out ebp_486);
	word32 ebp_487;
	g_ptr4528B4 = fn004043A0(&g_t41C768, out ebp_487);
	word32 ebp_488;
	g_ptr452948 = fn004043A0(&g_t41C758, out ebp_488);
	word32 ebp_489;
	g_ptr4529D0 = fn004043A0(&g_t41C748, out ebp_489);
	word32 ebp_490;
	g_ptr4529D4 = fn004043A0(&g_t41C738, out ebp_490);
	word32 ebp_491;
	g_ptr4529D8 = fn004043A0(&g_t41C728, out ebp_491);
	word32 ebp_492;
	g_ptr4529DC = fn004043A0(&g_t41C718, out ebp_492);
	Eq_57 eax_137 = &g_t452A00.u1->b0004 + 0x0000FFFB & 0xFFFF0000;
	g_t452A00.u1 = (DWORD) eax_137;
	word32 ebp_493;
	fn00404320(&g_t41C708, eax_137, 0x00010000, 0x00, out ebp_493);
	uint32 esi_13 = 0x00;
	Eq_200 edi_146 = (Eq_200) &g_t41C568;
	do
	{
		Eq_231 eax_168 = fn004044D0(edi_146, out ebx_170, out ebp_494);
		Eq_231 ebp_179 = eax_168;
		if (eax_168 <= 0x00)
			fn00410EC0(0x00);
		if (eax_168 > 0x00100000)
			ebp_179.u0 = 0x00100000;
		int32 ebx_216 = fn00404320(edi_146, ebx_170, ebp_179, 0x00, out ebp_215);
		if (ebp_215 > 0x00)
		{
			uint32 ebp_235 = (word32) ebp_215 + 0x0000FFFF >> 0x10;
			word32 * eax_233 = g_a4528D0 + esi_13;
			esi_13 += ebp_235;
			do
			{
				*eax_233 = ebx_216;
				++eax_233;
				ebx_216 += 0x00010000;
				--ebp_235;
			} while (ebp_235 != 0x00);
		}
		edi_146 = (Eq_200) (edi_146 + 50);
	} while (edi_146 < &g_t41C6F8);
	g_a4528D0[esi_13] = 0x00;
	Eq_57 esi_265 = &g_t45295C.u1->b0004 + 0x0000FFFB & 0xFFFF0000;
	g_t452970.u1 = (DWORD) esi_265;
	int32 ebx_275 = fn00404320(&g_t41C6F8, esi_265, 0x00010000, 0x00, out ebp_495);
	g_dw452974 = (word32) esi_265 + 0x00010000;
	union Eq_2689 * esi_271 = (word32) esi_265 + 0x00010000;
	word16 ecx_16_16_307 = SLICE(ecx_276, word16, 16);
	int32 ebx_496;
	do
	{
		byte bl_286 = (byte) ebx_496;
		esi_271->u0 = bl_286;
		esi_271 = (union Eq_2689 *) ((char *) esi_271 + 1);
		ebx_275 = SEQ(SLICE(ebx_496 + 0x01, word24, 8), bl_286 + 0x01);
		ebx_496 = ebx_275;
	} while (ebx_496 < 0xFF);
	int32 edx_479 = 0x01;
	int32 edx_497;
	do
	{
		byte dl_296 = (byte) edx_497;
		union Eq_2689 * edi_301 = esi_271;
		word32 ecx_314 = 0x40;
		word32 eax_391 = SEQ(ecx_16_16_307, dl_296, dl_296, dl_296, dl_296);
		word24 edx_24_8_376;
		while (true)
		{
			edx_24_8_376 = SLICE(edx_497 + 0x01, word24, 8);
			ecx_16_16_307 = SLICE(ecx_314, word16, 16);
			if (ecx_314 == 0x00)
				break;
			edi_301->u1 = eax_391;
			edi_301 = (union Eq_2689 *) ((char *) edi_301 + 4);
			--ecx_314;
		}
		esi_271 = (union Eq_2689 *) ((char *) esi_271 + 0x0100);
		edx_479 = SEQ(edx_24_8_376, dl_296 + 0x01);
		edx_497 = edx_479;
	} while (edx_497 < 0xFF);
	Eq_57 eax_326 = &g_t4528C0.u1->b0004 + 0x0000FFFB & 0xFFFF0000;
	g_dw452978 = 0x00;
	g_t4528C0.u1 = (DWORD) eax_326;
	Eq_2751 esi_321;
	esi_321.u0 = 0x00;
	uip32 ebx_482 = 0x00;
	do
	{
		byte bl_383 = (byte) ebx_482;
		int32 eax_332;
		for (eax_332 = 0x00; eax_332 < 0x0100; ++eax_332)
			*((char *) &g_t4528C0.u1->dw0000 + ((word32) esi_321 + eax_332)) = (DWORD) bl_383;
		esi_321 = (word32) esi_321 + 0x0100;
		ebx_482 = SEQ(SLICE(ebx_482 + 0x01, word24, 8), bl_383 + 0x01);
	} while (esi_321 < 0x00010000);
}

// 004027D0: void fn004027D0()
// Called from:
//      fn004023F0
void fn004027D0()
{
	fn004019D0(g_ptr4528B8, g_a4528D0, &g_t452970);
	fn00402F70(0x01);
	fn004030C0(&g_ptr4528B4->dw0004 + 1, g_t41C550.u0);
	int32 ecx_54 = g_dw41C55C;
	int32 edx_55 = g_dw41C558;
	fn00402A80(ecx_54, edx_55, edx_55, ecx_54, 0x00);
	word32 ebx_100;
	word32 ebp_101;
	g_t452958.u0 = (int32) fn004044D0(&g_t41C778, out ebx_100, out ebp_101);
}

// 00402840: Register word32 fn00402840(Stack real64 rArg04)
// Called from:
//      fn00402410
word32 fn00402840(real64 rArg04)
{
	ptr32 eax_6 = g_ptr4528BC;
	if (g_ptr4528C4 == eax_6)
	{
		if (g_dw41C548 <= 0x02)
		{
			if (g_dw4529FC >= 0x0A && (g_dw4529FC < 0x28 && g_t41C550.u0 < 1.0))
			{
				g_t41C550.u0 = (real64) (g_t41C550.u0 + 0.1);
				fn004030C0(g_ptr4528BC + 0x48, g_t41C550.u0);
			}
			if ((real64) g_dw4529FC > rArg04 * 100.0 && g_t41C550.u0 > 0.0)
			{
				Eq_2791 rLoc1_343 = g_t41C550.u0 - 0.1;
				g_t41C550.u0 = (real64) rLoc1_343;
				if (rLoc1_343 < g_t41B018.u0)
				{
					g_t41C550.u1 = 0x00;
					g_dw41C554 = 0x00;
				}
				fn004030C0(g_ptr4528BC + 0x48, g_t41C550.u0);
			}
			if ((real64) g_dw4529FC > rArg04 * 120.0)
				return 0x01;
		}
		if (g_dw41C548 == 0x03 && g_t41C550.u0 < 1.0)
		{
			g_t41C550.u0 = (real64) (g_t41C550.u0 + 0.1);
			fn004030C0(g_ptr4528BC + 0x48, g_t41C550.u0);
		}
		if (g_dw41C548 == 0x04)
		{
			if (g_t41C550.u0 > 0.0)
			{
				g_t41C550.u0 = (real64) (g_t41C550.u0 - 0.1);
				fn004030C0(g_ptr4528BC + 0x48, g_t41C550.u0);
			}
			if (g_t41C550.u0 <= 0.0)
				return 0x01;
		}
		int32 ecx_240 = g_dw41C558;
		fn00404600(g_ptr4528B0, ecx_240, 0x00, 0x00, ecx_240, g_dw41C55C, 4442104, 0x00, 0x00);
		fn004046A0(4442104);
		++g_dw4529FC;
		return 0x00;
	}
	else
	{
		g_ptr4528C4 = eax_6;
		g_dw4529FC = 0x00;
		g_t41C550.u1 = 0x00;
		g_dw41C554 = 0x00;
		fn004030C0(eax_6 + 0x48, 0.0);
		int32 esi_290 = 0x00;
		do
		{
			++esi_290;
			(g_ptr4528B0 - 1)[esi_290] = (byte) *((word32) (g_ptr4528BC + 0x034D) + esi_290);
		} while (esi_290 < 0x0004B000);
		return 0x00;
	}
}

// 00402A80: void fn00402A80(Register int32 ecx, Register int32 edx, Stack int32 dwArg04, Stack int32 dwArg08, Stack word32 dwArg0C)
// Called from:
//      fn004027D0
//      fn00402F70
void fn00402A80(int32 ecx, int32 edx, int32 dwArg04, int32 dwArg08, word32 dwArg0C)
{
	fn0040A4A0(dwArg04, ecx, edx, dwArg08, dwArg0C);
}

// 00402AA0: Register word32 fn00402AA0(Stack word32 dwArg04)
// Called from:
//      fn00402410
word32 fn00402AA0(word32 dwArg04)
{
	word32 edx_149;
	if (g_dw41C548 == 0x01 && (g_t41C550.u0 < 1.0 && g_dw41C53C > 0x04))
	{
		g_t41C550.u0 = (real64) (g_t41C550.u0 + 0.1);
		fn004030C0(&g_ptr4528B4->dw0004 + 1, g_t41C550.u0);
	}
	if (g_dw41C548 == 0x02)
	{
		g_t41C550.u0 = (real64) (g_t41C550.u0 - 0.1);
		fn004030C0(&g_ptr4528B4->dw0004 + 1, g_t41C550.u0);
		if (g_t41C550.u0 < 0.0)
		{
			++g_dw41C548;
			g_dw41C560 = 0x01;
			fn00402F70(0x01);
		}
	}
	struct Eq_3026 * eax_115 = (struct Eq_3026 *) (&g_ptr4528C8->dw0000 + g_dw41C538 * 3);
	int32 ecx_112 = dwArg04 - g_dw41C540;
	ui32 esi_117 = eax_115->dw0000 + g_dw41C53C;
	g_dw41C53C = ecx_112;
	int32 eax_119 = eax_115->dw0004;
	if (ecx_112 >= eax_119)
	{
		g_dw41C540 += eax_119;
		g_dw41C53C = 0x00;
		Eq_231 eax_127;
		eax_127.u0 = g_t452958.u0;
		++g_dw41C538;
		if ((int64) eax_127 /32 0x0C == g_dw41C538)
			g_dw41C538 = 0x00;
	}
	word32 eax_147 = fn00401E30(esi_117, g_dw41C560, out edx_149);
	Eq_57 ecx_156;
	ecx_156.u1 = g_t4528C0.u1;
	g_dw452980 = eax_147;
	ptr32 eax_160 = g_ptr4528B0;
	g_t45298C.u1 = (DWORD) ecx_156;
	g_ptr452984 = eax_160;
	g_ptr452988 = eax_160;
	int32 eax_164 = g_dw41C558;
	g_dw452990 = 0x00;
	g_dw452994 = 0x00;
	g_dw452998 = eax_164 - 0x01;
	g_dw45299C = g_dw41C55C - 0x01;
	word32 ebx_176 = fn00402E10(ecx_156, edx_149, &g_dw452980);
	struct Eq_210 * eax_184 = g_ptr452948;
	word32 dwLoc0C_581;
	int32 dwLoc10_582;
	int32 dwLoc18_584;
	int32 dwLoc1C_585;
	int32 dwLoc20_586;
	int32 dwLoc24_587;
	int32 dwLoc28_588;
	word32 dwLoc2C_589;
	if (g_dw41C560 == 0x00)
	{
		fn00402F00(0x00, 0x00, 0x14, 0x14, 0x00, 0x00, 0x0140, g_dw41C558, (char *) &eax_184->dw0004 + 842);
		int32 ecx_340 = g_dw41C558;
		fn00402F00(0x14, 0x00, 0x14, 0x14, ecx_340 - 20, 0x00, 0x0140, ecx_340, (char *) &g_ptr452948->dw0004 + 842);
		fn00402F00(0x00, 0x14, 0x14, 0x14, 0x00, g_dw41C55C - 0x14, 0x0140, g_dw41C558, (char *) &g_ptr452948->dw0004 + 842);
		int32 ecx_404 = g_dw41C558;
		dwLoc0C_581 = (char *) &g_ptr452948->dw0004 + 842;
		dwLoc10_582 = ecx_404;
		dwLoc18_584 = g_dw41C55C - 0x14;
		dwLoc1C_585 = ecx_404 - 20;
		dwLoc20_586 = 0x14;
		dwLoc24_587 = 0x14;
		dwLoc28_588 = 0x14;
		dwLoc2C_589 = 0x14;
	}
	else
	{
		fn00402F00(0x00, 0x39, 0x28, 0x28, 0x00, 0x00, 0x0140, g_dw41C558, (char *) &eax_184->dw0004 + 842);
		int32 ecx_220 = g_dw41C558;
		fn00402F00(0x28, 0x39, 0x28, 0x28, ecx_220 - 40, 0x00, 0x0140, ecx_220, (char *) &g_ptr452948->dw0004 + 842);
		fn00402F00(0x00, 0x61, 0x28, 0x28, 0x00, g_dw41C55C - 0x28, 0x0140, g_dw41C558, (char *) &g_ptr452948->dw0004 + 842);
		int32 ecx_284 = g_dw41C558;
		dwLoc0C_581 = (char *) &g_ptr452948->dw0004 + 842;
		dwLoc10_582 = ecx_284;
		dwLoc18_584 = g_dw41C55C - 0x28;
		dwLoc1C_585 = ecx_284 - 40;
		dwLoc20_586 = 0x28;
		dwLoc24_587 = 0x28;
		dwLoc28_588 = 0x61;
		dwLoc2C_589 = 0x28;
	}
	fn00402F00(dwLoc2C_589, dwLoc28_588, dwLoc24_587, dwLoc20_586, dwLoc1C_585, dwLoc18_584, 0x0140, dwLoc10_582, dwLoc0C_581);
	int32 ecx_440 = g_dw41C558;
	fn00402F00(0x28, 0x00, 0xAD, 0x39, ecx_440 - 0xAD >> 0x01, (int64) (g_dw41C55C * 0x02) /32 200, 0x0140, ecx_440, (char *) &g_ptr452948->dw0004 + 842);
	int32 eax_486 = g_dw41C558;
	fn00404600(g_ptr4528B0, eax_486, 0x00, 0x00, eax_486, g_dw41C55C, 4442104, 0x00, 0x00);
	fn004046A0(4442104);
	return ebx_176;
}

// 00402E10: Register word32 fn00402E10(Register Eq_57 ecx, Register word32 edx, Stack (ptr32 Eq_3108) dwArg04)
// Called from:
//      fn00402AA0
word32 fn00402E10(Eq_57 ecx, word32 edx, struct Eq_3108 * dwArg04)
{
	return fn0040A519(ecx, edx, dwArg04);
}

// 00402E30: void fn00402E30()
// Called from:
//      fn00402410
void fn00402E30()
{
	fn00404910();
	if (fn00404A90(0x1C) == 0x01 || (fn00404A90(0x39) == 0x01 || fn00404A90(0x01) == 0x01))
	{
		int32 eax_46 = g_dw41C548;
		if (eax_46 == 0x01)
			++eax_46;
		g_dw41C548 = eax_46;
		if (eax_46 == 0x03)
			g_dw41C548 = eax_46 + 0x01;
	}
	if (fn00404A90(0x4A) == 0x01 && g_dw41C560 != 0x00)
	{
		fn00402F70(0x00);
		fn004030C0(&g_ptr4528B4->dw0004 + 1, 1.0);
	}
	if (fn00404A90(0x4E) == 0x01 && g_dw41C560 != 0x01)
	{
		fn00402F70(0x01);
		fn004030C0(&g_ptr4528B4->dw0004 + 1, 1.0);
	}
}

// 00402F00: void fn00402F00(Stack word32 dwArg04, Stack int32 dwArg08, Stack int32 dwArg0C, Stack int32 dwArg10, Stack int32 dwArg14, Stack int32 dwArg18, Stack int32 dwArg1C, Stack int32 dwArg20, Stack word32 dwArg24)
// Called from:
//      fn00402AA0
void fn00402F00(word32 dwArg04, int32 dwArg08, int32 dwArg0C, int32 dwArg10, int32 dwArg14, int32 dwArg18, int32 dwArg1C, int32 dwArg20, word32 dwArg24)
{
	ptr32 ecx_23 = dwArg24 + (dwArg1C *s dwArg08 + dwArg04);
	uint8 (* esi_25)[] = dwArg20 *s dwArg18 + dwArg14 + g_ptr4528B0;
	int32 ebp_26 = dwArg10;
	if (dwArg10 > 0x00)
	{
		do
		{
			int32 edi_33 = 0x00;
			if (dwArg0C > 0x00)
			{
				do
				{
					++edi_33;
					(esi_25 - 1)[edi_33] = (byte) *((char *) &g_t452A00.u1->dw0000 + ((word32) ((uint32) (*((word32) ecx_23 + edi_33)) << 0x08) + (uint32) esi_25[edi_33]));
				} while (edi_33 < dwArg0C);
			}
			ecx_23 += dwArg1C;
			esi_25 = (uint8 (*)[]) (esi_25 + dwArg20);
			--ebp_26;
		} while (ebp_26 != 0x00);
	}
}

// 00402F70: void fn00402F70(Stack word32 dwArg04)
// Called from:
//      fn004027D0
//      fn00402AA0
//      fn00402E30
void fn00402F70(word32 dwArg04)
{
	g_dw41C560 = dwArg04;
	if (dwArg04 == 0x00)
	{
		g_dw41C558 = 0x0140;
		g_dw41C55C = 200;
	}
	if (dwArg04 == 0x01)
	{
		g_dw41C558 = 0x0280;
		g_dw41C55C = 0x01E0;
	}
	fn004030C0(&g_ptr4528B4->dw0004 + 1, 0.0);
	int32 eax_38 = 0x00;
	do
	{
		++eax_38;
		*((word32) (g_ptr4528B0 - 1) + eax_38) = (ptr32) 0x00;
	} while (eax_38 < 0x0004B000);
	int32 ecx_55 = g_dw41C558;
	fn00404600(g_ptr4528B0, ecx_55, 0x00, 0x00, ecx_55, g_dw41C55C, 4442104, 0x00, 0x00);
	fn004046A0(4442104);
	int32 edx_90 = g_dw41C558;
	fn00404600(g_ptr4528B0, edx_90, 0x00, 0x00, edx_90, g_dw41C55C, 4442104, 0x00, 0x00);
	int32 edx_120 = g_dw41C55C;
	g_dw41C870 = g_dw41C558;
	g_dw41C878 = 0x08;
	g_dw41C87C = 0x01;
	g_dw41C874 = edx_120;
	fn00404660();
	int32 edx_130 = g_dw41C558;
	fn004046B0(g_ptr4528B0, edx_130, edx_130, g_dw41C55C, 0x08);
	int32 ecx_147 = g_dw41C55C;
	int32 edx_148 = g_dw41C558;
	fn00402A80(ecx_147, edx_148, edx_148, ecx_147, 0x00);
	fn004030C0(&g_ptr4528B4->dw0004 + 1, 0.0);
}

// 004030C0: void fn004030C0(Stack int32 dwArg04, Stack Eq_2791 rArg08)
// Called from:
//      fn004027D0
//      fn00402840
//      fn00402AA0
//      fn00402E30
//      fn00402F70
void fn004030C0(int32 dwArg04, Eq_2791 rArg08)
{
	struct Eq_3516 * edi_18 = null;
	do
	{
		real64 rLoc1_118 = (real64) edi_18[dwArg04] *64 rArg08;
		real64 rLoc08_119 = rLoc1_118;
		if (rLoc1_118 > 255.0)
			rLoc08_119 = 255.0;
		if (rLoc08_119 < 0.0)
			rLoc08_119 = 0.0;
		++edi_18;
		edi_18[4441191] = (struct Eq_3516) (byte) fn00410DF8(rLoc08_119);
	} while (edi_18 < (struct Eq_3516 *) 0x0300);
	fn00404690(4441192);
}

// 00403140: Register word32 fn00403140(Register Eq_3547 ebp, Stack Eq_3548 dwArg04)
// Called from:
//      Win32CrtStartup
word32 fn00403140(Eq_3547 ebp, Eq_3548 dwArg04)
{
	g_ptr43C7C0 = &g_t41B1C0;
	g_t43C7B8.u0 = (HINSTANCE) dwArg04;
	g_t43C790 = LoadCursorA(null, (CHAR *) 0x7F00);
	Eq_3564 tLoc28;
	tLoc28.cbClsExtra = 0x00;
	Eq_3548 eax_30;
	eax_30.u0 = g_t43C7B8.u0;
	tLoc28.cbWndExtra = 0x00;
	tLoc28.hInstance = (HINSTANCE) eax_30;
	tLoc28.style = (UINT) 0x08;
	tLoc28.lpfnWndProc = &g_t403340;
	Eq_3596 eax_40 = LoadIconA(null, (CHAR *) 0x7F00);
	Eq_3560 ecx_42 = g_t43C790;
	tLoc28.hIcon = (HICON) eax_40;
	tLoc28.hCursor = (HCURSOR) ecx_42;
	tLoc28.hbrBackground = (HBRUSH) GetStockObject(0x04);
	tLoc28.lpszMenuName = (LPCSTR) null;
	tLoc28.lpszClassName = (LPCSTR) &g_t41C7B8;
	if ((word32) RegisterClassA(&tLoc28) == 0x00)
		return 0x00;
	timeBeginPeriod(0x01);
	fn00404B00();
	if (fn00403510(0x01, ebp) == 0x00)
		return 0x00;
	<anonymous> * ebx_104 = TranslateMessage;
	<anonymous> * ebp_106 = DispatchMessageA;
	word32 dwLoc3C;
	while (true)
	{
		ptr32 fp;
		while (g_dw43C7A4 != 0x00)
		{
			if (PeekMessageA(fp - 0x0044, null, 0x00, 0x00, 0x00) != 0x00)
			{
				if (GetMessageA(fp - 0x44, null, 0x00, 0x00) == 0x00)
					return dwLoc3C;
				TranslateMessage(fp - 0x44);
				DispatchMessageA(fp - 0x44);
			}
			else if (fn004032A0(out ebx_104, out ebp_106) == 0x00)
				fn00403540();
		}
		if (GetMessageA(fp - 0x0044, null, 0x00, 0x00) == 0x00)
			break;
		ebx_104();
		struct Eq_3732 * esp_132;
		esp_132->dwFFFFFFFC = &esp_132->dwFFFFFFFC + 5;
		ebp_106();
	}
	return dwLoc3C;
}

// 004032A0: Register word32 fn004032A0(Register out ptr32 ebxOut, Register out ptr32 ebpOut)
// Called from:
//      fn00403140
word32 fn004032A0(ptr32 & ebxOut, ptr32 & ebpOut)
{
	word32 ecx_5 = g_dw41C7A8;
	ptr32 ebx;
	ptr32 ebp;
	if (ecx_5 == 0x00 && g_dw41C828 == 0x00)
	{
		g_dw41C828 = 0x01;
		g_dw41C7B0 = fn004034D0();
		ebx = fn004023F0(out ebp);
		g_dw41C7A8 = 0x01;
	}
	else
	{
		word32 eax_13 = g_dw41C82C;
		if (ecx_5 == 0x01 && eax_13 == 0x00)
		{
			g_dw41C7B0 = fn004034D0();
			ebxOut = fn00402410();
			ebpOut = ebp;
			return 0x01;
		}
		if (ecx_5 == 0x02 && eax_13 == 0x00)
		{
			g_dw41C7B0 = fn004034D0();
			fn00402520();
			fn00404B30();
			timeEndPeriod(0x01);
			g_dw41C82C = 0x01;
			ebxOut = ebx;
			ebpOut = ebp;
			return 0x00;
		}
	}
	ebxOut = ebx;
	ebpOut = ebp;
	return 0x01;
}

LRESULT g_t403340(HWND tArg04, UINT tArg08, WPARAM tArg0C, LPARAM tArg10) = ??/* Unexpected function type (fn LRESULT (HWND, UINT, WPARAM, LPARAM)) */ ; // 00403340
// 004034D0: Register word32 fn004034D0()
// Called from:
//      fn004032A0
word32 fn004034D0()
{
	Eq_57 eax_4 = timeGetTime();
	Eq_57 edx_11;
	edx_11.u1 = g_t41C830.u1;
	if (edx_11 == 0x00)
		edx_11 = eax_4;
	g_t41C830.u1 = (DWORD) edx_11;
	if (g_dw43C7A4 != 0x00)
		g_dw41C824 = (word32) (eax_4 - edx_11) + g_dw41C824;
	g_t41C830.u1 = (DWORD) eax_4;
	return g_dw41C824;
}

// 00403510: Register word32 fn00403510(Stack word32 dwArg00, Stack Eq_3547 dwArg04)
// Called from:
//      fn00403140
word32 fn00403510(word32 dwArg00, Eq_3547 dwArg04)
{
	fn004045E0(0x00);
	if (fn00404640() == 0x00 || fn004046F0(dwArg00, dwArg04) == 0x00)
		return 0x00;
	g_dw43C7B0 = 0x01;
	return 0x01;
}

// 00403540: void fn00403540()
// Called from:
//      fn00403140
void fn00403540()
{
	PostMessageA(g_t43C7BC, 0x10, 0x00, 0x00);
}

// 00403570: void fn00403570()
// Called from:
//      fn00404B00
void fn00403570()
{
	word32 * edi_11 = g_a4530D0;
	word32 ecx_12;
	for (ecx_12 = 0x0100; ecx_12 != 0x00; --ecx_12)
	{
		*edi_11 = 0x00;
		++edi_11;
	}
	fn004035A0(g_a41C83C);
}

// 004035A0: Register ui32 fn004035A0(Stack (arr byte) dwArg04)
// Called from:
//      fn004019D0
//      fn00402540
//      fn00403570
ui32 fn004035A0(byte dwArg04[])
{
	word32 * eax_15 = g_a4530D0;
	ui32 esi_11 = 0x00;
	while (*eax_15 != 0x00)
	{
		++eax_15;
		++esi_11;
		if (eax_15 >= &g_dw4534D0)
			break;
	}
	if (esi_11 == 0x0100)
		return ~0x00;
	Eq_57 eax_31 = fn004111A0(0x0140);
	if (eax_31 == 0x00)
		return ~0x00;
	g_a4530D0[esi_11] = (word32) eax_31;
	if (dwArg04 != null)
	{
		int32 edi_51 = 0x00;
		if (dwArg04[0] != 0x00)
		{
			while (edi_51 < 0x3F)
			{
				eax_31.u3[edi_51] = dwArg04[edi_51];
				++edi_51;
				if (dwArg04[edi_51] == 0x00)
					break;
			}
		}
		eax_31.u3[edi_51] = 0x00;
	}
	else
		*eax_31.u3 = 0x00;
	word32 * edi_69 = (word32) eax_31 + 64;
	word32 ecx_70;
	for (ecx_70 = 0x40; ecx_70 != 0x00; --ecx_70)
	{
		*edi_69 = 0x00;
		++edi_69;
	}
	return esi_11;
}

// 00403630: Register Eq_57 fn00403630(Stack int32 dwArg04, Stack Eq_231 dwArg08)
// Called from:
//      fn004011A0
//      fn004019D0
//      fn00401C20
//      fn00401D20
//      fn00402540
//      fn004037D0
//      fn004043A0
Eq_57 fn00403630(int32 dwArg04, Eq_231 dwArg08)
{
	struct Eq_3952 * ecx_10 = g_a4530D0[dwArg04];
	word32 * ecx_18 = (word32 *) ecx_10->a0040;
	int32 edi_22 = 0x00;
	bool v22_373;
	if (ecx_10->a0040[0] != 0x00)
	{
		do
		{
			v22_373 = edi_22 != 0x40;
			if (edi_22 >= 0x40)
				goto l0040369F;
			struct Eq_3971 * eax_30 = *ecx_18;
			int32 ebx_118 = 0x00;
			bool v25_376;
			if (eax_30->a0000[0] != 0x00)
			{
				struct Eq_3971 * edx_114 = eax_30;
				do
				{
					v25_376 = ebx_118 != 0x40;
					if (ebx_118 >= 0x40)
						goto l00403691;
					struct Eq_3986 * esi_42 = edx_114->a0000[0];
					int32 ebp_43 = 0x00;
					struct Eq_3991 * eax_44 = (struct Eq_3991 *) &esi_42->dw0004;
					bool v28_379;
					if (esi_42->dw0004 != 0x00)
					{
						do
						{
							v28_379 = ebp_43 != 0x10;
							if (ebp_43 >= 0x10)
								goto l00403683;
							++eax_44;
							++ebp_43;
						} while (eax_44->dw0000 != 0x00);
					}
					v28_379 = ebp_43 != 0x10;
l00403683:
					if (v28_379)
					{
						Eq_57 eax_70 = fn004111A0(dwArg08);
						if (eax_70 != 0x00)
						{
							struct Eq_4046 * ecx_87 = (struct Eq_4046 *) (esi_42 + ebp_43);
							ecx_87->t0000.u1 = (DWORD) eax_70;
							ecx_87->t0004.u0 = (int32) dwArg08;
							return eax_70;
						}
						else
							return 0x00;
					}
					++edx_114;
					++ebx_118;
				} while (edx_114->a0000[0] != 0x00);
			}
			v25_376 = ebx_118 != 0x40;
l00403691:
			if (v25_376)
			{
				Eq_57 eax_130 = fn004111A0(0x80);
				if (eax_130 == 0x00)
					return 0x00;
				eax_30[ebx_118] = (struct Eq_3971) eax_130;
				struct Eq_4059 * ecx_145 = (word32) eax_130 + 0x0C;
				word32 eax_148;
				for (eax_148 = 0x0F; eax_148 != 0x00; --eax_148)
				{
					ecx_145->dw0000 = 0x00;
					++ecx_145;
				}
				Eq_57 eax_161 = fn004111A0(dwArg08);
				if (eax_161 != 0x00)
				{
					eax_130.u1->dw0000 = (word32) eax_161;
					((word32) eax_130 + 4)->u1 = dwArg08;
					return eax_161;
				}
				else
					return 0x00;
			}
			++ecx_18;
			++edi_22;
		} while (*ecx_18 != 0x00);
	}
	v22_373 = edi_22 != 0x40;
l0040369F:
	if (!v22_373)
		return 0x00;
	Eq_57 eax_236 = fn004111A0(0x0100);
	if (eax_236 == 0x00)
		return 0x00;
	ecx_10->a0040[edi_22] = (word32) eax_236;
	word32 ecx_251;
	Eq_57 edi_256 = eax_236;
	for (ecx_251 = 0x40; ecx_251 != 0x00; --ecx_251)
	{
		edi_256.u1->dw0000 = 0x00;
		edi_256.u1 = &edi_256.u1->b0004;
	}
	Eq_57 eax_264 = fn004111A0(0x80);
	if (eax_264 == 0x00)
		return 0x00;
	eax_236.u1->dw0000 = (word32) eax_264;
	word32 eax_278;
	struct Eq_4124 * ecx_282 = (struct Eq_4124 *) &eax_264.u1->b0004;
	for (eax_278 = 0x10; eax_278 != 0x00; --eax_278)
	{
		ecx_282->dw0000 = 0x00;
		++ecx_282;
	}
	Eq_57 eax_295 = fn004111A0(dwArg08);
	if (eax_295 == 0x00)
		return 0x00;
	eax_264.u1->dw0000 = (word32) eax_295;
	((word32) eax_264 + 4)->u1 = dwArg08;
	return eax_295;
}

// 004037D0: Register Eq_57 fn004037D0(Stack int32 dwArg04, Stack Eq_231 dwArg08)
// Called from:
//      fn00402540
Eq_57 fn004037D0(int32 dwArg04, Eq_231 dwArg08)
{
	Eq_57 eax_19 = fn00403630(dwArg04, dwArg08);
	if (eax_19 != 0x00)
	{
		Eq_57 edi_41 = eax_19;
		uint32 ecx_44;
		for (ecx_44 = dwArg08 >> 0x02; ecx_44 != 0x00; --ecx_44)
		{
			edi_41.u1->dw0000 = 0x00;
			edi_41.u1 = &edi_41.u1->b0004;
		}
		ui32 ecx_50;
		for (ecx_50 = dwArg08 & 0x03; ecx_50 != 0x00; --ecx_50)
		{
			*edi_41.u3 = 0x00;
			edi_41.u1 = (word32) edi_41 + 1;
		}
	}
	return eax_19;
}

// 00403820: void fn00403820(Stack int32 dwArg04)
// Called from:
//      fn00402520
//      fn004038E0
void fn00403820(int32 dwArg04)
{
	Eq_57 ecx_11;
	ecx_11.u1 = g_a4530D0[dwArg04];
	word32 * dwLoc10_151 = (word32) ecx_11 + 64;
	word32 dwLoc04_153 = 0x40;
	word32 v16_116;
	do
	{
		Eq_57 eax_28;
		eax_28.u1 = *dwLoc10_151;
		if (eax_28 != 0x00)
		{
			Eq_57 ebp_33 = eax_28;
			word32 dwLoc08_156 = 0x40;
			word32 v18_94;
			do
			{
				Eq_57 ebx_38;
				ebx_38.u1 = ebp_33.u1->dw0000;
				if (ebx_38 != 0x00)
				{
					struct Eq_4211 * edi_43 = (struct Eq_4211 *) &ebx_38.u1->b0004;
					word32 esi_44;
					for (esi_44 = 0x10; esi_44 != 0x00; --esi_44)
					{
						if (edi_43->dw0000 != 0x00)
							fn00411250(edi_43->dwFFFFFFFC);
						++edi_43;
					}
					fn00411250(ebx_38);
				}
				v18_94 = dwLoc08_156 - 0x01;
				ebp_33.u1 = &ebp_33.u1->b0004;
				dwLoc08_156 = v18_94;
			} while (v18_94 != 0x00);
			fn00411250(eax_28);
		}
		v16_116 = dwLoc04_153 - 0x01;
		++dwLoc10_151;
		dwLoc04_153 = v16_116;
	} while (v16_116 != 0x00);
	fn00411250(ecx_11);
	g_a4530D0[dwArg04] = 0x00;
}

// 004038E0: void fn004038E0()
// Called from:
//      fn00404B30
void fn004038E0()
{
	int32 esi_10;
	for (esi_10 = 0x00; esi_10 < 0x0100; ++esi_10)
	{
		if (g_a4530D0[esi_10] != 0x00)
			fn00403820(esi_10);
	}
}

// 00403910: Register ptr32 fn00403910()
// Called from:
//      fn004012A0
ptr32 fn00403910()
{
	ptr32 fp;
	ptr32 esp_186 = fp;
	if (g_dw41C848 != 0x01)
		return null;
	if (g_dw43C7D8 != 0x01)
	{
		if (g_dw41C844 == 0x00)
		{
			struct Eq_4353 ** eax_13 = g_ptr4530A0;
			struct Eq_4353 * eax_20 = (struct Eq_4353 *) *eax_13;
			eax_20->ptr0030();
			g_dw41C844 = 0x01;
		}
		struct Eq_4335 * esp_29 = esp_186 - 4;
		esp_29->dw0000 = 4442060;
		struct Eq_4353 ** eax_31 = g_ptr4530A0;
		esp_29->dwFFFFFFFC = 4442084;
		esp_29->ptrFFFFFFF8 = eax_31;
		struct Eq_4353 * eax_36 = (struct Eq_4353 *) *eax_31;
		eax_36->ptr0010();
		int32 ecx_45 = g_dw43C7F4;
		int32 eax_46 = g_dw43C7E4 + g_dw43C7C4;
		g_dw43C7CC = eax_46;
		if (eax_46 >= ecx_45)
			g_dw43C7CC -= ecx_45;
		int32 ecx_56 = g_t45308C.u0 *s g_t43C7F0.u0;
		int32 eax_57 = g_dw43C7CC + ecx_56;
		g_dw43C7C8 = eax_57;
		if (g_dw43C7F4 <= eax_57)
		{
			g_dw43C7C8 -= g_dw43C7F4;
			if (g_dw43C7E0 < g_dw43C7C8 || g_dw43C7CC <= g_dw43C7E0)
				return null;
		}
		else if (g_dw43C7E0 < g_dw43C7C8 && g_dw43C7CC <= g_dw43C7E0)
			return null;
		struct Eq_4353 ** ecx_98 = g_ptr4530A0;
		struct Eq_4353 * eax_101 = (struct Eq_4353 *) *ecx_98;
		eax_101->ptr002C();
		word32 eax_105;
		g_dw43C7DC = eax_105;
		if (eax_105 != 0x88780096)
		{
			if (g_dw43C7DC != 0x00)
				return null;
			word32 ecx_116 = g_dw43C7D4;
			g_dw4530B0 = g_dw43C7D0;
			uint32 eax_119 = g_dw43C7E8;
			g_dw4530B4 = ecx_116;
			Eq_4379 ecx_121;
			ecx_121.u0 = g_t43C7F0.u0;
			g_dw4530B8 = (uint64) eax_119 /u ecx_121;
			g_dw4530BC = (uint64) g_dw43C7EC /u ecx_121;
			return &g_dw4530B0;
		}
		else
		{
			struct Eq_4353 ** eax_140 = g_ptr4530A0;
			struct Eq_4353 * eax_143 = (struct Eq_4353 *) *eax_140;
			eax_143->ptr0050();
			struct Eq_4516 * esp_144;
			esp_144->dwFFFFFFFC = 0x01;
			struct Eq_4353 ** ecx_152 = g_ptr4530A0;
			esp_144->dwFFFFFFF8 = 0x00;
			esp_144->dwFFFFFFF4 = 0x00;
			esp_144->ptrFFFFFFF0 = ecx_152;
			struct Eq_4353 * eax_159 = (struct Eq_4353 *) *ecx_152;
			eax_159->ptr0030();
			return null;
		}
	}
	else
	{
		if (g_dw41C844 == 0x00)
		{
			word32 * eax_178 = g_ptr4530C0;
			struct Eq_4306 * eax_185 = *eax_178;
			eax_185->ptr0030();
			g_dw41C844 = 0x01;
		}
		struct Eq_4288 * esp_194 = esp_186 - 4;
		esp_194->dw0000 = 4442060;
		word32 * eax_196 = g_ptr4530C0;
		esp_194->dwFFFFFFFC = 4442084;
		esp_194->ptrFFFFFFF8 = eax_196;
		struct Eq_4306 * eax_201 = *eax_196;
		eax_201->ptr0010();
		int32 ecx_210 = g_dw43C7F4;
		int32 eax_211 = g_dw43C7E4 + g_dw43C7C4;
		g_dw43C7CC = eax_211;
		if (eax_211 >= ecx_210)
			g_dw43C7CC -= ecx_210;
		int32 ecx_221 = g_t45308C.u0 *s g_t43C7F0.u0;
		int32 eax_222 = g_dw43C7CC + ecx_221;
		g_dw43C7C8 = eax_222;
		if (g_dw43C7F4 <= eax_222)
		{
			g_dw43C7C8 -= g_dw43C7F4;
			if (g_dw43C7E0 < g_dw43C7C8 || g_dw43C7CC <= g_dw43C7E0)
				return null;
		}
		else if (g_dw43C7E0 < g_dw43C7C8 && g_dw43C7CC <= g_dw43C7E0)
			return null;
		word32 * ecx_263 = g_ptr4530C0;
		struct Eq_4306 * eax_266 = *ecx_263;
		eax_266->ptr002C();
		word32 eax_270;
		g_dw43C7DC = eax_270;
		if (eax_270 != 0x88780096)
		{
			if (g_dw43C7DC != 0x00)
				return null;
			word32 ecx_281 = g_dw43C7D4;
			g_dw4530B0 = g_dw43C7D0;
			uint32 eax_284 = g_dw43C7E8;
			g_dw4530B4 = ecx_281;
			Eq_4379 ecx_286;
			ecx_286.u0 = g_t43C7F0.u0;
			g_dw4530B8 = (uint64) eax_284 /u ecx_286;
			g_dw4530BC = (uint64) g_dw43C7EC /u ecx_286;
			return &g_dw4530B0;
		}
		else
		{
			word32 * eax_305 = g_ptr4530C0;
			struct Eq_4306 * eax_308 = *eax_305;
			eax_308->ptr0050();
			struct Eq_4478 * esp_309;
			esp_309->dwFFFFFFFC = 0x01;
			word32 * ecx_317 = g_ptr4530C0;
			esp_309->dwFFFFFFF8 = 0x00;
			esp_309->dwFFFFFFF4 = 0x00;
			esp_309->ptrFFFFFFF0 = ecx_317;
			struct Eq_4306 * eax_324 = *ecx_317;
			eax_324->ptr0030();
			return null;
		}
	}
}

// 00403BF0: void fn00403BF0()
// Called from:
//      fn004012A0
void fn00403BF0()
{
	if (g_dw41C848 != 0x01)
		return;
	if (g_dw43C7D8 != 0x01)
	{
		struct Eq_4353 ** ecx_21 = g_ptr4530A0;
		struct Eq_4353 * eax_24 = (struct Eq_4353 *) *ecx_21;
		eax_24->ptr004C();
		g_dw43C7E0 += g_t45308C.u0 *s g_t43C7F0.u0;
		if (g_dw43C7F4 <= g_dw43C7E0)
		{
			int32 eax_39;
			do
			{
				eax_39 = g_dw43C7F4;
				g_dw43C7E0 -= eax_39;
			} while (eax_39 <= g_dw43C7E0);
		}
	}
	else
	{
		word32 * ecx_48 = g_ptr4530C0;
		struct Eq_4306 * eax_51 = *ecx_48;
		eax_51->ptr004C();
		g_dw43C7E0 += g_t45308C.u0 *s g_t43C7F0.u0;
		if (g_dw43C7F4 <= g_dw43C7E0)
		{
			int32 eax_66;
			do
			{
				eax_66 = g_dw43C7F4;
				g_dw43C7E0 -= eax_66;
			} while (eax_66 <= g_dw43C7E0);
		}
	}
}

// 00403CB0: void fn00403CB0()
// Called from:
//      fn004013A0
void fn00403CB0()
{
	ptr32 fp;
	struct Eq_4647 * esp_20 = fp - 4;
	if (g_dw41C848 != 0x01)
		return;
	g_dw41C848 = 0x00;
	if (g_ptr453070 != null)
	{
		if (g_ptr4530A0 != null)
		{
			struct Eq_4353 ** eax_16 = g_ptr4530A0;
			struct Eq_4353 * eax_19 = (struct Eq_4353 *) *eax_16;
			eax_19->ptr0008();
			g_ptr4530A0 = null;
		}
		if (g_ptr4530C0 != null)
		{
			word32 * eax_28 = g_ptr4530C0;
			esp_20->ptrFFFFFFFC = eax_28;
			(*((word32) *eax_28 + 8))();
			g_ptr4530C0 = null;
		}
		word32 * eax_40 = g_ptr453070;
		esp_20->ptrFFFFFFFC = eax_40;
		(*((word32) *eax_40 + 8))();
		g_ptr453070 = null;
	}
}

// 00403D20: Register word32 fn00403D20()
// Called from:
//      fn004011A0
word32 fn00403D20()
{
	struct Eq_5479 * esp_216;
	if (g_dw41C848 == 0x01)
		return 0x00;
	g_dw453094 = 0x04;
	g_ptr4530C0 = null;
	g_ptr4530A0 = null;
	g_dw43C7D8 = 0x00;
	g_dw41C848 = 0x00;
	if (DSOUND.dll!DirectSoundCreate(0x00, 4534384, 0x00) != 0x00)
		return 0x00;
	struct Eq_4726 * esp_53;
	esp_53->dwFFFFFFFC = 0x04;
	esp_53->dwFFFFFFF8 = g_dw41C7AC;
	word32 * ecx_68 = g_ptr453070;
	esp_53->ptrFFFFFFF4 = ecx_68;
	struct Eq_4306 * eax_71 = *ecx_68;
	eax_71->ptr0018();
	word32 eax_73;
	struct Eq_4753 * esp_72;
	if (eax_73 == 0x00)
	{
		g_dw43C7D8 = 0x01;
		esp_72->dw0028 = 0x00;
		esp_72->dw002C = 0x00;
		esp_72->dw0030 = 0x00;
		esp_72->dw0034 = 0x00;
		esp_72->dw0038 = 0x00;
		esp_72->dw0028 = 0x14;
		esp_72->dwFFFFFFFC = 0x00;
		esp_72->dwFFFFFFF8 = 4534464;
		word32 * ecx_95 = g_ptr453070;
		esp_72->dw002C = 0x01;
		esp_72->dw0030 = 0x00;
		esp_72->dw0038 = 0x00;
		esp_72->ptrFFFFFFF4 = &esp_72->dw0028;
		esp_72->ptrFFFFFFF0 = ecx_95;
		struct Eq_4306 * eax_103 = *ecx_95;
		eax_103->ptr000C();
		word32 eax_105;
		if (eax_105 != 0x00)
			return 0x00;
		int32 ebx_114;
		struct Eq_5333 * esp_104;
		Eq_5396 edx_eax_149;
		word32 eax_169;
		for (ebx_114 = 0x00; ebx_114 < 0x06; ++ebx_114)
		{
			int32 edi_122 = esp_104->a003C[ebx_114];
			int32 ebp_123 = esp_104->a006C[ebx_114];
			struct Eq_5347 * eax_119 = (struct Eq_5347 *) &esp_104->w0010;
			Eq_282 ecx_124;
			ecx_124.u0 = esp_104->a0054[ebx_114].u0;
			eax_119->dw0000 = 0x00;
			eax_119->dw0004 = 0x00;
			eax_119->dw0008 = 0x00;
			eax_119->dw000C = 0x00;
			esp_104->w0012 = (word16) edi_122;
			esp_104->w001E = (word16) ebp_123;
			esp_104->t0014.u0 = (int32) ecx_124;
			esp_104->w0010 = 0x01;
			esp_104->t001C.u1 = (word16) (word16) (ebp_123 *s edi_122 >> 0x03);
			edx_eax_149.u1 = (uint64) esp_104->t0014.u0;
			Eq_5389 ecx_152;
			ecx_152.u0 = esp_104->t001C.u0;
			Eq_282 eax_155;
			eax_155.u0 = esp_104->t0014.u0;
			word32 * edx_156 = g_ptr4530C0;
			g_t43C7F0.u0 = (int32) (ecx_152 & 0xFFFF);
			esp_104->dw0018 = eax_155 *s (ecx_152 & 0xFFFF);
			word16 * ecx_160 = &esp_104->w0010;
			struct Eq_5420 * esp_162 = esp_104 - 4;
			esp_162->ptr0000 = ecx_160;
			struct Eq_5427 * eax_164 = *edx_156;
			esp_162->ptrFFFFFFFC = edx_156;
			eax_164->ptr0038();
			g_t453080.u0 = esp_104->a0054[ebx_114].u0;
			g_dw453088 = edi_122 - 0x01;
			g_dw453084 = ebp_123;
			g_t453090.u0 = (int32) ((ebp_123 >> 0x03) - 0x01);
			if (eax_169 == 0x00)
				ebx_114 = 0x06;
		}
		if (eax_169 != 0x00)
			return 0x00;
		word32 * ecx_205 = g_ptr4530C0;
		esp_104->dw0084 = 0x14;
		esp_104->ptrFFFFFFFC = &esp_104->dw0084;
		esp_104->ptrFFFFFFF8 = ecx_205;
		struct Eq_5471 * eax_211 = *ecx_205;
		eax_211->ptr000C();
		word32 eax_217;
		if (eax_217 != 0x00)
			return 0x00;
		int32 eax_226 = esp_216->dw008C;
		g_t45308C.u0 = (int32) (edx_eax_149 /u 100);
		g_dw43C7F4 = eax_226;
		int32 esi_232 = edx_eax_149 /u 100 *s g_t43C7F0.u0;
		g_dw43C7C4 = g_dw453098 *s (edx_eax_149 /u 100) *s g_t43C7F0.u0;
		int32 eax_235 = g_dw43C7F4 - esi_232;
		if (eax_235 < g_dw43C7C4)
			g_dw43C7C4 = eax_235;
		word32 * eax_241 = g_ptr4530C0;
		g_dw43C7E0 = 0x00;
		esp_216->dwFFFFFFFC = 0x01;
		struct Eq_5513 * ebx_246 = *eax_241;
		esp_216->dwFFFFFFF8 = 0x00;
		esp_216->dwFFFFFFF4 = 0x00;
		esp_216->ptrFFFFFFF0 = eax_241;
		ebx_246->ptr0030();
		g_dw41C844 = 0x01;
		g_dw41C848 = 0x01;
		return 0x01;
	}
	else
	{
		esp_72->dwFFFFFFFC = 0x03;
		esp_72->dwFFFFFFF8 = g_dw41C7AC;
		word32 * ecx_280 = g_ptr453070;
		esp_72->ptrFFFFFFF4 = ecx_280;
		struct Eq_4832 * eax_283 = *ecx_280;
		eax_283->ptr0018();
		word32 eax_285;
		if (eax_285 != 0x00)
			return 0x00;
		struct Eq_4841 * esp_284;
		esp_284->dw0028 = 0x00;
		esp_284->dw002C = 0x00;
		esp_284->dw0030 = 0x00;
		esp_284->dw0034 = 0x00;
		esp_284->dw0038 = 0x00;
		esp_284->dw0028 = 0x14;
		esp_284->dwFFFFFFFC = 0x00;
		esp_284->dwFFFFFFF8 = 4534464;
		word32 * ecx_306 = g_ptr453070;
		esp_284->dw002C = 0x01;
		esp_284->dw0030 = 0x00;
		esp_284->dw0038 = 0x00;
		esp_284->ptrFFFFFFF4 = &esp_284->dw0028;
		esp_284->ptrFFFFFFF0 = ecx_306;
		struct Eq_4897 * eax_314 = *ecx_306;
		eax_314->ptr000C();
		word32 eax_316;
		if (eax_316 != 0x00)
			return 0x00;
		int32 edi_325;
		struct Eq_4911 * esp_315;
		word32 ecx_384;
		for (edi_325 = 0x00; edi_325 < 0x06; ++edi_325)
		{
			int32 esi_334 = esp_315->a006C[edi_325];
			Eq_4916 cx_332;
			cx_332.u1 = esp_315->a003C[edi_325].u1;
			struct Eq_5047 * eax_333 = (struct Eq_5047 *) &esp_315->t0010.u0;
			Eq_282 ebp_335;
			ebp_335.u0 = esp_315->a0054[edi_325].u0;
			eax_333->dw0000 = 0x00;
			eax_333->dw0004 = 0x00;
			eax_333->dw0008 = 0x00;
			eax_333->dw000C = 0x00;
			esp_315->t0012.u1 = (word16) cx_332;
			word16 si_342 = (word16) esi_334;
			esp_315->w001E = si_342;
			int32 eax_345 = esi_334 *s ((esp_315->a003C))[edi_325].u0;
			esp_315->t0010.u0 = 0x01;
			esp_315->t0014.u0 = (int32) ebp_335;
			Eq_4920 ax_355 = (word16) (eax_345 >> 0x03);
			esp_315->t0024.u1 = (word16) ax_355;
			esp_315->t001C.u1 = (word16) ax_355;
			Eq_4920 ebx_358;
			ebx_358.u0 = esp_315->t0024.u0;
			word32 * ecx_365 = g_ptr4530C0;
			g_t43C7F0.u0 = (int32) (ebx_358 & 0xFFFF);
			Eq_5110 edx_eax_361;
			edx_eax_361.u1 = (uint64) ebp_335;
			esp_315->t0020.u0 = (int32) (edx_eax_361 /u 100);
			int32 ebx_367 = (ebx_358 & 0xFFFF) *s ebp_335;
			esp_315->dw0018 = ebx_367;
			struct Eq_5123 * esp_372 = esp_315 - 4;
			esp_372->ptr0000 = (word32 *) &esp_315->t0010.u0;
			esp_372->ptrFFFFFFFC = ecx_365;
			struct Eq_5135 * eax_376 = *ecx_365;
			eax_376->ptr0038();
			g_t453080.u0 = (int32) ebp_335;
			Eq_4916 eax_386;
			eax_386.u0 = esp_315->a003C[edi_325].u0;
			g_dw453084 = esi_334;
			g_dw453088 = eax_386 - 0x01;
			g_t453090.u0 = (int32) ((esi_334 >> 0x03) - 0x01);
			word32 eax_379;
			ecx_384 = eax_379;
			if (eax_379 == 0x00)
			{
				Eq_4916 cx_403;
				cx_403.u1 = esp_315->a003C[edi_325].u1;
				Eq_4920 dx_405;
				dx_405.u1 = esp_315->t0024.u1;
				esp_315->dwFFFFFFFC = 0x00;
				esp_315->dwFFFFFFF8 = 4534432;
				esp_315->t0010.u1 = 0x00;
				esp_315->t0014.u0 = 0x00;
				esp_315->dw0018 = 0x00;
				esp_315->t001C.u0 = 0x00;
				esp_315->t0012.u1 = (word16) cx_403;
				esp_315->t001C.u1 = (word16) dx_405;
				esp_315->w001E = si_342;
				word32 * edx_419 = g_ptr453070;
				esp_315->t0014.u0 = (int32) ebp_335;
				esp_315->dw0018 = ebx_367;
				esp_315->dw0028 = 0x00;
				g_dw43C7F4 = ebx_367;
				esp_315->dw002C = 0x00;
				esp_315->dw0030 = 0x00;
				esp_315->dw0034 = 0x00;
				esp_315->ptr0038 = null;
				esp_315->dw0030 = ebx_367;
				esp_315->ptr0038 = (word32 *) &esp_315->t0010.u0;
				esp_315->ptrFFFFFFF4 = &esp_315->dw0028;
				esp_315->dw0028 = 0x14;
				esp_315->dw002C = 232;
				esp_315->t0010.u0 = 0x01;
				esp_315->ptrFFFFFFF0 = edx_419;
				struct Eq_5017 * eax_438 = *edx_419;
				eax_438->ptr000C();
				word32 eax_440;
				ecx_384 = eax_440;
				if (eax_440 != 0x00)
					return 0x00;
				edi_325 = 0x06;
			}
		}
		if (ecx_384 != 0x00)
			return 0x00;
		Eq_50 eax_462;
		eax_462.u0 = esp_315->t0020.u0;
		ptr32 ecx_463 = (ptr32) (esp_315->a006C + 6);
		struct Eq_5169 * esp_464 = esp_315 - 4;
		esp_464->ptr0000 = ecx_463;
		struct Eq_4353 ** edx_466 = g_ptr4530A0;
		esp_464->ptrFFFFFFFC = edx_466;
		g_t45308C.u0 = (int32) eax_462;
		esp_464->dw0088 = 0x14;
		struct Eq_4353 * eax_471 = (struct Eq_4353 *) *edx_466;
		eax_471->ptr000C();
		word32 eax_477;
		if (eax_477 != 0x00)
			return 0x00;
		struct Eq_5194 * esp_476;
		g_dw43C7F4 = esp_476->dw008C;
		g_dw43C7C4 = (g_dw453098 + 0x1B) *s esp_476->dw0020 *s g_t43C7F0.u0;
		word32 * edi_500 = &esp_476->dw0098;
		word32 ecx_504;
		for (ecx_504 = 0x18; ecx_504 != 0x00; --ecx_504)
		{
			*edi_500 = 0x00;
			++edi_500;
		}
		word32 * edx_516 = g_ptr453070;
		esp_476->dw0098 = 0x60;
		esp_476->ptrFFFFFFFC = &esp_476->dw0098;
		struct Eq_5227 * eax_520 = *edx_516;
		esp_476->ptrFFFFFFF8 = edx_516;
		eax_520->ptr0010();
		word32 eax_529;
		struct Eq_5249 * esp_528;
		if (eax_529 == 0x00 && (esp_528->b009C & 0x20) == 0x00)
			g_dw43C7C4 = (g_dw453098 + 0x02) *s esp_528->dw0020 *s g_t43C7F0.u0;
		int32 eax_553 = g_dw43C7F4 - esp_528->dw0020 *s g_t43C7F0.u0;
		if (eax_553 < g_dw43C7C4)
			g_dw43C7C4 = eax_553;
		word32 * eax_559 = g_ptr4530C0;
		g_dw43C7E0 = 0x00;
		esp_528->dwFFFFFFFC = 0x01;
		struct Eq_5286 * ebx_564 = *eax_559;
		esp_528->dwFFFFFFF8 = 0x00;
		esp_528->dwFFFFFFF4 = 0x00;
		esp_528->ptrFFFFFFF0 = eax_559;
		ebx_564->ptr0030();
		struct Eq_5303 * esp_577;
		esp_577->dwFFFFFFFC = 0x01;
		struct Eq_4353 ** ecx_585 = g_ptr4530A0;
		esp_577->dwFFFFFFF8 = 0x00;
		esp_577->dwFFFFFFF4 = 0x00;
		esp_577->ptrFFFFFFF0 = ecx_585;
		struct Eq_4353 * eax_592 = (struct Eq_4353 *) *ecx_585;
		eax_592->ptr0030();
		g_dw41C844 = 0x01;
		g_dw41C848 = 0x01;
		return 0x01;
	}
}

// 00404320: Register word32 fn00404320(Stack Eq_200 dwArg04, Stack Eq_57 dwArg08, Stack Eq_231 dwArg0C, Stack word32 dwArg10, Register out word32 ebpOut)
// Called from:
//      fn004025D0
word32 fn00404320(Eq_200 dwArg04, Eq_57 dwArg08, Eq_231 dwArg0C, word32 dwArg10, word32 & ebpOut)
{
	word32 edi_155;
	word32 esi_154;
	word32 ebp_19;
	word32 ebx_20;
	Eq_57 eax_18 = fn004114B0(dwArg04, &g_t41C85C, out ebx_20, out ebp_19, out esi_154, out edi_155);
	if (eax_18 == 0x00)
		return;
	Eq_5557 tLoc08;
	tLoc08.dw0000 = dwArg10;
	tLoc08.dw0004 = 0x00;
	fn00411460(eax_18, &tLoc08);
	if (dwArg0C != fn00411310(dwArg08, 0x01, dwArg0C, eax_18))
		return;
	fn004112A0(eax_18);
	return;
}

// 004043A0: Register Eq_57 fn004043A0(Stack Eq_200 dwArg04, Register out word32 ebpOut)
// Called from:
//      fn004011A0
//      fn004025D0
Eq_57 fn004043A0(Eq_200 dwArg04, word32 & ebpOut)
{
	Eq_231 edi_77;
	word32 esi_262;
	word32 ebp_74;
	Eq_57 ebx_75;
	word32 ebp_36;
	word32 ebx_261;
	word32 ebp_19;
	Eq_200 esi_24;
	if (fn00404500(dwArg04, out ebp_19, out esi_24) == 0x01)
	{
		Eq_231 eax_35 = fn004044D0(esi_24, out ebx_261, out ebp_36);
		if (eax_35 != 0x00)
		{
			if (fn00403630(0x00, eax_35) != 0x00)
			{
				Eq_57 eax_73 = fn004114B0(esi_24, &g_t41C85C, out ebx_75, out ebp_74, out esi_262, out edi_77);
				if (eax_73 != 0x00)
				{
					Eq_5638 tLoc08;
					tLoc08.dw0000 = 0x00;
					tLoc08.dw0004 = 0x00;
					fn00411460(eax_73, &tLoc08);
					if (edi_77 == fn00411310(ebx_75, 0x01, edi_77, eax_73))
					{
						fn004112A0(eax_73);
						ebpOut = ebp_74;
						return ebx_75;
					}
					else
					{
						g_dw41C90C = 2010;
						ebpOut = ebp_74;
						return 0x00;
					}
				}
				else
				{
					g_dw41C90C = 2000;
					ebpOut = ebp_74;
					return 0x00;
				}
			}
			else
			{
				g_dw41C90C = 0x0802;
				ebpOut = ebp_36;
				return 0x00;
			}
		}
		else
		{
			g_dw41C90C = 2040;
			ebpOut = ebp_36;
			return 0x00;
		}
	}
	else
	{
		g_dw41C90C = 0x07EE;
		ebpOut = ebp_19;
		return 0x00;
	}
}

// 00404490: Register Eq_5663 fn00404490(Stack Eq_57 dwArg04)
// Called from:
//      fn004044D0
Eq_5663 fn00404490(Eq_57 dwArg04)
{
	Eq_5663 eax_16 = fn00411570(dwArg04);
	fn004114D0(dwArg04, 0x00, 0x02);
	Eq_5663 eax_45 = fn00411570(dwArg04);
	fn004114D0(dwArg04, eax_16, 0x00);
	return eax_45;
}

// 004044D0: Register word32 fn004044D0(Stack Eq_200 dwArg04, Register out word32 ebxOut, Register out word32 ebpOut)
// Called from:
//      fn004011A0
//      fn004025D0
//      fn004027D0
//      fn004043A0
word32 fn004044D0(Eq_200 dwArg04, word32 & ebxOut, word32 & ebpOut)
{
	word32 edi_75;
	word32 esi_74;
	word32 ebp_17;
	word32 ebx_18;
	Eq_57 eax_16 = fn004114B0(dwArg04, &g_t41C860, out ebx_18, out ebp_17, out esi_74, out edi_75);
	word32 eax_33 = fn00404490(eax_16);
	fn004112A0(eax_16);
	ebxOut = ebx_18;
	ebpOut = ebp_17;
	return eax_33;
}

// 00404500: Register word32 fn00404500(Stack Eq_200 dwArg04, Register out word32 ebpOut, Register out word32 esiOut)
// Called from:
//      fn004043A0
word32 fn00404500(Eq_200 dwArg04, word32 & ebpOut, word32 & esiOut)
{
	word32 edi_68;
	word32 esi_16;
	word32 ebp_11;
	word32 ebx_67;
	Eq_57 eax_10 = fn004114B0(dwArg04, &g_t41C860, out ebx_67, out ebp_11, out esi_16, out edi_68);
	if (eax_10 != 0x00)
	{
		fn004112A0(eax_10);
		ebpOut = <invalid>;
		esiOut = <invalid>;
		return 0x01;
	}
	else
	{
		ebpOut = <invalid>;
		esiOut = <invalid>;
		return 0x07EF;
	}
}

// 004045E0: void fn004045E0(Stack word32 dwArg04)
// Called from:
//      fn00403510
//      fn00404B00
void fn004045E0(word32 dwArg04)
{
	if (dwArg04 != 0x00)
		return;
	fn00405220();
	fn00404C60();
}

// 00404600: void fn00404600(Stack ptr32 dwArg04, Stack int32 dwArg08, Stack word32 dwArg0C, Stack word32 dwArg10, Stack int32 dwArg14, Stack int32 dwArg18, Stack word32 dwArg1C, Stack word32 dwArg20, Stack word32 dwArg24)
// Called from:
//      fn00402840
//      fn00402AA0
//      fn00402F70
void fn00404600(ptr32 dwArg04, int32 dwArg08, word32 dwArg0C, word32 dwArg10, int32 dwArg14, int32 dwArg18, word32 dwArg1C, word32 dwArg20, word32 dwArg24)
{
	g_ptr43CCF0();
}

// 00404640: Register word32 fn00404640()
// Called from:
//      fn00403510
word32 fn00404640()
{
	g_ptr43CCDC();
	word32 eax_6;
	if (eax_6 == 0x00)
		return 0x00;
	g_ptr43CD10();
	word32 eax_14;
	return eax_14;
}

// 00404660: void fn00404660()
// Called from:
//      fn00402F70
void fn00404660()
{
	g_ptr43CCE0();
}

// 00404690: void fn00404690(Stack word32 dwArg04)
// Called from:
//      fn004030C0
void fn00404690(word32 dwArg04)
{
	g_ptr43CD08();
}

// 004046A0: void fn004046A0(Stack word32 dwArg04)
// Called from:
//      fn00402840
//      fn00402AA0
//      fn00402F70
void fn004046A0(word32 dwArg04)
{
	g_ptr43CCF8();
}

// 004046B0: void fn004046B0(Stack ptr32 dwArg04, Stack int32 dwArg08, Stack int32 dwArg0C, Stack int32 dwArg10, Stack word32 dwArg14)
// Called from:
//      fn00402F70
void fn004046B0(ptr32 dwArg04, int32 dwArg08, int32 dwArg0C, int32 dwArg10, word32 dwArg14)
{
	g_ptr43CD20();
}

// 004046E0: void fn004046E0()
// Called from:
//      fn00404B00
void fn004046E0()
{
	g_ptr43CD64 = null;
	g_dw43D5C8 = 0x00;
}

// 004046F0: Register word32 fn004046F0(Stack word32 dwArg04, Stack Eq_3547 dwArg08)
// Called from:
//      fn00403510
word32 fn004046F0(word32 dwArg04, Eq_3547 dwArg08)
{
	ptr32 fp;
	if (DINPUT.dll!DirectInputCreateA(&g_dw41B1B0, fp - 0x10, g_t43C7B8.u0, 0x0300, 4443824, 0x00, 0x14, 0x10, 0x00, 0x00, 0x20, g_dw41B1B0, g_dw41B1B4, g_dw41B1B8, g_dw41B1BC) != 0x00)
		return 0x00;
	struct Eq_5788 ** ecx_52 = g_ptr43CEB0;
	struct Eq_5788 * eax_57 = (struct Eq_5788 *) *ecx_52;
	eax_57->ptr000C();
	word32 eax_59;
	if (eax_59 != 0x00)
		return 0x00;
	struct Eq_5798 * eax_70 = g_ptr43D1BC;
	struct Eq_5802 * eax_73 = eax_70->ptr0000;
	eax_73->ptr002C();
	word32 eax_75;
	if (eax_75 != 0x00)
		return 0x00;
	struct Eq_5798 * ecx_89 = g_ptr43D1BC;
	struct Eq_5802 * eax_92 = ecx_89->ptr0000;
	eax_92->ptr0034();
	word32 eax_94;
	if (eax_94 != 0x00)
		return 0x00;
	struct Eq_5798 * ecx_104 = g_ptr43D1BC;
	struct Eq_5802 * eax_111 = ecx_104->ptr0000;
	eax_111->ptr0018();
	word32 eax_113;
	if (eax_113 != 0x00)
		return 0x00;
	struct Eq_5798 * eax_122 = g_ptr43D1BC;
	struct Eq_5802 * eax_125 = eax_122->ptr0000;
	eax_125->ptr001C();
	g_dw43D1C0 = 0x01;
	int32 eax_127;
	if (eax_127 < 0x00)
		g_dw43D1C0 = 0x00;
	g_ptr43CD60 = (struct Eq_5853 *) g_a43CD68;
	word32 * edi_139 = g_a43CD68;
	word32 ecx_141;
	for (ecx_141 = 0x10; ecx_141 != 0x00; --ecx_141)
	{
		*edi_139 = ~0x00;
		++edi_139;
	}
	g_b43CDA8 = 0x00;
	word32 * edi_148 = (word32 *) g_a43CEB8;
	word32 ecx_153;
	struct Eq_5869 * edx_161 = null;
	for (ecx_153 = 0x40; ecx_153 != 0x00; --ecx_153)
	{
		*edi_148 = 0x00;
		++edi_148;
	}
	word32 * edi_157 = (word32 *) g_a43CDB0;
	word32 ecx_158;
	for (ecx_158 = 0x40; ecx_158 != 0x00; --ecx_158)
	{
		*edi_157 = 0x00;
		++edi_157;
	}
	do
	{
		edx_161[4444088] = (struct Eq_5869) 0x00;
		g_a43D1C8[edx_161] = 0x00;
		edx_161[4444344] = (struct Eq_5869) 0x00;
		++edx_161;
	} while (edx_161 < (struct Eq_5869 *) 0x0100);
	int32 edx_174 = g_dw41C7B0;
	g_dw43CEB4 = dwArg04;
	g_t43D1C4.u0 = (int32) dwArg08;
	g_dw43D1B8 = edx_174;
	g_dw41C894 = 0x00;
	g_dw41C890 = 0x00;
	return 0x01;
}

// 00404910: void fn00404910()
// Called from:
//      fn00402E30
void fn00404910()
{
	struct Eq_5937 * eax_24 = null;
	word32 * edx_29 = g_a43D1C8;
	do
	{
		if (eax_24[4443568] == 0x01)
		{
			int32 esi_33 = g_dw43CEB4 + g_t43D1C4.u0;
			int32 ecx_34 = *edx_29 - g_dw43D1B8 + g_dw41C7B0;
			*edx_29 = ecx_34;
			if (esi_33 <= ecx_34)
			{
				int32 ecx_38 = ecx_34 - g_t43D1C4.u0;
				eax_24[4443832] = (struct Eq_5937) 0x01;
				*edx_29 = ecx_38;
			}
		}
		++edx_29;
		++eax_24;
	} while (edx_29 < &g_dw43D5C8);
	struct Eq_5798 * edx_58 = g_ptr43D1BC;
	struct Eq_5802 * eax_59 = edx_58->ptr0000;
	eax_59->ptr0028();
	word32 eax_80;
	struct Eq_5996 * esp_79;
	if (eax_80 != 0x8007001E)
	{
		if (eax_80 == 0x00 || eax_80 == 0x01)
		{
			int32 esi_181 = 0x00;
			if (esp_79->dw0010 > 0x00)
			{
				struct Eq_6023 * edi_101 = (struct Eq_6023 *) (&esp_79->dw0010 + 1);
				do
				{
					ui32 eax_103 = edi_101->dw0000;
					if ((edi_101->dw0004 & 0x80) != 0x00)
					{
						(eax_103 & 0xFF)->b43CDB0 = 0x01;
						if ((eax_103 & 0xFF)->b43D0B8 == 0x00)
						{
							(eax_103 & 0xFF)->b43CFB8 = 0x01;
							(eax_103 & 0xFF)->b43D0B8 = 0x01;
						}
						if (g_a43D1C8[eax_103 & 0xFF] == 0x00)
							(eax_103 & 0xFF)->b43CEB8 = 0x01;
						esp_79->ptrFFFFFFFC = eax_103 & 0xFF;
						esp_79->dwFFFFFFF8 = 0x01;
						fn00404AA0(esp_79->dwFFFFFFF8, esp_79->ptrFFFFFFFC);
						esp_79->ptrFFFFFFFC = edi_101->dw0000 & 0xFF;
						esp_79->dwFFFFFFF8 = 0x01;
						fn00404AC0(esp_79->ptrFFFFFFFC);
					}
					else
					{
						esp_79->ptrFFFFFFFC = eax_103 & 0xFF;
						(eax_103 & 0xFF)->b43CDB0 = 0x00;
						esp_79->dwFFFFFFF8 = 0x00;
						(eax_103 & 0xFF)->b43CFB8 = 0x00;
						(eax_103 & 0xFF)->b43D0B8 = 0x00;
						(eax_103 & 0xFF)->b43CEB8 = 0x00;
						g_a43D1C8[eax_103 & 0xFF] = 0x00;
						fn00404AA0(esp_79->dwFFFFFFF8, esp_79->ptrFFFFFFFC);
					}
					++edi_101;
					++esi_181;
				} while (esi_181 < esp_79->dw0010);
			}
		}
		g_dw43D1B8 = g_dw41C7B0;
	}
	else
	{
		g_dw43D1C0 = 0x00;
		struct Eq_5798 * eax_192 = g_ptr43D1BC;
		esp_79->ptrFFFFFFFC = eax_192;
		eax_192->ptr0000->ptr001C();
		int32 eax_197;
		if (eax_197 < 0x00)
			return;
		g_dw43D1C0 = 0x01;
	}
}

// 00404A90: Register uint32 fn00404A90(Stack uint8 bArg04)
// Called from:
//      fn00402E30
uint32 fn00404A90(uint8 bArg04)
{
	return (uint32) (&g_a43CDB0->u0)[(uint32) bArg04];
}

// 00404AA0: void fn00404AA0(Stack uip32 dwArg04, Stack (ptr32 Eq_5798) dwArg08)
// Called from:
//      fn00404910
void fn00404AA0(uip32 dwArg04, struct Eq_5798 * dwArg08)
{
	<anonymous> * ecx_5 = g_ptr43CD64;
	if (ecx_5 != null)
		ecx_5();
}

// 00404AC0: void fn00404AC0(Stack (ptr32 Eq_5798) dwArg08)
// Called from:
//      fn00404910
void fn00404AC0(struct Eq_5798 * dwArg08)
{
	if (dwArg08 <= (struct Eq_5798 *) 0x53)
	{
		byte cl_8 = dwArg08->b41C898;
		g_ptr43CD60->b0000 = cl_8;
		g_ptr43CD60->b0020 = cl_8;
		g_ptr43CD60 = &g_ptr43CD60->b0000 + 1;
		if (g_ptr43CD60 == &g_t43CD88)
			g_ptr43CD60 = (struct Eq_5853 *) g_a43CD68;
	}
}

// 00404B00: void fn00404B00()
// Called from:
//      fn00403140
void fn00404B00()
{
	fn00404C30();
	fn00403570();
	fn00404B40();
	fn004046E0();
	fn00406310();
	fn004045E0(0x00);
}

// 00404B30: void fn00404B30()
// Called from:
//      fn004032A0
void fn00404B30()
{
	fn00404B90();
	fn004038E0();
}

// 00404B40: void fn00404B40()
// Called from:
//      fn00404B00
void fn00404B40()
{
	if (g_dw41C910 == 0x01)
		return;
	g_dw41C910 = 0x01;
	word32 * edi_10 = g_a43E0C0;
	int32 eax_11 = 0x00;
	word32 ecx_16;
	for (ecx_16 = 200; ecx_16 != 0x00; --ecx_16)
	{
		*edi_10 = 0x00;
		++edi_10;
	}
	do
	{
		++eax_11;
		g_a43DC0E[eax_11] = (word16) eax_11 + 0x01;
	} while (eax_11 < 200);
	g_w43EA20 = 0x00;
}

// 00404B90: void fn00404B90()
// Called from:
//      fn00404B30
void fn00404B90()
{
	ptr32 fp;
	struct Eq_6253 * esp_28 = fp - 8;
	if (g_dw41C910 == 0x00)
		return;
	g_dw41C910 = 0x00;
	struct Eq_6260 * esi_13 = null;
	do
	{
		if (esi_13[1112112] == 0x01 && esi_13[1112512] == 0x00010000)
		{
			esi_13[1112112] = (struct Eq_6260) 0x00;
			word32 eax_27 = (word32) esi_13[1111612];
			esp_28->dwFFFFFFFC = eax_27;
			esi_13[1112312]();
			word32 esp_32;
			esp_28 = esp_32 + 0x04;
		}
		++esi_13;
	} while (esi_13 < (struct Eq_6260 *) 800);
	struct Eq_6293 * esi_42 = null;
	do
	{
		if (esi_42[1112112] == 0x01 && esi_42[1112512] == 0x00020000)
		{
			esi_42[1112112] = (struct Eq_6293) 0x00;
			word32 eax_55 = (word32) esi_42[1111612];
			esp_28->dwFFFFFFFC = eax_55;
			esi_42[1112312]();
		}
		esp_28 = fp - 8;
		++esi_42;
	} while (esi_42 < (struct Eq_6293 *) 800);
}

// 00404C30: void fn00404C30()
// Called from:
//      fn00404B00
void fn00404C30()
{
	fn004117A0(&g_t41C934);
	fn004117A0(&g_t41C914);
}

// 00404C60: void fn00404C60()
// Called from:
//      fn004045E0
void fn00404C60()
{
	g_ptr43CD10 = &g_t404D20;
	g_ptr43CD14 = &g_t404D30;
	g_ptr43CD18 = &g_t404D40;
	g_ptr43CD1C = &g_t404D50;
	g_ptr43CD20 = &g_t404D60;
	g_ptr43CD24 = &g_t404E20;
	g_ptr43CD28 = &g_t405050;
	g_ptr43CD2C = &g_t404FB0;
	g_ptr43CD30 = &g_t407000;
	g_ptr43CD48 = &g_t406860;
	g_ptr43CD44 = &g_t4070D0;
	g_ptr43CD4C = &g_t4070F0;
	g_ptr43CD50 = &g_t407110;
	g_ptr43CD54 = &g_t406F60;
	g_ptr43CD5C = &g_t404F10;
	g_ptr43CD58 = &g_t404F70;
	fn00407FE0();
	fn00407190();
	fn00406FC0();
}

<anonymous> g_t404D20 = <code>; // 00404D20
<unknown> g_t404D30 = // 00404D30;
<unknown> g_t404D40 = // 00404D40;
<unknown> g_t404D50 = // 00404D50;
<anonymous> g_t404D60 = <code>; // 00404D60
<unknown> g_t404E20 = // 00404E20;
<unknown> g_t404F10 = // 00404F10;
<unknown> g_t404F70 = // 00404F70;
<unknown> g_t404FB0 = // 00404FB0;
<unknown> g_t405050 = // 00405050;
// 00405220: void fn00405220()
// Called from:
//      fn004045E0
void fn00405220()
{
	g_ptr43CCD8 = &g_t4052C0;
	g_ptr43CCDC = &g_t4052D0;
	g_ptr43CCE0 = &g_t405900;
	g_ptr43CCE4 = &g_t405BF0;
	g_ptr43CCE8 = &g_t405CE0;
	g_ptr43CCEC = &g_t405CF0;
	g_ptr43CCF0 = &g_t405D60;
	g_ptr43CCF4 = &g_t405EF0;
	g_ptr43CCF8 = &g_t405FD0;
	g_ptr43CCFC = &g_t406040;
	g_ptr43CD00 = &g_t406050;
	g_ptr43CD04 = &g_t4061A0;
	g_ptr43CD08 = &g_t4061F0;
	g_ptr43CD0C = &g_t406250;
}

<unknown> g_t4052C0 = // 004052C0;
<anonymous> g_t4052D0 = <code>; // 004052D0
<anonymous> g_t405900 = <code>; // 00405900
<unknown> g_t405BF0 = // 00405BF0;
<unknown> g_t405CE0 = // 00405CE0;
<unknown> g_t405CF0 = // 00405CF0;
<anonymous> g_t405D60 = <code>; // 00405D60
<unknown> g_t405EF0 = // 00405EF0;
<anonymous> g_t405FD0 = <code>; // 00405FD0
<unknown> g_t406040 = // 00406040;
<unknown> g_t406050 = // 00406050;
<unknown> g_t4061A0 = // 004061A0;
<anonymous> g_t4061F0 = <code>; // 004061F0
<unknown> g_t406250 = // 00406250;
// 00406310: void fn00406310()
// Called from:
//      fn00404B00
void fn00406310()
{
	g_dw4449E8 = 0x00;
	g_dw4449EC = 0x00;
	g_dw4449F0 = 0x00;
	g_ptr4449F4 = null;
	g_dw444B80 = g_dw4449E8;
	g_dw444B84 = g_dw4449EC;
	<unknown>* (* ecx_19)[] = g_ptr4449F4;
	g_dw444B88 = g_dw4449F0;
	g_ptr444B8C = ecx_19;
	g_dw4450A0 = g_dw4449E8;
	g_dw4450A4 = g_dw4449EC;
	<unknown>* (* ecx_29)[] = g_ptr4449F4;
	g_dw4450A8 = g_dw4449F0;
	g_ptr4450AC = ecx_29;
	g_dw445048 = g_dw4449E8;
	g_dw44504C = g_dw4449EC;
	<unknown>* (* ecx_39)[] = g_ptr4449F4;
	g_dw445050 = g_dw4449F0;
	g_ptr445054 = ecx_39;
	g_dw444B18 = g_dw4449E8;
	g_dw444B1C = g_dw4449EC;
	<unknown>* (* ecx_49)[] = g_ptr4449F4;
	g_dw444B20 = g_dw4449F0;
	g_ptr444B24 = ecx_49;
	g_dw444970 = g_dw4449E8;
	g_dw444974 = g_dw4449EC;
	<unknown>* (* ecx_59)[] = g_ptr4449F4;
	g_dw444978 = g_dw4449F0;
	g_ptr44497C = ecx_59;
	g_dw445088 = g_dw4449E8;
	g_dw44508C = g_dw4449EC;
	<unknown>* (* ecx_69)[] = g_ptr4449F4;
	g_dw445090 = g_dw4449F0;
	word32 eax_71 = g_dw4449E8;
	g_ptr445094 = ecx_69;
	g_dw445068 = eax_71;
	g_dw44506C = g_dw4449EC;
	<unknown>* (* ecx_79)[] = g_ptr4449F4;
	g_dw445070 = g_dw4449F0;
	g_ptr445074 = ecx_79;
	fn00406460();
	fn004065F0();
	fn004066D0();
	fn004069D0();
	fn00406630();
	fn00406520();
	fn00406590();
	fn00406F70(&g_t445058);
	g_ptr43F7C8 = &g_t41CA4C;
	g_dw43F7D4 = 0x3F800000;
	g_dw43F7E4 = 0x00;
	g_dw43F7CC = 0x00;
	g_b43F7E8 = 0x00;
	g_dw43F7E0 = 0x3ECCCCCD;
	g_dw43F7DC = 0x3F000000;
	g_dw43F7D8 = 0x3DCCCCCD;
	struct Eq_6604 * eax_142 = fn00406470(0x10);
	g_ptr43F7E9 = eax_142;
	eax_142->dw0000 = 0x0C;
	eax_142->dw0004 = 0x00;
	eax_142->dw0008 = 0x0FFF;
	eax_142->dw000C = 0x00;
	g_dw4450A0 = 0x01;
}

// 00406460: void fn00406460()
// Called from:
//      fn00406310
void fn00406460()
{
	fn00406F70(&g_t444908);
}

// 00406470: Register Eq_57 fn00406470(Stack Eq_231 dwArg04)
// Called from:
//      fn00406310
//      fn00406F70
Eq_57 fn00406470(Eq_231 dwArg04)
{
	if (dwArg04 != 0x00)
		return fn004111A0(dwArg04);
	return 0x00;
}

// 00406520: void fn00406520()
// Called from:
//      fn00406310
void fn00406520()
{
	g_dw4448B0 = 0x00;
	g_dw4448B8 = 0x00;
	g_dw4448B4 = 0x00;
	g_dw4448BC = 0x00;
	g_dw4448C0 = 0x00;
	g_dw4448C8 = 0x00;
	g_dw4448C4 = 0x00;
	g_dw4448CC = 0x00;
	g_dw4448D0 = 0x00;
	g_dw4448D4 = 0x00;
	g_dw445048 = 0x01;
	g_dw4448D8 = 0x00;
}

// 00406590: void fn00406590()
// Called from:
//      fn00406310
void fn00406590()
{
	g_dw444B18 = 0x08;
}

// 004065F0: void fn004065F0()
// Called from:
//      fn00406310
void fn004065F0()
{
	int32 esi_12 = 0x00;
	do
	{
		++esi_12;
		g_a440844[esi_12] = fn00410DF8(sin((real64) esi_12 * 0.000244140625 * 6.283192) * 2147418112.0);
	} while (esi_12 < 0x1000);
}

// 00406630: void fn00406630()
// Called from:
//      fn00406310
void fn00406630()
{
	g_dw444B80 = 0x01;
}

// 004066D0: void fn004066D0()
// Called from:
//      fn00406310
void fn004066D0()
{
	g_ptr444870 = &g_t41CA4C;
	g_dw444874 = 0x00;
	g_dw444878 = 0x00;
	g_dw44487C = 0x00;
	g_dw444880 = 0x00;
	g_dw444884 = 0x00;
	g_dw444888 = 0x00;
	g_dw445068 = 0x01;
}

// 004067E0: void fn004067E0(Stack (ptr32 Eq_6724) dwArg04, Stack int32 dwArg08)
// Called from:
//      fn00406FC0
void fn004067E0(struct Eq_6724 * dwArg04, int32 dwArg08)
{
	if (dwArg08 != 0x00)
	{
		if (dwArg08 < 0x00 || dwArg08 >= g_dw445070)
			memcpy(dwArg04, &g_ptr444870, 0x40);
		else
		{
			<unknown>* esi_32 = g_ptr445074[dwArg08];
			if (esi_32 != null)
			{
				memcpy(dwArg04, esi_32, 0x40);
				dwArg04->dw0018 = 0x00;
				dwArg04->dw001C = 0x00;
			}
			else
				memcpy(dwArg04, &g_ptr444870, 0x40);
		}
	}
	else
		memcpy(dwArg04, &g_ptr444870, 0x40);
}

<unknown> g_t406860 = // 00406860;
// 004069D0: void fn004069D0()
// Called from:
//      fn00406310
void fn004069D0()
{
	g_dw4448F8 = 0x00;
	g_dw4448FC = 0x00;
	g_dw4448F4 = 0x00;
	g_dw4448E8 = 0x00;
	g_dw4448EC = 0x00;
	g_dw4448F0 = 0x00;
	word32 * edi_10 = g_a444C40;
	word32 ecx_16;
	for (ecx_16 = 0x0101; ecx_16 != 0x00; --ecx_16)
	{
		*edi_10 = 0x00;
		++edi_10;
	}
	g_dw444B28 = 0x00;
}

<unknown> g_t406F60 = // 00406F60;
// 00406F70: void fn00406F70(Stack (ptr32 Eq_6573) dwArg04)
// Called from:
//      fn00406310
//      fn00406460
void fn00406F70(struct Eq_6573 * dwArg04)
{
	dwArg04->ptr000C = fn00406470(0x80);
	int32 ecx_19 = 0x00;
	do
	{
		ecx_19 += 0x08;
		*((word32) (dwArg04->ptr000C - 8) + ecx_19) = 0x00;
		*((char *) &(dwArg04->ptr000C - 4)[0] + ecx_19) = 0x00;
	} while (ecx_19 < 0x80);
	dwArg04->dw0008 = 0x0F;
	dwArg04->dw0004 = 0x00;
	dwArg04->dw0000 = 0x10;
}

// 00406FC0: void fn00406FC0()
// Called from:
//      fn00404C60
void fn00406FC0()
{
	g_ptr44CDF8 = &g_dw446FF8;
	struct Eq_6858 * ecx_12 = (struct Eq_6858 *) g_a447038;
	word32 * eax_10 = g_a4450B8;
	do
	{
		*eax_10 = ecx_12;
		ecx_12->dw0000 = 0x00;
		++eax_10;
		++ecx_12;
	} while (eax_10 < &g_dw446FF8);
	fn004067E0(&g_dw446FF8, 0x00);
}

<unknown> g_t407000 = // 00407000;
<unknown> g_t4070D0 = // 004070D0;
<unknown> g_t4070F0 = // 004070F0;
<unknown> g_t407110 = // 00407110;
// 00407190: void fn00407190()
// Called from:
//      fn00404C60
void fn00407190()
{
	g_dw44CE2C = 0x00;
	if (g_dw41CA54 == 0x00)
	{
		g_t44CE38.u1 = (DWORD) fn004111A0(8408);
		g_t44CE3C.u1 = (DWORD) fn004111A0(8408);
		g_t44CE40.u1 = (DWORD) fn004111A0(8408);
		g_dw41CA54 = 0x01;
	}
}

// 00407FE0: void fn00407FE0()
// Called from:
//      fn00404C60
void fn00407FE0()
{
	g_dw44CEB0 = 0x00;
	if (g_dw41CA58 == 0x00)
	{
		g_t44CEBC.u1 = (DWORD) fn004111A0(8408);
		g_t44CEC0.u1 = (DWORD) fn004111A0(8408);
		g_t44CEC4.u1 = (DWORD) fn004111A0(8408);
		g_dw41CA58 = 0x01;
	}
}

// 0040A4A0: void fn0040A4A0(Register int32 eax, Register int32 ecx, Register int32 edx, Register int32 ebx, Register word32 esi)
// Called from:
//      fn00402A80
void fn0040A4A0(int32 eax, int32 ecx, int32 edx, int32 ebx, word32 esi)
{
	if (eax > 1400 || ebx > 600)
		return;
	g_dw41CDF0 = eax;
	g_dw41CDF4 = ebx;
	word32 * edi_69 = g_a41D75C;
	uint32 ebx_70;
	for (ebx_70 = 0x01; ebx_70 != 15003; ++ebx_70)
	{
		*edi_69 = 0x00010000 /u ebx_70 - 0x01;
		++edi_69;
	}
	word32 esi_151 = esi;
	int32 ebx_148 = ebx;
	int32 edx_156 = edx;
	int32 ecx_155 = ecx;
	int32 eax_145 = eax;
	<anonymous> ** edi_101 = &g_ptr42C21C;
	while (*edi_101 != null)
	{
		(*edi_101)();
		struct Eq_6969 * esp_159;
		esi_151 = esp_159->dw0004;
		ebx_148 = esp_159->dw0008;
		eax_145 = esp_159->dw000C;
		edi_101 = esp_159->dw0000 + 0x04;
	}
	word32 * edi_106 = g_a41CDF8;
	word32 ebx_107 = 0x00;
	word16 cx_111;
	for (cx_111 = 600; cx_111 != 0x00; --cx_111)
	{
		*edi_106 = ebx_107;
		++edi_106;
		ebx_107 += eax_145;
	}
}

// 0040A519: Register ui32 fn0040A519(Register Eq_57 ecx, Register word32 edx, Register (ptr32 Eq_3108) esi)
// Called from:
//      fn00402E10
ui32 fn0040A519(Eq_57 ecx, word32 edx, struct Eq_3108 * esi)
{
	g_ptr41CD98 = esi;
	ui32 ** edi_29 = esi->ptr0000;
	g_ptr41CD9C = edi_29;
	word32 ebx_32 = esi->dw000C;
	g_dw41CDA4 = esi->dw0004;
	g_dw41CDAC = ebx_32;
	ui32 eax_35 = esi->dw0010;
	ui32 ebx_36 = esi->dw0014;
	g_dw41CDB0 = eax_35;
	g_dw41CDB4 = ebx_36;
	g_dw41CDC0 = eax_35;
	g_dw41CDC4 = ebx_36;
	g_dw41CDD0 = eax_35 << 0x08;
	g_dw41CDD4 = ebx_36 << 0x08;
	g_dw41CDE0 = eax_35 << 0x08;
	g_dw41CDE4 = ebx_36 << 0x08;
	word32 eax_47 = esi->dw0018;
	word32 ebx_48 = esi->dw001C;
	g_dw41CDB8 = eax_47;
	g_dw41CDBC = ebx_48;
	g_dw41CDC8 = eax_47 + 0x01;
	g_dw41CDCC = ebx_48 + 0x01;
	ui32 eax_54 = eax_47 + 0x01 << 0x08;
	g_dw41CDE8 = eax_54;
	g_dw41CDD8 = eax_54 - 0x01;
	ui32 ebx_58 = ebx_48 + 0x01 << 0x08;
	g_dw41CDEC = ebx_58;
	g_dw41CDDC = ebx_58 - 0x01;
	ui32 * esi_63 = *edi_29;
	g_ptr41CDA0 = esi_63;
	if (esi_63 == null)
	{
		ui32 ebx;
		return ebx;
	}
	ui32 eax_86 = *esi_63;
	(*((char *) g_a42C1C4 + eax_86 * 0x04))();
	return ebx_58 - 0x01;
}

<anonymous> g_t40CE20 = <code>; // 0040CE20
// 00410DF8: Register word32 fn00410DF8(FpuStack real64 rArg0)
// Called from:
//      fn00402410
//      fn004030C0
//      fn004065F0
word32 fn00410DF8(real64 rArg0)
{
	__wait();
	Eq_7112 wLoc06_28 = __fstcw();
	__wait();
	__fldcw(SEQ(SLICE(wLoc06_28, byte, 8) | 0x0C, (byte) wLoc06_28));
	__fldcw(wLoc06_28);
	return (word32) rArg0;
}

<anonymous> g_t410E20 = <code>; // 00410E20
// 00410E90: void fn00410E90()
// Called from:
//      Win32CrtStartup
void fn00410E90()
{
	<anonymous> * eax_5 = g_ptr43AA4C;
	if (eax_5 != null)
		eax_5();
	fn00410FB0(&g_dw41C008, &g_dw41C010);
	fn00410FB0(&g_dw41C000, &g_dw41C004);
}

// 00410EC0: void fn00410EC0(Stack Eq_2617 dwArg04)
// Called from:
//      fn004025D0
//      Win32CrtStartup
void fn00410EC0(Eq_2617 dwArg04)
{
	fn00410F00(dwArg04, 0x00, 0x00);
}

<anonymous> g_t410EE0 = <code>; // 00410EE0
// 00410F00: void fn00410F00(Stack Eq_2617 dwArg04, Stack word32 dwArg08, Stack word32 dwArg0C)
// Called from:
//      fn00410EC0
void fn00410F00(Eq_2617 dwArg04, word32 dwArg08, word32 dwArg0C)
{
	ptr32 fp;
	if (g_dw43AAA0 == 0x01)
		TerminateProcess(GetCurrentProcess(), dwArg04);
	g_dw43AA9C = 0x01;
	g_b43AA98 = (byte) dwArg0C;
	ptr32 esp_25 = fp - 0x0C;
	if (dwArg08 == 0x00)
	{
		if (g_ptr45468C != null)
		{
			up32 edi_33 = g_dw454688;
			word32 * edi_34 = edi_33 - 0x04;
			if (edi_33 - 0x04 >= g_ptr45468C)
			{
				do
				{
					<anonymous> * eax_39 = *edi_34;
					if (eax_39 != null)
						eax_39();
					edi_34 -= 0x04;
				} while (edi_34 >= g_ptr45468C);
			}
		}
		struct Eq_7187 * esp_59 = esp_25 - 4;
		esp_59->ptr0000 = &g_dw41C01C;
		esp_59->ptrFFFFFFFC = &g_dw41C014;
		fn00410FB0(esp_59->ptrFFFFFFFC, esp_59->ptr0000);
	}
	fn00410FB0(&g_dw41C020, &g_dw41C024);
	if (dwArg0C != 0x00)
		return;
	g_dw43AAA0 = 0x01;
	ExitProcess(dwArg04);
}

// 00410FB0: void fn00410FB0(Stack (ptr32 word32) dwArg04, Stack (ptr32 word32) dwArg08)
// Called from:
//      fn00410E90
//      fn00410F00
void fn00410FB0(word32 * dwArg04, word32 * dwArg08)
{
	word32 * esi_11 = dwArg04;
	if (dwArg08 > dwArg04)
	{
		do
		{
			<anonymous> * eax_16 = *esi_11;
			if (eax_16 != null)
				eax_16();
			++esi_11;
		} while (dwArg08 > esi_11);
	}
}

// 00410FD0: Register Eq_57 Win32CrtStartup()
Eq_57 Win32CrtStartup()
{
	selector fs;
	Eq_57 eax_6 = fs->t0000;
	ptr32 fp;
	fs->t0000 = fp - 20;
	g_t43AA64.u1 = (DWORD) GetVersion();
	g_dw43AA70 = (uint32) g_b43AA65;
	Eq_57 eax_38;
	eax_38.u1 = g_t43AA64.u1;
	g_t43AA64.u1 = (DWORD) (g_t43AA64.u1 >> 0x10);
	g_dw43AA6C = eax_38 & 0xFF;
	g_dw43AA68 = ((eax_38 & 0xFF) << 0x08) + g_dw43AA70;
	if (fn00412C60() == 0x00)
		fn00411170(0x1C);
	fn00412A80();
	fn00412A70();
	g_t454684.u1 = (DWORD) GetCommandLineA();
	Eq_57 eax_91 = fn00412620();
	g_t43AAA4.u1 = (DWORD) eax_91;
	if (eax_91 == 0x00 || g_t454684.u1 == 0x00)
		fn00410EC0(~0x00);
	fn004123A0();
	fn004122B0();
	fn00410E90();
	Eq_57 esi_141;
	esi_141.u1 = g_t454684.u1;
	cu8 al_142 = *esi_141.u3;
	if (al_142 != 0x22)
	{
		if (al_142 > 0x20)
		{
			do
				esi_141.u1 = (word32) esi_141 + 1;
			while (*esi_141.u3 > 0x20);
		}
		goto l004110D5;
	}
	esi_141.u1 = (word32) esi_141 + 1;
	if (*((word32) esi_141 + 1) != 0x22)
	{
		do
		{
			cu8 bl_153 = *esi_141.u3;
			if (bl_153 == 0x00)
				break;
			if (fn00412250(bl_153) != 0x00)
				esi_141.u1 = (word32) esi_141 + 1;
			esi_141.u1 = (word32) esi_141 + 1;
		} while (*esi_141.u3 != 0x22);
		if (*esi_141.u3 != 0x22)
		{
l004110D5:
			if (*esi_141.u3 != 0x00)
			{
				while (*esi_141.u3 <= 0x20)
				{
					esi_141.u1 = (word32) esi_141 + 1;
					if (*esi_141.u3 == 0x00)
						break;
				}
			}
			Eq_7376 tLoc74;
			tLoc74.dwFlags = (DWORD) 0x00;
			GetStartupInfoA(&tLoc74);
			fn00410EC0(fn00403140(fp - 4, GetModuleHandleA(null)));
			fs->t0000 = eax_6;
			return eax_6;
		}
	}
	esi_141.u1 = (word32) esi_141 + 1;
	goto l004110D5;
}

// tmp_9wvpzh__text_0001.c
// Generated by decompiling tmp_9wvpzh_
// using Reko decompiler version 0.11.6.0.

#include "tmp_9wvpzh_.h"

// 00411170: void fn00411170(Stack word32 dwArg04)
// Called from:
//      Win32CrtStartup
//      fn004122B0
//      fn004123A0
//      fn00412A80
void fn00411170(word32 dwArg04)
{
	if (g_dw43AAB0 == 0x01)
		fn00412D80();
	fn00412DC0(dwArg04);
	g_ptr43AAAC();
}

// 004111A0: Register word32 fn004111A0(Stack Eq_231 dwArg04)
// Called from:
//      fn004035A0
//      fn00403630
//      fn00406470
//      fn00407190
//      fn00407FE0
//      fn004122B0
//      fn004123A0
//      fn00412620
//      fn00412A80
//      fn00413FE0
//      fn004145E0
//      fn00416400
//      fn004166C0
word32 fn004111A0(Eq_231 dwArg04)
{
	return fn004111C0(dwArg04, g_dw43AE4C);
}

// 004111C0: Register word32 fn004111C0(Stack Eq_231 dwArg04, Stack word32 dwArg08)
// Called from:
//      fn004111A0
word32 fn004111C0(Eq_231 dwArg04, word32 dwArg08)
{
	Eq_231 esi_10 = dwArg04;
	if (dwArg04 > ~0x1F)
		return 0x00;
	if (dwArg04 == 0x00)
		esi_10.u0 = 0x01;
	word32 eax_104;
	do
	{
		eax_104 = 0x00;
		if (esi_10 <= ~0x1F)
			eax_104 = fn00411210(esi_10);
		if (eax_104 != 0x00 || dwArg08 == 0x00)
			return eax_104;
	} while (fn00412FC0(esi_10) != 0x00);
	eax_104 = 0x00;
	return eax_104;
}

// 00411210: Register Eq_57 fn00411210(Stack Eq_231 dwArg04)
// Called from:
//      fn004111C0
Eq_57 fn00411210(Eq_231 dwArg04)
{
	Eq_7478 esi_9 = (word32) dwArg04 + 0x0F & ~0x0F;
	Eq_57 eax_17;
	if (esi_9 <= g_t43B66C)
	{
		eax_17 = fn00413350(esi_9 >> 0x04);
		if (eax_17 != 0x00)
			return eax_17;
	}
	eax_17 = HeapAlloc(g_t454574.u1, 0x00, esi_9);
	return eax_17;
}

// 00411250: void fn00411250(Stack Eq_57 dwArg04)
// Called from:
//      fn00403820
//      fn004112A0
//      fn004122B0
//      fn00412620
//      fn00413820
void fn00411250(Eq_57 dwArg04)
{
	Eq_7510 tLoc08;
	Eq_7508 tLoc04;
	if (dwArg04 == 0x00)
		return;
	byte * eax_21 = fn004132A0(dwArg04, &tLoc04, &tLoc08);
	if (eax_21 == null)
		HeapFree(g_t454574.u1, 0x00, dwArg04);
	else
		fn00413300(tLoc04, tLoc08, eax_21);
}

// 004112A0: void fn004112A0(Stack Eq_57 dwArg04)
// Called from:
//      fn00404320
//      fn004043A0
//      fn004044D0
//      fn00404500
void fn004112A0(Eq_57 dwArg04)
{
	Eq_7540 al_13 = *((word32) dwArg04 + 0x0C);
	if ((al_13 & 0x40) == 0x00)
	{
		if ((al_13 & 131) != 0x00)
		{
			fn004138B0(dwArg04);
			fn00413820(dwArg04);
			if (fn00413750(*((word32) dwArg04 + 16)) >= 0x00)
			{
				Eq_57 eax_64 = *((word32) dwArg04 + 28);
				if (eax_64 != 0x00)
				{
					fn00411250(eax_64);
					((word32) dwArg04 + 28)->u0 = 0x00;
				}
			}
		}
		((word32) dwArg04 + 0x0C)->u1 = 0x00;
	}
	else
		((word32) dwArg04 + 0x0C)->u1 = 0x00;
}

// 00411310: Register Eq_231 fn00411310(Stack Eq_57 dwArg04, Stack Eq_5576 dwArg08, Stack Eq_231 dwArg0C, Stack Eq_57 dwArg10)
// Called from:
//      fn00404320
//      fn004043A0
Eq_231 fn00411310(Eq_57 dwArg04, Eq_5576 dwArg08, Eq_231 dwArg0C, Eq_57 dwArg10)
{
	Eq_57 eax_15 = dwArg0C *s dwArg08;
	Eq_57 dwLoc0C_249 = dwArg04;
	Eq_57 ebx_177 = eax_15;
	if (eax_15 == 0x00)
		return 0x00;
	Eq_57 dwLoc04_256;
	if ((*((word32) dwArg10 + 0x0C) & 0x010C) != 0x00)
		dwLoc04_256 = *((word32) dwArg10 + 24);
	else
		dwLoc04_256.u0 = 0x1000;
	if (eax_15 != 0x00)
	{
		do
		{
			if ((*((word32) dwArg10 + 0x0C) & 0x010C) != 0x00)
			{
				Eq_57 eax_46 = *((word32) dwArg10 + 4);
				if (eax_46 == 0x00)
					goto l004113A2;
				Eq_57 edx_182 = ebx_177;
				if (ebx_177 >= eax_46)
					edx_182 = eax_46;
				uint32 ecx_188 = edx_182 >> 0x02;
				Eq_57 esi_193;
				esi_193.u1 = dwArg10.u1->dw0000;
				memcpy(dwLoc0C_249, esi_193, ecx_188 * 0x04);
				memcpy(dwLoc0C_249 + ecx_188 * 0x04, esi_193 + ecx_188 * 0x04, edx_182 & 0x03);
				*((word32) dwArg10 + 4) -= edx_182;
				dwArg10.u1->dw0000 = (char *) &edx_182.u1->dw0000 + (dwArg10.u1)->dw0000;
				ebx_177 -= edx_182;
				dwLoc0C_249.u1 = dwLoc0C_249 + edx_182;
			}
			else
			{
l004113A2:
				if (ebx_177 >= dwLoc04_256)
				{
					Eq_57 ecx_108 = ebx_177;
					if (dwLoc04_256 != 0x00)
						ecx_108 = ebx_177 - (uint64) ebx_177 % dwLoc04_256;
					Eq_57 eax_121 = fn00413AB0(*((word32) dwArg10 + 16), dwLoc0C_249, ecx_108);
					if (eax_121 == 0x00)
					{
						((word32) dwArg10 + 0x0C)->u1 = *((word32) dwArg10 + 0x0C) | 0x10;
						return (uint64) (eax_15 - ebx_177) /u dwArg08;
					}
					if (eax_121 == ~0x00)
					{
						((word32) dwArg10 + 0x0C)->u1 = *((word32) dwArg10 + 0x0C) | 0x20;
						return (uint64) (eax_15 - ebx_177) /u dwArg08;
					}
					ebx_177 -= eax_121;
					dwLoc0C_249.u1 = dwLoc0C_249 + eax_121;
				}
				else
				{
					word32 eax_61 = fn004139C0(dwArg10);
					byte al_94 = (byte) eax_61;
					if (eax_61 == ~0x00)
						return (uint64) (eax_15 - ebx_177) /u dwArg08;
					*dwLoc0C_249.u3 = al_94;
					--ebx_177;
					dwLoc0C_249.u1 = (word32) dwLoc0C_249 + 1;
					dwLoc04_256 = *((word32) dwArg10 + 24);
				}
			}
		} while (ebx_177 != 0x00);
	}
	return dwArg0C;
}

// 00411460: void fn00411460(Stack Eq_57 dwArg04, Stack (ptr32 ui64) dwArg08)
// Called from:
//      fn00404320
//      fn004043A0
void fn00411460(Eq_57 dwArg04, ui64 * dwArg08)
{
	fn00413D20(dwArg04, *dwArg08, 0x00);
}

// 00411480: Register word32 fn00411480(Stack Eq_200 dwArg04, Stack (ptr32 Eq_5539) dwArg08, Stack up32 dwArg0C, Register out word32 ebxOut, Register out word32 ebpOut, Register out word32 esiOut, Register out word32 ediOut)
// Called from:
//      fn004114B0
word32 fn00411480(Eq_200 dwArg04, struct Eq_5539 * dwArg08, up32 dwArg0C, word32 & ebxOut, word32 & ebpOut, word32 & esiOut, word32 & ediOut)
{
	word32 edi_31;
	word32 esi_33;
	word32 ebp_34;
	word32 ebx_29;
	struct Eq_7756 * eax_4 = fn00413FE0();
	if (eax_4 != null)
	{
		word32 eax_28 = fn00413DD0(dwArg04, dwArg08, dwArg0C, eax_4, out ebx_29, out ebp_34, out esi_33, out edi_31);
		ebxOut = ebx_29;
		ebpOut = ebp_34;
		esiOut = esi_33;
		ediOut = edi_31;
		return eax_28;
	}
	else
	{
		word32 ebx;
		ebxOut = ebx;
		word32 ebp;
		ebpOut = ebp;
		word32 esi;
		esiOut = esi;
		word32 edi;
		ediOut = edi;
		return 0x00;
	}
}

// 004114B0: Register word32 fn004114B0(Stack Eq_200 dwArg04, Stack (ptr32 Eq_5539) dwArg08, Register out word32 ebxOut, Register out word32 ebpOut, Register out word32 esiOut, Register out word32 ediOut)
// Called from:
//      fn00404320
//      fn004043A0
//      fn004044D0
//      fn00404500
word32 fn004114B0(Eq_200 dwArg04, struct Eq_5539 * dwArg08, word32 & ebxOut, word32 & ebpOut, word32 & esiOut, word32 & ediOut)
{
	word32 edi_17;
	word32 esi_19;
	word32 ebp_14;
	word32 ebx_15;
	word32 eax_13 = fn00411480(dwArg04, dwArg08, 0x40, out ebx_15, out ebp_14, out esi_19, out edi_17);
	ebxOut = ebx_15;
	ebpOut = ebp_14;
	esiOut = esi_19;
	ediOut = edi_17;
	return eax_13;
}

// 004114D0: void fn004114D0(Stack Eq_57 dwArg04, Stack Eq_5663 dwArg08, Stack Eq_57 dwArg0C)
// Called from:
//      fn00404490
void fn004114D0(Eq_57 dwArg04, Eq_5663 dwArg08, Eq_57 dwArg0C)
{
	Eq_7540 eax_14 = *((word32) dwArg04 + 0x0C);
	if (((byte) eax_14 & 131) != 0x00)
	{
		Eq_57 edi_107 = dwArg0C;
		if (dwArg0C == 0x00 || (dwArg0C == 0x01 || dwArg0C == 0x02))
		{
			((word32) dwArg04 + 0x0C)->u1 = eax_14 & ~0x10;
			Eq_5663 ebx_113;
			if (dwArg0C == 0x01)
			{
				edi_107.u0 = 0x00;
				ebx_113 = (Eq_5663) (dwArg08 + fn00411570(dwArg04));
			}
			else
				ebx_113 = dwArg08;
			fn004138B0(dwArg04);
			Eq_7540 eax_79 = *((word32) dwArg04 + 0x0C);
			byte al_80 = (byte) eax_79;
			byte ah_93 = SLICE(eax_79, byte, 8);
			if ((al_80 & 0x80) != 0x00)
				((word32) dwArg04 + 0x0C)->u1 = eax_79 & ~0x03;
			else if ((al_80 & 0x01) != 0x00 && ((al_80 & 0x08) != 0x00 && (ah_93 & 0x04) == 0x00))
				((word32) dwArg04 + 24)->u0 = 0x0200;
			fn004143E0(*((word32) dwArg04 + 16), ebx_113, edi_107);
			return;
		}
	}
	g_dw43AA58 = 22;
}

// 00411570: Register Eq_5663 fn00411570(Stack Eq_57 dwArg04)
// Called from:
//      fn00404490
//      fn004114D0
Eq_5663 fn00411570(Eq_57 dwArg04)
{
	Eq_2617 eax_18;
	eax_18.u1 = *((word32) dwArg04 + 16);
	if (*((word32) dwArg04 + 4) < 0x00)
		((word32) dwArg04 + 4)->u0 = 0x00;
	Eq_5663 eax_32 = fn004143E0(eax_18, 0x00, 0x01);
	Eq_5663 edi_255 = eax_32;
	if (eax_32 < 0x00)
		return ~0x00;
	Eq_7540 eax_48 = *((word32) dwArg04 + 0x0C);
	byte bLoc08_346 = (byte) eax_48;
	if ((eax_48 & 0x0108) == 0x00)
		return eax_32 - *((word32) dwArg04 + 4);
	Eq_57 edx_54;
	edx_54.u1 = dwArg04.u1->dw0000;
	Eq_57 ecx_100 = *((word32) dwArg04 + 8);
	Eq_5663 eax_57 = edx_54 - ecx_100;
	Eq_5663 ebx_104 = eax_57;
	if ((bLoc08_346 & 0x03) != 0x00)
	{
		if ((((eax_18 & ~0x18) >> 0x03)->ptr454580->a0004[eax_18 & 0x1F].b0000 & 0x80) != 0x00 && ecx_100 < edx_54)
		{
			do
			{
				if (*ecx_100.u3 == 0x0A)
					ebx_104 = (Eq_5663) ((word32) ebx_104 + 1);
				ecx_100.u1 = (word32) ecx_100 + 1;
			} while (ecx_100 < edx_54);
		}
	}
	else if ((bLoc08_346 & 0x80) == 0x00)
	{
		g_dw43AA58 = 22;
		return ~0x00;
	}
	if (eax_32 == 0x00)
		return ebx_104;
	if ((bLoc08_346 & 0x01) == 0x00)
		return ebx_104 + edi_255;
	Eq_57 ecx_132 = *((word32) dwArg04 + 4);
	if (ecx_132 == 0x00)
		return eax_32;
	struct Eq_7978 * eax_141 = (eax_18 & ~0x18) >> 0x03;
	Eq_57 ebp_139;
	ebp_139.u1 = eax_57 + ecx_132;
	if ((*((word32) *(eax_141 + g_a454580) + ((eax_18 & 0x1F) * 0x08 + 4)) & 0x80) == 0x00)
	{
l00411712:
		edi_255 = eax_32 - ebp_139;
		return ebx_104 + edi_255;
	}
	if (fn004143E0(eax_18, 0x00, 0x02) == eax_32)
	{
		Eq_57 eax_215 = *((word32) dwArg04 + 8);
		Eq_57 ecx_216;
		ecx_216.u1 = eax_215 + ebp_139;
		while (ecx_216 > eax_215)
		{
			if (*eax_215.u3 == 0x0A)
				ebp_139.u1 = (word32) ebp_139 + 1;
			eax_215.u1 = (word32) eax_215 + 1;
		}
		if ((*((word32) dwArg04 + 0x0D) & 0x20) != 0x00)
		{
l00411711:
			ebp_139.u1 = (word32) ebp_139 + 1;
			goto l00411712;
		}
		goto l00411712;
	}
	fn004143E0(eax_18, eax_32, 0x00);
	if (ebp_139 <= 0x0200)
	{
		Eq_7540 eax_190 = *((word32) dwArg04 + 0x0C);
		byte ah_196 = SLICE(eax_190, byte, 8);
		if (((byte) eax_190 & 0x08) != 0x00)
		{
			ebp_139.u0 = 0x0200;
			if ((ah_196 & 0x04) == 0x00)
			{
l00411700:
				if ((*((word32) *(eax_141 + g_a454580) + ((eax_18 & 0x1F) * 0x08 + 4)) & 0x04) != 0x00)
					goto l00411711;
				goto l00411712;
			}
		}
	}
	ebp_139 = *((word32) dwArg04 + 24);
	goto l00411700;
}

// 004117A0: void fn004117A0(Stack (ptr32 Eq_12259) dwArg04)
// Called from:
//      fn00404C30
void fn004117A0(union Eq_12259 * dwArg04)
{
	word32 eax_12 = fn004145E0(&g_t43B808);
	fn004147C0(dwArg04);
	fn00414680(eax_12, 4438024);
}

// 00412250: Register word32 fn00412250(Stack cu8 bArg04)
// Called from:
//      Win32CrtStartup
word32 fn00412250(cu8 bArg04)
{
	word32 dwArg04;
	return fn00412270((byte) dwArg04, 0x00, 0x04);
}

// 00412270: Register word32 fn00412270(Stack uint8 bArg04, Stack ui32 dwArg08, Stack ui32 dwArg0C)
// Called from:
//      fn00412250
word32 fn00412270(uint8 bArg04, ui32 dwArg08, ui32 dwArg0C)
{
	struct Eq_8092 * edx_9 = (uint32) bArg04;
	if ((dwArg0C & (uint32) edx_9->b43AB91) != 0x00)
		return 0x01;
	ui32 ecx_18 = 0x00;
	if (dwArg08 != 0x00)
		ecx_18 = (uint32) g_a43BB9A[edx_9] & dwArg08;
	if (ecx_18 != 0x00)
		return 0x01;
	return 0x00;
}

// 004122B0: void fn004122B0()
// Called from:
//      Win32CrtStartup
void fn004122B0()
{
	Eq_57 edx_22;
	edx_22.u1 = g_t43AAA4.u1;
	ui32 esi_16 = 0x00;
	while (*edx_22.u3 != 0x00)
	{
		if (*edx_22.u3 != 0x3D)
			++esi_16;
		edx_22.u1 = edx_22 + (strlen(edx_22) - ~0x00);
	}
	Eq_57 eax_49 = fn004111A0(esi_16 * 0x04 + 0x04);
	g_t43AA80.u1 = (DWORD) eax_49;
	Eq_57 ebx_104 = eax_49;
	if (eax_49 == 0x00)
		fn00411170(0x09);
	Eq_57 ebp_154;
	ebp_154.u1 = g_t43AAA4.u1;
	while (*ebp_154.u3 != 0x00)
	{
		Eq_231 ecx_88 = strlen(ebp_154) - ~0x00;
		if (*ebp_154.u3 != 0x3D)
		{
			Eq_57 eax_95 = fn004111A0(ecx_88);
			ebx_104.u1->dw0000 = (word32) eax_95;
			if (eax_95 == 0x00)
				fn00411170(0x09);
			char * edi_136 = ebx_104.u1->dw0000;
			strcpy(edi_136, ebp_154);
			ebx_104.u1 = &ebx_104.u1->b0004;
		}
		ebp_154.u1 = ebp_154 + ecx_88;
	}
	fn00411250(g_t43AAA4.u1);
	g_t43AAA4.u1 = (DWORD) 0x00;
	ebx_104.u1->dw0000 = 0x00;
}

// 004123A0: void fn004123A0()
// Called from:
//      Win32CrtStartup
void fn004123A0()
{
	GetModuleFileNameA(0x00, 0x00452760, 0x0104);
	Eq_57 eax_20;
	eax_20.u1 = g_t454684.u1;
	g_ptr43AA90 = &g_t452760;
	Eq_57 esi_13;
	esi_13.u0 = 0x00452760;
	if (*eax_20.u3 != 0x00)
		esi_13.u1 = g_t454684.u1;
	Eq_8244 tLoc08;
	Eq_8246 tLoc04;
	fn00412440(esi_13, 0x00, null, &tLoc08, &tLoc04);
	Eq_57 eax_54 = fn004111A0((word32) tLoc04 + (tLoc08 << 0x02));
	if (eax_54 == 0x00)
		fn00411170(0x08);
	fn00412440(esi_13, eax_54, &eax_54.u1->dw0000 + tLoc08, &tLoc08, &tLoc04);
	word32 eax_106 = (word32) tLoc08;
	g_t43AA78.u1 = (DWORD) eax_54;
	g_dw43AA74 = eax_106 - 0x01;
}

// 00412440: void fn00412440(Stack Eq_57 dwArg04, Stack Eq_57 dwArg08, Stack (ptr32 Eq_8239) dwArg0C, Stack (ptr32 word32) dwArg10, Stack (ptr32 word32) dwArg14)
// Called from:
//      fn004123A0
void fn00412440(Eq_57 dwArg04, Eq_57 dwArg08, struct Eq_8239 * dwArg0C, word32 * dwArg10, word32 * dwArg14)
{
	*dwArg14 = 0x00;
	*dwArg10 = 0x01;
	Eq_57 esi_101 = dwArg04;
	struct Eq_8239 * eax_111 = dwArg0C;
	if (dwArg08 != 0x00)
	{
		dwArg08.u1->dw0000 = dwArg0C;
		dwArg08.u1 = &dwArg08.u1->b0004;
	}
	if (*dwArg04.u3 != 0x22)
	{
		uint8 dl_123;
		do
		{
			++*dwArg14;
			if (eax_111 != null)
			{
				eax_111->b0000 = *esi_101.u3;
				++eax_111;
			}
			dl_123 = (uint8) *esi_101.u3;
			esi_101.u1 = (word32) esi_101 + 1;
			if ((g_a43AB91[(uint32) dl_123] & 0x04) != 0x00)
			{
				++*dwArg14;
				if (eax_111 != null)
				{
					eax_111->b0000 = *esi_101.u3;
					++eax_111;
				}
				esi_101.u1 = (word32) esi_101 + 1;
			}
			if (dl_123 == 0x20)
				break;
			if (dl_123 == 0x00)
				goto l004124B0;
		} while (dl_123 != 0x09);
		if (dl_123 == 0x00)
		{
l004124B0:
			--esi_101;
		}
		else if (eax_111 != null)
			eax_111->bFFFFFFFF = 0x00;
	}
	else
	{
		esi_101.u1 = (word32) dwArg04 + 1;
		if (*((word32) dwArg04 + 1) != 0x22)
		{
			do
			{
				uint8 bl_39 = (uint8) *esi_101.u3;
				if (bl_39 == 0x00)
					break;
				if ((g_a43AB91[(uint32) bl_39] & 0x04) != 0x00)
				{
					++*dwArg14;
					if (eax_111 != null)
					{
						eax_111->b0000 = *esi_101.u3;
						esi_101.u1 = (word32) esi_101 + 1;
						++eax_111;
					}
				}
				++*dwArg14;
				if (eax_111 != null)
				{
					eax_111->b0000 = *esi_101.u3;
					++eax_111;
				}
				esi_101.u1 = (word32) esi_101 + 1;
			} while (*esi_101.u3 != 0x22);
		}
		++*dwArg14;
		if (eax_111 != null)
		{
			eax_111->b0000 = 0x00;
			++eax_111;
		}
		if (*esi_101.u3 == 0x22)
			esi_101.u1 = (word32) esi_101 + 1;
	}
	up32 edi_176 = 0x00;
	while (*esi_101.u3 != 0x00)
	{
		while (true)
		{
			byte dl_186 = *esi_101.u3;
			if (dl_186 != 0x20 && dl_186 != 0x09)
				break;
			esi_101.u1 = (word32) esi_101 + 1;
		}
		if (*esi_101.u3 == 0x00)
			break;
		if (dwArg08 != 0x00)
		{
			dwArg08.u1->dw0000 = eax_111;
			dwArg08.u1 = &dwArg08.u1->b0004;
		}
		++*dwArg10;
l0041253E:
		word32 ebx_229 = 0x01;
		uint32 ebp_230 = 0x00;
		while (*esi_101.u3 == 0x5C)
		{
			esi_101.u1 = (word32) esi_101 + 1;
			++ebp_230;
		}
		if (*esi_101.u3 == 0x22)
		{
			if ((ebp_230 & 0x01) == 0x00)
			{
				if (edi_176 != 0x00)
				{
					Eq_57 edx_258;
					edx_258.u1 = (word32) esi_101 + 1;
					if (*edx_258.u3 != 0x22)
						goto l0041256E;
					esi_101 = edx_258;
				}
				else
				{
l0041256E:
					ebx_229 = 0x00;
				}
				edi_176 = (word32) (edi_176 < 0x01);
			}
			ebp_230 >>= 0x01;
		}
		word32 ebp_281 = ebp_230 - 0x01;
		if (ebp_230 != 0x00)
		{
			word32 ebp_790;
			do
			{
				if (eax_111 != null)
				{
					eax_111->b0000 = 0x5C;
					++eax_111;
				}
				++*dwArg14;
				ebp_281 = ebp_790 - 0x01;
				ebp_790 = ebp_281;
			} while (ebp_790 != 0x00);
		}
		uint8 dl_320 = (uint8) *esi_101.u3;
		if (dl_320 != 0x00 && (edi_176 != 0x00 || dl_320 != 0x20 && dl_320 != 0x09))
		{
			if (ebx_229 != 0x00)
			{
				if (eax_111 != null)
				{
					if ((g_a43AB91[(uint32) dl_320] & 0x04) != 0x00)
					{
						eax_111->b0000 = dl_320;
						++*dwArg14;
						esi_101.u1 = (word32) esi_101 + 1;
						++eax_111;
					}
					++eax_111;
					eax_111->bFFFFFFFF = *esi_101.u3;
					++*dwArg14;
					esi_101.u1 = (word32) esi_101 + 1;
					goto l0041253E;
				}
				if ((g_a43AB91[(uint32) dl_320] & 0x04) != 0x00)
				{
					++*dwArg14;
					esi_101.u1 = (word32) esi_101 + 1;
				}
				++*dwArg14;
			}
			esi_101.u1 = (word32) esi_101 + 1;
			goto l0041253E;
		}
		if (eax_111 != null)
		{
			eax_111->b0000 = 0x00;
			++eax_111;
		}
		++*dwArg14;
	}
	if (dwArg08 != 0x00)
		dwArg08.u1->dw0000 = 0x00;
	++*dwArg10;
}

// 00412620: Register Eq_57 fn00412620()
// Called from:
//      Win32CrtStartup
Eq_57 fn00412620()
{
	Eq_8691 ebx_14;
	ebx_14.u0 = 0x00;
	Eq_8693 edi_164;
	edi_164.u0 = 0x00;
	if (g_dw43AB88 == 0x00)
	{
		Eq_8693 eax_22 = GetEnvironmentStringsW();
		edi_164 = eax_22;
		if (eax_22 != 0x00)
			g_dw43AB88 = 0x01;
		else
		{
			Eq_8691 eax_26 = GetEnvironmentStrings();
			ebx_14 = eax_26;
			if (eax_26 == 0x00)
				return 0x00;
			g_dw43AB88 = 0x02;
		}
	}
	if (g_dw43AB88 != 0x01)
	{
		if (g_dw43AB88 != 0x02)
			return 0x00;
		if (ebx_14 == 0x00)
		{
			Eq_8691 eax_67 = GetEnvironmentStrings();
			ebx_14 = eax_67;
			if (eax_67 == 0x00)
				return 0x00;
		}
		Eq_8691 ebp_74 = ebx_14;
		if (ebx_14.u0->b0000 != 0x00)
		{
			do
			{
				do
					++ebp_74.u0;
				while (ebp_74.u0->b0000 != 0x00);
				ebp_74.u0 = ebp_74 + 0x01;
			} while (*(ebp_74 + (struct Eq_15957 *) 0x01) != 0x00);
		}
		word32 ebp_89 = ebp_74 - ebx_14;
		Eq_57 eax_98 = fn004111A0(ebp_89 + 0x01);
		if (eax_98 != 0x00)
		{
			uint32 ecx_115 = ebp_89 + 0x01 >> 0x02;
			memcpy(eax_98, ebx_14, ecx_115 * 0x04);
			memcpy(eax_98 + ecx_115 * 0x04, ebx_14 + ecx_115 * 0x04, ebp_89 + 0x01 & 0x03);
			FreeEnvironmentStringsA(ebx_14);
			return eax_98;
		}
		else
		{
			FreeEnvironmentStringsA(ebx_14);
			return 0x00;
		}
	}
	else
	{
		if (edi_164 == 0x00)
		{
			Eq_8693 eax_170 = GetEnvironmentStringsW();
			edi_164 = eax_170;
			if (eax_170 == 0x00)
				return 0x00;
		}
		Eq_8693 esi_179 = edi_164;
		if (edi_164.u0->w0000 != 0x00)
		{
			do
			{
				do
					++esi_179.u0;
				while (esi_179.u0->w0000 != 0x00);
				esi_179.u0 = esi_179 + 0x02;
			} while (*(esi_179 + (struct Eq_15956 *) 0x02) != 0x00);
		}
		int32 esi_201 = (esi_179 - edi_164 >> 0x01) + 0x01;
		Eq_231 eax_214 = WideCharToMultiByte(0x00, 0x00, edi_164, esi_201, 0x00, 0x00, null, null);
		if (eax_214 != 0x00)
		{
			Eq_57 eax_223 = fn004111A0(eax_214);
			Eq_57 ebx_232 = eax_223;
			if (eax_223 != 0x00)
			{
				if (WideCharToMultiByte(0x00, 0x00, edi_164, esi_201, eax_223, eax_214, null, null) == 0x00)
				{
					fn00411250(eax_223);
					ebx_232.u0 = 0x00;
				}
				FreeEnvironmentStringsW(edi_164);
				return ebx_232;
			}
		}
		FreeEnvironmentStringsW(edi_164);
		return 0x00;
	}
}

// 004127B0: void fn004127B0(Stack Eq_2617 dwArg04)
// Called from:
//      fn00412A70
void fn004127B0(Eq_2617 dwArg04)
{
	Eq_2617 eax_22 = fn00412990(dwArg04);
	if (eax_22 == g_t43AC94.u1)
		return;
	if (eax_22 != 0x00)
	{
		ui32 dwLoc18_358 = 0x00;
		struct Eq_8896 * eax_155 = (struct Eq_8896 *) g_a43ACB8;
		do
		{
			if (eax_155->dw0000 == eax_22)
			{
				struct Eq_8901 * edi_153 = (struct Eq_8901 *) g_a43AB90;
				word32 ecx_154;
				for (ecx_154 = 0x40; ecx_154 != 0x00; --ecx_154)
				{
					edi_153->b0000 = (byte) 0x00;
					++edi_153;
				}
				edi_153->b0000 = 0x00;
				struct Eq_8956 * eax_104 = null;
				do
				{
					struct Eq_9051 * esi_59 = (struct Eq_9051 *) ((char *) &g_a43ACB8->t0000 + 16 + (eax_104 + dwLoc18_358 * 0x06) * 0x08);
					while (esi_59->b0000 != 0x00)
					{
						uint8 cl_65 = esi_59->b0001;
						if (cl_65 == 0x00)
							break;
						struct Eq_9061 * edx_77 = (uint32) esi_59->b0000;
						if ((uint32) cl_65 >= edx_77)
						{
							byte cl_81 = (byte) eax_104[4435120];
							do
							{
								edx_77[4434833] = (struct Eq_9061) (edx_77[4434833] | cl_81);
								++edx_77;
							} while ((uint32) esi_59->b0001 >= edx_77);
						}
						++esi_59;
					}
					++eax_104;
				} while (eax_104 < (struct Eq_8956 *) 0x04);
				g_t43AC94.u1 = (HANDLE) eax_22;
				g_dw43AC98 = fn004129E0(eax_22);
				struct Eq_9113 * ecx_133 = (dwLoc18_358 << 0x04) + 4435132 + (dwLoc18_358 << 0x04) * 0x02;
				uip32 ebx_130 = (dwLoc18_358 << 0x04)->a43ACC0[dwLoc18_358 << 0x04].dw0000;
				uip32 ecx_141 = ecx_133->dw0008;
				g_dw43ACA0 = ecx_133->dw0000;
				g_dw43ACA4 = ebx_130;
				g_dw43ACA8 = ecx_141;
				return;
			}
			++eax_155;
			++dwLoc18_358;
		} while (eax_155 < &g_t43ADA8);
		Eq_8919 tLoc14;
		if (GetCPInfo(eax_22, &tLoc14) != 0x01)
		{
			if (g_dw43ACAC == 0x00)
				return;
			fn00412A40();
		}
		else
		{
			struct Eq_8928 * edi_200 = (struct Eq_8928 *) g_a43AB90;
			word32 ecx_205;
			for (ecx_205 = 0x40; ecx_205 != 0x00; --ecx_205)
			{
				edi_200->b0000 = (byte) 0x00;
				++edi_200;
			}
			edi_200->b0000 = 0x00;
			uip32 eax_214;
			if (tLoc14.MaxCharSize > 0x01)
			{
				union Eq_8974 * esi_219 = (union Eq_8974 *) tLoc14.LeadByte;
				if (Mem209[&tLoc14 + 6:byte] != 0x00)
				{
					do
					{
						uint8 al_224 = esi_219->u1.b0001;
						if (al_224 == 0x00)
							break;
						struct Eq_8993 * ecx_236 = (uint32) esi_219->u1.b0000;
						if ((uint32) al_224 >= ecx_236)
						{
							do
							{
								ecx_236[4434833] = (struct Eq_8993) (ecx_236[4434833] | 0x04);
								++ecx_236;
							} while ((uint32) esi_219->u1.b0001 >= ecx_236);
						}
						esi_219 = (union Eq_8974 *) ((char *) esi_219 + 2);
					} while (esi_219->u1.b0000 != 0x00);
				}
				struct Eq_8982 * eax_257 = (struct Eq_8982 *) 0x01;
				do
				{
					eax_257[4434833] = (struct Eq_8982) (eax_257[4434833] | 0x08);
					++eax_257;
				} while (eax_257 < (struct Eq_8982 *) 0xFF);
				g_t43AC94.u1 = (HANDLE) eax_22;
				eax_214 = fn004129E0(eax_22);
			}
			else
			{
				g_t43AC94.u1 = (HANDLE) 0x00;
				eax_214 = 0x00;
			}
			g_dw43AC98 = eax_214;
			g_dw43ACA0 = 0x00;
			g_dw43ACA4 = 0x00;
			g_dw43ACA8 = 0x00;
		}
	}
	else
		fn00412A40();
}

// 00412990: Register Eq_2617 fn00412990(Stack Eq_2617 dwArg04)
// Called from:
//      fn004127B0
Eq_2617 fn00412990(Eq_2617 dwArg04)
{
	g_dw43ACAC = 0x00;
	Eq_2617 eax_13 = dwArg04;
	switch (dwArg04)
	{
	case ~0x01:
		g_dw43ACAC = 0x01;
		return GetOEMCP();
	case ~0x02:
		g_dw43ACAC = 0x01;
		return GetACP();
	default:
		if (dwArg04 == ~0x03)
		{
			g_dw43ACAC = 0x01;
			eax_13.u1 = g_t43BDE8.u1;
		}
		return eax_13;
	}
}

// 004129E0: Register word32 fn004129E0(Stack Eq_2617 dwArg04)
// Called from:
//      fn004127B0
word32 fn004129E0(Eq_2617 dwArg04)
{
	if (dwArg04 <= 0x03B6 && dwArg04 >= 0x03A4)
	{
		switch (dwArg04)
		{
		case 0x03A4:
			return 0x0411;
		case 933:
		case 0x03A6:
		case 0x03A7:
		case 0x03A9:
		case 0x03AA:
		case 939:
		case 0x03AC:
		case 0x03AD:
		case 0x03AE:
		case 0x03AF:
		case 944:
		case 0x03B1:
		case 0x03B2:
		case 0x03B3:
		case 0x03B4:
			break;
		case 0x03A8:
			return 0x0804;
		case 949:
			return 0x0412;
		case 0x03B6:
			return 0x0404;
		}
	}
	return 0x00;
}

// 00412A40: void fn00412A40()
// Called from:
//      fn004127B0
void fn00412A40()
{
	struct Eq_9174 * edi_11 = (struct Eq_9174 *) g_a43AB90;
	word32 ecx_12;
	for (ecx_12 = 0x40; ecx_12 != 0x00; --ecx_12)
	{
		edi_11->b0000 = (byte) 0x00;
		++edi_11;
	}
	edi_11->b0000 = 0x00;
	g_dw43ACA0 = 0x00;
	g_t43AC94.u1 = (HANDLE) 0x00;
	g_dw43AC98 = 0x00;
	g_dw43ACA4 = 0x00;
	g_dw43ACA8 = 0x00;
}

// 00412A70: void fn00412A70()
// Called from:
//      Win32CrtStartup
void fn00412A70()
{
	fn004127B0(~0x02);
}

// 00412A80: void fn00412A80()
// Called from:
//      Win32CrtStartup
void fn00412A80()
{
	Eq_57 eax_20 = fn004111A0(0x0100);
	struct Eq_9214 * esi_29 = (struct Eq_9214 *) &eax_20.u1->b0004;
	if (eax_20 == 0x00)
		fn00411170(0x1B);
	g_a454580[0].u1 = (DWORD) eax_20;
	g_t454680.u1 = (HANDLE) 0x20;
	if ((word32) eax_20 + 0x0100 > eax_20)
	{
		do
		{
			esi_29->b0000 = 0x00;
			++esi_29;
			esi_29->dwFFFFFFF8 = ~0x00;
			esi_29->bFFFFFFFD = 0x0A;
		} while (g_a454580[0].u1 + 32 > esi_29);
	}
	Eq_9232 tLoc44;
	GetStartupInfoA(&tLoc44);
	if (tLoc44.cbReserved2 != 0x00 && tLoc44.lpReserved2 != null)
	{
		Eq_9270 eax_79;
		eax_79.u0 = tLoc44.lpReserved2;
		Eq_2617 esi_107;
		esi_107.u1 = eax_79.u0->u1;
		Eq_9277 edi_150 = (Eq_9277) (eax_79 + 4);
		Eq_9280 ebx_145;
		ebx_145.u0 = (char *) esi_107.u1 + (eax_79 + (union Eq_2617 *) 4);
		if (esi_107 >= 0x0800)
			esi_107.u0 = 0x0800;
		if (g_t454680.u1 < esi_107)
		{
			up32 * ebp_109 = g_a454584;
			do
			{
				struct Eq_9294 * eax_120 = (struct Eq_9294 *) &fn004111A0(0x0100).u1->b0004;
				if (eax_120 == null)
				{
					esi_107.u1 = g_t454680.u1;
					break;
				}
				*ebp_109 = eax_120;
				g_t454680.u1 = (HANDLE) ((char *) g_t454680.u1 + 32);
				if (eax_120 + 32 > eax_120)
				{
					do
					{
						eax_120->b0000 = 0x00;
						++eax_120;
						eax_120->dwFFFFFFF8 = ~0x00;
						eax_120->bFFFFFFFD = 0x0A;
					} while (*ebp_109 + 0x0100 > eax_120);
				}
				++ebp_109;
			} while (g_t454680.u1 < esi_107);
		}
		Eq_2617 ebp_138;
		ebp_138.u0 = 0x00;
		if (esi_107 > 0x00)
		{
			do
			{
				Eq_2617 ecx_147;
				ecx_147.u1 = *ebx_145.u0;
				if (ecx_147 != ~0x00)
				{
					byte al_151 = *edi_150;
					if ((al_151 & 0x01) != 0x00 && ((al_151 & 0x08) != 0x00 || GetFileType(ecx_147) != 0x00))
					{
						struct Eq_9372 * ecx_181 = ((ebp_138 & ~0x18) >> 0x03)->dw454580 + (ebp_138 & 0x1F) * 0x08;
						ecx_181->dw0000 = *ebx_145.u0;
						ecx_181->b0004 = *edi_150;
					}
				}
				ebp_138.u1 = (word32) ebp_138 + 1;
				edi_150 = (Eq_9277) (edi_150 + (BYTE *) 0x01);
				ebx_145.u0 = ebx_145 + 0x04;
			} while (ebp_138 < esi_107);
		}
	}
	int32 esi_197;
	for (esi_197 = 0x00; esi_197 < 0x03; ++esi_197)
	{
		struct Eq_9392 * edi_205 = (struct Eq_9392 *) (g_a454580[0].u1 + esi_197);
		if (edi_205->t0000.u1 == ~0x00)
		{
			edi_205->b0004 = 0x81;
			Eq_57 eax_213;
			eax_213.u0 = ~0x09;
			if (esi_197 != 0x00)
				eax_213 = (cond(esi_197 - 1 - 0x01) & 0x02) + ~0x0B;
			Eq_2617 eax_239 = GetStdHandle(eax_213);
			if (eax_239 != ~0x00)
			{
				Eq_57 eax_249 = GetFileType(eax_239);
				if (eax_249 == 0x00)
					goto l00412C34;
				edi_205->t0000.u1 = (HANDLE) eax_239;
				if ((eax_249 & 0xFF) == 0x02)
					edi_205->b0004 |= 0x40;
				else if ((eax_249 & 0xFF) == 0x03)
					edi_205->b0004 |= 0x08;
			}
			else
			{
l00412C34:
				edi_205->b0004 |= 0x40;
			}
		}
		else
			edi_205->b0004 |= 0x80;
	}
	SetHandleCount(g_t454680.u1);
}

// 00412C60: Register word32 fn00412C60()
// Called from:
//      Win32CrtStartup
word32 fn00412C60()
{
	Eq_2617 eax_10 = HeapCreate(0x01, 0x1000, 0x00);
	g_t454574.u1 = (HANDLE) eax_10;
	if (eax_10 == 0x00)
		return 0x00;
	if (fn00412FF0() != 0x00)
		return 0x01;
	HeapDestroy(g_t454574.u1);
	return 0x00;
}

// 00412D80: void fn00412D80()
// Called from:
//      fn00411170
void fn00412D80()
{
	word32 eax_5 = g_dw43AAB0;
	if (eax_5 == 0x01 || eax_5 == 0x00 && g_dw43AAB4 == 0x01)
	{
		fn00412DC0(252);
		<anonymous> * eax_25 = g_ptr43AE48;
		if (eax_25 != null)
			eax_25();
		fn00412DC0(0xFF);
	}
}

// 00412DC0: void fn00412DC0(Stack word32 dwArg04)
// Called from:
//      fn00411170
//      fn00412D80
void fn00412DC0(word32 dwArg04)
{
	ui32 ecx_29 = 0x00;
	struct Eq_9534 * eax_23 = (struct Eq_9534 *) g_a43ADB8;
	while (eax_23->dw0000 != dwArg04)
	{
		++eax_23;
		++ecx_29;
		if (eax_23 >= &g_ptr43AE48)
			break;
	}
	if (g_a43ADB8[ecx_29] != dwArg04)
		return;
	if (g_dw43AAB0 != 0x01 && (g_dw43AAB0 != 0x00 || g_dw43AAB4 != 0x01))
	{
		if (dwArg04 == 252)
			return;
		word32 dwLoc0104;
		if (GetModuleFileNameA(0x00, &dwLoc0104, 0x0104) == 0x00)
			memcpy(&dwLoc0104, &g_t41B608, 0x14);
		union Eq_9577 * ebp_138 = &dwLoc0104;
		if (strlen(&dwLoc0104) > 0x3B)
		{
			ptr32 fp;
			ebp_138 = (word32) (strlen(&dwLoc0104) - ~0x00) + (fp - 0x0140);
			fn00416300(ebp_138, &g_b41B604, 0x03);
		}
		word32 dwLoc01A4;
		memcpy(&dwLoc01A4, &g_t41B5E8, 0x18);
		ptr32 edi_199 = (char *) &dwLoc01A4 + ((word32) strlen(&dwLoc01A4) + 1);
		strcpy(edi_199 - 0x01, ebp_138);
		ptr32 edi_223 = (char *) &dwLoc01A4 + ((word32) strlen(&dwLoc01A4) + 1);
		strcpy(edi_223 - 0x01, "\n\n");
		char * edi_236 = (char *) *((char *) &g_a43ADB8->ptr0004 + ecx_29 * 0x08);
		ptr32 edi_250 = (char *) &dwLoc01A4 + ((word32) strlen(&dwLoc01A4) + 1);
		strcpy(edi_250 - 0x01, edi_236);
		fn00416260();
		return;
	}
	Eq_2617 esi_49;
	if (g_a454580[0].u1 != 0x00)
	{
		esi_49.u1 = g_a454580[0].u1[2];
		if (esi_49 != ~0x00)
		{
l00412F87:
			Eq_57 edx_65;
			edx_65.u1 = *((char *) &g_a43ADB8->ptr0004 + ecx_29 * 0x08);
			Eq_57 tLoc01A8;
			WriteFile(esi_49, edx_65, strlen(edx_65), &tLoc01A8, null);
			return;
		}
	}
	esi_49 = GetStdHandle(~0x0B);
	goto l00412F87;
}

// 00412FC0: Register word32 fn00412FC0(Stack Eq_231 dwArg04)
// Called from:
//      fn004111C0
word32 fn00412FC0(Eq_231 dwArg04)
{
	<anonymous> * ecx_5 = g_ptr452864;
	if (ecx_5 == null)
		return 0x00;
	ecx_5();
	word32 eax_15;
	if (eax_15 == 0x00)
		return 0x00;
	return 0x01;
}

// 00412FF0: Register Eq_57 fn00412FF0()
// Called from:
//      fn00412C60
//      fn00413350
Eq_57 fn00412FF0()
{
	Eq_57 esi_28;
	if (g_dw43B660 == 0x00)
		esi_28.u0 = 4435536;
	else
	{
		Eq_57 eax_26 = HeapAlloc(g_t454574.u1, 0x00, 0x0814);
		esi_28 = eax_26;
		if (eax_26 == 0x00)
			return 0x00;
	}
	Eq_57 eax_56 = VirtualAlloc(0x00, 0x00400000, 0x2000, 0x04);
	Eq_57 ebx_178 = eax_56;
	if (eax_56 != 0x00)
	{
		if (VirtualAlloc(eax_56, 0x00010000, 0x1000, 0x04) != 0x00)
		{
			if (esi_28 == 4435536)
			{
				if (g_ptr43AE50 == null)
					g_ptr43AE50 = &g_ptr43AE50;
				if (g_t43AE54.u1 == 0x00)
					g_t43AE54.u1 = (DWORD) 4435536;
			}
			else
			{
				esi_28.u1->dw0000 = &g_ptr43AE50;
				((word32) esi_28 + 4)->u1 = g_t43AE54.u1;
				g_t43AE54.u1 = (DWORD) esi_28;
				((word32) esi_28 + 4)->u1->dw0000 = (word32) esi_28;
			}
			*((word32) esi_28 + 0x0810) = eax_56;
			((word32) esi_28 + 8)->u0 = 0x00;
			((word32) esi_28 + 0x0C)->u1 = 0x10;
			Eq_9821 ebp_129;
			ebp_129.u0 = 0x00;
			do
			{
				Eq_9826 edi_145;
				edi_145.u0 = esi_28 + ebp_129;
				if (ebp_129 < 0x10)
					edi_145.u0->t0010.u0 = 0xF0;
				else
					edi_145.u0->t0010.u0 = ~0x00;
				edi_145.u0->b0410 = ~0x0E;
				ebp_129.u0 = (word32) ebp_129 + 1;
			} while (ebp_129 < 0x0400);
			Eq_57 edi_162 = eax_56;
			word32 ecx_167;
			for (ecx_167 = 0x4000; ecx_167 != 0x00; --ecx_167)
			{
				edi_162.u1->dw0000 = 0x00;
				edi_162.u1 = edi_162 + 4;
			}
			if ((word32) *((word32) esi_28 + 0x0810) + 0x00010000 > eax_56)
			{
				do
				{
					ebx_178.u1->dw0000 = (word32) ebx_178 + 8;
					((word32) ebx_178 + 4)->u1 = 0xF0;
					((word32) ebx_178 + 0x00F8)->u0 = ~0x00;
					ebx_178.u1 = ebx_178 + 0x1000;
				} while ((word32) *((word32) esi_28 + 0x0810) + 0x00010000 > ebx_178);
			}
			return esi_28;
		}
		VirtualFree(eax_56, 0x00, 0x8000);
	}
	if (esi_28 != 4435536)
		HeapFree(g_t454574.u1, 0x00, esi_28);
	return 0x00;
}

// 00413160: void fn00413160(Stack Eq_57 dwArg04)
// Called from:
//      fn004131C0
void fn00413160(Eq_57 dwArg04)
{
	VirtualFree(*((word32) dwArg04 + 0x0810), 0x00, 0x8000);
	if (g_t43B664.u1 == dwArg04)
		g_t43B664.u1 = (DWORD) *((word32) dwArg04 + 4);
	if (dwArg04 == 4435536)
		g_dw43B660 = 0x00;
	else
	{
		((word32) dwArg04 + 4)->u1->dw0000 = dwArg04.u1->dw0000;
		*((word32) dwArg04.u1->dw0000 + 4) = (word32) *((word32) dwArg04 + 4);
		HeapFree(g_t454574.u1, 0x00, dwArg04);
	}
}

// 004131C0: void fn004131C0(Stack int32 dwArg04)
// Called from:
//      fn00413300
void fn004131C0(int32 dwArg04)
{
	Eq_57 esi_128;
	esi_128.u1 = g_t43AE54.u1;
	do
	{
		if (*((word32) esi_128 + 0x0810) != 0x00)
		{
			Eq_9948 ebp_23;
			ebp_23.u0 = 0x03FF;
			byte * ebx_24 = (word32) esi_128 + 0x040F;
			word32 dwLoc04_154 = 0x00;
			int32 edi_27;
			for (edi_27 = 0x003FF000; edi_27 >= 0x00; edi_27 -= 0x1000)
			{
				if (*ebx_24 == 0xF0 && VirtualFree((char *) (&(((word32) esi_128 + 0x0810)->u1)->dw0000) + edi_27, 0x1000, 0x4000) != 0x00)
				{
					*ebx_24 = ~0x00;
					--g_dw43B668;
					Eq_9948 eax_52 = *((word32) esi_128 + 0x0C);
					if (eax_52 == ~0x00 || ebp_23 < eax_52)
						((word32) esi_128 + 0x0C)->u1 = ebp_23;
					int32 v18_66 = dwArg04 - 0x01;
					++dwLoc04_154;
					dwArg04 = v18_66;
					if (v18_66 == 0x00)
						break;
				}
				--ebp_23;
				--ebx_24;
			}
			esi_128 = *((word32) esi_128 + 4);
			if (dwLoc04_154 != 0x00 && *((word32) esi_128 + 16) == ~0x00)
			{
				int32 edx_105 = 0x01;
				byte * ecx_100 = (word32) esi_128 + 0x0011;
				while (*ecx_100 == ~0x00)
				{
					++edx_105;
					++ecx_100;
					if (edx_105 >= 0x0400)
						break;
				}
				if (edx_105 == 0x0400)
					fn00413160(esi_128);
			}
		}
	} while (esi_128 != g_t43AE54.u1 && dwArg04 > 0x00);
}

// 004132A0: Register int32 fn004132A0(Stack Eq_57 dwArg04, Stack (ptr32 (ptr32 Eq_10049)) dwArg08, Stack (ptr32 ui32) dwArg0C)
// Called from:
//      fn00411250
int32 fn004132A0(Eq_57 dwArg04, struct Eq_10049 ** dwArg08, ui32 * dwArg0C)
{
	struct Eq_10049 * ecx_34 = (struct Eq_10049 *) &g_ptr43AE50;
	do
	{
		Eq_57 eax_9;
		eax_9.u1 = ecx_34->t0810.u1;
		if (eax_9 != 0x00 && (eax_9 < dwArg04 && (word32) eax_9 + 0x00400000 > dwArg04))
		{
			*dwArg08 = (struct Eq_10049 **) ecx_34;
			*dwArg0C = dwArg04 & ~0x0FFF;
			return (dwArg04 - (dwArg04 & ~0x0FFF) - 0x0100 >> 0x04) + 8 + (dwArg04 & ~0x0FFF);
		}
		ecx_34 = ecx_34->ptr0000;
	} while (ecx_34 != &g_ptr43AE50);
	return 0x00;
}

// 00413300: void fn00413300(Stack (ptr32 Eq_7526) dwArg04, Stack int32 dwArg08, Stack (ptr32 byte) dwArg0C)
// Called from:
//      fn00411250
void fn00413300(struct Eq_7526 * dwArg04, int32 dwArg08, byte * dwArg0C)
{
	struct Eq_10091 * ecx_9 = (struct Eq_10091 *) ((char *) dwArg04 + (dwArg08 - dwArg04->dw0810 >> 0x0C));
	ecx_9->b0010 += *dwArg0C;
	*dwArg0C = 0x00;
	ecx_9->b0410 = ~0x0E;
	if (ecx_9->b0010 == 0xF0)
	{
		++g_dw43B668;
		if (g_dw43B668 == 0x20)
			fn004131C0(0x10);
	}
}

// 00413350: Register word32 fn00413350(Stack uint32 dwArg04)
// Called from:
//      fn00411210
word32 fn00413350(uint32 dwArg04)
{
	Eq_57 edi_168;
	edi_168.u1 = g_t43B664.u1;
	do
	{
		if (*((word32) edi_168 + 0x0810) != 0x00)
		{
			Eq_9948 esi_22 = *((word32) edi_168 + 8);
			if (esi_22 < 0x0400)
			{
				int32 ebp_26 = esi_22 << 0x0C;
				do
				{
					uint8 cl_31 = (uint8) *((word32) esi_22.u0 + ((word32) edi_168 + 16));
					uint8 bl_74 = (byte) dwArg04;
					uint32 eax_35 = (uint32) cl_31;
					if (eax_35 >= dwArg04 && (cl_31 != ~0x00 && (uint32) (*((word32) esi_22.u0 + ((word32) edi_168 + 1040))) > dwArg04))
					{
						word32 eax_58 = fn004135D0((char *) &((word32) edi_168 + 0x0810)->u1->dw0000 + ebp_26, eax_35, dwArg04);
						if (eax_58 != 0x00)
						{
							g_t43B664.u1 = (DWORD) edi_168;
							((word32) esi_22.u0 + ((word32) edi_168 + 16))->u1 = *((word32) esi_22.u0 + ((word32) edi_168 + 16)) - bl_74;
							((word32) edi_168 + 8)->u1 = esi_22;
							return eax_58;
						}
						*((word32) esi_22.u0 + ((word32) edi_168 + 1040)) = bl_74;
					}
					ebp_26 += 0x1000;
					esi_22 = (word32) esi_22.u0 + 1;
				} while (ebp_26 < 0x00400000);
			}
			word32 ebp_125 = 0x00;
			Eq_9948 esi_101;
			esi_101.u0 = 0x00;
			if (*((word32) edi_168 + 8) > 0x00)
			{
				do
				{
					uint8 cl_103 = (uint8) *((word32) esi_101.u0 + ((word32) edi_168 + 16));
					uint8 bl_146 = (byte) dwArg04;
					uint32 eax_107 = (uint32) cl_103;
					if (eax_107 >= dwArg04 && (cl_103 != ~0x00 && (uint32) (*((word32) esi_101.u0 + ((word32) edi_168 + 1040))) > dwArg04))
					{
						word32 eax_130 = fn004135D0((char *) &((word32) edi_168 + 0x0810)->u1->dw0000 + ebp_125, eax_107, dwArg04);
						if (eax_130 != 0x00)
						{
							g_t43B664.u1 = (DWORD) edi_168;
							((word32) esi_101.u0 + ((word32) edi_168 + 16))->u1 = *((word32) esi_101.u0 + ((word32) edi_168 + 16)) - bl_146;
							((word32) edi_168 + 8)->u1 = esi_101;
							return eax_130;
						}
						*((word32) esi_101.u0 + ((word32) edi_168 + 1040)) = bl_146;
					}
					ebp_125 += 0x1000;
					esi_101 = (word32) esi_101.u0 + 1;
				} while (*((word32) edi_168 + 8) > esi_101);
			}
		}
		edi_168.u1 = edi_168.u1->dw0000;
	} while (g_t43B664.u1 != edi_168);
	Eq_57 esi_171;
	esi_171.u0 = 4435536;
	Eq_9948 bl_382;
	do
	{
		byte bl_308 = (byte) dwArg04;
		if (*((word32) esi_171 + 0x0810) != 0x00 && *((word32) esi_171 + 0x0C) != ~0x00)
		{
			Eq_9948 edx_185 = *((word32) esi_171 + 0x0C);
			Eq_9948 ecx_187 = (word32) edx_185.u0 + 16;
			if (edx_185 >= 0x03F0)
				ecx_187.u0 = 0x0400;
			Eq_9948 edi_192 = (word32) edx_185.u0 + 1;
			if (ecx_187 > (word32) edx_185.u0 + 1)
			{
				while (*((word32) edi_192.u0 + ((word32) esi_171 + 16)) == ~0x00)
				{
					edi_192 = (word32) edi_192.u0 + 1;
					if (ecx_187 <= edi_192)
						break;
				}
			}
			if (VirtualAlloc(((word32) esi_171 + 0x0810)->u1 + edx_185 * 0x0200, edi_192 - edx_185 << 0x0C, 0x1000, 0x04) != ((word32) esi_171 + 0x0810)->u1 + edx_185 * 0x0200)
				return 0x00;
			else
			{
				Eq_9948 ecx_249 = *((word32) esi_171 + 0x0C);
				struct Eq_10321 * ebp_252 = (struct Eq_10321 *) (((word32) esi_171 + 0x0810)->u1 + ecx_249 * 0x0200);
				while (ecx_249 < edi_192)
				{
					ebp_252->dw0000 = &ebp_252->dw0000 + 2;
					++ebp_252;
					ebp_252->dwFFFFF004 = 0xF0;
					ebp_252->bFFFFF0F8 = ~0x00;
					ecx_249 = (word32) ecx_249.u0 + 1;
					struct Eq_10346 * edx_263 = (word32) ecx_249.u0 + (esi_171 - 1);
					edx_263->b0010 = 0xF0;
					edx_263->b0410 = ~0x0E;
				}
				g_t43B664.u1 = (DWORD) esi_171;
				if (edi_192 < 0x0400)
				{
					while (*((word32) edi_192.u0 + ((word32) esi_171 + 16)) != ~0x00)
					{
						edi_192 = (word32) edi_192.u0 + 1;
						if (edi_192 >= 0x0400)
							break;
					}
				}
				Eq_9948 ecx_290 = *((word32) esi_171 + 0x0C);
				((word32) esi_171 + 0x0C)->u1 = ~0x00;
				if (edi_192 < 0x0400)
					((word32) esi_171 + 0x0C)->u1 = edi_192;
				struct Eq_10382 * eax_302 = (struct Eq_10382 *) (((word32) esi_171 + 0x0810)->u1 + ecx_290 * 0x0200);
				eax_302->b0008 = bl_308;
				((word32) esi_171 + 8)->u1 = ecx_290;
				((word32) ecx_290.u0 + ((word32) esi_171 + 16))->u1 = *((word32) ecx_290.u0 + ((word32) esi_171 + 16)) - bl_308;
				eax_302->dw0000 = (char *) &eax_302->dw0000 + dwArg04 + 8;
				eax_302->dw0004 -= dwArg04;
				return (word32) *((word32) esi_171 + 0x0810) + 0x0100 + (ecx_290 << 0x0C);
			}
		}
		bl_382 = (byte) dwArg04;
		esi_171.u1 = esi_171.u1->dw0000;
	} while (esi_171 != 4435536);
	Eq_57 eax_352 = fn00412FF0();
	if (eax_352 == 0x00)
		return 0x00;
	Eq_57 edx_377 = *((word32) eax_352 + 0x0810);
	((word32) edx_377 + 8)->u1 = bl_382;
	g_t43B664.u1 = (DWORD) eax_352;
	edx_377.u1->dw0000 = (char *) &edx_377.u1->dw0000 + dwArg04 + 8;
	((word32) edx_377 + 4)->u1 = 0xF0 - dwArg04;
	((word32) eax_352 + 16)->u0 = *((word32) eax_352 + 16) - bl_382;
	return (word32) *((word32) eax_352 + 0x0810) + 0x0100;
}

// 004135D0: Register ui32 fn004135D0(Stack (ptr32 Eq_10170) dwArg04, Stack uint32 dwArg08, Stack uint32 dwArg0C)
// Called from:
//      fn00413350
ui32 fn004135D0(struct Eq_10170 * dwArg04, uint32 dwArg08, uint32 dwArg0C)
{
	Eq_10484 edi_20;
	edi_20.u0 = dwArg04->b0000;
	Eq_10484 dl_269 = (byte) dwArg0C;
	uint32 ecx_16 = (uint32) dwArg04[4];
	Eq_10484 ebp_130 = edi_20;
	if (dwArg0C > ecx_16)
	{
		Eq_10484 ecx_24;
		ecx_24.u1 = edi_20.u1 + ecx_16;
		if (*ecx_24.u1 != 0x00)
			ebp_130 = ecx_24;
		uint32 esi_111 = dwArg08;
		while (ebp_130.u1 + dwArg0C < dwArg04 + 0x00F8)
		{
			byte dl_85 = (byte) dwArg0C;
			uint8 cl_40 = *ebp_130.u1;
			if (cl_40 == 0x00)
			{
				Eq_10484 ecx_129;
				ecx_129.u1 = (word32) ebp_130 + 1;
				uint32 ebx_52 = 0x01;
				while (*ecx_129.u1 == 0x00)
				{
					ecx_129.u1 = (word32) ecx_129 + 1;
					++ebx_52;
				}
				if (ebx_52 >= dwArg0C)
				{
					Eq_10484 esi_70;
					esi_70.u1 = ebp_130.u1 + dwArg0C;
					if (esi_70 < dwArg04 + 0x00F8)
					{
						dwArg04->b0000 = (byte) esi_70;
						dwArg04[4] = (struct Eq_10170) (ebx_52 - dwArg0C);
					}
					else
					{
						dwArg04[4] = (struct Eq_10170) 0x00;
						dwArg04->b0000 = (byte) (dwArg04 + 8);
					}
					*ebp_130.u1 = dl_85;
					return dwArg04 + ((ebp_130 - dwArg04 << 0x04) + 0x80);
				}
				if (edi_20 == ebp_130)
				{
					dwArg04[4] = (struct Eq_10170) ebx_52;
					ebp_130 = ecx_129;
				}
				else
				{
					esi_111 -= ebx_52;
					if (dwArg0C > esi_111)
						return 0x00;
					ebp_130 = ecx_129;
				}
			}
			else
				ebp_130.u1 += (uint32) cl_40;
		}
		Eq_10484 ebp_141;
		ebp_141.u1 = dwArg04 + 8;
		if (edi_20 > dwArg04 + 8)
		{
			do
			{
				byte dl_199 = (byte) dwArg0C;
				if (ebp_141.u1 + dwArg0C > dwArg04 + 0x00F7)
					return 0x00;
				uint8 cl_156 = *ebp_141.u1;
				if (cl_156 == 0x00)
				{
					Eq_10484 ecx_167;
					ecx_167.u1 = (word32) ebp_141 + 1;
					uint32 ebx_168 = 0x01;
					while (*ecx_167.u1 == 0x00)
					{
						ecx_167.u1 = (word32) ecx_167 + 1;
						++ebx_168;
					}
					if (ebx_168 >= dwArg0C)
					{
						Eq_10628 esi_185 = ebp_141.u1 + dwArg0C;
						if (esi_185 < dwArg04 + 0x00F8)
						{
							dwArg04->b0000 = (byte) esi_185;
							dwArg04[4] = (struct Eq_10170) (ebx_168 - dwArg0C);
						}
						else
						{
							dwArg04[4] = (struct Eq_10170) 0x00;
							dwArg04->b0000 = (byte) (dwArg04 + 8);
						}
						*ebp_141.u1 = dl_199;
						return dwArg04 + ((ebp_141 - dwArg04 << 0x04) + 0x80);
					}
					esi_111 -= ebx_168;
					if (dwArg0C > esi_111)
						return 0x00;
					ebp_141 = ecx_167;
				}
				else
					ebp_141.u1 += (uint32) cl_156;
			} while (edi_20 > ebp_141);
		}
		return 0x00;
	}
	else
	{
		*edi_20.u1 = (byte) dl_269;
		if (edi_20.u1 + dwArg0C < dwArg04 + 0x00F8)
		{
			dwArg04->b0000 = (byte) (dwArg04->b0000 + dwArg0C);
			dwArg04[4] = (struct Eq_10170) (dwArg04[4] - dwArg0C);
		}
		else
		{
			dwArg04[4] = (struct Eq_10170) 0x00;
			dwArg04->b0000 = (byte) (dwArg04 + 8);
		}
		return dwArg04 + ((edi_20 - dwArg04 << 0x04) + 0x80);
	}
}

// 00413750: Register word32 fn00413750(Stack Eq_2617 dwArg04)
// Called from:
//      fn004112A0
//      fn004169E0
word32 fn00413750(Eq_2617 dwArg04)
{
	if (g_t454680.u1 > dwArg04)
	{
		struct Eq_10700 * eax_21 = (dwArg04 & ~0x18) >> 0x03;
		int32 esi_26 = (dwArg04 & 0x1F) * 0x08;
		if (((Mem15[eax_21 + 0x00454580:word32] + 4)[(dwArg04 & 0x1F) * 0x08] & 0x01) != 0x00)
		{
			Eq_57 ebp_102;
			if ((dwArg04 != 0x01 && dwArg04 != 0x02 || fn00416600(0x02) != fn00416600(0x01)) && CloseHandle(fn00416600(dwArg04)) == 0x00)
				ebp_102 = GetLastError();
			else
				ebp_102.u0 = 0x00;
			fn00416570(dwArg04);
			if (ebp_102 == 0x00)
			{
				Mem135[Mem108[eax_21 + 0x00454580:word32] + 4 + esi_26:byte] = 0x00;
				return 0x00;
			}
			else
			{
				fn004144A0(ebp_102);
				return ~0x00;
			}
		}
	}
	g_dw43AA58 = 0x09;
	g_t43AA5C.u1 = (DWORD) 0x00;
	return ~0x00;
}

// 00413820: void fn00413820(Stack Eq_57 dwArg04)
// Called from:
//      fn004112A0
void fn00413820(Eq_57 dwArg04)
{
	Eq_7540 al_9 = *((word32) dwArg04 + 0x0C);
	if ((al_9 & 131) != 0x00 && (al_9 & 0x08) != 0x00)
	{
		fn00411250(*((word32) dwArg04 + 8));
		dwArg04.u1->dw0000 = 0x00;
		((word32) dwArg04 + 0x0C)->u1 = *((word32) dwArg04 + 0x0C) & ~0x0408;
		((word32) dwArg04 + 8)->u0 = 0x00;
		((word32) dwArg04 + 4)->u0 = 0x00;
	}
}

// 004138B0: void fn004138B0(Stack Eq_57 dwArg04)
// Called from:
//      fn004112A0
//      fn004114D0
//      fn00413D20
//      fn00414680
void fn004138B0(Eq_57 dwArg04)
{
	Eq_7540 eax_15 = *((word32) dwArg04 + 0x0C);
	if (((byte) eax_15 & 0x03) == 0x02 && (eax_15 & 0x0108) != 0x00)
	{
		Eq_57 eax_25 = *((word32) dwArg04 + 8);
		Eq_57 ebx_27 = dwArg04.u1->dw0000 - eax_25;
		if (ebx_27 > 0x00)
		{
			if (fn004141B0(*((word32) dwArg04 + 16), eax_25, ebx_27) == ebx_27)
			{
				Eq_7540 eax_57 = *((word32) dwArg04 + 0x0C);
				if (((byte) eax_57 & 0x80) != 0x00)
					((word32) dwArg04 + 0x0C)->u1 = eax_57 & ~0x02;
			}
			else
				((word32) dwArg04 + 0x0C)->u1 = *((word32) dwArg04 + 0x0C) | 0x20;
		}
	}
	dwArg04.u1->dw0000 = (word32) *((word32) dwArg04 + 8);
	((word32) dwArg04 + 4)->u0 = 0x00;
}

// 004139C0: Register uint32 fn004139C0(Stack Eq_57 dwArg04)
// Called from:
//      fn00411310
uint32 fn004139C0(Eq_57 dwArg04)
{
	Eq_7540 eax_8 = *((word32) dwArg04 + 0x0C);
	byte al_9 = (byte) eax_8;
	if ((al_9 & 131) == 0x00 || (al_9 & 0x40) != 0x00)
		return ~0x00;
	if ((al_9 & 0x02) == 0x00)
	{
		((word32) dwArg04 + 0x0C)->u1 = eax_8 | 0x01;
		if (((eax_8 | 0x01) & 0x010C) == 0x00)
			fn004166C0(dwArg04);
		else
			dwArg04.u1->dw0000 = (word32) *((word32) dwArg04 + 8);
		Eq_57 eax_59 = fn00413AB0(*((word32) dwArg04 + 16), *((word32) dwArg04 + 8), *((word32) dwArg04 + 24));
		*((word32) dwArg04 + 4) = eax_59;
		if (eax_59 == 0x00 || eax_59 == ~0x00)
		{
			((word32) dwArg04 + 0x0C)->u1 = *((word32) dwArg04 + 0x0C) | (0x00 - (word32) (eax_59 < 0x01) & ~0x0F) + 0x20;
			((word32) dwArg04 + 4)->u0 = 0x00;
			return ~0x00;
		}
		else
		{
			Eq_7540 edx_93 = *((word32) dwArg04 + 0x0C);
			if (((byte) edx_93 & 0x82) == 0x00)
			{
				Eq_2617 ecx_99;
				ecx_99.u1 = *((word32) dwArg04 + 16);
				struct Eq_10971 * eax_100 = (struct Eq_10971 *) &g_t43ADA8;
				if (ecx_99 != ~0x00)
					eax_100 = ((ecx_99 & ~0x18) >> 0x03)->dw454580 + (ecx_99 & 0x1F) * 0x08;
				if ((eax_100->b0004 & 0x82) == 0x82)
					((word32) dwArg04 + 0x0C)->u1 = edx_93 | 0x2000;
			}
			if (*((word32) dwArg04 + 24) == 0x0200)
			{
				Eq_7540 eax_127 = *((word32) dwArg04 + 0x0C);
				byte ah_133 = SLICE(eax_127, byte, 8);
				if (((byte) eax_127 & 0x08) != 0x00 && (ah_133 & 0x04) == 0x00)
					((word32) dwArg04 + 24)->u0 = 0x1000;
			}
			--*((word32) dwArg04 + 4);
			Eq_57 ecx_143;
			ecx_143.u1 = dwArg04.u1->dw0000;
			dwArg04.u1->dw0000 = (word32) ecx_143 + 1;
			return (uint32) *ecx_143.u3;
		}
	}
	else
	{
		((word32) dwArg04 + 0x0C)->u1 = eax_8 | 0x20;
		return ~0x00;
	}
}

// 00413AB0: Register word32 fn00413AB0(Stack Eq_2617 dwArg04, Stack Eq_57 dwArg08, Stack Eq_57 dwArg0C)
// Called from:
//      fn00411310
//      fn004139C0
//      fn004169E0
word32 fn00413AB0(Eq_2617 dwArg04, Eq_57 dwArg08, Eq_57 dwArg0C)
{
	if (g_t454680.u1 > dwArg04)
	{
		struct Eq_11050 * eax_22 = (dwArg04 & ~0x18) >> 0x03;
		int32 ebx_26 = (dwArg04 & 0x1F) * 0x08;
		struct Eq_11060 * eax_28 = (struct Eq_11060 *) (&eax_22->ptr454580->a0000->t0000.u0 + ebx_26);
		if ((eax_28->b0004 & 0x01) != 0x00)
		{
			word32 dwLoc0D;
			dwLoc0D.dw0001 = 0x00;
			Eq_57 edx_48 = dwArg08;
			Eq_57 ecx_49 = dwArg0C;
			if (dwArg0C == 0x00 || (eax_28->b0004 & 0x02) != 0x00)
				return 0x00;
			if ((eax_28->b0004 & 0x48) != 0x00)
			{
				byte al_76 = eax_28->b0005;
				if (al_76 != 0x0A)
				{
					*dwArg08.u3 = al_76;
					struct Eq_11059 * eax_83 = eax_22->ptr454580;
					dwLoc0D.dw0001 = 0x01;
					eax_83->a0005[ebx_26] = 0x0A;
					edx_48.u1 = (word32) dwArg08 + 1;
					ecx_49 = dwArg0C - 0x01;
				}
			}
			Eq_57 tLoc08;
			if (ReadFile(eax_22->ptr454580->a0000[dwArg04 & 0x1F].t0000.u1, edx_48, ecx_49, &tLoc08, null) != 0x00)
			{
				struct Eq_11059 * ecx_111 = eax_22->ptr454580;
				dwLoc0D.dw0001 = (char *) &tLoc08.u1->dw0000 + dwLoc0D.dw0001;
				byte * eax_114 = &ecx_111->a0000->b0004 + ebx_26;
				byte cl_115 = *eax_114;
				if ((cl_115 & 0x80) != 0x00)
				{
					byte cl_126;
					if (tLoc08 != 0x00 && *dwArg08.u3 == 0x0A)
						cl_126 = cl_115 | 0x04;
					else
						cl_126 = cl_115 & ~0x04;
					*eax_114 = cl_126;
					Eq_57 edi_138 = dwArg08;
					Eq_57 esi_143 = dwArg08;
					Eq_57 eax_145;
					eax_145.u1 = (char *) &dwArg08.u1->dw0000 + dwLoc0D.dw0001;
					if (eax_145 > dwArg08)
					{
						do
						{
							byte al_151 = *esi_143.u3;
							if (al_151 == 0x1A)
							{
								byte * eax_157 = &eax_22->ptr454580->a0000->b0004 + ebx_26;
								byte cl_158 = *eax_157;
								if ((cl_158 & 0x40) == 0x00)
									*eax_157 = cl_158 | 0x02;
								break;
							}
							if (al_151 != 0x0D)
							{
								*edi_138.u3 = al_151;
								esi_143.u1 = (word32) esi_143 + 1;
								goto l00413CB4;
							}
							if (eax_145 - 0x01 > esi_143)
							{
								Eq_57 ecx_251;
								ecx_251.u1 = (word32) esi_143 + 1;
								if (*ecx_251.u3 == 0x0A)
								{
									*edi_138.u3 = 0x0A;
									esi_143.u1 = (word32) esi_143 + 2;
								}
								else
								{
									*edi_138.u3 = al_151;
									esi_143 = ecx_251;
								}
								goto l00413CB4;
							}
							struct Eq_11059 * edx_182 = eax_22->ptr454580;
							dwLoc0D.dw0001 = 0x00;
							esi_143.u1 = (word32) esi_143 + 1;
							if (ReadFile(edx_182->a0000[dwArg04 & 0x1F].t0000.u1, &dwLoc0D, 0x01, &tLoc08, null) == 0x00)
								dwLoc0D.t0001.u1 = (DWORD) GetLastError();
							if (dwLoc0D.dw0001 == 0x00 && tLoc08 != 0x00)
							{
								if ((eax_22->ptr454580->a0000[dwArg04 & 0x1F].b0004 & 0x48) != 0x00)
								{
									if (dwLoc0D == 0x0A)
									{
										*edi_138.u3 = 0x0A;
										goto l00413CB4;
									}
									*edi_138.u3 = 0x0D;
									eax_22->ptr454580->a0005[ebx_26] = (byte) dwLoc0D;
									edi_138.u1 = (word32) edi_138 + 1;
									goto l00413CB5;
								}
								if (edi_138 == dwArg08 && dwLoc0D == 0x0A)
								{
									*edi_138.u3 = 0x0A;
									goto l00413CB4;
								}
								fn004143E0(dwArg04, ~0x00, 0x01);
								if (dwLoc0D != 0x0A)
									goto l00413CB1;
							}
							else
							{
l00413CB1:
								*edi_138.u3 = 0x0D;
l00413CB4:
								edi_138.u1 = (word32) edi_138 + 1;
							}
l00413CB5:
						} while (esi_143 < eax_145);
					}
					dwLoc0D.dw0001 = edi_138 - dwArg08;
				}
				return dwLoc0D.dw0001;
			}
			else
			{
				Eq_57 eax_297 = GetLastError();
				if (eax_297 != 0x05)
				{
					if (eax_297 == 0x6D)
						return 0x00;
					fn004144A0(eax_297);
					return ~0x00;
				}
				else
				{
					g_t43AA5C.u1 = (DWORD) eax_297;
					g_dw43AA58 = 0x09;
					return ~0x00;
				}
			}
		}
	}
	g_dw43AA58 = 0x09;
	g_t43AA5C.u1 = (DWORD) 0x00;
	return ~0x00;
}

// 00413D20: void fn00413D20(Stack Eq_57 dwArg04, Stack ui64 qwArg08, Stack Eq_57 dwArg10)
// Called from:
//      fn00411460
void fn00413D20(Eq_57 dwArg04, ui64 qwArg08, Eq_57 dwArg10)
{
	Eq_5663 dwArg08_156 = (word32) qwArg08;
	word32 dwArg0C_157 = SLICE(qwArg08, word32, 32);
	Eq_7540 eax_11 = *((word32) dwArg04 + 0x0C);
	if (((byte) eax_11 & 131) != 0x00)
	{
		Eq_57 edi_106 = dwArg10;
		if (dwArg10 == 0x00 || (dwArg10 == 0x01 || dwArg10 == 0x02))
		{
			((word32) dwArg04 + 0x0C)->u1 = eax_11 & ~0x10;
			if (dwArg10 == 0x01)
			{
				ui64 v16_v14_146 = qwArg08 + fn00416800(dwArg04);
				dwArg08_156 = (word32) v16_v14_146;
				dwArg0C_157 = SLICE(v16_v14_146, word32, 32);
				edi_106.u0 = 0x00;
			}
			fn004138B0(dwArg04);
			Eq_7540 eax_76 = *((word32) dwArg04 + 0x0C);
			byte al_77 = (byte) eax_76;
			byte ah_90 = SLICE(eax_76, byte, 8);
			if ((al_77 & 0x80) != 0x00)
				((word32) dwArg04 + 0x0C)->u1 = eax_76 & ~0x03;
			else if ((al_77 & 0x01) != 0x00 && ((al_77 & 0x08) != 0x00 && (ah_90 & 0x04) == 0x00))
				((word32) dwArg04 + 24)->u0 = 0x0200;
			int64 edx_eax_232 = fn00416710(*((word32) dwArg04 + 16), dwArg08_156, dwArg0C_157, edi_106);
			word32 eax_117 = (word32) edx_eax_232;
			if (SLICE(edx_eax_232, word32, 32) != ~0x00 || eax_117 != ~0x00)
				return;
			return;
		}
	}
	g_dw43AA58 = 22;
}

// 00413DD0: Register (ptr32 Eq_7756) fn00413DD0(Stack Eq_200 dwArg04, Stack (ptr32 Eq_5539) dwArg08, Stack up32 dwArg0C, Stack (ptr32 Eq_7756) dwArg10, Register out word32 ebxOut, Register out word32 ebpOut, Register out ui32 esiOut, Register out word32 ediOut)
// Called from:
//      fn00411480
struct Eq_7756 * fn00413DD0(Eq_200 dwArg04, struct Eq_5539 * dwArg08, up32 dwArg0C, struct Eq_7756 * dwArg10, word32 & ebxOut, word32 & ebpOut, ui32 & esiOut, word32 & ediOut)
{
	int32 eax_14 = (int32) dwArg08->b0000;
	ui32 edx_24;
	ui32 esi_111;
	word32 ebx;
	word32 ebp;
	ui32 esi;
	word32 edi;
	if (eax_14 != 0x61)
	{
		if (eax_14 == 114)
		{
			edx_24 = 0x00;
			esi_111 = g_dw43BE00 | 0x01;
			goto l00413E1D;
		}
		if (eax_14 != 0x77)
		{
			ebxOut = ebx;
			ebpOut = ebp;
			esiOut = esi;
			ediOut = edi;
			return null;
		}
		edx_24 = 0x0301;
	}
	else
		edx_24 = 0x0109;
	esi_111 = g_dw43BE00 | 0x02;
l00413E1D:
	word32 ebp_42 = 0x01;
	byte * ecx_45 = &dwArg08->b0001;
	if (dwArg08->b0001 != 0x00)
	{
		while (ebp_42 != 0x00)
		{
			struct Eq_11520 * eax_56 = (int32) *ecx_45;
			if (eax_56 <= (struct Eq_11520 *) 116 && eax_56 >= (struct Eq_11520 *) 0x2B)
			{
				uint32 dwLoc04_208 = (uint32) eax_56->b413F69;
				(*((char *) g_a413F6C + dwLoc04_208 * 0x04))();
				ebxOut = 0x00;
				ebpOut = ebp_42;
				esiOut = esi_111;
				ediOut = 0x00;
				struct Eq_7756 * eax_150;
				return eax_150;
			}
			ebp_42 = 0x00;
			++ecx_45;
			if (*ecx_45 == 0x00)
				break;
		}
	}
	int32 eax_86 = fn004169E0(dwArg04, edx_24, dwArg0C, 0x01A4);
	if (eax_86 >= 0x00)
	{
		++g_dw43BA68;
		dwArg10->dw000C = esi_111;
		dwArg10->dw0004 = 0x00;
		dwArg10->dw0000 = 0x00;
		dwArg10->dw0008 = 0x00;
		dwArg10->dw001C = 0x00;
		dwArg10->dw0010 = eax_86;
		ebxOut = ebx;
		ebpOut = ebp;
		esiOut = esi;
		ediOut = edi;
		return dwArg10;
	}
	else
	{
		ebxOut = ebx;
		ebpOut = ebp;
		esiOut = esi;
		ediOut = edi;
		return null;
	}
}

<anonymous> * g_a413F6C[] = // 00413F6C
	{
	};
// 00413FE0: Register (ptr32 Eq_11582) fn00413FE0()
// Called from:
//      fn00411480
struct Eq_11582 * fn00413FE0()
{
	struct Eq_11582 * esi_10 = null;
	int32 edi_11 = 0x00;
	if (g_dw454570 > 0x00)
	{
		struct Eq_11594 * ecx_14 = g_ptr453564;
		do
		{
			struct Eq_11610 * eax_18 = (struct Eq_11610 *) ecx_14->a0000[0].u0;
			if (eax_18 == null)
			{
				g_ptr453564[edi_11] = (struct Eq_11594) fn004111A0(0x20);
				struct Eq_11582 * eax_39 = (struct Eq_11582 *) g_ptr453564[edi_11];
				if (eax_39 != null)
					esi_10 = eax_39;
				break;
			}
			if ((eax_18->dw000C & 131) == 0x00)
			{
				esi_10 = (struct Eq_11582 *) g_ptr453564[edi_11];
				break;
			}
			++ecx_14;
			++edi_11;
		} while (g_dw454570 > edi_11);
	}
	if (esi_10 != null)
	{
		esi_10->dw0004 = 0x00;
		esi_10->dw000C = 0x00;
		esi_10->dw0008 = 0x00;
		esi_10->dw0000 = 0x00;
		esi_10->dw001C = 0x00;
		esi_10->dw0010 = ~0x00;
	}
	return esi_10;
}

// 00414060: Register ui32 fn00414060(Stack (ptr32 byte) dwArg04, Stack Eq_57 dwArg08)
// Called from:
//      fn00415170
ui32 fn00414060(byte * dwArg04, Eq_57 dwArg08)
{
	Eq_57 bArg04 = (byte) dwArg04;
	ui32 eax_18 = (ui32) *((word32) dwArg08 + 0x0C);
	Eq_2617 edi_17;
	edi_17.u1 = *((word32) dwArg08 + 16);
	byte al_19 = (byte) eax_18;
	if ((al_19 & 0x82) == 0x00 || (al_19 & 0x40) != 0x00)
	{
		((word32) dwArg08 + 0x0C)->u1 = eax_18 | 0x20;
		return ~0x00;
	}
	else
	{
		if ((al_19 & 0x01) != 0x00)
		{
			((word32) dwArg08 + 4)->u1 = 0x00;
			ui32 eax_51 = (ui32) *((word32) dwArg08 + 0x0C);
			if (((byte) eax_51 & 0x10) == 0x00)
			{
				((word32) dwArg08 + 0x0C)->u1 = eax_51 | 0x20;
				return ~0x00;
			}
			dwArg08.u1->dw0000 = (word32) *((word32) dwArg08 + 8);
			((word32) dwArg08 + 0x0C)->u1 = *((word32) dwArg08 + 0x0C) & ~0x01;
		}
		ui32 eax_80 = (ui32) *((word32) dwArg08 + 0x0C);
		((word32) dwArg08 + 0x0C)->u1 = eax_80 | 0x02;
		((word32) dwArg08 + 0x0C)->u1 = (eax_80 | 0x02) & ~0x10;
		((word32) dwArg08 + 4)->u1 = 0x00;
		Eq_57 ebp_155;
		ebp_155.u0 = 0x00;
		if ((*((word32) dwArg08 + 0x0C) & 0x010C) == 0x00 && (dwArg08 != 4438024 && dwArg08 != 0x0043B828 || fn00416E00(edi_17) == 0x00))
			fn004166C0(dwArg08);
		Eq_57 ebx_134;
		if ((*((word32) dwArg08 + 0x0C) & 0x0108) != 0x00)
		{
			Eq_57 eax_156 = *((word32) dwArg08 + 8);
			ebx_134 = dwArg08.u1->dw0000 - eax_156;
			dwArg08.u1->dw0000 = (word32) eax_156 + 1;
			((word32) dwArg08 + 4)->u1 = *((word32) dwArg08 + 24) - 0x01;
			if (ebx_134 > 0x00)
				ebp_155 = fn004141B0(edi_17, *((word32) dwArg08 + 8), ebx_134);
			else
			{
				struct Eq_11801 * eax_169 = (struct Eq_11801 *) &g_t43ADA8;
				if (edi_17 != ~0x00)
					eax_169 = ((edi_17 & ~0x18) >> 0x03)->dw454580 + (edi_17 & 0x1F) * 0x08;
				if ((eax_169->b0004 & 0x20) != 0x00)
					fn004143E0(edi_17, 0x00, 0x02);
			}
			*((word32) dwArg08 + 8)->u3 = (char) bArg04;
		}
		else
		{
			ebx_134.u0 = 0x01;
			ptr32 fp;
			ebp_155 = fn004141B0(edi_17, fp + 4, 0x01);
		}
		if (ebp_155 == ebx_134)
			return dwArg04 & 0xFF;
		((word32) dwArg08 + 0x0C)->u1 = *((word32) dwArg08 + 0x0C) | 0x20;
		return ~0x00;
	}
}

// 004141B0: Register word32 fn004141B0(Stack Eq_2617 dwArg04, Stack Eq_57 dwArg08, Stack Eq_57 dwArg0C)
// Called from:
//      fn004138B0
//      fn00414060
//      fn00419460
word32 fn004141B0(Eq_2617 dwArg04, Eq_57 dwArg08, Eq_57 dwArg0C)
{
	word32 dwLoc0404;
	if (g_t454680.u1 > dwArg04)
	{
		struct Eq_11862 * eax_23 = (dwArg04 & ~0x18) >> 0x03;
		ui32 eax_29 = (dwArg04 & 0x1F) << 0x03;
		byte al_33 = (byte) *((word32) *(eax_23 + g_a454580) + ((dwArg04 & 0x1F) * 0x08 + 4));
		if ((al_33 & 0x01) != 0x00)
		{
			word32 esi_135 = 0x00;
			word32 dwLoc0408_310 = 0x00;
			if (dwArg0C == 0x00)
				return 0x00;
			if ((al_33 & 0x20) != 0x00)
				fn004143E0(dwArg04, 0x00, 0x02);
			struct Eq_11896 * ecx_82 = eax_29 + *(eax_23 + g_a454580);
			Eq_57 dwLoc0418_323;
			Eq_57 tLoc0414;
			if ((ecx_82->b0004 & 0x80) != 0x00)
			{
				dwLoc0418_323.u0 = 0x00;
				Eq_57 ebx_111 = dwArg08;
				while (ebx_111 - dwArg08 < dwArg0C)
				{
					union Eq_11931 * edi_120 = &dwLoc0404;
					while (ebx_111 - dwArg08 < dwArg0C)
					{
						Eq_57 al_129;
						al_129.u1 = *ebx_111.u3;
						ebx_111.u1 = ebx_111 + 0x01;
						if (al_129 == 0x0A)
						{
							edi_120->u0 = 0x0D;
							++esi_135;
							edi_120 = (union Eq_11931 *) ((char *) edi_120 + 1);
						}
						edi_120->u0 = (byte) al_129;
						edi_120 = (union Eq_11931 *) ((char *) edi_120 + 1);
						if (edi_120 - &dwLoc0404 >= 0x0400)
							break;
					}
					Eq_57 edi_154 = edi_120 - &dwLoc0404;
					if (WriteFile(*((word32) *(eax_23 + g_a454580) + (dwArg04 & 0x1F) * 0x08), &dwLoc0404, edi_154, &tLoc0414, null) == 0x00)
						goto l004142F5;
					Eq_57 eax_178 = tLoc0414;
					dwLoc0408_310 = (char *) &eax_178.u1->dw0000 + dwLoc0408_310;
					if (eax_178 < edi_154)
						break;
				}
			}
			else if (WriteFile(ecx_82->t0000.u1, dwArg08, dwArg0C, &tLoc0414, null) != 0x00)
			{
				dwLoc0418_323.u0 = 0x00;
				dwLoc0408_310 = (word32) tLoc0414;
			}
			else
			{
l004142F5:
				dwLoc0418_323 = GetLastError();
			}
			if (dwLoc0408_310 != 0x00)
				return dwLoc0408_310 - esi_135;
			if (dwLoc0418_323 == 0x00)
			{
				if ((*((word32) *(eax_23 + g_a454580) + ((dwArg04 & 0x1F) * 0x08 + 4)) & 0x40) != 0x00 && *dwArg08.u3 == 0x1A)
					return 0x00;
				g_dw43AA58 = 0x1C;
				g_t43AA5C.u1 = (DWORD) 0x00;
				return ~0x00;
			}
			else if (dwLoc0418_323 != 0x05)
			{
				fn004144A0(dwLoc0418_323);
				return ~0x00;
			}
			else
			{
				g_dw43AA58 = 0x09;
				g_t43AA5C.u1 = (DWORD) dwLoc0418_323;
				return ~0x00;
			}
		}
	}
	g_dw43AA58 = 0x09;
	g_t43AA5C.u1 = (DWORD) 0x00;
	return ~0x00;
}

// 004143E0: Register Eq_57 fn004143E0(Stack Eq_2617 dwArg04, Stack Eq_5663 dwArg08, Stack Eq_57 dwArg0C)
// Called from:
//      fn004114D0
//      fn00411570
//      fn00413AB0
//      fn00414060
//      fn004141B0
//      fn004169E0
//      fn00419460
Eq_57 fn004143E0(Eq_2617 dwArg04, Eq_5663 dwArg08, Eq_57 dwArg0C)
{
	if (g_t454680.u1 > dwArg04)
	{
		struct Eq_12045 * eax_19 = (dwArg04 & ~0x18) >> 0x03;
		int32 esi_24 = (dwArg04 & 0x1F) * 0x08;
		if ((eax_19->ptr454580->a0004[(dwArg04 & 0x1F) * 2].u0 & 0x01) != 0x00)
		{
			Eq_2617 eax_42 = fn00416600(dwArg04);
			if (eax_42 != ~0x00)
			{
				Eq_57 eax_63 = SetFilePointer(eax_42, dwArg08, null, dwArg0C);
				Eq_57 eax_67;
				eax_67.u0 = 0x00;
				if (eax_63 == ~0x00)
					eax_67 = GetLastError();
				if (eax_67 == 0x00)
				{
					struct Eq_12054 * eax_77 = eax_19->ptr454580;
					*((word32) &eax_77->a0004[0] + esi_24) = (Eq_15903[]) (eax_77->a0004[(dwArg04 & 0x1F) * 2].u0 & ~0x02);
					return eax_63;
				}
				else
				{
					fn004144A0(eax_67);
					return ~0x00;
				}
			}
			else
			{
				g_dw43AA58 = 0x09;
				return ~0x00;
			}
		}
	}
	g_dw43AA58 = 0x09;
	g_t43AA5C.u1 = (DWORD) 0x00;
	return ~0x00;
}

// 004144A0: void fn004144A0(Stack Eq_57 dwArg04)
// Called from:
//      fn00413750
//      fn00413AB0
//      fn004141B0
//      fn004143E0
//      fn00416710
//      fn004169E0
void fn004144A0(Eq_57 dwArg04)
{
	g_t43AA5C.u1 = (DWORD) dwArg04;
	ui32 eax_17 = 0x00;
	struct Eq_12110 * ecx_10 = (struct Eq_12110 *) g_a43B670;
	do
	{
		if (ecx_10->dw0000 == dwArg04)
		{
			g_dw43AA58 = (&g_a43B670->dw0004)[eax_17 * 2];
			return;
		}
		++ecx_10;
		++eax_17;
	} while (ecx_10 < &g_t43B7D8);
	if (dwArg04 < 0x13 || dwArg04 > 0x24)
	{
		if (dwArg04 < 188 || dwArg04 > 202)
			g_dw43AA58 = 22;
		else
			g_dw43AA58 = 0x08;
	}
	else
		g_dw43AA58 = 0x0D;
}

// 004145E0: Register word32 fn004145E0(Stack (ptr32 Eq_8066) dwArg04)
// Called from:
//      fn004117A0
word32 fn004145E0(struct Eq_8066 * dwArg04)
{
	if (fn00416E00(dwArg04->t0010.u1) == 0x00)
		return 0x00;
	ui32 eax_38;
	if (dwArg04 == &g_t43B808)
		eax_38 = 0x00;
	else
	{
		if (dwArg04 != &g_t43B828)
			return 0x00;
		eax_38 = 0x01;
	}
	++g_dw43BA68;
	if ((dwArg04->dw000C & 0x010C) != 0x00)
		return 0x00;
	union Eq_57 * edi_52 = (union Eq_57 *) ((char *) &g_t43B7E0 + eax_38 * 0x04);
	if (edi_52->u1 == 0x00)
	{
		Eq_57 eax_58 = fn004111A0(0x1000);
		edi_52->u1 = (DWORD) eax_58;
		if (eax_58 == 0x00)
			return 0x00;
	}
	Eq_57 eax_74;
	eax_74.u1 = edi_52->u1;
	dwArg04->t0008.u1 = (DWORD) eax_74;
	dwArg04->t0000.u1 = (DWORD) eax_74;
	dwArg04->dw0018 = 0x1000;
	dwArg04->dw0004 = 0x1000;
	dwArg04->dw000C |= 0x1102;
	return 0x01;
}

// 00414680: void fn00414680(Stack word32 dwArg04, Stack Eq_57 dwArg08)
// Called from:
//      fn004117A0
void fn00414680(word32 dwArg04, Eq_57 dwArg08)
{
	if (dwArg04 == 0x00)
	{
		if ((*((word32) dwArg08 + 0x0D) & 0x10) != 0x00)
			fn004138B0(dwArg08);
	}
	else
	{
		if ((*((word32) dwArg08 + 0x0D) & 0x10) == 0x00)
			return;
		fn004138B0(dwArg08);
		((word32) dwArg08 + 0x0C)->u1 = *((word32) dwArg08 + 0x0C) & ~0x1100;
		((word32) dwArg08 + 24)->u0 = 0x00;
		dwArg08.u1->dw0000 = 0x00;
		((word32) dwArg08 + 8)->u0 = 0x00;
	}
}

// 004147C0: void fn004147C0(Stack (ptr32 Eq_12259) dwArg08)
// Called from:
//      fn004117A0
void fn004147C0(union Eq_12259 * dwArg08)
{
	Eq_12267 dwLoc0200;
	ptr32 fp;
	Eq_12259 bl_1176;
	bl_1176.u0 = dwArg08->u0;
	struct Eq_12263 * esp_1011 = fp - 600;
	if (bl_1176 != 0x00)
	{
		Eq_12267 esi_1023 = dwLoc0200;
		Eq_12267 ebp_1052 = dwLoc0200;
		Eq_12267 edi_1348 = dwLoc0200;
		while (esp_1011[9] >= 0x00)
		{
			ui32 eax_40;
			if (bl_1176 >= 0x20 && bl_1176 <= 0x78)
				eax_40 = (uint32) g_a41B618[(int32) bl_1176] & 0x0F;
			else
				eax_40 = 0x00;
			struct Eq_12294 * ecx_61 = (int32) (*((word32) esp_1011[0x0F].dw0264 + (eax_40 * 0x08 + 0x0041B3D4)) >> 0x04);
			esp_1011[0x0F] = (struct Eq_12263) ecx_61;
			if (ecx_61 <= (struct Eq_12294 *) 0x07)
			{
				switch (ecx_61)
				{
				case 0x00:
l00414993:
					struct Eq_12319 * ecx_1145 = g_ptr43BB90;
					esp_1011[0x0E] = (struct Eq_12263) 0x00;
					if ((ecx_1145->a0001[(uint32) bl_1176].b0000 & 0x80) != 0x00)
					{
						Eq_57 ecx_1158;
						ecx_1158.u1 = esp_1011[151];
						struct Eq_13732 * esp_1160 = esp_1011 - 4;
						esp_1160->t0000.u0 = (int32 *) (esp_1011 + 9);
						esp_1160->tFFFFFFFC.u1 = (DWORD) ecx_1158;
						esp_1160->ptrFFFFFFF8 = (int32) bl_1176;
						fn00415170(esp_1160->ptrFFFFFFF8, esp_1160->tFFFFFFFC.u1, esp_1160->t0000.u0);
						bl_1176.u0 = esp_1160->ptr0264->u0;
						esp_1160->ptr0264 = (union Eq_12259 *) ((char *) esp_1160->ptr0264 + 1);
					}
					Eq_57 ecx_1183;
					ecx_1183.u1 = esp_1011[151];
					struct Eq_13696 * esp_1186 = esp_1011 - 4;
					esp_1186->t0000.u0 = (int32 *) (esp_1011 + 9);
					esp_1186->tFFFFFFFC.u1 = (DWORD) ecx_1183;
					esp_1186->ptrFFFFFFF8 = (int32) bl_1176;
					fn00415170(esp_1186->ptrFFFFFFF8, esp_1186->tFFFFFFFC.u1, esp_1186->t0000.u0);
					esp_1011 = (struct Eq_12263 *) ((char *) &esp_1186->t0000 + 4);
					break;
				case 0x01:
					esp_1011[19] = (struct Eq_12263) 0x00;
					esp_1011[18] = (struct Eq_12263) 0x00;
					esp_1011[0x0C] = (struct Eq_12263) 0x00;
					esp_1011[0x0D] = (struct Eq_12263) 0x00;
					esp_1011[0x0E] = (struct Eq_12263) 0x00;
					esi_1023.u0 = 0x00;
					ebp_1052.u0 = ~0x00;
					break;
				case 0x02:
					Eq_12357 ecx_1103;
					ecx_1103.u0 = (int32) bl_1176;
					if (ecx_1103 <= 0x30 && ecx_1103 >= 0x20)
					{
						switch (ecx_1103)
						{
						case 0x20:
							esi_1023 |= 0x02;
							break;
						case 33:
						case 0x22:
						case 0x24:
						case 0x25:
						case 0x26:
						case 0x27:
						case 0x28:
						case 0x29:
						case 0x2A:
						case 44:
						case 0x2E:
						case 0x2F:
							break;
						case 0x23:
							esi_1023 |= 0x80;
							break;
						case 0x2B:
							esi_1023 |= 0x01;
							break;
						case 0x2D:
							esi_1023 |= 0x04;
							break;
						case 0x30:
							esi_1023 |= 0x08;
							break;
						}
					}
					break;
				case 0x03:
					if (bl_1176 == 0x2A)
					{
						struct Eq_13665 * esp_1082 = esp_1011 - 4;
						esp_1082->t0000.u0 = (int32 *) (esp_1011 + 0x0099);
						Eq_12267 eax_1084 = fn00415240(esp_1082->t0000.u0);
						esp_1082->t0034.u1 = (char *) eax_1084;
						esp_1011 = (struct Eq_12263 *) ((char *) &esp_1082->t0000 + 4);
						if (eax_1084 < 0x00)
						{
							esp_1082->t0034.u1 = (char *) -eax_1084;
							esi_1023 |= 0x04;
						}
					}
					else
						esp_1011[0x0C] = (struct Eq_12263) ((int32) bl_1176 - 48 + esp_1011[0x0C] * 0x0A);
					break;
				case 0x04:
					ebp_1052.u0 = 0x00;
					break;
				case 0x05:
					if (bl_1176 == 0x2A)
					{
						union Eq_12427 * esp_1054 = esp_1011 - 4;
						esp_1054->u0 = (int32 *) (esp_1011 + 0x0099);
						Eq_12267 eax_1056 = fn00415240(esp_1054->u0);
						esp_1011 = (struct Eq_12263 *) ((char *) esp_1054 + 4);
						ebp_1052 = eax_1056;
						if (eax_1056 < 0x00)
							ebp_1052.u0 = ~0x00;
					}
					else
						ebp_1052 = (int32) bl_1176 - 48 + ebp_1052 * 0x0A;
					break;
				case 0x06:
					Eq_12369 ecx_1013;
					ecx_1013.u0 = (int32) bl_1176;
					if (ecx_1013 <= 0x77 && ecx_1013 >= 0x49)
					{
						switch (ecx_1013)
						{
						case 0x49:
							struct Eq_12520 * eax_1035 = (struct Eq_12520 *) esp_1011[0x0098];
							if (eax_1035->b0000 != 0x36 || eax_1035->b0001 != 0x34)
							{
								esp_1011[0x0F] = (struct Eq_12263) null;
								goto l00414993;
							}
							esp_1011[0x0098] = (struct Eq_12263) ((word32) esp_1011[0x0098].dwFFFFFFFC + 6);
							esi_1023 |= 0x8000;
							break;
						case 0x4A:
						case 0x4B:
						case 0x4C:
						case 77:
						case 0x4E:
						case 0x4F:
						case 0x50:
						case 0x51:
						case 0x52:
						case 0x53:
						case 0x54:
						case 0x55:
						case 0x56:
						case 0x57:
						case 88:
						case 0x59:
						case 0x5A:
						case 0x5B:
						case 0x5C:
						case 0x5D:
						case 0x5E:
						case 0x5F:
						case 0x60:
						case 0x61:
						case 0x62:
						case 99:
						case 100:
						case 101:
						case 0x66:
						case 0x67:
						case 0x69:
						case 0x6A:
						case 0x6B:
						case 0x6D:
						case 110:
						case 111:
						case 0x70:
						case 113:
						case 114:
						case 115:
						case 116:
						case 117:
						case 118:
							break;
						case 0x68:
							esi_1023 |= 0x20;
							break;
						case 0x6C:
							esi_1023 |= 0x10;
							break;
						case 0x77:
							esi_1023 |= 0x0800;
							break;
						}
					}
					break;
				case 0x07:
					Eq_12376 ecx_69;
					ecx_69.u0 = (int32) bl_1176;
					if (ecx_69 <= 0x78 && ecx_69 >= 0x43)
					{
						switch (ecx_69)
						{
						case 0x43:
							if ((esi_1023 & 0x0830) == 0x00)
								esi_1023 |= 0x0800;
							goto l00414A53;
						case 0x44:
						case 0x46:
						case 0x48:
						case 0x49:
						case 0x4A:
						case 0x4B:
						case 0x4C:
						case 77:
						case 0x4E:
						case 0x4F:
						case 0x50:
						case 0x51:
						case 0x52:
						case 0x54:
						case 0x55:
						case 0x56:
						case 0x57:
						case 0x59:
						case 0x5B:
						case 0x5C:
						case 0x5D:
						case 0x5E:
						case 0x5F:
						case 0x60:
						case 0x61:
						case 0x62:
						case 0x68:
						case 0x6A:
						case 0x6B:
						case 0x6C:
						case 0x6D:
						case 113:
						case 114:
						case 116:
						case 118:
						case 0x77:
							break;
						case 0x45:
						case 0x47:
							esp_1011[19] = (struct Eq_12263) 0x01;
							bl_1176 = (word32) bl_1176 + 32;
							goto l00414A9F;
						case 0x53:
							if ((esi_1023 & 0x0830) == 0x00)
								esi_1023 |= 0x0800;
							goto l00414ACA;
						case 88:
							goto l00414BF8;
						case 0x5A:
							struct Eq_12424 * esp_122 = esp_1011 - 4;
							esp_122->t0000.u0 = (int32 *) (esp_1011 + 0x0099);
							Eq_12267 eax_124 = fn00415240(esp_122->t0000.u0);
							esp_1011 = (struct Eq_12263 *) ((char *) &esp_122->t0000 + 4);
							if (eax_124 != 0x00)
							{
								Eq_12267 ecx_135;
								ecx_135.u1 = eax_124.u2[2];
								if (ecx_135 == 0x00)
									goto l00414B80;
								if ((esi_1023 & 0x0800) != 0x00)
								{
									esp_122->dw003C = 0x01;
									edi_1348 = (int32) eax_124.u2->w0000 >> 0x01;
									esp_122->t001C.u1 = (char *) ecx_135;
								}
								else
								{
									esp_122->dw003C = 0x00;
									edi_1348.u1 = (int32) eax_124.u2->w0000;
									esp_122->t001C.u1 = (char *) ecx_135;
								}
							}
							else
							{
l00414B80:
								Eq_12267 eax_141;
								eax_141.u1 = g_t43BA6C.u1;
								esp_122->t001C.u1 = (char *) eax_141;
								edi_1348 = strlen(eax_141);
							}
							break;
						case 99:
l00414A53:
							struct Eq_12444 * esp_712 = esp_1011 - 4;
							esp_712->t0000.u0 = (int32 *) (esp_1011 + 0x0099);
							if ((esi_1023 & 0x0810) != 0x00)
							{
								esp_712->t0000.u0 = (int32 *) fn00415270(esp_712->t0000.u0);
								esp_712->tFFFFFFFC.u1 = (DWORD) &esp_712->b005C;
								Eq_12267 eax_739 = fn00416EB0(esp_712->tFFFFFFFC.u1, esp_712->t0000.u1);
								edi_1348 = eax_739;
								if (eax_739 < 0x00)
									esp_712->dw004C = 0x01;
							}
							else
							{
								esp_712->b005C = (byte) fn00415240(esp_712->t0000.u0);
								edi_1348.u0 = 0x01;
							}
							esp_1011[6] = (struct Eq_12263) (esp_1011 + 22);
							break;
						case 100:
						case 0x69:
							esp_1011[16] = (struct Eq_12263) 0x0A;
							esi_1023 |= 0x40;
							goto l00414C27;
						case 101:
						case 0x66:
						case 0x67:
l00414A9F:
							esp_1011[6] = (struct Eq_12263) (esp_1011 + 22);
							esi_1023 |= 0x40;
							if (ebp_1052 < 0x00)
								ebp_1052.u0 = 0x06;
							else if (ebp_1052 == 0x00 && bl_1176 == 0x67)
								ebp_1052.u0 = 0x01;
							esp_1011[0x0099] = (struct Eq_12263) ((word32) esp_1011[0x0099].dwFFFFFFFC + 0x0C);
							struct Eq_13385 * eax_586 = (struct Eq_13385 *) esp_1011[0x0099];
							word32 edx_588 = eax_586->dwFFFFFFFC;
							esp_1011[20] = (struct Eq_12263) eax_586->dwFFFFFFF8;
							word32 eax_592 = (word32) esp_1011[19];
							esp_1011[21] = (struct Eq_12263) edx_588;
							struct Eq_13405 * esp_595 = esp_1011 - 4;
							esp_595->dw0000 = eax_592;
							esp_595->tFFFFFFFC.u1 = (char *) ebp_1052;
							esp_595->dwFFFFFFF8 = (int32) bl_1176;
							ptr32 edx_594 = esp_1011 + 22;
							esp_595->ptrFFFFFFF4 = edx_594;
							esp_595->ptrFFFFFFF0 = &esp_595->dw0000 + 21;
							g_ptr43AAC0();
							struct Eq_13430 * esp_624;
							esp_1011 = (struct Eq_12263 *) (&esp_624->dw0010 + 1);
							if ((esi_1023 & 0x80) != 0x00 && ebp_1052 == 0x00)
							{
								esp_624->dw0010 = &esp_624->dw0010 + 23;
								g_ptr43AACC();
								word32 esp_643;
								esp_1011 = esp_643 + 0x04;
							}
							if (bl_1176 == 0x67 && (esi_1023 & 0x80) == 0x00)
							{
								byte * eax_660 = (byte *) (esp_1011 + 22);
								esp_1011->dwFFFFFFFC = eax_660;
								g_ptr43AAC4();
								word32 esp_668;
								esp_1011 = esp_668 + 0x04;
							}
							if (esp_1011[22] == 0x2D)
							{
								esp_1011[6] = (struct Eq_12263) (&esp_1011->b0058 + 1);
								esi_1023 |= 0x0100;
							}
							edi_1348 = strlen(esp_1011[6]);
							break;
						case 110:
							struct Eq_12471 * esp_95 = esp_1011 - 4;
							esp_95->t0000.u0 = (int32 *) (esp_1011 + 0x0099);
							Eq_12267 eax_97 = fn00415240(esp_95->t0000.u0);
							Eq_12486 ecx_103;
							ecx_103.u1 = esp_95->t0028.u1;
							Eq_12486 cx_110 = (word16) ecx_103;
							esp_1011 = (struct Eq_12263 *) ((char *) &esp_95->t0000 + 4);
							if ((esi_1023 & 0x20) != 0x00)
								eax_97.u2->w0000 = (word16) cx_110;
							else
								eax_97->u1 = ecx_103;
							esp_95->dw004C = 0x01;
							break;
						case 111:
							esp_1011[16] = (struct Eq_12263) 0x08;
							if ((esi_1023 & 0x80) != 0x00)
								esi_1023 |= 0x0200;
							goto l00414C27;
						case 0x70:
							ebp_1052.u0 = 0x08;
l00414BF8:
							esp_1011[0x0011] = (struct Eq_12263) 0x07;
							goto l00414C00;
						case 115:
l00414ACA:
							Eq_12267 ebx_464;
							ebx_464.u0 = 0x7FFFFFFF;
							if (ebp_1052 != ~0x00)
								ebx_464 = ebp_1052;
							struct Eq_13338 * esp_472 = esp_1011 - 4;
							esp_472->t0000.u0 = (int32 *) (esp_1011 + 0x0099);
							Eq_12267 eax_474 = fn00415240(esp_472->t0000.u0);
							esp_472->t001C.u1 = (char *) eax_474;
							esp_1011 = (struct Eq_12263 *) ((char *) &esp_472->t0000 + 4);
							if ((esi_1023 & 0x0810) != 0x00)
							{
								if (eax_474 == 0x00)
									esp_472->t001C.u1 = g_t43BA70.u1;
								Eq_12267 edi_529;
								edi_529.u1 = esp_472->t001C.u1;
								esp_472->dw003C = 0x01;
								int32 ebx_533 = ebx_464 - 0x01;
								if (ebx_464 != 0x00)
								{
									while (edi_529.u2->w0000 != 0x00)
									{
										edi_529.u1 = (word32) edi_529 + 2;
										int32 ebx_1679;
										ebx_533 = ebx_1679 - 0x01;
										ebx_1679 = ebx_533;
										if (ebx_1679 == 0x00)
											break;
									}
								}
								edi_1348 = edi_529 - (esp_472->t001C).u1 >> 0x01;
							}
							else
							{
								if (esp_472->t001C.u1 == 0x00)
									esp_472->t001C.u1 = g_t43BA6C.u1;
								Eq_12267 edi_494;
								edi_494.u1 = esp_472->t001C.u1;
								int32 ebx_498 = ebx_464 - 0x01;
								if (ebx_464 != 0x00)
								{
									while (*edi_494.u1 != 0x00)
									{
										edi_494.u1 = (word32) edi_494 + 1;
										int32 ebx_1678;
										ebx_498 = ebx_1678 - 0x01;
										ebx_1678 = ebx_498;
										if (ebx_1678 == 0x00)
											break;
									}
								}
								edi_1348 = edi_494 - (esp_472->t001C).u1;
							}
							break;
						case 117:
							esp_1011[16] = (struct Eq_12263) 0x0A;
							goto l00414C27;
						case 0x78:
							esp_1011[0x0011] = (struct Eq_12263) 0x27;
l00414C00:
							esp_1011[16] = (struct Eq_12263) 0x10;
							if ((esi_1023 & 0x80) != 0x00)
							{
								esp_1011->b0012 = 0x30;
								esp_1011[0x0D] = (struct Eq_12263) 0x02;
								esp_1011->b0013 = (byte) ((word32) esp_1011[0x0011].dw0050 + 1);
							}
l00414C27:
							if ((esi_1023 & 0x8000) != 0x00)
							{
								struct Eq_12653 * esp_254 = esp_1011 - 4;
								esp_254->ptr0000 = (struct Eq_13868 **) (esp_1011 + 0x0099);
								word32 edx_258;
								esp_254->dw0020 = fn00415250(esp_254->ptr0000, out edx_258);
								esp_254->dw0024 = edx_258;
								goto l00414CD2;
							}
							Eq_12267 eax_198;
							if ((esi_1023 & 0x20) != 0x00)
							{
								struct Eq_12881 * esp_222 = esp_1011 - 4;
								esp_222->t0000.u0 = (int32 *) (esp_1011 + 0x0099);
								if ((esi_1023 & 0x40) != 0x00)
								{
									esp_222->dw0020 = (int32) (word16) fn00415240(esp_222->t0000.u0);
									esp_222->dw0024 = 0x00;
									goto l00414CD2;
								}
								eax_198.u1 = (word32) (word16) fn00415240(esp_222->t0000.u0);
								goto l00414CC6;
							}
							struct Eq_12869 * esp_195 = esp_1011 - 4;
							esp_195->t0000.u0 = (int32 *) (esp_1011 + 0x0099);
							if ((esi_1023 & 0x40) != 0x00)
							{
								esp_195->t0020.u1 = (char *) fn00415240(esp_195->t0000.u0);
								esp_195->dw0024 = 0x00;
							}
							else
							{
								eax_198 = fn00415240(esp_195->t0000.u0);
l00414CC6:
								esp_1011[7] = (struct Eq_12263) eax_198;
								esp_1011[8] = (struct Eq_12263) 0x00;
							}
l00414CD2:
							if ((esi_1023 & 0x40) != 0x00 && esp_1011[7] < 0x00)
							{
								Eq_12799 eax_288 = esp_1011[7];
								word32 ecx_292 = esp_1011[8] + (eax_288 != 0x00);
								esp_1011[0x0A] = (struct Eq_12263) -eax_288;
								esp_1011[11] = (struct Eq_12263) -ecx_292;
								esi_1023 |= 0x0100;
							}
							else
							{
								word32 ecx_283 = (word32) esp_1011[8];
								esp_1011[0x0A] = esp_1011[7];
								esp_1011[11] = (struct Eq_12263) ecx_283;
							}
							if ((esi_1023 & 0x8000) == 0x00)
							{
								esp_1011[0x0A] = esp_1011[0x0A];
								esp_1011[11] = (struct Eq_12263) 0x00;
							}
							if (ebp_1052 < 0x00)
								ebp_1052.u0 = 0x01;
							else
								esi_1023 &= ~0x08;
							if (esp_1011[11] == 0x00 && esp_1011[0x0A] == 0x00)
								esp_1011[0x0D] = (struct Eq_12263) 0x00;
							esp_1011[6] = (struct Eq_12263) (&esp_1011->b0058 + 511);
							while (true)
							{
								--ebp_1052;
								if (ebp_1052 <= 0x00 && (esp_1011[11] == 0x00 && esp_1011[0x0A] == 0x00))
									break;
								word32 ecx_395 = (word32) esp_1011[11];
								esp_1011[7] = esp_1011[16];
								word32 eax_399 = (word32) esp_1011[0x0A];
								esp_1011[8] = (struct Eq_12263) 0x00;
								Eq_13168 edx_402;
								edx_402.u2 = esp_1011[7];
								word32 edi_403 = (word32) esp_1011[8];
								esp_1011->dwFFFFFFFC = edi_403;
								esp_1011->dwFFFFFFF8 = (word32) edx_402;
								esp_1011->dwFFFFFFF4 = ecx_395;
								esp_1011->dwFFFFFFF0 = eax_399;
								int32 eax_412 = fn00416FC0(esp_1011->dwFFFFFFF0, esp_1011->dwFFFFFFF8);
								word32 ecx_421 = (word32) esp_1011[11];
								word32 eax_422 = (word32) esp_1011[0x0A];
								Eq_13208 edx_423;
								edx_423.u2 = esp_1011[7];
								esp_1011->dwFFFFFFFC = edi_403;
								esp_1011->dwFFFFFFF8 = (word32) edx_423;
								esp_1011->dwFFFFFFF4 = ecx_421;
								esp_1011->dwFFFFFFF0 = eax_422;
								word32 edx_434;
								esp_1011[0x0A] = (struct Eq_12263) fn00416F50(esp_1011->dwFFFFFFF0, esp_1011->dwFFFFFFF4, esp_1011->dwFFFFFFF8, esp_1011->dwFFFFFFFC, out edx_434);
								esp_1011[11] = (struct Eq_12263) edx_434;
								byte bl_452 = (byte) eax_412 + 0x30;
								if (eax_412 > 0x09)
									bl_452 = (byte) ((word32) esp_1011[0x0011].dwFFFFFFFC + (((byte) eax_412 + 0x30) + 4));
								byte * eax_448 = (byte *) esp_1011[6];
								esp_1011[6] = (struct Eq_12263) (esp_1011[6] - 0x01);
								*eax_448 = bl_452;
							}
							edi_1348 = &esp_1011->b0058 + 511 - esp_1011[6];
							esp_1011[6] = (struct Eq_12263) ((word32) esp_1011[6].dwFFFFFFFC + 5);
							if ((esi_1023 & 0x0200) != 0x00 && (*((word32) (esp_1011)[6].dwFFFFFFFC + 4) != 0x30 || edi_1348 == 0x00))
							{
								esp_1011[6] = (struct Eq_12263) (esp_1011[6] - 0x01);
								*((word32) esp_1011[6].dwFFFFFFFC + 4) = (struct Eq_12263) 0x30;
								edi_1348.u1 = (word32) edi_1348 + 1;
							}
							break;
						}
					}
					if (esp_1011[18] == 0x00)
					{
						if ((esi_1023 & 0x40) != 0x00)
						{
							if ((esi_1023 & 0x0100) != 0x00)
							{
								esp_1011->b0012 = 0x2D;
								goto l00414F31;
							}
							if ((esi_1023 & 0x01) != 0x00)
							{
								esp_1011->b0012 = 0x2B;
								goto l00414F31;
							}
							if ((esi_1023 & 0x02) != 0x00)
							{
								esp_1011->b0012 = 0x20;
l00414F31:
								esp_1011[0x0D] = (struct Eq_12263) 0x01;
							}
						}
						esp_1011[0x0A] = (struct Eq_12263) (esp_1011[0x0C] - edi_1348 - esp_1011[0x0D]);
						if ((esi_1023 & 0x0C) == 0x00)
						{
							Eq_57 ecx_816;
							ecx_816.u1 = esp_1011[151];
							Eq_12267 edx_817;
							edx_817.u1 = esp_1011[0x0A];
							struct Eq_12739 * esp_818 = esp_1011 - 4;
							esp_818->t0000.u0 = (int32 *) (esp_1011 + 9);
							esp_818->tFFFFFFFC.u1 = (DWORD) ecx_816;
							esp_818->tFFFFFFF8.u1 = (char *) edx_817;
							esp_818->ptrFFFFFFF4 = (byte *) 0x20;
							fn004151C0(esp_818->ptrFFFFFFF4, esp_818->tFFFFFFF8.u1, esp_818->tFFFFFFFC.u1, esp_818->t0000.u0);
						}
						Eq_57 ecx_839;
						ecx_839.u1 = esp_1011[151];
						Eq_12267 edx_840;
						edx_840.u1 = esp_1011[0x0D];
						struct Eq_12689 * esp_841 = esp_1011 - 4;
						esp_841->t0000.u0 = (int32 *) (esp_1011 + 9);
						esp_841->tFFFFFFFC.u1 = (DWORD) ecx_839;
						esp_841->tFFFFFFF8.u1 = (char *) edx_840;
						esp_841->ptrFFFFFFF4 = (char *) &esp_841->t0000 + 22;
						fn00415200(esp_841->ptrFFFFFFF4, esp_841->tFFFFFFF8.u1, esp_841->tFFFFFFFC.u1, esp_841->t0000.u0);
						if ((esi_1023 & 0x08) != 0x00 && (esi_1023 & 0x04) == 0x00)
						{
							Eq_57 ecx_869;
							ecx_869.u1 = esp_841->t0260.u1;
							Eq_12267 edx_870;
							edx_870.u1 = esp_841->t002C.u1;
							esp_841->t0000.u0 = (int32 *) ((char *) &esp_841->t0000 + 40);
							esp_841->tFFFFFFFC.u1 = (DWORD) ecx_869;
							esp_841->tFFFFFFF8.u1 = (char *) edx_870;
							esp_841->ptrFFFFFFF4 = (byte *) 0x30;
							fn004151C0(esp_841->ptrFFFFFFF4, esp_841->tFFFFFFF8.u1, esp_841->tFFFFFFFC.u1, esp_841->t0000.u0);
						}
						if (esp_1011[0x0E] != 0x00 && edi_1348 > 0x00)
						{
							word16 * ebx_924 = (word16 *) esp_1011[6];
							esp_1011[7] = (struct Eq_12263) (edi_1348 - 1);
							word32 ecx_974;
							do
							{
								struct Eq_13012 * esp_935 = esp_1011 - 4;
								esp_935->t0000.u0 = (int32 *) SEQ(SLICE(ebx_924, word16, 16), *ebx_924);
								esp_935->tFFFFFFFC.u1 = (DWORD) (esp_1011 + 5);
								++ebx_924;
								Eq_12267 eax_941 = fn00416EB0(esp_935->tFFFFFFFC.u1, esp_935->t0000.u1);
								if (eax_941 <= 0x00)
									break;
								Eq_57 edx_956;
								edx_956.u1 = esp_935->t0260.u1;
								esp_935->t0000.u0 = (int32 *) (&esp_935->dw0020 + 2);
								esp_935->tFFFFFFFC.u1 = (DWORD) edx_956;
								esp_935->tFFFFFFF8.u1 = (char *) eax_941;
								esp_935->ptrFFFFFFF4 = (char *) &esp_935->t0000 + 24;
								fn00415200(esp_935->ptrFFFFFFF4, esp_935->tFFFFFFF8.u1, esp_935->tFFFFFFFC.u1, esp_935->t0000.u0);
								ecx_974 = esp_935->dw0020;
								--esp_935->dw0020;
							} while (ecx_974 != 0x00);
						}
						else
						{
							Eq_57 ecx_903;
							ecx_903.u1 = esp_1011[151];
							byte * edx_904 = (byte *) esp_1011[6];
							struct Eq_12967 * esp_905 = esp_1011 - 4;
							esp_905->t0000.u0 = (int32 *) (esp_1011 + 9);
							esp_905->tFFFFFFFC.u1 = (DWORD) ecx_903;
							esp_905->tFFFFFFF8.u1 = (char *) edi_1348;
							esp_905->ptrFFFFFFF4 = edx_904;
							fn00415200(esp_905->ptrFFFFFFF4, esp_905->tFFFFFFF8.u1, esp_905->tFFFFFFFC.u1, esp_905->t0000.u0);
						}
						if ((esi_1023 & 0x04) != 0x00)
						{
							Eq_57 ecx_993;
							ecx_993.u1 = esp_1011[151];
							Eq_12267 edx_994;
							edx_994.u1 = esp_1011[0x0A];
							struct Eq_13115 * esp_995 = esp_1011 - 4;
							esp_995->t0000.u0 = (int32 *) (esp_1011 + 9);
							esp_995->tFFFFFFFC.u1 = (DWORD) ecx_993;
							esp_995->tFFFFFFF8.u1 = (char *) edx_994;
							esp_995->ptrFFFFFFF4 = (byte *) 0x20;
							fn004151C0(esp_995->ptrFFFFFFF4, esp_995->tFFFFFFF8.u1, esp_995->tFFFFFFFC.u1, esp_995->t0000.u0);
							esp_1011 = (struct Eq_12263 *) ((char *) &esp_995->t0000 + 4);
						}
					}
					break;
				}
			}
			union Eq_12259 * eax_1203 = (union Eq_12259 *) esp_1011[0x0098];
			esp_1011[0x0098] = (struct Eq_12263) ((word32) esp_1011[0x0098].dwFFFFFFFC + 5);
			bl_1176.u0 = eax_1203->u0;
			if (bl_1176 == 0x00)
				return;
		}
	}
}

// 00415170: void fn00415170(Stack (ptr32 byte) dwArg04, Stack Eq_57 dwArg08, Stack Eq_12427 dwArg0C)
// Called from:
//      fn004147C0
//      fn004151C0
//      fn00415200
void fn00415170(byte * dwArg04, Eq_57 dwArg08, Eq_12427 dwArg0C)
{
	uint8 bArg04_52 = (byte) dwArg04;
	int32 eax_6 = (int32) *((word32) dwArg08 + 4);
	((word32) dwArg08 + 4)->u1 = eax_6 - 0x01;
	uint32 eax_16;
	if (eax_6 >= 0x01)
	{
		*dwArg08.u1->dw0000 = (word32) bArg04_52;
		Eq_13789 ecx_29;
		ecx_29.u0 = dwArg08.u1->dw0000;
		uint8 al_32 = *ecx_29.u0;
		dwArg08.u1->dw0000 = (word32) ecx_29 + 1;
		eax_16 = (uint32) al_32;
	}
	else
		eax_16 = fn00414060(dwArg04, dwArg08);
	if (eax_16 != ~0x00)
		++*dwArg0C.u0;
	else
		*dwArg0C.u0 = ~0x00;
}

// 004151C0: void fn004151C0(Stack (ptr32 byte) dwArg04, Stack Eq_12267 dwArg08, Stack Eq_57 dwArg0C, Stack Eq_12427 dwArg10)
// Called from:
//      fn004147C0
void fn004151C0(byte * dwArg04, Eq_12267 dwArg08, Eq_57 dwArg0C, Eq_12427 dwArg10)
{
	Eq_12267 edi_14 = dwArg08;
	do
	{
		--edi_14;
		if (edi_14 <= 0x00)
			return;
		fn00415170(dwArg04, dwArg0C, dwArg10);
	} while (*dwArg10.u0 != ~0x00);
}

// 00415200: void fn00415200(Stack (ptr32 byte) dwArg04, Stack Eq_12267 dwArg08, Stack Eq_57 dwArg0C, Stack Eq_12427 dwArg10)
// Called from:
//      fn004147C0
void fn00415200(byte * dwArg04, Eq_12267 dwArg08, Eq_57 dwArg0C, Eq_12427 dwArg10)
{
	byte * esi_10 = dwArg04;
	Eq_12267 edi_14 = dwArg08;
	do
	{
		--edi_14;
		if (edi_14 <= 0x00)
			return;
		fn00415170((int32) *esi_10, dwArg0C, dwArg10);
		++esi_10;
	} while (*dwArg10.u0 != ~0x00);
}

// 00415240: Register word32 fn00415240(Stack Eq_12427 dwArg04)
// Called from:
//      fn004147C0
word32 fn00415240(Eq_12427 dwArg04)
{
	word32 * ecx_6 = *dwArg04.u0;
	*dwArg04.u0 = ecx_6 + 1;
	return *ecx_6;
}

// 00415250: Register word32 fn00415250(Stack (ptr32 (ptr32 Eq_13868)) dwArg04, Register out word32 edxOut)
// Called from:
//      fn004147C0
word32 fn00415250(struct Eq_13868 ** dwArg04, word32 & edxOut)
{
	struct Eq_13868 * ecx_6 = (struct Eq_13868 *) *dwArg04;
	*dwArg04 = (struct Eq_13868 **) (&ecx_6->dw0004 + 1);
	word32 eax_9 = ecx_6->dw0000;
	edxOut = ecx_6->dw0004;
	return eax_9;
}

// 00415270: Register word32 fn00415270(Stack Eq_12427 dwArg04)
// Called from:
//      fn004147C0
word32 fn00415270(Eq_12427 dwArg04)
{
	word16 * ecx_6 = *dwArg04.u0;
	*dwArg04.u0 = ecx_6 + 2;
	return SEQ(SLICE(dwArg04, word16, 16), *ecx_6);
}

<anonymous> g_t415890 = <code>; // 00415890
// 00416260: void fn00416260()
// Called from:
//      fn00412DC0
void fn00416260()
{
	ptr32 fp;
	word32 esi_101 = 0x00;
	if (g_t43BDEC == null)
	{
		Eq_3548 eax_18 = LoadLibraryA("user32.dll");
		if (eax_18 == 0x00)
			return;
		Eq_13900 eax_30 = GetProcAddress(eax_18, "MessageBoxA");
		g_t43BDEC = eax_30;
		if (eax_30 == null)
			return;
		g_t43BDF0 = GetProcAddress(eax_18, "GetActiveWindow");
		g_t43BDF4 = GetProcAddress(eax_18, "GetLastActivePopup");
	}
	struct Eq_13905 * esp_102 = fp - 0x0C;
	Eq_13900 eax_64 = g_t43BDF0;
	if (eax_64 != null)
	{
		eax_64();
		word32 eax_75;
		esi_101 = eax_75;
	}
	if (esi_101 != 0x00 && g_t43BDF4 != null)
	{
		esp_102->dwFFFFFFFC = esi_101;
		g_t43BDF4();
		word32 eax_96;
		esi_101 = eax_96;
	}
	word32 eax_104 = esp_102->dw0018;
	word32 ecx_105 = esp_102->dw0014;
	word32 edx_106 = esp_102->dw0010;
	struct Eq_13961 * esp_107 = esp_102 - 4;
	esp_107->dw0000 = eax_104;
	esp_107->dwFFFFFFFC = ecx_105;
	esp_107->dwFFFFFFF8 = edx_106;
	esp_107->dwFFFFFFF4 = esi_101;
	g_t43BDEC();
}

// 00416300: void fn00416300(Stack (ptr32 Eq_9577) dwArg04, Stack (ptr32 byte) dwArg08, Stack uint32 dwArg0C)
// Called from:
//      fn00412DC0
void fn00416300(union Eq_9577 * dwArg04, byte * dwArg08, uint32 dwArg0C)
{
	uint32 ecx_33 = dwArg0C;
	if (dwArg0C == 0x00)
		return;
	uint32 ebx_130 = dwArg0C;
	byte * esi_189 = dwArg08;
	union Eq_9577 * edi_123 = dwArg04;
	uint32 ecx_126;
	uint32 ecx_144;
	if ((dwArg08 & 0x03) == 0x00)
	{
		ecx_126 = dwArg0C >> 0x02;
		if (dwArg0C >> 0x02 == 0x00)
			goto l00416345;
	}
	else
	{
		byte al_191;
		do
		{
			al_191 = *esi_189;
			edi_123->u0 = al_191;
			++esi_189;
			edi_123 = (union Eq_9577 *) ((char *) edi_123 + 1);
			--ecx_33;
			if (ecx_33 == 0x00)
				return;
			if (al_191 == 0x00)
			{
				while ((edi_123 & 0x03) != 0x00)
				{
					edi_123->u0 = al_191;
					edi_123 = (union Eq_9577 *) ((char *) edi_123 + 1);
					--ecx_33;
					if (ecx_33 == 0x00)
						return;
				}
				ebx_130 = ecx_33;
				ecx_144 = ecx_33 >> 0x02;
				if (ecx_144 != 0x00)
				{
l004163E7:
					do
					{
						edi_123->u1 = 0x00;
						edi_123 = (union Eq_9577 *) ((char *) edi_123 + 4);
						--ecx_144;
					} while (ecx_144 != 0x00);
l004163F1:
					al_191 = 0x00;
					ebx_130 &= 0x03;
					if (ebx_130 == 0x00)
						return;
				}
				do
				{
					edi_123->u0 = al_191;
					edi_123 = (union Eq_9577 *) ((char *) edi_123 + 1);
l0041637E:
					--ebx_130;
				} while (ebx_130 != 0x00);
				return;
			}
		} while ((esi_189 & 0x03) != 0x00);
		ebx_130 = ecx_33;
		ecx_126 = ecx_33 >> 0x02;
		if (ecx_33 >> 0x02 == 0x00)
		{
l00416340:
			ebx_130 &= 0x03;
			if (ebx_130 == 0x00)
				return;
l00416345:
			do
			{
				al_191 = *esi_189;
				edi_123->u0 = al_191;
				++esi_189;
				edi_123 = (union Eq_9577 *) ((char *) edi_123 + 1);
				if (al_191 == 0x00)
					goto l0041637E;
				--ebx_130;
			} while (ebx_130 != 0x00);
			return;
		}
	}
	do
	{
		Eq_14017 edx_80;
		edx_80.u1 = *esi_189;
		Eq_14021 eax_76;
		eax_76.u0 = *esi_189;
		byte dl_86 = (byte) edx_80;
		byte dh_97 = SLICE(edx_80, byte, 8);
		esi_189 += 4;
		if (((~eax_76 ^ (word32) eax_76 + 0x7EFEFEFF) & 0x81010100) != 0x00)
		{
			if (dl_86 != 0x00)
			{
				if (dh_97 != 0x00)
				{
					if ((edx_80 & 0x00FF0000) != 0x00)
					{
						if ((edx_80 & 0xFF000000) != 0x00)
							goto l00416389;
						edi_123->u1 = (word32) edx_80;
					}
					else
						edi_123->u1 = (word32) (edx_80 & 0xFFFF);
				}
				else
					edi_123->u1 = (word32) (edx_80 & 0xFF);
			}
			else
				edi_123->u1 = 0x00;
			edi_123 = (union Eq_9577 *) ((char *) edi_123 + 4);
			ecx_144 = ecx_126 - 0x01;
			if (ecx_144 != 0x00)
				goto l004163E7;
			goto l004163F1;
		}
l00416389:
		edi_123->u1 = (word32) edx_80;
		edi_123 = (union Eq_9577 *) ((char *) edi_123 + 4);
		--ecx_126;
	} while (ecx_126 != 0x00);
	goto l00416340;
}

// 00416400: Register int32 fn00416400()
// Called from:
//      fn004169E0
int32 fn00416400()
{
	int32 esi_103 = ~0x00;
	ui32 edi_128 = 0x00;
	word32 ebx_122 = 0x00;
	struct Eq_14175 ** edx_125 = (struct Eq_14175 **) g_a454580;
	do
	{
		struct Eq_14175 * ebp_25 = (struct Eq_14175 *) *edx_125;
		if (ebp_25 == null)
		{
			struct Eq_14171 * eax_33 = (struct Eq_14171 *) &fn004111A0(0x0100).u1->b0004;
			if (eax_33 != null)
			{
				g_t454680.u1 = (HANDLE) ((char *) g_t454680.u1 + 32);
				struct Eq_14171 ** ebx_47 = (struct Eq_14171 **) (&g_a454580->u0 + edi_128 * 0x04);
				*ebx_47 = (struct Eq_14171 **) eax_33;
				if (eax_33 + 32 > eax_33)
				{
					do
					{
						eax_33->b0000 = 0x00;
						++eax_33;
						eax_33->dwFFFFFFF8 = ~0x00;
						eax_33->bFFFFFFFD = 0x0A;
					} while ((char *) *ebx_47 + 0x0100 > eax_33);
				}
				esi_103 = edi_128 << 0x05;
			}
			return esi_103;
		}
		if (ebp_25 < ebp_25 + 32)
		{
			struct Eq_14175 * ebp_80 = ebp_25;
			do
			{
				if ((ebp_80->b0004 & 0x01) == 0x00)
				{
					ebp_80->dw0000 = ~0x00;
					esi_103 = (ebp_80 - *edx_125 >> 0x03) + ebx_122;
					break;
				}
				ebp_80 += (struct Eq_14175 *) 0x08;
			} while (ebp_80 < ebp_25 + 32);
		}
		if (esi_103 != ~0x00)
			return esi_103;
		ebx_122 += 0x20;
		edx_125 = (struct Eq_14175 **) ((char *) edx_125 + 4);
		++edi_128;
	} while (edx_125 < &g_t454680);
	return esi_103;
}

// 004164C0: void fn004164C0(Stack Eq_2617 dwArg04, Stack Eq_2617 dwArg08)
// Called from:
//      fn004169E0
void fn004164C0(Eq_2617 dwArg04, Eq_2617 dwArg08)
{
	if (dwArg04 < g_t454680.u1)
	{
		struct Eq_14265 * eax_19 = (dwArg04 & ~0x18) >> 0x03;
		int32 esi_24 = (dwArg04 & 0x1F) * 0x08;
		if (eax_19->ptr454580[(dwArg04 & 0x1F) * 2].u0.u1 == ~0x00)
		{
			if (g_dw43AAB4 != 0x01)
			{
l00416537:
				goto l0041653B;
			}
			else
			{
				if (dwArg04 != 0x00)
				{
					if (dwArg04 != 0x01)
					{
						if (dwArg04 != 0x02)
							goto l00416537;
						SetStdHandle(~0x0B, dwArg08);
					}
					else
						SetStdHandle(~0x0A, dwArg08);
				}
				else
					SetStdHandle(~0x09, dwArg08);
l0041653B:
				*((char *) &eax_19->ptr454580[0].u0.u1 + esi_24) = (Eq_15923 (*)[]) dwArg08;
				return;
			}
		}
	}
	g_dw43AA58 = 0x09;
	g_t43AA5C.u1 = (DWORD) 0x00;
}

// 00416570: void fn00416570(Stack Eq_2617 dwArg04)
// Called from:
//      fn00413750
void fn00416570(Eq_2617 dwArg04)
{
	if (dwArg04 < g_t454680.u1)
	{
		struct Eq_14320 * eax_16 = (dwArg04 & ~0x18) >> 0x03;
		int32 esi_20 = (dwArg04 & 0x1F) * 0x08;
		struct Eq_14330 * eax_22 = (struct Eq_14330 *) ((char *) eax_16->ptr454580 + esi_20);
		if ((eax_22->b0004 & 0x01) != 0x00 && eax_22->dw0000 != ~0x00)
		{
			if (g_dw43AAB4 == 0x01)
			{
				Eq_57 dwLoc10_86;
				if (dwArg04 != 0x00)
				{
					if (dwArg04 != 0x01)
					{
						if (dwArg04 != 0x02)
							goto l004165D6;
						dwLoc10_86.u0 = ~0x0B;
					}
					else
						dwLoc10_86.u0 = ~0x0A;
				}
				else
					dwLoc10_86.u0 = ~0x09;
				SetStdHandle(dwLoc10_86, 0x00);
			}
l004165D6:
			*((char *) &eax_16->ptr454580[0] + esi_20) = ~0x00;
			return;
		}
	}
	g_dw43AA58 = 0x09;
	g_t43AA5C.u1 = (DWORD) 0x00;
}

// 00416600: Register word32 fn00416600(Stack Eq_2617 dwArg04)
// Called from:
//      fn00413750
//      fn004143E0
//      fn00416710
//      fn00419460
word32 fn00416600(Eq_2617 dwArg04)
{
	if (dwArg04 < g_t454680.u1)
	{
		struct Eq_14387 * eax_13 = ((dwArg04 & ~0x18) >> 0x03)->dw454580 + (dwArg04 & 0x1F) * 0x08;
		if ((eax_13->b0004 & 0x01) != 0x00)
			return eax_13->dw0000;
	}
	g_dw43AA58 = 0x09;
	g_t43AA5C.u1 = (DWORD) 0x00;
	return ~0x00;
}

// 004166C0: void fn004166C0(Stack Eq_57 dwArg04)
// Called from:
//      fn004139C0
//      fn00414060
void fn004166C0(Eq_57 dwArg04)
{
	++g_dw43BA68;
	Eq_57 eax_13 = fn004111A0(0x1000);
	*((word32) dwArg04 + 8) = eax_13;
	if (eax_13 != 0x00)
	{
		((word32) dwArg04 + 0x0C)->u1 = *((word32) dwArg04 + 0x0C) | 0x08;
		((word32) dwArg04 + 24)->u1 = 0x1000;
	}
	else
	{
		((word32) dwArg04 + 0x0C)->u1 = *((word32) dwArg04 + 0x0C) | 0x04;
		((word32) dwArg04 + 8)->u1 = (word32) dwArg04 + 20;
		((word32) dwArg04 + 24)->u1 = 0x02;
	}
	dwArg04.u1->dw0000 = (word32) *((word32) dwArg04 + 8);
	((word32) dwArg04 + 4)->u1 = 0x00;
}

// 00416710: Sequence int64 fn00416710(Stack Eq_2617 dwArg04, Stack Eq_5663 dwArg08, Stack word32 dwArg0C, Stack Eq_57 dwArg10)
// Called from:
//      fn00413D20
//      fn00416800
int64 fn00416710(Eq_2617 dwArg04, Eq_5663 dwArg08, word32 dwArg0C, Eq_57 dwArg10)
{
	if (g_t454680.u1 > dwArg04)
	{
		struct Eq_14462 * eax_17 = (dwArg04 & ~0x18) >> 0x03;
		int32 esi_22 = (dwArg04 & 0x1F) * 0x08;
		if ((eax_17->ptr454580->a0004[(dwArg04 & 0x1F) * 2].u0 & 0x01) != 0x00)
		{
			Eq_5663 tLoc04 = (Eq_5663) dwArg0C;
			Eq_2617 eax_45 = fn00416600(dwArg04);
			if (eax_45 != ~0x00)
			{
				Eq_57 eax_67 = SetFilePointer(eax_45, dwArg08, &tLoc04, dwArg10);
				if (eax_67 == ~0x00)
				{
					Eq_57 eax_72 = GetLastError();
					if (eax_72 != 0x00)
					{
						fn004144A0(eax_72);
						return ~0x00;
					}
				}
				struct Eq_14471 * eax_79 = eax_17->ptr454580;
				*((word32) &eax_79->a0004[0] + esi_22) = (Eq_15929[]) (eax_79->a0004[(dwArg04 & 0x1F) * 2].u0 & ~0x02);
				return SEQ(tLoc04, eax_67);
			}
			else
			{
				g_dw43AA58 = 0x09;
				return ~0x00;
			}
		}
	}
	g_dw43AA58 = 0x09;
	g_t43AA5C.u1 = (DWORD) 0x00;
	return ~0x00;
}

// 00416800: Sequence Eq_14533 fn00416800(Stack Eq_57 dwArg04)
// Called from:
//      fn00413D20
Eq_14533 fn00416800(Eq_57 dwArg04)
{
	Eq_2617 eax_18;
	eax_18.u1 = *((word32) dwArg04 + 16);
	if (*((word32) dwArg04 + 4) < 0x00)
		((word32) dwArg04 + 4)->u1 = 0x00;
	int64 edx_eax_579 = fn00416710(eax_18, 0x00, 0x00, 0x01);
	word32 edx_36 = SLICE(edx_eax_579, word32, 32);
	Eq_5663 eax_34 = (word32) edx_eax_579;
	if (edx_eax_579 < 0x00)
		return ~0x00;
	ui32 edx_57 = (ui32) *((word32) dwArg04 + 0x0C);
	byte dl_66 = (byte) edx_57;
	if ((edx_57 & 0x0108) == 0x00)
		return edx_eax_579 - (uint64) (*((word32) dwArg04 + 4));
	byte * ecx_62 = dwArg04.u1->dw0000;
	byte * eax_102 = (byte *) *((word32) dwArg04 + 8);
	uint32 ebx_65 = ecx_62 - eax_102;
	uint32 dwLoc04_369 = ebx_65;
	if ((dl_66 & 0x03) != 0x00)
	{
		if ((((eax_18 & ~0x18) >> 0x03)->ptr454580->a0004[eax_18 & 0x1F].b0000 & 0x80) != 0x00 && eax_102 < ecx_62)
		{
			do
			{
				if (*eax_102 == 0x0A)
					++dwLoc04_369;
				++eax_102;
			} while (eax_102 < ecx_62);
		}
	}
	else if ((dl_66 & 0x80) == 0x00)
	{
		g_dw43AA58 = 22;
		return ~0x00;
	}
	if (edx_36 == 0x00 && eax_34 == 0x00)
		return (uint64) dwLoc04_369;
	int64 qwLoc10_400;
	if ((dl_66 & 0x01) == 0x00)
		return (uint64) dwLoc04_369 + qwLoc10_400;
	Eq_14540 eax_137 = *((word32) dwArg04 + 4);
	if (eax_137 == 0x00)
	{
		dwLoc04_369 = 0x00;
		return (uint64) dwLoc04_369 + qwLoc10_400;
	}
	struct Eq_14644 * eax_150 = (eax_18 & ~0x18) >> 0x03;
	Eq_14646 edi_146 = (word32) eax_137.u0 + ebx_65;
	qwLoc10_400 = edx_eax_579;
	if ((eax_150->ptr454580->a0004[eax_18 & 0x1F].b0000 & 0x80) == 0x00)
	{
l004169BD:
		qwLoc10_400 = edx_eax_579 - (uint64) edi_146;
		return (uint64) dwLoc04_369 + qwLoc10_400;
	}
	int64 edx_eax_580 = fn00416710(eax_18, 0x00, 0x00, 0x02);
	Eq_5663 eax_169 = (word32) edx_eax_580;
	if (SLICE(edx_eax_580, word32, 32) == edx_36 && eax_169 == eax_34)
	{
		byte * eax_235 = (byte *) *((word32) dwArg04 + 8);
		byte * ecx_236 = eax_235 + edi_146;
		for (; ecx_236 > eax_235; ++eax_235)
		{
			if (*eax_235 == 0x0A)
				edi_146 = (word32) edi_146 + 1;
		}
		if ((*((word32) dwArg04 + 0x0D) & 0x20) != 0x00)
		{
l004169BC:
			edi_146 = (word32) edi_146 + 1;
			goto l004169BD;
		}
		goto l004169BD;
	}
	fn00416710(eax_18, eax_34, edx_36, 0x00);
	if (edi_146 <= 0x0200)
	{
		ui32 eax_208 = (ui32) *((word32) dwArg04 + 0x0C);
		byte ah_214 = SLICE(eax_208, byte, 8);
		if (((byte) eax_208 & 0x08) != 0x00)
		{
			edi_146.u0 = 0x0200;
			if ((ah_214 & 0x04) == 0x00)
			{
l004169B2:
				if ((eax_150->ptr454580->a0004[eax_18 & 0x1F].b0000 & 0x04) != 0x00)
					goto l004169BC;
				goto l004169BD;
			}
		}
	}
	edi_146 = *((word32) dwArg04 + 24);
	goto l004169B2;
}

// 004169E0: Register Eq_2617 fn004169E0(Stack Eq_200 dwArg04, Stack ui32 dwArg08, Stack up32 dwArg0C, Stack ui32 dwArg10)
// Called from:
//      fn00413DD0
Eq_2617 fn004169E0(Eq_200 dwArg04, ui32 dwArg08, up32 dwArg0C, ui32 dwArg10)
{
	Eq_14742 tLoc0C;
	tLoc0C.lpSecurityDescriptor = (LPVOID) null;
	tLoc0C.nLength = (DWORD) 0x0C;
	byte bl_258;
	if ((dwArg08 & 0x80) != 0x00)
	{
		tLoc0C.bInheritHandle = (BOOL) 0x00;
		bl_258 = 0x10;
	}
	else
	{
		tLoc0C.bInheritHandle = (BOOL) 0x01;
		bl_258 = 0x00;
	}
	if ((dwArg08 & 0x8000) == 0x00 && ((dwArg08 & 0x4000) != 0x00 || g_dw43BFB0 != 0x8000))
		bl_258 |= 0x80;
	Eq_57 dwLoc14_593;
	switch (dwArg08 & 0x03)
	{
	case 0x00:
		dwLoc14_593.u0 = 0x80000000;
		break;
	case 0x01:
		dwLoc14_593.u0 = 0x40000000;
		break;
	default:
		if ((dwArg08 & 0x03) != 0x02)
		{
			g_dw43AA58 = 22;
			g_t43AA5C.u1 = (DWORD) 0x00;
			return ~0x00;
		}
		dwLoc14_593.u0 = 0xC0000000;
		break;
	}
	if (dwArg0C > 0x40 || dwArg0C < 0x10)
	{
l00416A9B:
		g_dw43AA58 = 22;
		g_t43AA5C.u1 = (DWORD) 0x00;
		return ~0x00;
	}
	Eq_57 dwLoc18_601;
	switch (dwArg0C)
	{
	case 0x10:
		dwLoc18_601.u0 = 0x00;
		break;
	case 0x11:
	case 0x12:
	case 0x13:
	case 0x14:
	case 0x15:
	case 22:
	case 0x17:
	case 0x18:
	case 0x19:
	case 0x1A:
	case 0x1B:
	case 0x1C:
	case 0x1D:
	case 0x1E:
	case 0x1F:
	case 33:
	case 0x22:
	case 0x23:
	case 0x24:
	case 0x25:
	case 0x26:
	case 0x27:
	case 0x28:
	case 0x29:
	case 0x2A:
	case 0x2B:
	case 44:
	case 0x2D:
	case 0x2E:
	case 0x2F:
	case 0x31:
	case 0x32:
	case 0x33:
	case 0x34:
	case 0x35:
	case 0x36:
	case 55:
	case 0x38:
	case 0x39:
	case 0x3A:
	case 0x3B:
	case 0x3C:
	case 0x3D:
	case 0x3E:
	case 0x3F:
		goto l00416A9B;
	case 0x20:
		dwLoc18_601.u0 = 0x01;
		break;
	case 0x30:
		dwLoc18_601.u0 = 0x02;
		break;
	case 0x40:
		dwLoc18_601.u0 = 0x03;
		break;
	}
	Eq_57 dwLoc10_625;
	if ((dwArg08 & 0x0700) <= 0x0100)
	{
		if ((dwArg08 & 0x0700) == 0x0100)
		{
			dwLoc10_625.u0 = 0x04;
			goto l00416B7B;
		}
		if ((dwArg08 & 0x0700) != 0x00)
			goto l00416B2A;
l00416B4B:
		dwLoc10_625.u0 = 0x03;
		goto l00416B7B;
	}
	if ((dwArg08 & 0x0700) <= 0x0300)
	{
		if ((dwArg08 & 0x0700) == 0x0300)
		{
			dwLoc10_625.u0 = 0x02;
			goto l00416B7B;
		}
		if ((dwArg08 & 0x0700) != 0x0200)
			goto l00416B2A;
l00416B5F:
		dwLoc10_625.u0 = 0x05;
		goto l00416B7B;
	}
	if ((dwArg08 & 0x0700) <= 0x0500)
	{
		if ((dwArg08 & 0x0700) != 0x0500)
		{
			if ((dwArg08 & 0x0700) == 0x0400)
				goto l00416B4B;
			goto l00416B2A;
		}
	}
	else
	{
		if ((dwArg08 & 0x0700) == 0x0600)
			goto l00416B5F;
		if ((dwArg08 & 0x0700) != 0x0700)
		{
l00416B2A:
			g_dw43AA58 = 22;
			g_t43AA5C.u1 = (DWORD) 0x00;
			return ~0x00;
		}
	}
	dwLoc10_625.u0 = 0x01;
l00416B7B:
	Eq_57 ebp_140;
	ebp_140.u0 = 0x80;
	if ((dwArg08 & 0x0100) != 0x00 && ((~g_dw43AA60 & dwArg10) & 0x80) == 0x00)
		ebp_140.u0 = 0x01;
	if ((dwArg08 & 0x40) != 0x00)
	{
		dwLoc14_593 |= 0x00010000;
		ebp_140 |= 0x04000000;
	}
	if ((dwArg08 & 0x1000) != 0x00)
		ebp_140 |= 0x0100;
	if ((dwArg08 & 0x20) != 0x00)
		ebp_140 |= 0x08000000;
	else if ((dwArg08 & 0x10) != 0x00)
		ebp_140 |= 0x10000000;
	Eq_2617 eax_195 = fn00416400();
	if (eax_195 != ~0x00)
	{
		Eq_2617 eax_233 = CreateFileA(dwArg04, dwLoc14_593, dwLoc18_601, &tLoc0C, dwLoc10_625, ebp_140, 0x00);
		if (eax_233 != ~0x00)
		{
			Eq_57 eax_240 = GetFileType(eax_233);
			if (eax_240 != 0x00)
			{
				if (eax_240 == 0x02)
					bl_258 |= 0x40;
				else if (eax_240 == 0x03)
					bl_258 |= 0x08;
				fn004164C0(eax_195, eax_233);
				struct Eq_14962 * eax_292 = (eax_195 & ~0x18) >> 0x03;
				byte bl_274 = bl_258 | 0x01;
				int32 eax_297 = (eax_195 & 0x1F) << 0x03;
				*((word32) &eax_292->ptr454580->a0004[0] + eax_297) = (Eq_15941[]) bl_274;
				if ((bl_274 & 0x48) == 0x00 && ((bl_274 & 0x80) != 0x00 && (dwArg08 & 0x02) != 0x00))
				{
					Eq_5663 eax_323 = fn004143E0(eax_195, ~0x00, 0x02);
					if (eax_323 == ~0x00)
					{
						if (g_t43AA5C.u1 != 131)
						{
							fn00413750(eax_195);
							return ~0x00;
						}
					}
					else
					{
						Eq_15004 tLoc19 = (Eq_15004) 0x00;
						if (fn00413AB0(eax_195, &tLoc19, 0x01) == 0x00 && (tLoc19 == 0x1A && fn00419460(eax_195, eax_323) == ~0x00))
						{
							fn00413750(eax_195);
							return ~0x00;
						}
						if (fn004143E0(eax_195, 0x00, 0x00) == ~0x00)
						{
							fn00413750(eax_195);
							return ~0x00;
						}
					}
				}
				if ((bl_274 & 0x48) == 0x00 && (dwArg08 & 0x08) != 0x00)
				{
					struct Eq_14974 * eax_450 = eax_292->ptr454580;
					*((word32) &eax_450->a0004[0] + eax_297) = (Eq_15941[]) (eax_450->a0004[(eax_195 & 0x1F) * 2].u0 | 0x20);
				}
				return eax_195;
			}
			else
			{
				CloseHandle(eax_233);
				fn004144A0(GetLastError());
				return ~0x00;
			}
		}
		else
		{
			fn004144A0(GetLastError());
			return ~0x00;
		}
	}
	else
	{
		g_dw43AA58 = 0x18;
		g_t43AA5C.u1 = (DWORD) 0x00;
		return ~0x00;
	}
}

// 00416E00: Register ui32 fn00416E00(Stack Eq_2617 dwArg04)
// Called from:
//      fn00414060
//      fn004145E0
ui32 fn00416E00(Eq_2617 dwArg04)
{
	if (dwArg04 < g_t454680.u1)
		return (uint32) ((dwArg04 & ~0x18) >> 0x03)->ptr454580->a0004[dwArg04 & 0x1F].b0000 & 0x40;
	return 0x00;
}

// 00416EB0: Register int32 fn00416EB0(Stack Eq_57 dwArg04, Stack Eq_12427 tArg08)
// Called from:
//      fn004147C0
int32 fn00416EB0(Eq_57 dwArg04, Eq_12427 tArg08)
{
	if (dwArg04 == 0x00)
		return 0x00;
	if (g_dw43BDD8 != 0x00)
	{
		int32 edx_14 = g_dw43BB80;
		Eq_3673 tLoc04 = 0x00;
		int32 eax_34 = WideCharToMultiByte(g_t43BDE8.u1, 0x0220, &tArg08, 0x01, dwArg04, edx_14, null, &tLoc04);
		if (eax_34 == 0x00 || tLoc04 != 0x00)
		{
			g_dw43AA58 = 0x2A;
			eax_34 = ~0x00;
		}
		return eax_34;
	}
	else if (tArg08 <= 0xFF)
	{
		*dwArg04.u3 = (char) tArg08;
		return 0x01;
	}
	else
	{
		g_dw43AA58 = 0x2A;
		return ~0x00;
	}
}

// 00416F50: Register uint32 fn00416F50(Stack uint32 dwArg04, Stack uint32 dwArg08, Stack uint32 dwArg0C, Stack uint32 dwArg10, Register out uint32 edxOut)
// Called from:
//      fn004147C0
uint32 fn00416F50(uint32 dwArg04, uint32 dwArg08, uint32 dwArg0C, uint32 dwArg10, uint32 & edxOut)
{
	uint32 eax_115;
	uint32 edx_119;
	if (dwArg10 == 0x00)
	{
		uint64 edx_eax_72 = (uint64) dwArg08;
		eax_115 = SEQ(edx_eax_72 % dwArg0C, dwArg04) /u dwArg0C;
		edx_119 = edx_eax_72 /u dwArg0C;
	}
	else
	{
		uint64 ecx_ebx_132 = SEQ(dwArg10, dwArg0C);
		uint64 edx_eax_135 = SEQ(dwArg08, dwArg04);
		uint64 v23_93;
		uint32 ebx_26;
		do
		{
			v23_93 = ecx_ebx_132 >> 0x01;
			ebx_26 = (word32) v23_93;
			edx_eax_135 >>= 0x01;
			ecx_ebx_132 = v23_93;
		} while (SLICE(v23_93, word32, 32) != 0x00);
		uint32 eax_41 = edx_eax_135 /u ebx_26;
		uint64 edx_eax_49 = eax_41 *64 dwArg0C;
		uint32 esi_42 = eax_41;
		uint32 eax_57 = (word32) edx_eax_49;
		uint32 edx_51 = SLICE(edx_eax_49, word32, 32) + dwArg10 * eax_41;
		if (edx_51 < 0x00 || (edx_51 > dwArg08 || edx_51 >= dwArg08 && eax_57 > dwArg04))
			esi_42 = eax_41 - 0x01;
		edx_119 = 0x00;
		eax_115 = esi_42;
	}
	edxOut = edx_119;
	return eax_115;
}

// 00416FC0: Register uint32 fn00416FC0(Stack Eq_13188 qwArg04, Stack Eq_13189 qwArg0C)
// Called from:
//      fn004147C0
uint32 fn00416FC0(Eq_13188 qwArg04, Eq_13189 qwArg0C)
{
	uint32 dwArg10 = SLICE(qwArg0C, word32, 32);
	uint32 dwArg0C = (word32) qwArg0C;
	uint32 dwArg08 = SLICE(qwArg04, word32, 32);
	uint32 dwArg04 = (word32) qwArg04;
	uint32 eax_127;
	if (dwArg10 == 0x00)
	{
		eax_127 = SEQ((uint64) dwArg08 % dwArg0C, dwArg04) % dwArg0C;
		return eax_127;
	}
	Eq_13189 ecx_ebx_144 = qwArg0C;
	Eq_13188 edx_eax_147 = qwArg04;
	Eq_13189 v23_105;
	uint32 ebx_23;
	do
	{
		v23_105 = ecx_ebx_144 >> 0x01;
		ebx_23 = (word32) v23_105;
		edx_eax_147 >>= 0x01;
		ecx_ebx_144 = v23_105;
	} while (SLICE(v23_105, word32, 32) != 0x00);
	uint32 eax_38 = edx_eax_147 /u ebx_23;
	uint64 edx_eax_47 = dwArg0C *64 eax_38;
	uint32 eax_55 = (word32) edx_eax_47;
	uint32 edx_49 = SLICE(edx_eax_47, word32, 32) + dwArg10 * eax_38;
	word64 edx_eax_102;
	if (edx_49 < 0x00 || edx_49 > dwArg08)
	{
l0041701A:
		edx_eax_102 = SEQ(edx_49, eax_55) - qwArg0C;
		goto l00417022;
	}
	else
	{
		edx_eax_102 = SEQ(edx_49, eax_55);
		if (edx_49 >= dwArg08)
		{
			edx_eax_102 = SEQ(edx_49, eax_55);
			if (eax_55 > dwArg04)
				goto l0041701A;
		}
l00417022:
		eax_127 = -(word32) (edx_eax_102 - qwArg04);
		return eax_127;
	}
}

// 00419460: Register Eq_57 fn00419460(Stack Eq_2617 dwArg04, Stack Eq_5663 dwArg08)
// Called from:
//      fn004169E0
Eq_57 fn00419460(Eq_2617 dwArg04, Eq_5663 dwArg08)
{
	ptr32 fp;
	word32 dwLoc04;
	fn0041A340(0x1004, dwLoc04);
	Eq_57 ebx_144;
	ebx_144.u0 = 0x00;
	if (g_t454680.u1 <= dwArg04 || ((((((dwArg04 & ~0x18) >> 0x03)->ptr454580)->a0004))[dwArg04 & 0x1F].b0000 & 0x01) == 0x00)
	{
		g_dw43AA58 = 0x09;
		return ~0x00;
	}
	else
	{
		Eq_5663 eax_59 = fn004143E0(dwArg04, 0x00, 0x01);
		if (eax_59 == ~0x00)
			return ~0x00;
		Eq_5663 eax_77 = fn004143E0(dwArg04, 0x00, 0x02);
		if (eax_77 == ~0x00)
			return ~0x00;
		Eq_57 ebp_103 = dwArg08 - eax_77;
		if (ebp_103 > 0x00)
		{
			word32 * edi_150 = fp - 0x1000;
			word32 ecx_155;
			for (ecx_155 = 0x0400; ecx_155 != 0x00; --ecx_155)
			{
				*edi_150 = 0x00;
				++edi_150;
			}
			word32 eax_163 = fn0041A2C0(dwArg04, 0x8000);
			do
			{
				Eq_57 eax_174;
				eax_174.u0 = 0x1000;
				if (ebp_103 < 0x1000)
					eax_174 = ebp_103;
				Eq_57 eax_191 = fn004141B0(dwArg04, fp - 0x1000, eax_174);
				if (eax_191 == ~0x00)
				{
					if (g_t43AA5C.u1 == 0x05)
						g_dw43AA58 = 0x0D;
					ebx_144 = eax_191;
					break;
				}
				ebp_103 -= eax_191;
			} while (ebp_103 > 0x00);
			fn0041A2C0(dwArg04, eax_163);
		}
		else if (ebp_103 < 0x00)
		{
			fn004143E0(dwArg04, dwArg08, 0x00);
			ebx_144 = 0x00 - (word32) (SetEndOfFile(fn00416600(dwArg04)) < 0x01);
			if (ebx_144 == ~0x00)
			{
				g_dw43AA58 = 0x0D;
				g_t43AA5C.u1 = (DWORD) GetLastError();
			}
		}
		fn004143E0(dwArg04, eax_59, 0x00);
		return ebx_144;
	}
}

// 0041A2C0: Register ui32 fn0041A2C0(Stack Eq_2617 dwArg04, Stack word32 dwArg08)
// Called from:
//      fn00419460
ui32 fn0041A2C0(Eq_2617 dwArg04, word32 dwArg08)
{
	if (g_t454680.u1 > dwArg04)
	{
		byte * ecx_16 = ((dwArg04 & ~0x18) >> 0x03)->dw454580 + 4 + (dwArg04 & 0x1F) * 0x08;
		byte dl_17 = *ecx_16;
		if ((dl_17 & 0x01) != 0x00)
		{
			uint32 ebx_54 = (uint32) (dl_17 & 0x80);
			byte dl_41;
			if (dwArg08 == 0x8000)
				dl_41 = dl_17 & 0x7F;
			else
			{
				if (dwArg08 != 0x4000)
				{
					g_dw43AA58 = 22;
					return ~0x00;
				}
				dl_41 = dl_17 | 0x80;
			}
			*ecx_16 = dl_41;
			return (0x00 - (word32) (ebx_54 < 0x01) & 0x4000) + 0x4000;
		}
	}
	g_dw43AA58 = 0x09;
	return ~0x00;
}

// 0041A340: void fn0041A340(Register uint32 eax, Stack word32 dwArg00)
// Called from:
//      fn00419460
void fn0041A340(uint32 eax, word32 dwArg00)
{
	ptr32 fp;
	ptr32 ecx_11 = fp + 4;
	for (; eax >= 0x1000; eax -= 0x1000)
		ecx_11 -= 0x1000;
	(ecx_11 - eax)->dwFFFFFFFC = dwArg00;
}

// tmp_9wvpzh__data_0003.c
// Generated by decompiling tmp_9wvpzh_
// using Reko decompiler version 0.11.6.0.

#include "tmp_9wvpzh_.h"

ptr32 g_ptr44CDF8 = 0x00; // 0044CDF8
word32 g_dw44CE2C = 0x00; // 0044CE2C
Eq_57 g_t44CE38 = // 0044CE38
	{
		0x00
	};
Eq_57 g_t44CE3C = // 0044CE3C
	{
		0x00
	};
Eq_57 g_t44CE40 = // 0044CE40
	{
		0x00
	};
word32 g_dw44CEB0 = 0x00; // 0044CEB0
Eq_57 g_t44CEBC = // 0044CEBC
	{
		0x00
	};
Eq_57 g_t44CEC0 = // 0044CEC0
	{
		0x00
	};
Eq_57 g_t44CEC4 = // 0044CEC4
	{
		0x00
	};
<unknown> g_t452760 = // 00452760;
<anonymous> * g_ptr452864 = null; // 00452864
ptr32 g_ptr4528B0 = 0x00; // 004528B0
struct Eq_210 * g_ptr4528B4 = null; // 004528B4
struct Eq_210 * g_ptr4528B8 = null; // 004528B8
ptr32 g_ptr4528BC = 0x00; // 004528BC
Eq_57 g_t4528C0 = // 004528C0
	{
		0x00
	};
ptr32 g_ptr4528C4 = 0x00; // 004528C4
struct Eq_210 * g_ptr4528C8 = null; // 004528C8
word32 g_a4528D0[] = // 004528D0
	{
	};
struct Eq_210 * g_ptr452948 = null; // 00452948
real64 g_r452950 = 0.0; // 00452950
Eq_231 g_t452958 = // 00452958
	{
		0
	};
Eq_57 g_t45295C = // 0045295C
	{
		0x00
	};
int32 g_dw452960 = 0; // 00452960
Eq_57 g_t452970 = // 00452970
	{
		0x00
	};
ui32 g_dw452974 = 0x00; // 00452974
word32 g_dw452978 = 0x00; // 00452978
word32 g_dw452980 = 0x00; // 00452980
ptr32 g_ptr452984 = 0x00; // 00452984
ptr32 g_ptr452988 = 0x00; // 00452988
Eq_57 g_t45298C = // 0045298C
	{
		0x00
	};
word32 g_dw452990 = 0x00; // 00452990
word32 g_dw452994 = 0x00; // 00452994
word32 g_dw452998 = 0x00; // 00452998
word32 g_dw45299C = 0x00; // 0045299C
struct Eq_210 * g_ptr4529D0 = null; // 004529D0
struct Eq_210 * g_ptr4529D4 = null; // 004529D4
struct Eq_210 * g_ptr4529D8 = null; // 004529D8
struct Eq_210 * g_ptr4529DC = null; // 004529DC
Eq_57 g_t4529F8 = // 004529F8
	{
		0x00
	};
int32 g_dw4529FC = 0; // 004529FC
Eq_57 g_t452A00 = // 00452A00
	{
		0x00
	};
real64 g_r452A08 = 0.0; // 00452A08
int32 g_dw452A10 = 0; // 00452A10
ui32 g_a452A20[] = // 00452A20
	{
	};
word32 g_dw452E20 = 0x00; // 00452E20
word16 g_a452E30[257] = // 00452E30
	{
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
	};
word16 g_w453030 = 0x00; // 00453030
ptr32 g_ptr453034 = 0x00; // 00453034
Eq_50 g_t453038 = // 00453038
	{
		0
	};
Eq_50 g_t45303C = // 0045303C
	{
		0
	};
word32 * g_ptr453070 = null; // 00453070
Eq_282 g_t453080 = // 00453080
	{
		0
	};
int32 g_dw453084 = 0; // 00453084
int32 g_dw453088 = 0; // 00453088
Eq_50 g_t45308C = // 0045308C
	{
		0
	};
Eq_273 g_t453090 = // 00453090
	{
		0
	};
word32 g_dw453094 = 0x00; // 00453094
int32 g_dw453098 = 0; // 00453098
struct Eq_4353 ** g_ptr4530A0 = null; // 004530A0
word32 g_dw4530B0 = 0x00; // 004530B0
word32 g_dw4530B4 = 0x00; // 004530B4
uint32 g_dw4530B8 = 0x00; // 004530B8
uint32 g_dw4530BC = 0x00; // 004530BC
word32 * g_ptr4530C0 = null; // 004530C0
word32 g_a4530D0[257] = // 004530D0
	{
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
	};
word32 g_dw4534D0 = 0x00; // 004534D0
struct Eq_11594 * g_ptr453564 = null; // 00453564
int32 g_dw454570 = 0; // 00454570
Eq_2617 g_t454574 = // 00454574
	{
		0x00
	};
Eq_57 g_a454580[65] = // 00454580
	{
		
		{
			0x00
		},
		
		{
			0x00
		},
		
		{
			0x00
		},
		
		{
			0x00
		},
		
		{
			0x00
		},
		
		{
			0x00
		},
		
		{
			0x00
		},
		
		{
			0x00
		},
		
		{
			0x00
		},
		
		{
			0x00
		},
		
		{
			0x00
		},
		
		{
			0x00
		},
		
		{
			0x00
		},
		
		{
			0x00
		},
		
		{
			0x00
		},
		
		{
			0x00
		},
		
		{
			0x00
		},
		
		{
			0x00
		},
		
		{
			0x00
		},
		
		{
			0x00
		},
		
		{
			0x00
		},
		
		{
			0x00
		},
		
		{
			0x00
		},
		
		{
			0x00
		},
		
		{
			0x00
		},
		
		{
			0x00
		},
		
		{
			0x00
		},
		
		{
			0x00
		},
		
		{
			0x00
		},
		
		{
			0x00
		},
		
		{
			0x00
		},
		
		{
			0x00
		},
		
		{
			0x00
		},
		
		{
			0x00
		},
		
		{
			0x00
		},
		
		{
			0x00
		},
		
		{
			0x00
		},
		
		{
			0x00
		},
		
		{
			0x00
		},
		
		{
			0x00
		},
		
		{
			0x00
		},
		
		{
			0x00
		},
		
		{
			0x00
		},
		
		{
			0x00
		},
		
		{
			0x00
		},
		
		{
			0x00
		},
		
		{
			0x00
		},
		
		{
			0x00
		},
		
		{
			0x00
		},
		
		{
			0x00
		},
		
		{
			0x00
		},
		
		{
			0x00
		},
		
		{
			0x00
		},
		
		{
			0x00
		},
		
		{
			0x00
		},
		
		{
			0x00
		},
		
		{
			0x00
		},
		
		{
			0x00
		},
		
		{
			0x00
		},
		
		{
			0x00
		},
		
		{
			0x00
		},
		
		{
			0x00
		},
		
		{
			0x00
		},
		
		{
			0x00
		},
		
		{
			0x00
		},
	};
struct Eq_9294 * g_a454584[] = // 00454584
	{
	};
Eq_2617 g_t454680 = // 00454680
	{
		0x00
	};
Eq_57 g_t454684 = // 00454684
	{
		0x00
	};
up32 g_dw454688 = 0x00; // 00454688
word32 * g_ptr45468C = null; // 0045468C
// tmp_9wvpzh__idata.c
// Generated by decompiling tmp_9wvpzh_
// using Reko decompiler version 0.11.6.0.

#include "tmp_9wvpzh_.h"

word32 g_dw4550A0 = 349338; // 004550A0
word32 g_dw4550A8 = 349400; // 004550A8
word32 g_dw4550B0 = 0x000554B8; // 004550B0
word32 g_dw4550B8 = 0x0005591E; // 004550B8
word32 g_dw4550BC = 0x0005547E; // 004550BC
word32 g_dw4550C4 = 0x00055622; // 004550C4
word32 g_dw4550C8 = 0x0005569A; // 004550C8
word32 g_dw4550CC = 0x000556B4; // 004550CC
word32 g_dw4550D0 = 0x000557D0; // 004550D0
word32 g_dw4550D4 = 0x000557C2; // 004550D4
word32 g_dw4550D8 = 0x000557AE; // 004550D8
word32 g_dw4550DC = 350110; // 004550DC
word32 g_dw4550E0 = 0x0005578E; // 004550E0
word32 g_dw4550E4 = 0x0005577C; // 004550E4
word32 g_dw4550E8 = 0x00055770; // 004550E8
word32 g_dw4550EC = 350050; // 004550EC
word32 g_dw4550F0 = 0x00055752; // 004550F0
word32 g_dw4550F4 = 350022; // 004550F4
word32 g_dw4550F8 = 350008; // 004550F8
word32 g_dw4550FC = 0x00055824; // 004550FC
word32 g_dw455100 = 0x00055814; // 00455100
word32 g_dw455104 = 0x00055804; // 00455104
word32 g_dw455108 = 0x000557F4; // 00455108
word32 g_dw45510C = 0x000557E2; // 0045510C
word32 g_dw455110 = 0x00055544; // 00455110
word32 g_dw455114 = 0x00055552; // 00455114
word32 g_dw455118 = 0x00055566; // 00455118
word32 g_dw45511C = 0x0005557A; // 0045511C
word32 g_dw455120 = 0x0005558E; // 00455120
word32 g_dw455124 = 0x000555A0; // 00455124
word32 g_dw455128 = 0x000555B2; // 00455128
word32 g_dw45512C = 0x000555C0; // 0045512C
word32 g_dw455130 = 0x000555CC; // 00455130
word32 g_dw455134 = 0x000555D8; // 00455134
word32 g_dw455138 = 0x0005571C; // 00455138
word32 g_dw45513C = 349994; // 0045513C
word32 g_dw455140 = 0x000555E8; // 00455140
word32 g_dw455144 = 0x000555FA; // 00455144
word32 g_dw455148 = 0x00055606; // 00455148
word32 g_dw45514C = 0x000556FE; // 0045514C
word32 g_dw455150 = 0x00055638; // 00455150
word32 g_dw455154 = 0x00055652; // 00455154
word32 g_dw455158 = 0x00055668; // 00455158
word32 g_dw45515C = 0x00055680; // 0045515C
word32 g_dw455160 = 349932; // 00455160
word32 g_dw455164 = 0x0005570C; // 00455164
word32 g_dw455168 = 349898; // 00455168
word32 g_dw45516C = 0x000556D6; // 0045516C
word32 g_dw455170 = 0x000556E0; // 00455170
word32 g_dw455178 = 0x00055410; // 00455178
word32 g_dw45517C = 0x00055370; // 0045517C
word32 g_dw455180 = 349234; // 00455180
word32 g_dw455184 = 0x00055398; // 00455184
word32 g_dw455188 = 349094; // 00455188
word32 g_dw45518C = 0x000553B6; // 0045518C
word32 g_dw455190 = 0x000553C8; // 00455190
word32 g_dw455194 = 0x000553D4; // 00455194
word32 g_dw455198 = 0x000553E2; // 00455198
word32 g_dw45519C = 0x000553F4; // 0045519C
word32 g_dw4551A0 = 0x00055404; // 004551A0
word32 g_dw4551A4 = 0x00055462; // 004551A4
word32 g_dw4551A8 = 0x00055450; // 004551A8
word32 g_dw4551AC = 349244; // 004551AC
word32 g_dw4551B0 = 0x00055422; // 004551B0
word32 g_dw4551B4 = 0x00055888; // 004551B4
word32 g_dw4551B8 = 350360; // 004551B8
word32 g_dw4551BC = 0x0005590C; // 004551BC
word32 g_dw4551C0 = 0x000558FC; // 004551C0
word32 g_dw4551C4 = 0x00055384; // 004551C4
word32 g_dw4551C8 = 0x000558E8; // 004551C8
word32 g_dw4551CC = 0x00055844; // 004551CC
word32 g_dw4551D0 = 0x00055852; // 004551D0
word32 g_dw4551D4 = 0x00055860; // 004551D4
word32 g_dw4551D8 = 0x00055870; // 004551D8
word32 g_dw4551DC = 0x000558DC; // 004551DC
word32 g_dw4551E0 = 0x000558F0; // 004551E0
word32 g_dw4551E4 = 0x000558AE; // 004551E4
word32 g_dw4551E8 = 0x000558B8; // 004551E8
word32 g_dw4551EC = 0x000558CA; // 004551EC
word32 g_dw4551F4 = 0x0005551C; // 004551F4
word32 g_dw4551F8 = 349434; // 004551F8
word32 g_dw4551FC = 0x0005550C; // 004551FC
word32 g_dw455200 = 0x0005552A; // 00455200
<anonymous> * __imp__DirectDrawCreate = &g_t5549A; // 00455208
<anonymous> * __imp__DirectInputCreateA = &g_t554D8; // 00455210
<anonymous> * __imp__DirectSoundCreate = &g_t554B8; // 00455218
<anonymous> * __imp__GetDeviceCaps = &g_t5591E; // 00455220
<anonymous> * __imp__GetStockObject = &g_t5547E; // 00455224
<anonymous> * __imp__GetModuleFileNameA = &g_t55622; // 0045522C
<anonymous> * __imp__GetEnvironmentStringsW = &g_t5569A; // 00455230
<anonymous> * __imp__WideCharToMultiByte = &g_t556B4; // 00455234
<anonymous> * __imp__GetStringTypeA = &g_t557D0; // 00455238
<anonymous> * __imp__CreateFileA = &g_t557C2; // 0045523C
<anonymous> * __imp__FlushFileBuffers = &g_t557AE; // 00455240
<anonymous> * __imp__SetStdHandle = &g_t5579E; // 00455244
<anonymous> * __imp__LoadLibraryA = &g_t5578E; // 00455248
<anonymous> * __imp__SetFilePointer = &g_t5577C; // 0045524C
<anonymous> * __imp__ReadFile = &g_t55770; // 00455250
<anonymous> * __imp__CloseHandle = &g_t55762; // 00455254
<anonymous> * __imp__VirtualAlloc = &g_t55752; // 00455258
<anonymous> * __imp__WriteFile = &g_t55746; // 0045525C
<anonymous> * __imp__VirtualFree = &g_t55738; // 00455260
<anonymous> * __imp__RaiseException = &g_t55824; // 00455264
<anonymous> * __imp__SetEndOfFile = &g_t55814; // 00455268
<anonymous> * __imp__LCMapStringW = &g_t55804; // 0045526C
<anonymous> * __imp__LCMapStringA = &g_t557F4; // 00455270
<anonymous> * __imp__GetStringTypeW = &g_t557E2; // 00455274
<anonymous> * __imp__ExitProcess = &g_t55544; // 00455278
<anonymous> * __imp__TerminateProcess = &g_t55552; // 0045527C
<anonymous> * __imp__GetCurrentProcess = &g_t55566; // 00455280
<anonymous> * __imp__GetModuleHandleA = &g_t5557A; // 00455284
<anonymous> * __imp__GetStartupInfoA = &g_t5558E; // 00455288
<anonymous> * __imp__GetCommandLineA = &g_t555A0; // 0045528C
<anonymous> * __imp__GetVersion = &g_t555B2; // 00455290
<anonymous> * __imp__HeapAlloc = &g_t555C0; // 00455294
<anonymous> * __imp__HeapFree = &g_t555CC; // 00455298
<anonymous> * __imp__GetLastError = &g_t555D8; // 0045529C
<anonymous> * __imp__HeapDestroy = &g_t5571C; // 004552A0
<anonymous> * __imp__HeapCreate = &g_t5572A; // 004552A4
<anonymous> * __imp__GetProcAddress = &g_t555E8; // 004552A8
<anonymous> * __imp__RtlUnwind = &g_t555FA; // 004552AC
<anonymous> * __imp__UnhandledExceptionFilter = &g_t55606; // 004552B0
<anonymous> * __imp__GetFileType = &g_t556FE; // 004552B4
<anonymous> * __imp__FreeEnvironmentStringsA = &g_t55638; // 004552B8
<anonymous> * __imp__MultiByteToWideChar = &g_t55652; // 004552BC
<anonymous> * __imp__GetEnvironmentStrings = &g_t55668; // 004552C0
<anonymous> * __imp__FreeEnvironmentStringsW = &g_t55680; // 004552C4
<anonymous> * __imp__SetHandleCount = &g_t556EC; // 004552C8
<anonymous> * __imp__GetStdHandle = &g_t5570C; // 004552CC
<anonymous> * __imp__GetCPInfo = &g_t556CA; // 004552D0
<anonymous> * __imp__GetACP = &g_t556D6; // 004552D4
<anonymous> * __imp__GetOEMCP = &g_t556E0; // 004552D8
<anonymous> * __imp__ClientToScreen = &g_t55410; // 004552E0
<anonymous> * __imp__DispatchMessageA = &g_t55370; // 004552E4
<anonymous> * __imp__SetRect = &g_t55432; // 004552E8
<anonymous> * __imp__GetMessageA = &g_t55398; // 004552EC
<anonymous> * __imp__PeekMessageA = &g_t553A6; // 004552F0
<anonymous> * __imp__RegisterClassA = &g_t553B6; // 004552F4
<anonymous> * __imp__LoadIconA = &g_t553C8; // 004552F8
<anonymous> * __imp__LoadCursorA = &g_t553D4; // 004552FC
<anonymous> * __imp__DefWindowProcA = &g_t553E2; // 00455300
<anonymous> * __imp__DestroyWindow = &g_t553F4; // 00455304
<anonymous> * __imp__SetCursor = &g_t55404; // 00455308
<anonymous> * __imp__PostMessageA = &g_t55462; // 0045530C
<anonymous> * __imp__PostQuitMessage = &g_t55450; // 00455310
<anonymous> * __imp__GetSystemMetrics = &g_t5543C; // 00455314
<anonymous> * __imp__GetClientRect = &g_t55422; // 00455318
<anonymous> * __imp__SetWindowPos = &g_t55888; // 0045531C
<anonymous> * __imp__AdjustWindowRectEx = &g_t55898; // 00455320
<anonymous> * __imp__CreateWindowExA = &g_t5590C; // 00455324
<anonymous> * __imp__UpdateWindow = &g_t558FC; // 00455328
<anonymous> * __imp__TranslateMessage = &g_t55384; // 0045532C
<anonymous> * __imp__GetDC = &g_t558E8; // 00455330
<anonymous> * __imp__ShowWindow = &g_t55844; // 00455334
<anonymous> * __imp__MessageBoxA = &g_t55852; // 00455338
<anonymous> * __imp__GetWindowRect = &g_t55860; // 0045533C
<anonymous> * __imp__SystemParametersInfoA = &g_t55870; // 00455340
<anonymous> * __imp__ReleaseDC = &g_t558DC; // 00455344
<anonymous> * __imp__SetFocus = &g_t558F0; // 00455348
<anonymous> * __imp__GetMenu = &g_t558AE; // 0045534C
<anonymous> * __imp__SetWindowLongA = &g_t558B8; // 00455350
<anonymous> * __imp__GetWindowLongA = &g_t558CA; // 00455354
<anonymous> * __imp__timeGetTime = &g_t5551C; // 0045535C
<anonymous> * __imp__timeBeginPeriod = &g_t554FA; // 00455360
<anonymous> * __imp__timeEndPeriod = &g_t5550C; // 00455364
<anonymous> * __imp__timeKillEvent = &g_t5552A; // 00455368
// tmp_9wvpzh__data_0002.c
// Generated by decompiling tmp_9wvpzh_
// using Reko decompiler version 0.11.6.0.

#include "tmp_9wvpzh_.h"

Eq_231 g_a43C3A0[] = // 0043C3A0
	{
	};
Eq_282 g_t43C3C4 = // 0043C3C4
	{
		0
	};
int32 g_dw43C3C8 = 0; // 0043C3C8
Eq_57 g_t43C3CC = // 0043C3CC
	{
		0x00
	};
Eq_273 g_t43C3D0 = // 0043C3D0
	{
		0
	};
struct Eq_210 * g_a43C3D8[] = // 0043C3D8
	{
	};
Eq_50 g_t43C3FC = // 0043C3FC
	{
		0
	};
int32 g_dw43C400 = 0; // 0043C400
Eq_57 g_t43C408 = // 0043C408
	{
		0x00
	};
Eq_231 g_t43C40C = // 0043C40C
	{
		0
	};
Eq_57 g_t43C410 = // 0043C410
	{
		0x00
	};
Eq_57 g_t43C414 = // 0043C414
	{
		0x00
	};
Eq_57 g_t43C418 = // 0043C418
	{
		0x00
	};
Eq_57 g_t43C41C = // 0043C41C
	{
		0x00
	};
word32 g_a43C420[16] = // 0043C420
	{
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
	};
Eq_231 g_t43C460 = // 0043C460
	{
		0
	};
Eq_57 g_t43C464 = // 0043C464
	{
		0x00
	};
byte g_a43C467[769] = // 0043C467
	{
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
	};
Eq_3560 g_t43C790 = null; // 0043C790
word32 g_dw43C7A4 = 0x00; // 0043C7A4
word32 g_dw43C7B0 = 0x00; // 0043C7B0
Eq_3548 g_t43C7B8 = // 0043C7B8
	{
		null
	};
Eq_3664 g_t43C7BC = null; // 0043C7BC
ptr32 g_ptr43C7C0 = 0x00; // 0043C7C0
int32 g_dw43C7C4 = 0; // 0043C7C4
int32 g_dw43C7C8 = 0; // 0043C7C8
int32 g_dw43C7CC = 0; // 0043C7CC
word32 g_dw43C7D0 = 0x00; // 0043C7D0
word32 g_dw43C7D4 = 0x00; // 0043C7D4
word32 g_dw43C7D8 = 0x00; // 0043C7D8
word32 g_dw43C7DC = 0x00; // 0043C7DC
int32 g_dw43C7E0 = 0; // 0043C7E0
word32 g_dw43C7E4 = 0x00; // 0043C7E4
uint32 g_dw43C7E8 = 0x00; // 0043C7E8
uint32 g_dw43C7EC = 0x00; // 0043C7EC
Eq_4379 g_t43C7F0 = // 0043C7F0
	{
		0
	};
int32 g_dw43C7F4 = 0; // 0043C7F4
ptr32 g_ptr43CCD8 = 0x00; // 0043CCD8
<anonymous> * g_ptr43CCDC = null; // 0043CCDC
<anonymous> * g_ptr43CCE0 = null; // 0043CCE0
ptr32 g_ptr43CCE4 = 0x00; // 0043CCE4
ptr32 g_ptr43CCE8 = 0x00; // 0043CCE8
ptr32 g_ptr43CCEC = 0x00; // 0043CCEC
<anonymous> * g_ptr43CCF0 = null; // 0043CCF0
ptr32 g_ptr43CCF4 = 0x00; // 0043CCF4
<anonymous> * g_ptr43CCF8 = null; // 0043CCF8
ptr32 g_ptr43CCFC = 0x00; // 0043CCFC
ptr32 g_ptr43CD00 = 0x00; // 0043CD00
ptr32 g_ptr43CD04 = 0x00; // 0043CD04
<anonymous> * g_ptr43CD08 = null; // 0043CD08
ptr32 g_ptr43CD0C = 0x00; // 0043CD0C
<anonymous> * g_ptr43CD10 = null; // 0043CD10
ptr32 g_ptr43CD14 = 0x00; // 0043CD14
ptr32 g_ptr43CD18 = 0x00; // 0043CD18
ptr32 g_ptr43CD1C = 0x00; // 0043CD1C
<anonymous> * g_ptr43CD20 = null; // 0043CD20
ptr32 g_ptr43CD24 = 0x00; // 0043CD24
ptr32 g_ptr43CD28 = 0x00; // 0043CD28
ptr32 g_ptr43CD2C = 0x00; // 0043CD2C
ptr32 g_ptr43CD30 = 0x00; // 0043CD30
ptr32 g_ptr43CD44 = 0x00; // 0043CD44
ptr32 g_ptr43CD48 = 0x00; // 0043CD48
ptr32 g_ptr43CD4C = 0x00; // 0043CD4C
ptr32 g_ptr43CD50 = 0x00; // 0043CD50
ptr32 g_ptr43CD54 = 0x00; // 0043CD54
ptr32 g_ptr43CD58 = 0x00; // 0043CD58
ptr32 g_ptr43CD5C = 0x00; // 0043CD5C
struct Eq_5853 * g_ptr43CD60 = null; // 0043CD60
<anonymous> * g_ptr43CD64 = null; // 0043CD64
word32 g_a43CD68[] = // 0043CD68
	{
	};
Eq_5853 g_t43CD88 = // 0043CD88
	{
		0x00,
		0x00,
	};
byte g_b43CDA8 = 0x00; // 0043CDA8
Eq_15739 g_a43CDB0[] = // 0043CDB0
	{
	};
struct Eq_5788 ** g_ptr43CEB0 = null; // 0043CEB0
word32 g_dw43CEB4 = 0x00; // 0043CEB4
Eq_15731 g_a43CEB8[] = // 0043CEB8
	{
	};
byte g_a43CFB8[257] = // 0043CFB8
	{
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
	};
byte g_a43D0B8[257] = // 0043D0B8
	{
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
	};
int32 g_dw43D1B8 = 0; // 0043D1B8
struct Eq_5798 * g_ptr43D1BC = null; // 0043D1BC
word32 g_dw43D1C0 = 0x00; // 0043D1C0
Eq_3547 g_t43D1C4 = // 0043D1C4
	{
		0
	};
int32 g_a43D1C8[257] = // 0043D1C8
	{
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
	};
word32 g_dw43D5C8 = 0x00; // 0043D5C8
word32 g_a43D8F0[201] = // 0043D8F0
	{
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
	};
word16 g_a43DC0E[] = // 0043DC0E
	{
	};
word32 g_a43E0C0[201] = // 0043E0C0
	{
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
	};
<anonymous> * g_a43E3E0[201] = // 0043E3E0
	{
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
	};
word32 g_a43E700[201] = // 0043E700
	{
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
	};
word16 g_w43EA20 = 0x00; // 0043EA20
ptr32 g_ptr43F7C8 = 0x00; // 0043F7C8
word32 g_dw43F7CC = 0x00; // 0043F7CC
word32 g_dw43F7D4 = 0x00; // 0043F7D4
word32 g_dw43F7D8 = 0x00; // 0043F7D8
word32 g_dw43F7DC = 0x00; // 0043F7DC
word32 g_dw43F7E0 = 0x00; // 0043F7E0
word32 g_dw43F7E4 = 0x00; // 0043F7E4
byte g_b43F7E8 = 0x00; // 0043F7E8
struct Eq_6604 * g_ptr43F7E9 = null; // 0043F7E9
word32 g_a440844[] = // 00440844
	{
	};
ptr32 g_ptr444870 = 0x00; // 00444870
word32 g_dw444874 = 0x00; // 00444874
word32 g_dw444878 = 0x00; // 00444878
word32 g_dw44487C = 0x00; // 0044487C
word32 g_dw444880 = 0x00; // 00444880
word32 g_dw444884 = 0x00; // 00444884
word32 g_dw444888 = 0x00; // 00444888
word32 g_dw4448B0 = 0x00; // 004448B0
word32 g_dw4448B4 = 0x00; // 004448B4
word32 g_dw4448B8 = 0x00; // 004448B8
word32 g_dw4448BC = 0x00; // 004448BC
word32 g_dw4448C0 = 0x00; // 004448C0
word32 g_dw4448C4 = 0x00; // 004448C4
word32 g_dw4448C8 = 0x00; // 004448C8
word32 g_dw4448CC = 0x00; // 004448CC
word32 g_dw4448D0 = 0x00; // 004448D0
word32 g_dw4448D4 = 0x00; // 004448D4
word32 g_dw4448D8 = 0x00; // 004448D8
word32 g_dw4448E8 = 0x00; // 004448E8
word32 g_dw4448EC = 0x00; // 004448EC
word32 g_dw4448F0 = 0x00; // 004448F0
word32 g_dw4448F4 = 0x00; // 004448F4
word32 g_dw4448F8 = 0x00; // 004448F8
word32 g_dw4448FC = 0x00; // 004448FC
Eq_6573 g_t444908 = // 00444908
	{
		0x00,
		0x00,
		0x00,
		null,
	};
word32 g_dw444970 = 0x00; // 00444970
word32 g_dw444974 = 0x00; // 00444974
int32 g_dw444978 = 0; // 00444978
<unknown> * (* g_ptr44497C)[] = null; // 0044497C
word32 g_dw4449E8 = 0x00; // 004449E8
word32 g_dw4449EC = 0x00; // 004449EC
int32 g_dw4449F0 = 0; // 004449F0
<unknown> * (* g_ptr4449F4)[] = null; // 004449F4
word32 g_dw444B18 = 0x00; // 00444B18
word32 g_dw444B1C = 0x00; // 00444B1C
int32 g_dw444B20 = 0; // 00444B20
<unknown> * (* g_ptr444B24)[] = null; // 00444B24
word32 g_dw444B28 = 0x00; // 00444B28
word32 g_dw444B80 = 0x00; // 00444B80
word32 g_dw444B84 = 0x00; // 00444B84
int32 g_dw444B88 = 0; // 00444B88
<unknown> * (* g_ptr444B8C)[] = null; // 00444B8C
word32 g_a444C40[] = // 00444C40
	{
	};
word32 g_dw445048 = 0x00; // 00445048
word32 g_dw44504C = 0x00; // 0044504C
int32 g_dw445050 = 0; // 00445050
<unknown> * (* g_ptr445054)[] = null; // 00445054
Eq_6573 g_t445058 = // 00445058
	{
		0x00,
		0x00,
		0x00,
		null,
	};
word32 g_dw445068 = 0x00; // 00445068
word32 g_dw44506C = 0x00; // 0044506C
int32 g_dw445070 = 0; // 00445070
<unknown> * (* g_ptr445074)[] = null; // 00445074
word32 g_dw445088 = 0x00; // 00445088
word32 g_dw44508C = 0x00; // 0044508C
int32 g_dw445090 = 0; // 00445090
<unknown> * (* g_ptr445094)[] = null; // 00445094
word32 g_dw4450A0 = 0x00; // 004450A0
word32 g_dw4450A4 = 0x00; // 004450A4
int32 g_dw4450A8 = 0; // 004450A8
<unknown> * (* g_ptr4450AC)[] = null; // 004450AC
struct Eq_6858 * g_a4450B8[2001] = // 004450B8
	{
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
	};
word32 g_dw446FF8 = 0x00; // 00446FF8
Eq_15791 g_a447038[] = // 00447038
	{
	};
// tmp_9wvpzh__data_0001.c
// Generated by decompiling tmp_9wvpzh_
// using Reko decompiler version 0.11.6.0.

#include "tmp_9wvpzh_.h"

<anonymous> * g_a42C1C4[] = // 0042C1C4
	{
	};
<anonymous> * g_ptr42C21C = &g_t40CE20; // 0042C21C
<anonymous> * g_ptr43AA4C = &g_t410E20; // 0043AA4C
word32 g_dw43AA58 = 0x00; // 0043AA58
Eq_57 g_t43AA5C = // 0043AA5C
	{
		0x00
	};
word32 g_dw43AA60 = 0x00; // 0043AA60
Eq_57 g_t43AA64 = // 0043AA64
	{
		0x00
	};
uint8 g_b43AA65 = 0x00; // 0043AA65
ui32 g_dw43AA68 = 0x00; // 0043AA68
ui32 g_dw43AA6C = 0x00; // 0043AA6C
uint32 g_dw43AA70 = 0x00; // 0043AA70
word32 g_dw43AA74 = 0x00; // 0043AA74
Eq_57 g_t43AA78 = // 0043AA78
	{
		0x00
	};
Eq_57 g_t43AA80 = // 0043AA80
	{
		0x00
	};
ptr32 g_ptr43AA90 = 0x00; // 0043AA90
byte g_b43AA98 = 0x00; // 0043AA98
word32 g_dw43AA9C = 0x00; // 0043AA9C
word32 g_dw43AAA0 = 0x00; // 0043AAA0
Eq_57 g_t43AAA4 = // 0043AAA4
	{
		0x00
	};
<anonymous> * g_ptr43AAAC = &g_t410EE0; // 0043AAAC
word32 g_dw43AAB0 = 0x00; // 0043AAB0
word32 g_dw43AAB4 = 0x02; // 0043AAB4
<anonymous> * g_ptr43AAC0 = &g_t415890; // 0043AAC0
<anonymous> * g_ptr43AAC4 = &g_t415890; // 0043AAC4
<anonymous> * g_ptr43AACC = &g_t415890; // 0043AACC
word32 g_dw43AB88 = 0x00; // 0043AB88
Eq_8932 g_a43AB90[] = // 0043AB90
	{
	};
byte g_a43AB91[] = // 0043AB91
	{
	};
byte g_a43AB92[255] = // 0043AB92
	{
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
	};
Eq_2617 g_t43AC94 = // 0043AC94
	{
		0x00
	};
uip32 g_dw43AC98 = 0x00; // 0043AC98
uip32 g_dw43ACA0 = 0x00; // 0043ACA0
uip32 g_dw43ACA4 = 0x00; // 0043ACA4
uip32 g_dw43ACA8 = 0x00; // 0043ACA8
word32 g_dw43ACAC = 0x00; // 0043ACAC
byte g_a43ACB0[5] = // 0043ACB0
	{
		0x01,
		0x02,
		0x04,
		0x08,
		0x00,
	};
Eq_15815 g_a43ACB8[6] = // 0043ACB8
	{
		
		{
			
			{
				0xA4
			},
		},
		
		{
			
			{
				0xA8
			},
		},
		
		{
			
			{
				181
			},
		},
		
		{
			
			{
				~0x49
			},
		},
		
		{
			
			{
				0x51
			},
		},
		
		{
			
			{
				~0x00
			},
		},
	};
Eq_8896 g_t43ADA8 = // 0043ADA8
	{
		~0x00,
	};
Eq_15843 g_a43ADB8[19] = // 0043ADB8
	{
		
		{
			0x02,
			&g_str41B594,
		},
		
		{
			0x08,
			&g_str41B568,
		},
		
		{
			0x09,
			&g_str41B53C,
		},
		
		{
			0x0A,
			&g_str41B518,
		},
		
		{
			0x10,
			&g_str41B4EC,
		},
		
		{
			0x11,
			&g_str41B4BC,
		},
		
		{
			0x12,
			&g_str41B498,
		},
		
		{
			0x13,
			&g_str41B46C,
		},
		
		{
			0x18,
			&g_str41B434,
		},
		
		{
			0x19,
			&g_str41B40C,
		},
		
		{
			0x1A,
			&g_str41B3D4,
		},
		
		{
			0x1B,
			&g_str41B39C,
		},
		
		{
			0x1C,
			&g_str41B374,
		},
		
		{
			0x78,
			&g_str41B364,
		},
		
		{
			121,
			&g_str41B354,
		},
		
		{
			122,
			&g_str41B344,
		},
		
		{
			252,
			&g_str41B340,
		},
		
		{
			0xFF,
			&g_str41B330,
		},
		
		{
			0x00,
			null,
		},
	};
<anonymous> * g_ptr43AE48 = null; // 0043AE48
word32 g_dw43AE4C = 0x00; // 0043AE4C
ptr32 g_ptr43AE50 = 4435536; // 0043AE50
Eq_57 g_t43AE54 = // 0043AE54
	{
		0x50
	};
word32 g_dw43B660 = 0x00; // 0043B660
Eq_57 g_t43B664 = // 0043B664
	{
		0x50
	};
word32 g_dw43B668 = 0x00; // 0043B668
Eq_7478 g_t43B66C = 0x01E0; // 0043B66C
Eq_15911 g_a43B670[46] = // 0043B670
	{
		
		{
			
			{
				0x01
			},
			22,
		},
		
		{
			
			{
				0x02
			},
			0x02,
		},
		
		{
			
			{
				0x03
			},
			0x02,
		},
		
		{
			
			{
				0x04
			},
			0x18,
		},
		
		{
			
			{
				0x05
			},
			0x0D,
		},
		
		{
			
			{
				0x06
			},
			0x09,
		},
		
		{
			
			{
				0x07
			},
			0x0C,
		},
		
		{
			
			{
				0x08
			},
			0x0C,
		},
		
		{
			
			{
				0x09
			},
			0x0C,
		},
		
		{
			
			{
				0x0A
			},
			0x07,
		},
		
		{
			
			{
				11
			},
			0x08,
		},
		
		{
			
			{
				0x0C
			},
			22,
		},
		
		{
			
			{
				0x0D
			},
			22,
		},
		
		{
			
			{
				0x0F
			},
			0x02,
		},
		
		{
			
			{
				0x10
			},
			0x0D,
		},
		
		{
			
			{
				0x11
			},
			0x12,
		},
		
		{
			
			{
				0x12
			},
			0x02,
		},
		
		{
			
			{
				33
			},
			0x0D,
		},
		
		{
			
			{
				0x35
			},
			0x02,
		},
		
		{
			
			{
				0x41
			},
			0x0D,
		},
		
		{
			
			{
				0x43
			},
			0x02,
		},
		
		{
			
			{
				0x50
			},
			0x11,
		},
		
		{
			
			{
				0x52
			},
			0x0D,
		},
		
		{
			
			{
				0x53
			},
			0x0D,
		},
		
		{
			
			{
				0x57
			},
			22,
		},
		
		{
			
			{
				0x59
			},
			11,
		},
		
		{
			
			{
				0x6C
			},
			0x0D,
		},
		
		{
			
			{
				0x6D
			},
			0x20,
		},
		
		{
			
			{
				0x70
			},
			0x1C,
		},
		
		{
			
			{
				114
			},
			0x09,
		},
		
		{
			
			{
				0x06
			},
			22,
		},
		
		{
			
			{
				0x80
			},
			0x0A,
		},
		
		{
			
			{
				0x81
			},
			0x0A,
		},
		
		{
			
			{
				0x82
			},
			0x09,
		},
		
		{
			
			{
				131
			},
			22,
		},
		
		{
			
			{
				0x84
			},
			0x0D,
		},
		
		{
			
			{
				0x91
			},
			0x29,
		},
		
		{
			
			{
				~0x61
			},
			0x0D,
		},
		
		{
			
			{
				161
			},
			0x02,
		},
		
		{
			
			{
				0xA4
			},
			11,
		},
		
		{
			
			{
				~0x58
			},
			0x0D,
		},
		
		{
			
			{
				~0x48
			},
			0x11,
		},
		
		{
			
			{
				~0x31
			},
			0x02,
		},
		
		{
			
			{
				~0x28
			},
			11,
		},
		
		{
			
			{
				0x18
			},
			0x0C,
		},
		
		{
			
			{
				0x00
			},
			0x00,
		},
	};
Eq_12110 g_t43B7D8 = // 0043B7D8
	{
		0x00,
	};
<unknown> g_t43B7E0 = // 0043B7E0;
Eq_8066 g_t43B808 = // 0043B808
	{
		
		{
			0x00
		},
		0x00,
		
		{
			0x00
		},
		0x02,
		
		{
			0x01
		},
		0x00,
	};
Eq_8066 g_t43B828 = // 0043B828
	{
		
		{
			0x00
		},
		0x00,
		
		{
			0x00
		},
		0x02,
		
		{
			0x02
		},
		0x00,
	};
word32 g_dw43BA68 = 0x00; // 0043BA68
Eq_12267 g_t43BA6C = // 0043BA6C
	{
		0x41B6200041B630
	};
Eq_12267 g_t43BA70 = // 0043BA70
	{
		0xD2D09200041B620
	};
int32 g_dw43BB80 = 1; // 0043BB80
struct Eq_12319 * g_ptr43BB90 = &g_t43BB9A; // 0043BB90
uint16 g_a43BB9A[] = // 0043BB9A
	{
	};
word32 g_dw43BDD8 = 0x00; // 0043BDD8
Eq_2617 g_t43BDE8 = // 0043BDE8
	{
		0x00
	};
Eq_13900 g_t43BDEC = null; // 0043BDEC
Eq_13900 g_t43BDF0 = null; // 0043BDF0
Eq_13900 g_t43BDF4 = null; // 0043BDF4
ui32 g_dw43BE00 = 0x00; // 0043BE00
word32 g_dw43BFB0 = 0x00; // 0043BFB0
// tmp_9wvpzh__data_0000.c
// Generated by decompiling tmp_9wvpzh_
// using Reko decompiler version 0.11.6.0.

#include "tmp_9wvpzh_.h"

word32 g_dw41C000 = 0x00; // 0041C000
word32 g_dw41C004 = 0x00; // 0041C004
word32 g_dw41C008 = 0x00; // 0041C008
word32 g_dw41C010 = 0x00; // 0041C010
word32 g_dw41C014 = 0x00; // 0041C014
word32 g_dw41C01C = 0x00; // 0041C01C
word32 g_dw41C020 = 0x00; // 0041C020
word32 g_dw41C024 = 0x00; // 0041C024
word32 g_dw41C030 = 0x00; // 0041C030
CHAR g_t41C038 = 'd'; // 0041C038
CHAR g_t41C1FA = '\0'; // 0041C1FA
ui32 g_a41C200[] = // 0041C200
	{
	};
ui32 g_dw41C520 = 0x00; // 0041C520
byte g_a41C524[] = // 0041C524
	{
	};
int32 g_dw41C538 = 0; // 0041C538
int32 g_dw41C53C = 0; // 0041C53C
word32 g_dw41C540 = 0x00; // 0041C540
ui32 g_dw41C544 = 0x00; // 0041C544
int32 g_dw41C548 = 0; // 0041C548
Eq_2791 g_t41C550 = // 0041C550
	{
		0.0
	};
word32 g_dw41C554 = 0x00; // 0041C554
int32 g_dw41C558 = 640; // 0041C558
int32 g_dw41C55C = 480; // 0041C55C
word32 g_dw41C560 = 0x00; // 0041C560
CHAR g_t41C568 = 'd'; // 0041C568
CHAR g_t41C6F8 = 'd'; // 0041C6F8
CHAR g_t41C708 = 'd'; // 0041C708
CHAR g_t41C718 = 'd'; // 0041C718
CHAR g_t41C728 = 'd'; // 0041C728
CHAR g_t41C738 = 'd'; // 0041C738
CHAR g_t41C748 = 'd'; // 0041C748
CHAR g_t41C758 = 'd'; // 0041C758
CHAR g_t41C768 = 'd'; // 0041C768
CHAR g_t41C778 = 'd'; // 0041C778
CHAR g_t41C788 = 'd'; // 0041C788
word32 g_dw41C7A8 = 0x00; // 0041C7A8
word32 g_dw41C7AC = 0x00; // 0041C7AC
int32 g_dw41C7B0 = 0; // 0041C7B0
CHAR g_t41C7B8 = 'I'; // 0041C7B8
word32 g_dw41C824 = 0x00; // 0041C824
word32 g_dw41C828 = 0x00; // 0041C828
word32 g_dw41C82C = 0x00; // 0041C82C
Eq_57 g_t41C830 = // 0041C830
	{
		0x00
	};
byte g_a41C83C[] = // 0041C83C
	{
	};
word32 g_dw41C844 = 0x00; // 0041C844
word32 g_dw41C848 = 0x00; // 0041C848
Eq_5539 g_t41C85C = // 0041C85C
	{
		114,
		0x62,
	};
Eq_5539 g_t41C860 = // 0041C860
	{
		114,
		0x00,
	};
int32 g_dw41C870 = 640; // 0041C870
int32 g_dw41C874 = 480; // 0041C874
word32 g_dw41C878 = 0x08; // 0041C878
word32 g_dw41C87C = 0x01; // 0041C87C
word32 g_dw41C890 = 0x00; // 0041C890
word32 g_dw41C894 = 0x00; // 0041C894
word32 g_dw41C90C = 0x00; // 0041C90C
word32 g_dw41C910 = 0x00; // 0041C910
Eq_12259 g_t41C914 = // 0041C914
	{
		0x43
	};
Eq_12259 g_t41C934 = // 0041C934
	{
		0x0A
	};
<unknown> g_t41CA4C = // 0041CA4C;
word32 g_dw41CA54 = 0x00; // 0041CA54
word32 g_dw41CA58 = 0x00; // 0041CA58
struct Eq_3108 * g_ptr41CD98 = null; // 0041CD98
ui32 ** g_ptr41CD9C = null; // 0041CD9C
ui32 * g_ptr41CDA0 = null; // 0041CDA0
word32 g_dw41CDA4 = 0x00; // 0041CDA4
word32 g_dw41CDAC = 0x00; // 0041CDAC
ui32 g_dw41CDB0 = 0x00; // 0041CDB0
ui32 g_dw41CDB4 = 0x00; // 0041CDB4
word32 g_dw41CDB8 = 0x00; // 0041CDB8
word32 g_dw41CDBC = 0x00; // 0041CDBC
ui32 g_dw41CDC0 = 0x00; // 0041CDC0
ui32 g_dw41CDC4 = 0x00; // 0041CDC4
word32 g_dw41CDC8 = 0x00; // 0041CDC8
word32 g_dw41CDCC = 0x00; // 0041CDCC
ui32 g_dw41CDD0 = 0x00; // 0041CDD0
ui32 g_dw41CDD4 = 0x00; // 0041CDD4
ui32 g_dw41CDD8 = 0x00; // 0041CDD8
ui32 g_dw41CDDC = 0x00; // 0041CDDC
ui32 g_dw41CDE0 = 0x00; // 0041CDE0
ui32 g_dw41CDE4 = 0x00; // 0041CDE4
ui32 g_dw41CDE8 = 0x00; // 0041CDE8
ui32 g_dw41CDEC = 0x00; // 0041CDEC
int32 g_dw41CDF0 = 0; // 0041CDF0
int32 g_dw41CDF4 = 0; // 0041CDF4
word32 g_a41CDF8[] = // 0041CDF8
	{
	};
uint32 g_a41D75C[] = // 0041D75C
	{
	};
// tmp_9wvpzh__rdata.c
// Generated by decompiling tmp_9wvpzh_
// using Reko decompiler version 0.11.6.0.

#include "tmp_9wvpzh_.h"

real64 g_r41B008 = 0.02; // 0041B008
Eq_2791 g_t41B018 = // 0041B018
	{
		0.0
	};
real64 g_r41B020 = 0.1; // 0041B020
real64 g_r41B028 = 100.0; // 0041B028
real64 g_r41B030 = 120.0; // 0041B030
real64 g_r41B038 = 255.0; // 0041B038
word32 g_dw41B1B0 = 1864182625; // 0041B1B0
word32 g_dw41B1B4 = 298833312; // 0041B1B4
word32 g_dw41B1B8 = 0x4544C7BF; // 0041B1B8
word32 g_dw41B1BC = 0x5453; // 0041B1BC
<unknown> g_t41B1C0 = // 0041B1C0;
real64 g_r41B230 = 0.000244140625; // 0041B230
real64 g_r41B238 = 6.283192; // 0041B238
real64 g_r41B240 = 2147418112.0; // 0041B240
char g_str41B330[] = "runtime error "; // 0041B330
char g_str41B340[] = "\r\n"; // 0041B340
char g_str41B344[] = "TLOSS error\r\n"; // 0041B344
char g_str41B354[] = "SING error\r\n"; // 0041B354
char g_str41B364[] = "DOMAIN error\r\n"; // 0041B364
char g_str41B374[] = "R6028\r\n- unable to initialize heap\r\n"; // 0041B374
char g_str41B39C[] = "R6027\r\n- not enough space for lowio initialization\r\n"; // 0041B39C
char g_str41B3D4[] = "R6026\r\n- not enough space for stdio initialization\r\n"; // 0041B3D4
char g_str41B40C[] = "R6025\r\n- pure virtual function call\r\n"; // 0041B40C
char g_str41B434[] = "R6024\r\n- not enough space for _onexit/atexit table\r\n"; // 0041B434
char g_str41B46C[] = "R6019\r\n- unable to open console device\r\n"; // 0041B46C
char g_str41B498[] = "R6018\r\n- unexpected heap error\r\n"; // 0041B498
char g_str41B4BC[] = "R6017\r\n- unexpected multithread lock error\r\n"; // 0041B4BC
char g_str41B4EC[] = "R6016\r\n- not enough space for thread data\r\n"; // 0041B4EC
char g_str41B518[] = "\r\nabnormal program termination\r\n"; // 0041B518
char g_str41B53C[] = "R6009\r\n- not enough space for environment\r\n"; // 0041B53C
char g_str41B568[] = "R6008\r\n- not enough space for arguments\r\n"; // 0041B568
char g_str41B594[] = "R6002\r\n- floating point not loaded\r\n"; // 0041B594
char g_str41B5E4[] = "\n\n"; // 0041B5E4
Eq_9598 g_t41B5E8 = // 0041B5E8;
byte g_b41B604 = 0x2E; // 0041B604
Eq_9589 g_t41B608 = // 0041B608;
uint8 g_a41B618[] = // 0041B618
	{
	};
// tmp_9wvpzh_.globals.c
// Generated by decompiling tmp_9wvpzh_
// using Reko decompiler version 0.11.6.0.

#include "tmp_9wvpzh_.h"

Eq_320 g_t0001;
Eq_5798 g_t0053;
Eq_5869 g_t0100;
Eq_3516 g_t0300;
Eq_6260 g_t0320;
