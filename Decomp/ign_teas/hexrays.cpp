/* This file was generated by the Hex-Rays decompiler version 9.2.0.250908.
   Copyright (c) 2007-2021 Hex-Rays <info@hex-rays.com>

   Detected compiler: Visual C++
*/

#include <windows.h>
#include <math.h>
#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

int __cdecl sub_401000(__int16 *a1, int a2);
int __cdecl __spoils<ecx> sub_401080(__int16 *a1, int a2);
int sub_4011A0();
int sub_4012A0();
int sub_4013A0();
int __cdecl sub_4013C0(_BYTE *a1, int a2, int a3, int a4);
int __cdecl sub_4019D0(int *a1, int a2, int *a3);
void __cdecl sub_401B60(_DWORD *a1);
int __cdecl sub_401BE0(int a1);
int __cdecl sub_401C00(int a1);
int __cdecl sub_401C20(int a1, int a2);
int __cdecl sub_401D20(int a1, int a2, int a3);
int __cdecl sub_401E30(int a1, int a2);
int sub_4023F0();
int sub_402410();
int sub_402520();
void *sub_402540();
int sub_4025D0();
int sub_4027D0();
int __cdecl sub_402840(double a1); // idb
int __fastcall sub_402A80(int a1, int a2, int a3, int a4);
int __cdecl sub_402AA0(int a1);
int __cdecl sub_402E10(int a1);
void sub_402E30();
void __cdecl sub_402F00(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9);
void __cdecl sub_402F70(int a1);
void __cdecl sub_4030C0(int a1, double a2);
int __stdcall WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nShowCmd);
int sub_4032A0();
LRESULT __stdcall sub_403340(HWND hWnd, UINT Msg, int wParam, LPARAM lParam);
int sub_4034D0();
int sub_403510(void); // weak
BOOL sub_403540();
int sub_403560();
int sub_403570();
int __cdecl sub_4035A0(_BYTE *a1);
void *__cdecl sub_403630(int a1, size_t Size);
void *__cdecl sub_4037D0(int a1, size_t Size);
int __cdecl sub_403820(int a1);
int sub_4038E0();
int *sub_403910();
int sub_403BF0();
int sub_403CB0();
int sub_403D20();
int __cdecl sub_404320(char *FileName, void *Buffer, size_t ElementCount, int a4); // idb
void *__cdecl sub_4043A0(char *FileName);
int __cdecl sub_404490(FILE *Stream); // idb
int __cdecl sub_4044D0(char *FileName); // idb
int __cdecl sub_404500(char *FileName); // idb
int sub_404530();
int __cdecl sub_4045E0(int a1);
int __cdecl sub_404600(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9);
int sub_404640();
int sub_404660(void); // weak
int sub_404670();
// void __cdecl operator delete(void *); idb
// void __cdecl operator delete(void *); idb
int __cdecl sub_4046B0(int a1, int a2, int a3, int a4, int a5);
int sub_4046E0();
int __cdecl sub_4046F0(int a1, int a2);
int sub_404890();
int sub_404910();
int __cdecl sub_404A90(unsigned __int8 a1);
int __cdecl sub_404AA0(int a1, int a2);
int __cdecl sub_404AC0(int a1, int a2);
int sub_404B00();
int sub_404B30();
int sub_404B40();
int sub_404B90();
int sub_404C30();
// int _cfltcvt_init(void); weak
int sub_404D20();
int sub_404D30();
int sub_404D40();
int sub_404D50();
int __cdecl sub_404D60(int a1, int a2, int a3, int a4, int a5);
int __cdecl sub_404E20(int a1, int a2, int a3, int a4);
int __cdecl sub_404F10(_DWORD *a1);
int __cdecl sub_404FB0(int a1, int a2, float *a3);
int __cdecl sub_405050(int *a1);
int __cdecl nullsub_1(_DWORD); // weak
int sub_4050C0();
int sub_405170();
// int _cfltcvt_init_0(void); weak
int sub_4052C0();
int sub_4052D0();
int sub_405900();
int sub_405BF0();
int sub_405CE0();
BOOL __cdecl sub_405CF0(_DWORD *a1, int a2, int a3, int a4, int a5, _DWORD *a6, int a7, int a8);
int __cdecl sub_405D60(int a1, int a2, int a3, int a4, int a5, int a6, _DWORD *a7, int a8, int a9);
int __cdecl sub_405EF0(_DWORD *a1);
BOOL __cdecl sub_405FD0(int a1);
int sub_406040();
int __cdecl sub_406050(int a1, int a2);
int __cdecl sub_4061A0(int a1);
BOOL __cdecl sub_4061F0(char *a1);
BOOL sub_406250();
_DWORD *sub_406310();
int sub_406460();
void *__cdecl sub_406470(size_t Size);
void __cdecl sub_406490(int a1);
int sub_406520();
void __cdecl sub_406570(void *Block);
void sub_406590();
void __cdecl sub_4065A0(_BYTE *a1, _DWORD *a2);
__int64 sub_4065F0();
void sub_406630();
int sub_4066D0();
_DWORD *__cdecl sub_406710(_DWORD *a1, int a2);
_DWORD *__cdecl sub_4067A0(_DWORD *a1, int a2);
int __cdecl sub_4067E0(_DWORD *a1, int a2);
int __cdecl sub_406860(const void *a1, int a2);
void __cdecl sub_4069B0(int a1);
int sub_4069D0();
void __cdecl sub_406A10(int *a1);
int __cdecl sub_406B70(int a1, int a2, int a3);
_DWORD *__cdecl sub_406BA0(int a1, int **a2);
void *sub_406CC0();
int __cdecl sub_406D20(int a1, unsigned int a2);
int __cdecl sub_406D50(int a1, int *a2);
void __cdecl sub_406D90(_DWORD *a1);
void __cdecl sub_406F40(int a1);
int sub_406F60();
int __cdecl sub_406F70(_DWORD *a1);
int sub_406FC0();
int *__cdecl sub_407000(_DWORD *a1, int *a2);
int __cdecl sub_4070F0(int a1);
int __cdecl sub_407110(_DWORD *a1, int a2);
unsigned int __cdecl sub_407130(int a1, int a2, int a3, int a4);
char __cdecl sub_407150(int a1, int a2, int a3, char a4, _BYTE *a5);
char __cdecl sub_407170(int a1, int a2, int a3, _BYTE *a4);
void sub_407190();
int __cdecl sub_4071F0(_DWORD *a1);
int __cdecl sub_407910(int a1);
int __cdecl sub_407F40(int a1, int a2, int a3, int a4);
unsigned int __cdecl sub_407F80(int a1, int a2, int a3);
char __cdecl sub_407FA0(int a1, int a2, int a3, char a4, _BYTE *a5);
// char __usercall sub_407FC0@<al>(unsigned int a1@<eax>, int a2, int a3, int a4, _BYTE *a5);
void sub_407FE0();
int __cdecl sub_408040(_DWORD *a1);
int sub_408750();
int __cdecl sub_408D70(int a1, int a2, int a3, int a4);
// void __usercall __spoils<ecx> sub_408DC9(_DWORD *a1@<esi>);
// unsigned int __usercall sub_408FA4@<eax>(int a1@<eax>, int a2@<edx>, int a3@<ecx>, int a4@<ebx>);
// char __usercall sub_408FCA@<al>(_BYTE *a1@<eax>, int a2@<ecx>, char a3@<bl>, int a4@<edi>, int a5@<esi>);
// char __usercall sub_40901F@<al>(int a1@<ecx>, _BYTE *a2@<ebx>, int a3@<edi>, int a4@<esi>);
// unsigned int __usercall sub_4090B8@<eax>(int a1@<eax>, int a2@<ecx>, int a3@<ebx>);
// char __usercall sub_4090D8@<al>(_BYTE *a1@<eax>, int a2@<ecx>, char a3@<bl>, int a4@<edi>, int a5@<esi>);
// char __usercall sub_40914E@<al>(unsigned int a1@<eax>, int a2@<ecx>, _BYTE *a3@<ebx>, int a4@<edi>, int a5@<esi>);
// int __usercall sub_4091F8@<eax>(_DWORD *a1@<esi>);
// HRESULT __stdcall DirectDrawCreate(GUID *lpGUID, LPDIRECTDRAW *lplpDD, IUnknown *pUnkOuter);
// HRESULT __stdcall DirectSoundCreate(LPCGUID pcGuidDevice, LPDIRECTSOUND *ppDS, LPUNKNOWN pUnkOuter);
// int __stdcall DirectInputCreateA(_DWORD, _DWORD, _DWORD, _DWORD); weak
// int __usercall sub_40A4A0@<eax>(int a1@<eax>, int a2@<edx>, int a3@<ecx>, int a4@<ebx>);
// int __usercall sub_40A519@<eax>(int a1@<esi>);
// int __usercall sub_40F9DC@<eax>(int a1@<esi>);
int sub_40FBA0();
// int __usercall sub_40FC98@<eax>(_DWORD *a1@<edi>, _DWORD *a2@<esi>);
// int __usercall sub_40FCFE@<eax>(_DWORD *a1@<edi>, _DWORD *a2@<esi>);
// int __usercall sub_40FD64@<eax>(int result@<eax>);
// void __usercall sub_41035C(_BYTE *a1@<edx>, __int16 a2@<cx>, _BYTE *a3@<esi>);
// int __usercall sub_410A20@<eax>(_DWORD *a1@<esi>);
// _DWORD *__usercall sub_410CBE@<eax>(_DWORD *result@<eax>, int a2@<edx>, int a3@<edi>, int a4@<esi>);
// _DWORD *__usercall sub_410D5C@<eax>(_DWORD *result@<eax>, int a2@<edx>, int a3@<edi>, int a4@<esi>);
int sub_410E20();
// int _cfltcvt_init_1(void); weak
// void __cdecl __noreturn exit(int Code);
// void *__cdecl malloc(size_t Size);
// void __cdecl free(void *Block);
// int __cdecl fclose(FILE *Stream);
// size_t __cdecl fread(void *Buffer, size_t ElementSize, size_t ElementCount, FILE *Stream);
// int __cdecl fsetpos(FILE *Stream, const fpos_t *Position);
// FILE *__cdecl fopen(const char *FileName, const char *Mode);
// int __cdecl fseek(FILE *Stream, int Offset, int Origin);
// int __cdecl ftell(FILE *Stream);
// int printf(const char *const Format, ...);
// int _setdefaultprecision(void); weak
// int _ms_p5_mp_test_fdiv(void); weak
// _DWORD __cdecl _ld12cvt(_DWORD, _DWORD, _DWORD); weak
int __cdecl sub_415E90(int a1, int a2);
int __cdecl sub_415EB0(int a1, int a2);
int __cdecl sub_415ED0(int a1, int a2);
int __cdecl sub_415F10(int a1, int a2);
// _DWORD __cdecl __strgtold12(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
int sub_419EA0();
int sub_456000();
// int __usercall sub_456180@<eax>(int *a1@<ebx>, _DWORD *a2@<esi>);
// int __usercall sub_4561C0@<eax>(int *a1@<ebx>, _DWORD *a2@<esi>);
// int __usercall sub_456520@<eax>(int *a1@<ebx>, _DWORD *a2@<esi>);
// int __usercall sub_456640@<eax>(int *a1@<ebx>, _DWORD *a2@<esi>);
// int __usercall sub_456760@<eax>(int result@<eax>, int a2@<edx>, __int16 a3@<cx>, int *a4@<ebx>, int a5@<esi>);
// int __usercall sub_4567A0@<eax>(int result@<eax>, int a2@<edx>, int a3@<ecx>, int *a4@<ebx>, int a5@<esi>);
// int __usercall sub_4567F0@<eax>(_DWORD *a1@<esi>);
// int __usercall sub_456A09@<eax>(_DWORD *a1@<esi>);
// int __usercall sub_456A50@<eax>(_DWORD *a1@<esi>);
int sub_456B20();
// int __usercall sub_456C70@<eax>(int *a1@<ebx>, _DWORD *a2@<esi>);
// int __usercall sub_456CB0@<eax>(int *a1@<ebx>, _DWORD *a2@<esi>);
// int __usercall sub_456CE0@<eax>(int *a1@<ebx>, _DWORD *a2@<esi>);
// int __usercall sub_456E00@<eax>(int *a1@<ebx>, _DWORD *a2@<esi>);
// int __usercall sub_456EF0@<eax>(int a1@<edx>, int a2@<ecx>, _DWORD *a3@<ebx>);
// int __usercall sub_456F20@<eax>(int a1@<edx>, int a2@<ecx>, int *a3@<ebx>);
// int __usercall sub_456F60@<eax>(int result@<eax>, unsigned int a2@<edx>, int a3@<ecx>, _DWORD *a4@<ebx>, int a5@<esi>);
// int __usercall sub_456FB0@<eax>(_DWORD *a1@<esi>);
// int __usercall sub_4571CB@<eax>(_DWORD *a1@<esi>);
// int __usercall sub_457210@<eax>(_DWORD *a1@<esi>);
// int __usercall sub_4572E0@<eax>(_DWORD *a1@<esi>);
// int __usercall sub_45741A@<eax>(int a1@<esi>);
// int __usercall sub_457440@<eax>(_DWORD *a1@<esi>);

//-------------------------------------------------------------------------
// Data declarations

int dword_40A480[5] = { 24, 16, 2, 256, 256 }; // weak
_UNKNOWN loc_40B390; // weak
_UNKNOWN unk_41B1B4; // weak
_UNKNOWN unk_41B1B8; // weak
_UNKNOWN unk_41B1BC; // weak
_UNKNOWN unk_41B1C0; // weak
int dword_41C030 = 0; // weak
char aDataIgn1Dps[] = "data\\IGN1.DPS"; // idb
char byte_41C1FA[6] = { '\0', '\0', '\0', '\0', '\0', '\0' }; // weak
int dword_41C200[200] =
{
  0,
  1,
  7,
  1,
  7,
  1,
  7,
  1,
  4,
  2,
  8,
  2,
  3,
  2,
  8,
  2,
  4,
  5,
  5,
  5,
  5,
  6,
  6,
  6,
  6,
  5,
  5,
  5,
  5,
  6,
  6,
  6,
  6,
  -1,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0
}; // weak
int dword_41C520 = 0; // weak
char aScriptPlayer[14] = "Script Player"; // weak
int dword_41C538 = 0; // weak
int dword_41C53C = 0; // weak
int dword_41C540 = 0; // weak
int dword_41C544 = 0; // weak
int dword_41C548 = 0; // weak
double dbl_41C550 = 0.0; // idb
int dword_41C558 = 640; // weak
int dword_41C55C = 480; // weak
int dword_41C560 = 0; // weak
char aDataIgn1Tex[] = "data\\IGN1.TEX"; // idb
char aDataIgnShd[] = "data\\ign.shd"; // idb
char FileName[] = "data\\ign.pan"; // idb
char aDataIgn3Pic[] = "data\\ign3.pic"; // idb
char aDataIgn4Pic[] = "data\\ign4.pic"; // idb
char aDataIgn2Pic[] = "data\\ign2.pic"; // idb
char aDataIgn1Pic[] = "data\\ign1.pic"; // idb
char aDataIgn0Pic[] = "data\\ign0.pic"; // idb
char aDataIgnCol[] = "data\\ign.col"; // idb
char aDataIgnPsq[] = "data\\ign.psq"; // idb
char aDataIgnPfm[] = "data\\ign.pfm"; // idb
int dword_41C79C = 1; // weak
int dword_41C7A0 = 0; // weak
int dword_41C7A8 = 0; // weak
int dword_41C7AC = 0; // weak
int dword_41C7B0 = 0; // weak
CHAR ClassName[] = "Ignition"; // idb
CHAR WindowName[] = "Ignition"; // idb
int dword_41C824 = 0; // weak
int dword_41C828 = 0; // weak
int dword_41C82C = 0; // weak
int dword_41C830 = 0; // weak
char aDefault[8] = "DEFAULT"; // weak
int dword_41C844 = 0; // weak
int dword_41C848 = 0; // weak
char Mode[3] = "rb"; // idb
char aR[2] = "r"; // idb
int dword_41C870 = 640; // weak
int dword_41C874 = 480; // weak
int dword_41C878 = 8; // weak
int dword_41C87C = 1; // weak
UINT uTimerID = 0u; // idb
int dword_41C894 = 0; // weak
char byte_41C898[96] =
{
  '\xFF',
  '\xFF',
  '1',
  '2',
  '3',
  '4',
  '5',
  '6',
  '7',
  '8',
  '9',
  '0',
  '-',
  '=',
  '\xFF',
  '\xFF',
  'Q',
  'W',
  'E',
  'R',
  'T',
  'Y',
  'U',
  'I',
  'O',
  'P',
  '{',
  '}',
  '\xFF',
  '\xFF',
  'A',
  'S',
  'D',
  'F',
  'G',
  'H',
  'J',
  'K',
  'L',
  ';',
  '\'',
  '\xFF',
  '\xFF',
  '\\',
  'Z',
  'X',
  'C',
  'V',
  'B',
  'N',
  'M',
  ',',
  '.',
  '/',
  '\xFF',
  '*',
  '\xFF',
  ' ',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '\xFF',
  '7',
  '8',
  '9',
  '-',
  '4',
  '5',
  '6',
  '+',
  '1',
  '2',
  '3',
  '0',
  '.',
  '\0',
  '\0',
  '\0',
  '\0',
  '1',
  '.',
  '0',
  '.',
  '0',
  '\0',
  '\0',
  '\0'
}; // weak
char aCompilation091[19] = "Compilation 0.91.0"; // weak
int dword_41C90C = 0; // weak
int dword_41C910 = 0; // weak
int dword_41C958 = 0; // weak
int dword_41C964 = 4; // weak
int dword_41C968 = 0; // weak
int dword_41C96C = 0; // weak
int dword_41C970 = 0; // weak
_DWORD dword_41C978 = 18; // weak
int dword_41C97C = 0; // weak
int dword_41C980 = 0; // weak
int dword_41C984 = 0; // weak
int dword_41C988 = 0; // weak
int dword_41C98C = 0; // weak
int dword_41C990 = 0; // weak
int dword_41C994 = 0; // weak
int dword_41C998 = 0; // weak
int dword_41C99C = 0; // weak
int dword_41C9A0 = 0; // weak
int dword_41C9A4 = 0; // weak
int dword_41C9A8 = 0; // weak
int dword_41C9AC = 0; // weak
int dword_41C9B8 = 0; // weak
int dword_41C9BC = 0; // weak
int dword_41C9C0 = 0; // weak
int dword_41C9C4 = 0; // weak
int dword_41C9C8 = 0; // weak
int dword_41C9CC = 0; // weak
int dword_41C9D0 = 0; // weak
int dword_41C9D4 = 0; // weak
_DWORD dword_41C9D8 = 4; // weak
int dword_41C9DC = 0; // weak
int dword_41C9E4 = 0; // weak
int dword_41C9E8 = 0; // weak
int dword_41C9EC = 8; // weak
CHAR aBackbufferCoul[] = "Backbuffer couldn't be obtained"; // idb
CHAR Text[] = "The maximum amount of backbuffers is exceeded"; // idb
char aDefault_0[8] = "default"; // weak
int dword_41CA54 = 0; // weak
int dword_41CA58 = 0; // weak
int dword_41CA5C = 0; // weak
int dword_41CA60 = 0; // weak
int dword_41CA64 = 0; // weak
_DWORD dword_41CA68 = 0; // weak
int dword_41CA6C = 0; // weak
int dword_41CA70 = 0; // weak
int dword_41CA74 = 0; // weak
int dword_41CA78 = 0; // weak
char byte_41CA98 = '\0'; // weak
int dword_41CA9C = 0; // weak
int dword_41CAA0 = 0; // weak
int dword_41CAA4 = 0; // weak
char byte_41CAA8 = '\0'; // weak
int dword_41CAAC = 0; // weak
int dword_41CAB0 = 0; // weak
int dword_41CAB4 = 0; // weak
int dword_41CAB8 = 0; // weak
int dword_41CABC = 0; // weak
int dword_41CAC0 = 0; // weak
int dword_41CAC4 = 0; // weak
int dword_41CAC8 = 0; // weak
int dword_41CACC = 0; // weak
int dword_41CAD0 = 0; // weak
int dword_41CAD4 = 0; // weak
int dword_41CAD8 = 0; // weak
int dword_41CADC = 0; // weak
int dword_41CAE0 = 0; // weak
int dword_41CAEC = 0; // weak
int dword_41CAF0 = 0; // weak
int dword_41CAF4 = 0; // weak
int dword_41CAF8 = 0; // weak
int dword_41CAFC = 0; // weak
int dword_41CB00 = 0; // weak
int dword_41CB04 = 0; // weak
int dword_41CB08 = 0; // weak
int dword_41CB0C = 0; // weak
int dword_41CB10 = 0; // weak
int dword_41CB14 = 0; // weak
int dword_41CB18 = 0; // weak
int dword_41CB1C = 0; // weak
int dword_41CB20 = 0; // weak
int dword_41CB24 = 0; // weak
int dword_41CB28 = 0; // weak
int dword_41CB2C = 0; // weak
int dword_41CB30 = 0; // weak
int dword_41CB34 = 0; // weak
int dword_41CB38 = 0; // weak
int dword_41CB3C = 0; // weak
int dword_41CB40 = 0; // weak
int dword_41CB44 = 0; // weak
int dword_41CB48 = 0; // weak
int dword_41CBDC = 0; // weak
int dword_41CBE0 = 0; // weak
int dword_41CBE4 = 0; // weak
int dword_41CBE8 = 0; // weak
int dword_41CBF0 = 0; // weak
int dword_41CBF4 = 0; // weak
int dword_41CBF8 = 0; // weak
int dword_41CC00 = 0; // weak
int dword_41CC04 = 0; // weak
int dword_41CC08 = 0; // weak
int dword_41CC0C = 0; // weak
int dword_41CC10 = 0; // weak
int dword_41CC14 = 0; // weak
int dword_41CC1C = 0; // weak
int dword_41CC20 = 0; // weak
char byte_41CC34 = '\0'; // weak
int dword_41CC38 = 0; // weak
int dword_41CC3C = 0; // weak
char byte_41CC44 = '\0'; // weak
int dword_41CC48 = 0; // weak
int dword_41CC4C = 0; // weak
int dword_41CC50 = 0; // weak
int dword_41CC54 = 0; // weak
int dword_41CC58 = 0; // weak
int dword_41CC5C = 0; // weak
int dword_41CC60 = 0; // weak
int dword_41CC64 = 0; // weak
int dword_41CC68 = 0; // weak
int dword_41CC6C = 0; // weak
int dword_41CC70 = 0; // weak
int dword_41CC74 = 0; // weak
int dword_41CC78 = 0; // weak
int dword_41CC7C = 0; // weak
_DWORD dword_41CC80[70] =
{
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0
}; // weak
int dword_41CD98 = 0; // weak
int dword_41CD9C = 0; // weak
int dword_41CDA0 = 0; // weak
int dword_41CDA4 = 0; // weak
int dword_41CDAC = 0; // weak
int dword_41CDB0 = 0; // weak
int dword_41CDB4 = 0; // weak
int dword_41CDB8 = 0; // weak
int dword_41CDBC = 0; // weak
int dword_41CDC0 = 0; // weak
int dword_41CDC4 = 0; // weak
int dword_41CDC8 = 0; // weak
int dword_41CDCC = 0; // weak
int dword_41CDD0 = 0; // weak
int dword_41CDD4 = 0; // weak
int dword_41CDD8 = 0; // weak
int dword_41CDDC = 0; // weak
int dword_41CDE0 = 0; // weak
int dword_41CDE4 = 0; // weak
int dword_41CDE8 = 0; // weak
int dword_41CDEC = 0; // weak
int dword_41CDF0 = 0; // weak
int dword_41CDF4 = 0; // weak
int dword_41CDF8[601] =
{
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0
}; // weak
_UNKNOWN unk_41D75C; // weak
_UNKNOWN *off_42C21C = &loc_40CE20; // weak
int dword_42C240 = 0; // weak
int dword_42C244 = 0; // weak
int dword_42C248 = 0; // weak
int dword_42C24C = 0; // weak
int dword_42C250 = 0; // weak
int dword_42C254 = 0; // weak
int dword_42C258 = 0; // weak
__int16 word_430134 = 0; // weak
__int16 word_430136 = 0; // weak
__int16 word_430138 = 0; // weak
__int16 word_43013A = 0; // weak
int dword_43013C = 0; // weak
int dword_430140[6] = { 0, 0, 0, 0, 0, 0 }; // weak
int dword_430158 = 0; // weak
int dword_43015C = 0; // weak
int dword_430160 = 0; // weak
int dword_430164 = 0; // weak
int dword_430168 = 0; // weak
__int16 word_43016C = 0; // weak
int dword_43016E = 0; // weak
__int16 word_430172 = 0; // weak
int dword_430174 = 0; // weak
int dword_430178 = 0; // weak
int dword_43017C = 0; // weak
int dword_430180 = 0; // weak
int dword_430188 = 0; // weak
int dword_43018C = 0; // weak
__int16 word_430190 = 0; // weak
int dword_430192 = 0; // weak
__int16 word_430196 = 0; // weak
int dword_430198 = 0; // weak
int dword_43019C = 0; // weak
int dword_4301A0 = 0; // weak
int dword_4301A4 = 0; // weak
int dword_4301A8 = 0; // weak
int dword_4301AC = 0; // weak
char byte_4301B0 = '\0'; // weak
__int16 word_43408A = 0; // weak
__int16 word_43408C = 0; // weak
__int16 word_43408E = 0; // weak
_UNKNOWN unk_434098; // weak
_UNKNOWN unk_43409C; // weak
_UNKNOWN unk_4340A8; // weak
_UNKNOWN unk_4340AC; // weak
_UNKNOWN unk_4340B8; // weak
_UNKNOWN unk_4340BC; // weak
int dword_4340CC = 0; // weak
int dword_4340D0 = 0; // weak
int dword_4340D4 = 0; // weak
int dword_4340D8 = 0; // weak
int dword_4340DC = 0; // weak
int dword_4340E2 = 0; // weak
int dword_4340E8 = 0; // weak
int dword_4340EC = 0; // weak
int dword_4340F0 = 0; // weak
int dword_4340F4 = 0; // weak
int dword_434108 = 0; // weak
int dword_43410C = 0; // weak
int dword_434110 = 0; // weak
int dword_434114 = 0; // weak
int dword_43411C = 0; // weak
int dword_434120 = 0; // weak
int dword_434126 = 0; // weak
int dword_43412C = 0; // weak
int dword_434130 = 0; // weak
int dword_434134 = 0; // weak
int dword_4366B8 = 0; // weak
int dword_436878 = 0; // weak
int dword_43687C = 0; // weak
int dword_436880 = 0; // weak
int dword_436884 = 0; // weak
int dword_436888 = 0; // weak
int dword_43688C = 0; // weak
int dword_436890 = 0; // weak
int dword_436894 = 0; // weak
int dword_436898 = 0; // weak
int dword_43689C = 0; // weak
int dword_4368A0 = 0; // weak
_DWORD dword_4368A8[2] = { 0, 0 }; // weak
_DWORD dword_4368B0[2] = { 0, 0 }; // weak
_DWORD dword_4368B8[2] = { 0, 0 }; // weak
int dword_4368C0 = 0; // weak
int dword_4368C4 = 0; // weak
int dword_4368C8 = 0; // weak
int dword_4368CC = 0; // weak
int dword_4368D0 = 0; // weak
int dword_4368D4 = 0; // weak
int dword_4368D8 = 0; // weak
int dword_43A7AC = 0; // weak
int dword_43A7B0 = 0; // weak
__int16 word_43A7B4 = 0; // weak
__int16 word_43A7B6 = 0; // weak
__int16 word_43A7B8 = 0; // weak
__int16 word_43A7BA = 0; // weak
int dword_43A7BC = 0; // weak
int dword_43A7C0 = 0; // weak
int dword_43A7C4 = 0; // weak
int dword_43A7C8 = 0; // weak
int dword_43A7CC = 0; // weak
int dword_43A7D0 = 0; // weak
int dword_43A7D4 = 0; // weak
int dword_43A7D8 = 0; // weak
int dword_43A7DC = 0; // weak
int dword_43A7E0 = 0; // weak
int dword_43A7E4 = 0; // weak
int dword_43A7E8 = 0; // weak
int dword_43A7EC = 0; // weak
int dword_43A7F0 = 0; // weak
int dword_43A7F4 = 0; // weak
_UNKNOWN unk_43A7F8; // weak
_UNKNOWN unk_43A7FC; // weak
_UNKNOWN unk_43A800; // weak
_UNKNOWN unk_43A804; // weak
_UNKNOWN unk_43A808; // weak
_UNKNOWN unk_43A80C; // weak
_UNKNOWN unk_43A810; // weak
_UNKNOWN unk_43A814; // weak
_UNKNOWN unk_43A818; // weak
_UNKNOWN unk_43A81C; // weak
_DWORD dword_43A820[60] =
{
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0
}; // weak
int dword_43A910 = 0; // weak
int dword_43A914 = 0; // weak
int dword_43A918 = 0; // weak
int dword_43A91C = 0; // weak
int dword_43A920 = 0; // weak
int dword_43A924 = 0; // weak
int dword_43A928 = 0; // weak
int dword_43A92C = 0; // weak
int dword_43A930 = 0; // weak
int dword_43A934 = 0; // weak
int dword_43A938 = 0; // weak
int dword_43A93C = 0; // weak
int dword_43A940 = 0; // weak
char byte_43A944 = '\0'; // weak
int dword_43A948 = 0; // weak
int dword_43A94C = 0; // weak
int dword_43A950 = 0; // weak
int dword_43A954 = 0; // weak
int dword_43A960 = 0; // weak
int dword_43A964 = 0; // weak
int dword_43A968 = 0; // weak
int dword_43A96C = 0; // weak
int dword_43A970 = 0; // weak
int dword_43A974 = 0; // weak
int dword_43A978 = 0; // weak
int dword_43A97C = 0; // weak
int dword_43A980 = 0; // weak
int dword_43A984 = 0; // weak
int dword_43A988 = 0; // weak
int dword_43A98C = 0; // weak
int dword_43A990 = 0; // weak
int dword_43A994 = 0; // weak
int dword_43A998 = 0; // weak
int dword_43A99C = 0; // weak
int dword_43A9A0 = 0; // weak
int dword_43A9A4 = 0; // weak
int dword_43A9F0 = 0; // weak
int dword_43A9F4 = 0; // weak
int dword_43A9F8 = 0; // weak
int dword_43A9FC = 0; // weak
int dword_43AA04 = 0; // weak
int dword_43AA08 = 0; // weak
int dword_43AA0C = 0; // weak
int dword_43AA14 = 0; // weak
int dword_43AA18 = 0; // weak
int dword_43AA1C = 0; // weak
int dword_43AA20 = 0; // weak
int dword_43AA24 = 0; // weak
int dword_43AA28 = 0; // weak
int dword_43AA30 = 0; // weak
int dword_43AA34 = 0; // weak
int dword_43AA48 = 0; // weak
_UNKNOWN unk_43BDA0; // weak
_UNKNOWN unk_43BDB8; // weak
int dword_43C3A0[9] = { 0, 0, 0, 0, 0, 0, 0, 0, 0 }; // weak
int dword_43C3C4 = 0; // weak
int dword_43C3C8 = 0; // weak
int dword_43C3CC = 0; // weak
int dword_43C3D0 = 0; // weak
int dword_43C3D8[9] = { 0, 0, 0, 0, 0, 0, 0, 0, 0 }; // weak
int dword_43C3FC = 0; // weak
int dword_43C400; // weak
int dword_43C408; // weak
size_t dword_43C40C; // idb
int dword_43C410; // weak
int dword_43C414; // weak
int dword_43C418; // weak
int dword_43C41C; // weak
int dword_43C420[16]; // weak
size_t Size; // idb
int dword_43C464; // weak
_UNKNOWN unk_43C468; // weak
struct tagRECT Point; // idb
HCURSOR hCursor; // idb
int dword_43C7A4; // weak
int dword_43C7B0; // weak
HINSTANCE hInstance; // idb
HWND hWnd; // idb
int dword_43C7C0; // weak
int dword_43C7C4; // weak
int dword_43C7C8; // weak
int dword_43C7CC; // weak
int dword_43C7D0; // weak
int dword_43C7D4; // weak
int dword_43C7D8; // weak
int dword_43C7DC; // weak
int dword_43C7E0; // weak
int dword_43C7E4; // weak
int dword_43C7E8; // weak
int dword_43C7EC; // weak
int dword_43C7F0; // weak
int dword_43C7F4; // weak
_UNKNOWN unk_43C7F8; // weak
_UNKNOWN unk_43C824; // weak
int dword_43C8E8; // weak
int dword_43C8EC; // weak
int dword_43C904; // weak
int dword_43C908; // weak
int dword_43C90C; // weak
int dword_43C914; // weak
int dword_43C918[11]; // weak
int dword_43C944[229]; // weak
int dword_43CCD8; // weak
int (*dword_43CCDC)(void); // weak
int (*dword_43CCE4)(void); // weak
int (__cdecl *dword_43CCF0)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); // weak
int dword_43CD04; // weak
int (*dword_43CD10)(void); // weak
int (*dword_43CD14)(void); // weak
int (__cdecl *dword_43CD20)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD); // weak
int dword_43CD60; // weak
int (__cdecl *dword_43CD64)(_DWORD, _DWORD); // weak
_UNKNOWN unk_43CD68; // weak
_UNKNOWN unk_43CD88; // weak
char byte_43CDA8; // weak
char byte_43CDB0[256]; // weak
int dword_43CEB0; // weak
int dword_43CEB4; // weak
char byte_43CEB8[256]; // weak
char byte_43CFB8[256]; // weak
char byte_43D0B8[256]; // weak
int dword_43D1B8; // weak
int dword_43D1BC; // weak
int dword_43D1C0; // weak
int dword_43D1C4; // weak
int dword_43D1C8[256]; // weak
int dword_43D5C8; // weak
int dword_43D8F0[]; // weak
__int16 word_43DC0E[601]; // weak
int dword_43E0C0[]; // weak
int dword_43E3E0[]; // weak
int dword_43E700[]; // weak
__int16 word_43EA20; // weak
int dword_43EA28; // weak
int dword_43EA2C; // weak
int dword_43EA30; // weak
int dword_43EA34; // weak
int dword_43EA38; // weak
int dword_43EA3C; // weak
int dword_43EA48; // weak
int dword_43EA4C; // weak
int dword_43EA50; // weak
int dword_43EA54; // weak
int dword_43EB58; // weak
int dword_43EB5C; // weak
int dword_43EB60; // weak
int dword_43EB64; // weak
int dword_43EB68; // weak
int dword_43EB6C; // weak
int dword_43EB70; // weak
char byte_43EB78; // weak
char byte_43EB79; // weak
char byte_43EB7A; // weak
_UNKNOWN unk_43EB7C; // weak
int dword_43EF78; // weak
_UNKNOWN unk_43EF80; // weak
char byte_43F380; // weak
char byte_43F381; // weak
char byte_43F382; // weak
_UNKNOWN unk_43F384; // weak
LPDIRECTDRAW lpDD; // idb
int dword_43F7C8; // weak
int dword_43F7CC; // weak
int dword_43F7D4; // weak
int dword_43F7D8; // weak
int dword_43F7DC; // weak
int dword_43F7E0; // weak
int dword_43F7E4; // weak
char byte_43F7E8; // weak
int dword_43F7E9; // weak
int dword_440844[4107]; // weak
int dword_444870; // weak
int dword_444874; // weak
int dword_444878; // weak
int dword_44487C; // weak
int dword_444880; // weak
int dword_444884; // weak
int dword_444888; // weak
int dword_4448B0; // weak
int dword_4448B4; // weak
int dword_4448B8; // weak
int dword_4448BC; // weak
int dword_4448C0; // weak
int dword_4448C4; // weak
int dword_4448C8; // weak
int dword_4448CC; // weak
int dword_4448D0; // weak
int dword_4448D4; // weak
int dword_4448D8; // weak
int dword_4448E8; // weak
int dword_4448EC; // weak
int dword_4448F0; // weak
int dword_4448F4; // weak
int dword_4448F8; // weak
int dword_4448FC; // weak
_DWORD dword_444908[26]; // weak
int dword_444970; // weak
_UNKNOWN unk_444974; // weak
_UNKNOWN unk_444978; // weak
_UNKNOWN unk_44497C; // weak
int dword_4449E8; // weak
int dword_4449EC; // weak
int dword_4449F0; // weak
int dword_4449F4; // weak
int dword_444B18; // weak
_UNKNOWN unk_444B1C; // weak
_UNKNOWN unk_444B20; // weak
_UNKNOWN unk_444B24; // weak
void *dword_444B28; // idb
int dword_444B80; // weak
_UNKNOWN unk_444B84; // weak
_UNKNOWN unk_444B88; // weak
_UNKNOWN unk_444B8C; // weak
void *dword_444C40; // idb
int dword_445048; // weak
_UNKNOWN unk_44504C; // weak
_UNKNOWN unk_445050; // weak
_UNKNOWN unk_445054; // weak
_DWORD dword_445058[4]; // weak
int dword_445068; // weak
int dword_44506C; // weak
int dword_445070; // weak
int dword_445074; // weak
int dword_445088; // weak
_BYTE algn_44508C[20]; // weak
int dword_4450A0; // weak
_UNKNOWN unk_4450A4; // weak
_UNKNOWN unk_4450A8; // weak
_UNKNOWN unk_4450AC; // weak
_UNKNOWN unk_4450B8; // weak
int dword_446FF8; // weak
int dword_446FFC; // weak
int dword_447000; // weak
int dword_447004; // weak
int dword_447008; // weak
int dword_44700C; // weak
_UNKNOWN unk_447038; // weak
int dword_44CDF8; // weak
int dword_44CE00; // weak
int dword_44CE04; // weak
int dword_44CE08; // weak
int dword_44CE0C; // weak
int dword_44CE10; // weak
int dword_44CE14; // weak
int dword_44CE18; // weak
int dword_44CE1C; // weak
int dword_44CE24; // weak
int dword_44CE2C; // weak
int dword_44CE30; // weak
int dword_44CE34; // weak
int dword_44CE38; // weak
int dword_44CE3C; // weak
int dword_44CE40; // weak
int dword_44CE58; // weak
int dword_44CE60; // weak
int dword_44CE64; // weak
int dword_44CE68; // weak
int dword_44CE6C; // weak
int dword_44CE70; // weak
int dword_44CE74; // weak
int dword_44CE78; // weak
int dword_44CE7C; // weak
int dword_44CE88; // weak
int dword_44CE8C; // weak
int dword_44CE90; // weak
int dword_44CE94; // weak
int dword_44CE98; // weak
int dword_44CE9C; // weak
int dword_44CEA0; // weak
int dword_44CEA4; // weak
int dword_44CEA8; // weak
int dword_44CEB0; // weak
int dword_44CEB4; // weak
int dword_44CEB8; // weak
int dword_44CEBC; // weak
int dword_44CEC0; // weak
int dword_44CEC4; // weak
int dword_44CED8; // weak
int dword_44CEE0; // weak
int dword_44CEE4; // weak
int dword_44CEE8; // weak
int dword_44CEEC; // weak
int dword_44CEF0; // weak
int dword_44CEF4; // weak
int dword_44CEF8; // weak
int dword_44CEFC; // weak
int dword_4528B0; // weak
int dword_4528B4; // weak
int dword_4528B8; // weak
int dword_4528BC; // weak
int dword_4528C0; // weak
int dword_4528C4; // weak
int dword_4528C8; // weak
int dword_4528D0[30]; // weak
int dword_452948; // weak
double dbl_452950; // weak
int dword_452958; // weak
int dword_45295C; // weak
int dword_452960; // idb
int dword_452970; // weak
int dword_452974; // weak
int dword_452978; // weak
int dword_452980; // weak
int dword_452984; // weak
int dword_452988; // weak
int dword_45298C; // weak
int dword_452990; // weak
int dword_452994; // weak
int dword_452998; // weak
int dword_45299C; // weak
int dword_4529D0[]; // weak
int dword_4529D4; // weak
int dword_4529D8; // weak
int dword_4529DC; // weak
int dword_4529F8; // weak
int dword_4529FC; // weak
int dword_452A00; // weak
double dbl_452A08; // weak
int dword_452A10; // idb
int dword_452A20[256]; // weak
int dword_452E20; // weak
__int16 word_452E30[256]; // weak
__int16 word_453030; // weak
int dword_453034; // weak
int dword_453038; // weak
int dword_45303C; // weak
int dword_453040; // weak
int dword_453044; // weak
int dword_453048; // weak
int dword_45304C; // weak
int dword_453050; // weak
int dword_453054; // weak
int dword_453058; // weak
int dword_45305C; // weak
int dword_453060; // weak
int dword_453064; // weak
int dword_453068; // weak
int dword_45306C; // weak
LPDIRECTSOUND ppDS; // idb
int dword_453080; // weak
int dword_453084; // weak
int dword_453088; // weak
int dword_45308C; // weak
int dword_453090; // weak
int dword_453094; // weak
int dword_453098; // weak
int dword_4530A0; // weak
int dword_4530B0; // weak
int dword_4530B4; // weak
int dword_4530B8; // weak
int dword_4530BC; // weak
int dword_4530C0; // weak
int dword_4530D0[256]; // weak
int dword_4534D0; // weak
// extern int (__stdcall *GetDeviceCaps)(HDC hdc, int index);
// extern HGDIOBJ (__stdcall *GetStockObject)(int i);
// extern BOOL (__stdcall *ClientToScreen)(HWND hWnd, LPPOINT lpPoint);
// extern LRESULT (__stdcall *DispatchMessageA)(const MSG *lpMsg);
// extern BOOL (__stdcall *SetRect)(LPRECT lprc, int xLeft, int yTop, int xRight, int yBottom);
// extern BOOL (__stdcall *GetMessageA)(LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax);
// extern BOOL (__stdcall *PeekMessageA)(LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax, UINT wRemoveMsg);
// extern ATOM (__stdcall *RegisterClassA)(const WNDCLASSA *lpWndClass);
// extern HICON (__stdcall *LoadIconA)(HINSTANCE hInstance, LPCSTR lpIconName);
// extern HCURSOR (__stdcall *LoadCursorA)(HINSTANCE hInstance, LPCSTR lpCursorName);
// extern LRESULT (__stdcall *DefWindowProcA)(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
// extern BOOL (__stdcall *DestroyWindow)(HWND hWnd);
// extern HCURSOR (__stdcall *SetCursor)(HCURSOR hCursor);
// extern BOOL (__stdcall *PostMessageA)(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
// extern void (__stdcall *PostQuitMessage)(int nExitCode);
// extern int (__stdcall *GetSystemMetrics)(int nIndex);
// extern BOOL (__stdcall *GetClientRect)(HWND hWnd, LPRECT lpRect);
// extern BOOL (__stdcall *SetWindowPos)(HWND hWnd, HWND hWndInsertAfter, int X, int Y, int cx, int cy, UINT uFlags);
// extern BOOL (__stdcall *AdjustWindowRectEx)(LPRECT lpRect, DWORD dwStyle, BOOL bMenu, DWORD dwExStyle);
// extern HWND (__stdcall *CreateWindowExA)(DWORD dwExStyle, LPCSTR lpClassName, LPCSTR lpWindowName, DWORD dwStyle, int X, int Y, int nWidth, int nHeight, HWND hWndParent, HMENU hMenu, HINSTANCE hInstance, LPVOID lpParam);
// extern BOOL (__stdcall *UpdateWindow)(HWND hWnd);
// extern BOOL (__stdcall *TranslateMessage)(const MSG *lpMsg);
// extern HDC (__stdcall *GetDC)(HWND hWnd);
// extern BOOL (__stdcall *ShowWindow)(HWND hWnd, int nCmdShow);
// extern int (__stdcall *MessageBoxA)(HWND hWnd, LPCSTR lpText, LPCSTR lpCaption, UINT uType);
// extern BOOL (__stdcall *GetWindowRect)(HWND hWnd, LPRECT lpRect);
// extern BOOL (__stdcall *SystemParametersInfoA)(UINT uiAction, UINT uiParam, PVOID pvParam, UINT fWinIni);
// extern int (__stdcall *ReleaseDC)(HWND hWnd, HDC hDC);
// extern HWND (__stdcall *SetFocus)(HWND hWnd);
// extern HMENU (__stdcall *GetMenu)(HWND hWnd);
// extern LONG (__stdcall *SetWindowLongA)(HWND hWnd, int nIndex, LONG dwNewLong);
// extern LONG (__stdcall *GetWindowLongA)(HWND hWnd, int nIndex);
// extern DWORD (__stdcall *timeGetTime)();
// extern MMRESULT (__stdcall *timeBeginPeriod)(UINT uPeriod);
// extern MMRESULT (__stdcall *timeEndPeriod)(UINT uPeriod);
// extern MMRESULT (__stdcall *timeKillEvent)(UINT uTimerID);


//----- (00401000) --------------------------------------------------------
int __cdecl sub_401000(__int16 *a1, int a2)
{
  int v2; // edx
  int *v3; // ebx
  __int16 *v4; // edi
  __int16 *v5; // esi

  v2 = 0;
  v3 = dword_452A20;
  v4 = a1;
  v5 = word_452E30;
  do
  {
    ++v3;
    *v5++ = *v4++;
    *(v3 - 1) = 16 * *((char *)a1 + ++v2 + 511);
  }
  while ( v5 < &word_453030 );
  dword_452E20 = 128;
  dword_453034 = (int)(a1 + 384);
  word_453030 = 0;
  dword_453038 = 2 * a2 - 1536;
  dword_45303C = 0;
  return 1;
}
// 452A20: using guessed type int dword_452A20[256];
// 452E20: using guessed type int dword_452E20;
// 452E30: using guessed type __int16 word_452E30[256];
// 453030: using guessed type __int16 word_453030;
// 453034: using guessed type int dword_453034;
// 453038: using guessed type int dword_453038;
// 45303C: using guessed type int dword_45303C;

//----- (00401080) --------------------------------------------------------
int __cdecl __spoils<ecx> sub_401080(__int16 *a1, int a2)
{
  int result; // eax
  int v3; // ecx
  __int16 *v4; // edi
  int v5; // edx
  _BYTE *v6; // esi
  __int16 v7; // bx
  int v8; // eax
  int v9; // edx
  __int16 v10; // bx
  int v11; // edx
  int v12; // edx
  int v13; // edx

  if ( dword_45303C == dword_453038 )
    return 0;
  v3 = a2;
  if ( a2 > dword_453038 )
    v3 = dword_453038;
  v4 = a1;
  v5 = dword_452E20;
  v6 = (_BYTE *)(((unsigned int)dword_45303C >> 1) + dword_453034);
  v7 = word_453030;
  v8 = dword_45303C & 1;
  if ( (dword_45303C & 1) == 0
    || (LOBYTE(v8) = *v6 >> 4,
        v7 = word_452E30[v8 + dword_452E20] + word_453030,
        v5 = dword_452A20[v8 + dword_452E20],
        *a1 = v7,
        v4 = a1 + 1,
        ++v6,
        --v3,
        v3) )
  {
    do
    {
      LOBYTE(v8) = *v6 & 0xF;
      v9 = v8 + v5;
      v10 = word_452E30[v9] + v7;
      v11 = dword_452A20[v9];
      *v4 = v10;
      LOBYTE(v8) = *v6 >> 4;
      v12 = v8 + v11;
      v7 = word_452E30[v12] + v10;
      v5 = dword_452A20[v12];
      v4[1] = v7;
      v4 += 2;
      ++v6;
      v3 -= 2;
    }
    while ( v3 > 1 );
    if ( v3 >= 1 )
    {
      LOBYTE(v8) = *v6 & 0xF;
      v13 = v8 + v5;
      v7 += word_452E30[v13];
      v5 = dword_452A20[v13];
      *v4 = v7;
    }
  }
  dword_452E20 = v5;
  word_453030 = v7;
  if ( dword_453038 >= a2 + dword_45303C )
  {
    dword_45303C += a2;
    return a2;
  }
  else
  {
    result = dword_453038 - dword_45303C;
    dword_45303C = dword_453038;
  }
  return result;
}
// 452A20: using guessed type int dword_452A20[256];
// 452E20: using guessed type int dword_452E20;
// 452E30: using guessed type __int16 word_452E30[256];
// 453030: using guessed type __int16 word_453030;
// 453034: using guessed type int dword_453034;
// 453038: using guessed type int dword_453038;
// 45303C: using guessed type int dword_45303C;

//----- (004011A0) --------------------------------------------------------
int sub_4011A0()
{
  int v0; // edi
  char *v1; // esi
  int v2; // eax
  void *v3; // eax
  int v5; // eax

  v0 = 0;
  v1 = aDataIgn1Dps;
  do
  {
    v2 = sub_4044D0(v1);
    dword_43C3A0[v0] = v2;
    if ( v2 < 768 )
      return 0;
    v3 = sub_4043A0(v1);
    dword_43C3D8[v0] = (int)v3;
    if ( !v3 )
      return 0;
    ++v0;
    v1 += 50;
  }
  while ( v1 < byte_41C1FA );
  sub_401000((__int16 *)dword_43C3D8[dword_41C200[dword_41C520]], dword_43C3A0[dword_41C200[dword_41C520]]);
  dword_453098 = 20;
  if ( sub_403D20() != 1 )
    return 0;
  dword_43C3C8 = dword_453088;
  dword_43C400 = dword_453084;
  dword_43C3D0 = dword_453090;
  v5 = dword_45308C;
  dword_43C3FC = dword_45308C;
  if ( dword_453080 >= 44000 )
    v5 = dword_45308C / 2;
  dword_43C3FC = v5;
  dword_43C3C4 = dword_453080;
  dword_43C3CC = (int)sub_403630(0, 2 * v5);
  if ( !dword_43C3CC )
    return 0;
  dword_41C030 = 1;
  return 1;
}
// 41C030: using guessed type int dword_41C030;
// 41C200: using guessed type int dword_41C200[200];
// 41C520: using guessed type int dword_41C520;
// 43C3A0: using guessed type int dword_43C3A0[9];
// 43C3C4: using guessed type int dword_43C3C4;
// 43C3C8: using guessed type int dword_43C3C8;
// 43C3CC: using guessed type int dword_43C3CC;
// 43C3D0: using guessed type int dword_43C3D0;
// 43C3D8: using guessed type int dword_43C3D8[9];
// 43C3FC: using guessed type int dword_43C3FC;
// 43C400: using guessed type int dword_43C400;
// 453080: using guessed type int dword_453080;
// 453084: using guessed type int dword_453084;
// 453088: using guessed type int dword_453088;
// 45308C: using guessed type int dword_45308C;
// 453090: using guessed type int dword_453090;
// 453098: using guessed type int dword_453098;

//----- (004012A0) --------------------------------------------------------
int sub_4012A0()
{
  int *i; // ebx
  int v1; // ebp
  _BYTE *v2; // edx
  int v3; // ecx

  if ( dword_41C030 == 1 )
  {
    for ( i = sub_403910(); i; i = sub_403910() )
    {
      v1 = sub_401080((__int16 *)dword_43C3CC, dword_43C3FC);
      if ( dword_43C3FC > v1 )
      {
        if ( dword_41C200[++dword_41C520] == -1 )
          dword_41C520 = 9;
        sub_401000((__int16 *)dword_43C3D8[dword_41C200[dword_41C520]], dword_43C3A0[dword_41C200[dword_41C520]]);
        sub_401080((__int16 *)(dword_43C3CC + 2 * v1), dword_43C3FC - v1);
      }
      sub_4013C0((_BYTE *)*i, dword_43C3CC, i[2], 0);
      v2 = (_BYTE *)i[1];
      if ( v2 )
      {
        v3 = i[3];
        if ( v3 )
          sub_4013C0(v2, dword_43C3CC, v3, i[2]);
      }
      sub_403BF0();
    }
  }
  return 1;
}
// 41C030: using guessed type int dword_41C030;
// 41C200: using guessed type int dword_41C200[200];
// 41C520: using guessed type int dword_41C520;
// 43C3A0: using guessed type int dword_43C3A0[9];
// 43C3CC: using guessed type int dword_43C3CC;
// 43C3D8: using guessed type int dword_43C3D8[9];
// 43C3FC: using guessed type int dword_43C3FC;

//----- (004013A0) --------------------------------------------------------
int sub_4013A0()
{
  dword_41C030 = 1;
  sub_403CB0();
  dword_41C030 = 0;
  return 1;
}
// 41C030: using guessed type int dword_41C030;

//----- (004013C0) --------------------------------------------------------
int __cdecl sub_4013C0(_BYTE *a1, int a2, int a3, int a4)
{
  int v4; // esi
  int v5; // edi
  int v6; // eax
  __int16 *v7; // eax
  _BYTE *v8; // ecx
  _BYTE *v9; // ebx
  __int16 v10; // dx
  __int16 v11; // dx
  _BYTE *v12; // ebx
  unsigned __int16 v13; // dx
  _BYTE *v14; // ebx
  unsigned __int16 v15; // dx
  _BYTE *v16; // ebx
  __int16 v17; // dx
  _BYTE *v18; // ebx
  __int16 v19; // dx
  char v20; // dl
  char v21; // dl
  unsigned __int16 v22; // dx
  char v23; // dl
  _BYTE *v24; // ecx
  __int16 v25; // dx
  unsigned __int16 v26; // dx
  int v28; // [esp+Ch] [ebp-4h]

  v4 = a3;
  if ( dword_43C3C4 < 44000 )
  {
    v6 = a4;
    v5 = v28;
  }
  else
  {
    v5 = a3 % 2;
    v4 = a3 / 2;
    v6 = a4 / 2;
  }
  v7 = (__int16 *)(a2 + 2 * v6);
  if ( dword_43C400 == 16 )
  {
    if ( dword_43C3C8 == 1 && !dword_43C3D0 && dword_43C3C4 < 44000 )
    {
      v8 = a1;
      v9 = a1;
      if ( v4 > 0 )
      {
        do
        {
          v10 = *v7 ^ 0x8000;
          v9 += 4;
          *((_WORD *)v9 - 2) = v10;
          ++v7;
          *((_WORD *)v9 - 1) = v10;
          --v4;
        }
        while ( v4 );
      }
      goto LABEL_101;
    }
    if ( dword_43C400 != 16 )
      goto LABEL_25;
    if ( dword_43C3C8 == 1 && !dword_43C3D0 && dword_43C3C4 >= 44000 )
    {
      v8 = a1;
      v9 = a1;
      if ( v4 > 0 )
      {
        do
        {
          v11 = *v7 ^ 0x8000;
          v12 = v9 + 4;
          *((_WORD *)v12 - 2) = v11;
          v12 += 2;
          *((_WORD *)v12 - 2) = v11;
          v9 = v12 + 2;
          *((_WORD *)v9 - 2) = v11;
          ++v7;
          *((_WORD *)v9 - 1) = v11;
          --v4;
        }
        while ( v4 );
      }
      goto LABEL_101;
    }
  }
  if ( dword_43C400 != 16 )
    goto LABEL_32;
  if ( dword_43C3C8 == 1 && dword_43C3D0 == 1 && dword_43C3C4 < 44000 )
  {
    v8 = a1;
    v9 = a1;
    if ( v4 > 0 )
    {
      do
      {
        v13 = *v7;
        v14 = v9 + 2;
        *((_WORD *)v14 - 1) = *v7;
        v9 = v14 + 2;
        *((_WORD *)v9 - 1) = v13;
        ++v7;
        --v4;
      }
      while ( v4 );
    }
    goto LABEL_101;
  }
LABEL_25:
  if ( dword_43C400 != 16 )
    goto LABEL_39;
  if ( dword_43C3C8 == 1 && dword_43C3D0 == 1 && dword_43C3C4 >= 44000 )
  {
    v8 = a1;
    v9 = a1;
    if ( v4 > 0 )
    {
      do
      {
        v15 = *v7;
        v16 = v9 + 2;
        *((_WORD *)v16 - 1) = *v7;
        v16 += 2;
        *((_WORD *)v16 - 1) = v15;
        v16 += 2;
        *((_WORD *)v16 - 1) = v15;
        v9 = v16 + 2;
        *((_WORD *)v9 - 1) = v15;
        ++v7;
        --v4;
      }
      while ( v4 );
    }
    goto LABEL_101;
  }
LABEL_32:
  if ( dword_43C400 != 16 )
    goto LABEL_46;
  if ( !dword_43C3C8 && !dword_43C3D0 && dword_43C3C4 < 44000 )
  {
    v8 = a1;
    v9 = a1;
    if ( v4 > 0 )
    {
      do
      {
        v9 += 2;
        v17 = *v7++ ^ 0x8000;
        *((_WORD *)v9 - 1) = v17;
        --v4;
      }
      while ( v4 );
    }
    goto LABEL_101;
  }
LABEL_39:
  if ( dword_43C400 != 16 )
    goto LABEL_53;
  if ( !dword_43C3C8 && !dword_43C3D0 && dword_43C3C4 >= 44000 )
  {
    v8 = a1;
    v9 = a1;
    if ( v4 > 0 )
    {
      do
      {
        v9 += 4;
        *((_WORD *)v9 - 2) = *v7++ ^ 0x8000;
        --v4;
        *((_WORD *)v9 - 1) = *(v7 - 1) ^ 0x8000;
      }
      while ( v4 );
    }
    goto LABEL_101;
  }
LABEL_46:
  if ( dword_43C400 != 16 )
    goto LABEL_60;
  if ( !dword_43C3C8 && dword_43C3D0 == 1 && dword_43C3C4 < 44000 )
  {
    v8 = a1;
    v9 = a1;
    if ( v4 > 0 )
    {
      do
      {
        v9 += 2;
        *((_WORD *)v9 - 1) = *v7++;
        --v4;
      }
      while ( v4 );
    }
    goto LABEL_101;
  }
LABEL_53:
  if ( dword_43C400 != 16 || dword_43C3C8 || dword_43C3D0 != 1 || dword_43C3C4 < 44000 )
  {
LABEL_60:
    if ( dword_43C400 == 8 )
    {
      if ( dword_43C3C8 == 1 && !dword_43C3D0 && dword_43C3C4 < 44000 )
      {
        v8 = a1;
        if ( v4 > 0 )
        {
          do
          {
            v8 += 2;
            v20 = HIBYTE(*v7++) ^ 0x80;
            *(v8 - 2) = v20;
            --v4;
            *(v8 - 1) = HIBYTE(*(v7 - 1)) ^ 0x80;
          }
          while ( v4 );
        }
        goto LABEL_100;
      }
      if ( dword_43C400 != 8 )
        goto LABEL_81;
      if ( dword_43C3C8 == 1 && !dword_43C3D0 && dword_43C3C4 >= 44000 )
      {
        v8 = a1;
        if ( v4 > 0 )
        {
          do
          {
            v21 = HIBYTE(*v7) ^ 0x80;
            v8 += 4;
            ++v7;
            --v4;
            *(v8 - 4) = v21;
            *(v8 - 3) = v21;
            *(v8 - 2) = v21;
            *(v8 - 1) = v21;
          }
          while ( v4 );
        }
        goto LABEL_100;
      }
    }
    if ( dword_43C400 != 8 )
      goto LABEL_88;
    if ( dword_43C3C8 == 1 && dword_43C3D0 == 1 && dword_43C3C4 < 44000 )
    {
      v8 = a1;
      if ( v4 > 0 )
      {
        do
        {
          v22 = *v7;
          v8 += 2;
          ++v7;
          --v4;
          *(v8 - 2) = HIBYTE(v22);
          *(v8 - 1) = HIBYTE(*(v7 - 1));
        }
        while ( v4 );
      }
      goto LABEL_100;
    }
LABEL_81:
    if ( dword_43C400 != 8 )
      goto LABEL_93;
    if ( dword_43C3C8 == 1 && dword_43C3D0 == 1 && dword_43C3C4 >= 44000 )
    {
      v8 = a1;
      if ( v4 > 0 )
      {
        do
        {
          v23 = *((_BYTE *)v7++ + 1);
          v24 = v8 + 3;
          *(v24 - 3) = v23;
          *(v24 - 2) = v23;
          *(v24 - 1) = v23;
          *v24 = v23;
          v8 = v24 + 1;
          --v4;
        }
        while ( v4 );
      }
      goto LABEL_100;
    }
LABEL_88:
    if ( dword_43C400 != 8 )
      goto LABEL_94;
    if ( !dword_43C3C8 )
    {
      v8 = a1;
      if ( v4 > 0 )
      {
        do
        {
          ++v8;
          v25 = *v7++ >> 8;
          --v4;
          *(v8 - 1) = v25 ^ 0x80;
        }
        while ( v4 );
      }
      goto LABEL_100;
    }
LABEL_93:
    if ( dword_43C400 != 8 )
    {
LABEL_99:
      v8 = a1;
LABEL_100:
      v9 = (_BYTE *)v28;
      goto LABEL_101;
    }
LABEL_94:
    if ( dword_43C400 == 8 && !dword_43C3C8 )
    {
      v8 = a1;
      if ( v4 > 0 )
      {
        do
        {
          v26 = *v7;
          ++v8;
          ++v7;
          --v4;
          *(v8 - 1) = HIBYTE(v26);
        }
        while ( v4 );
      }
      goto LABEL_100;
    }
    goto LABEL_99;
  }
  v8 = a1;
  v9 = a1;
  if ( v4 > 0 )
  {
    do
    {
      v18 = v9 + 2;
      *((_WORD *)v18 - 1) = *v7;
      v9 = v18 + 2;
      v19 = *v7++;
      *((_WORD *)v9 - 1) = v19;
      --v4;
    }
    while ( v4 );
  }
LABEL_101:
  if ( dword_43C3C4 >= 44000 && v5 == 1 )
  {
    if ( dword_43C400 == 16 )
      v8 = v9;
    if ( dword_43C400 == 8 )
    {
      *v8 = *(v8 - 1);
    }
    else if ( dword_43C400 != 16 || dword_43C3C8 )
    {
      *(_DWORD *)v8 = *((_DWORD *)v8 - 1);
    }
    else
    {
      *(_WORD *)v8 = *((_WORD *)v8 - 1);
    }
  }
  return 1;
}
// 401400: variable 'v28' is possibly undefined
// 43C3C4: using guessed type int dword_43C3C4;
// 43C3C8: using guessed type int dword_43C3C8;
// 43C3D0: using guessed type int dword_43C3D0;
// 43C400: using guessed type int dword_43C400;

//----- (004019D0) --------------------------------------------------------
int __cdecl sub_4019D0(int *a1, int a2, int *a3)
{
  int v3; // esi
  int *v5; // ecx
  int *v6; // eax
  int v7; // edx
  int *i; // ebp
  int v9; // eax

  v3 = 0;
  dword_452A10 = sub_4035A0(aScriptPlayer);
  if ( dword_452A10 == -1 )
    return -1;
  v5 = a3;
  if ( *a3 )
  {
    v6 = dword_43C420;
    do
    {
      if ( v6 >= (int *)&Size )
        break;
      v7 = *v5++;
      *v6++ = v7;
    }
    while ( *v5 );
  }
  for ( i = a1; *i != 2021157228; i = (int *)((char *)i + i[1] + 8) )
  {
    v9 = *i;
    if ( *i > 825256300 )
    {
      if ( v9 == 842033516 )
      {
        sub_401C20((int)i, a2);
      }
      else
      {
        if ( v9 != 858810732 )
          return -1;
        sub_401D20((int)i, a2, (int)dword_43C420);
      }
    }
    else if ( *i == 825256300 )
    {
      sub_401C00((int)i);
    }
    else
    {
      if ( v9 != 808479084 )
        return -1;
      ++v3;
      sub_401BE0((int)i);
    }
  }
  dword_43C414 = (int)sub_403630(dword_452A10, (int)Size / 4);
  if ( !dword_43C414 )
    return -1;
  dword_43C464 = (int)sub_403630(dword_452A10, Size);
  if ( !dword_43C464 )
    return -1;
  dword_43C418 = (int)sub_403630(dword_452A10, dword_43C40C);
  if ( !dword_43C418 )
    return -1;
  dword_43C408 = (int)sub_403630(dword_452A10, 12 * v3);
  if ( !dword_43C408 )
    return -1;
  sub_401B60(a1);
  return v3;
}
// 43C408: using guessed type int dword_43C408;
// 43C414: using guessed type int dword_43C414;
// 43C418: using guessed type int dword_43C418;
// 43C420: using guessed type int dword_43C420[16];
// 43C464: using guessed type int dword_43C464;

//----- (00401B60) --------------------------------------------------------
void __cdecl sub_401B60(_DWORD *a1)
{
  _DWORD *v1; // esi
  int v2; // edi
  _DWORD *v3; // edx
  int v4; // eax
  int v5; // [esp+Ch] [ebp-4h]

  v1 = a1;
  if ( *a1 != 2021157228 )
  {
    v2 = 0;
    v3 = (_DWORD *)v5;
    v4 = v5;
    do
    {
      if ( *v1 == 808479084 )
      {
        *(_DWORD *)(dword_43C408 + v2) = v1 + 2;
        v2 += 12;
        *(_DWORD *)(dword_43C408 + v2 - 8) = v3;
        *(_DWORD *)(dword_43C408 + v2 - 4) = v4;
      }
      else if ( *v1 == 825256300 )
      {
        v3 = v1 + 2;
        v4 = v1[1] / 4;
      }
      v1 = (_DWORD *)((char *)v1 + v1[1] + 8);
    }
    while ( *v1 != 2021157228 );
  }
}
// 401B74: variable 'v5' is possibly undefined
// 43C408: using guessed type int dword_43C408;

//----- (00401BE0) --------------------------------------------------------
int __cdecl sub_401BE0(int a1)
{
  int v1; // ecx
  int result; // eax

  v1 = *(_DWORD *)(a1 + 4);
  result = 6 * v1;
  if ( 6 * v1 > (int)Size )
    Size = 6 * v1;
  return result;
}

//----- (00401C00) --------------------------------------------------------
int __cdecl sub_401C00(int a1)
{
  int result; // eax

  result = 2 * *(_DWORD *)(a1 + 4);
  if ( (int)dword_43C40C < result )
    dword_43C40C = 2 * *(_DWORD *)(a1 + 4);
  return result;
}

//----- (00401C20) --------------------------------------------------------
int __cdecl sub_401C20(int a1, int a2)
{
  unsigned __int16 *v2; // esi
  int v3; // edi
  int v5; // ecx
  unsigned __int16 v6; // ax
  _WORD *v7; // esi
  unsigned __int16 v8; // ax
  unsigned __int16 v9; // ax
  unsigned __int16 v10; // ax
  unsigned int v11; // eax

  v2 = (unsigned __int16 *)(a1 + 8);
  v3 = *(_DWORD *)(a1 + 4) / 16;
  dword_43C41C = (int)sub_403630(dword_452A10, 28 * v3);
  if ( !dword_43C41C )
    return -1;
  if ( v3 > 0 )
  {
    v5 = 0;
    do
    {
      v6 = *v2;
      v7 = v2 + 2;
      *(_DWORD *)(dword_43C41C + v5) = v6;
      v8 = *(v7 - 1);
      v7 += 2;
      *(_DWORD *)(dword_43C41C + v5 + 4) = v8;
      v9 = *(v7 - 2);
      v7 += 2;
      *(_DWORD *)(dword_43C41C + v5 + 8) = v9;
      v10 = *(v7 - 3);
      v2 = v7 + 2;
      *(_DWORD *)(dword_43C41C + v5 + 12) = v10;
      *(_DWORD *)(dword_43C41C + v5 + 16) = *(v2 - 4);
      *(_DWORD *)(dword_43C41C + v5 + 20) = *(v2 - 3);
      v11 = *((_DWORD *)v2 - 1);
      if ( v11 > 0x1E )
        v11 = 0;
      *(_DWORD *)(dword_43C41C + v5 + 24) = *(_DWORD *)(a2 + 4 * v11);
      v5 += 28;
      --v3;
    }
    while ( v3 );
  }
  return 0;
}
// 43C41C: using guessed type int dword_43C41C;

//----- (00401D20) --------------------------------------------------------
int __cdecl sub_401D20(int a1, int a2, int a3)
{
  int v3; // esi
  int v4; // edi
  int v6; // ebx
  int v7; // esi
  int v8; // eax

  v3 = a1 + 8;
  v4 = *(_DWORD *)(a1 + 4) / 16;
  dword_43C410 = (int)sub_403630(dword_452A10, 32 * v4);
  if ( !dword_43C410 )
    return -1;
  if ( v4 > 0 )
  {
    v6 = 0;
    do
    {
      v7 = v3 + 4;
      v6 += 32;
      *(_DWORD *)(dword_43C410 + v6 - 32) = *(__int16 *)(v7 - 4) << 8;
      v7 += 6;
      v8 = *(__int16 *)(v7 - 8) << 8;
      v7 += 4;
      *(_DWORD *)(dword_43C410 + v6 - 28) = v8;
      LOWORD(v8) = *(_WORD *)(v7 - 10);
      v3 = v7 + 2;
      *(_DWORD *)(dword_43C410 + v6 - 24) = (unsigned __int16)v8 << 8;
      *(_DWORD *)(dword_43C410 + v6 - 20) = *(unsigned __int16 *)(v3 - 10) << 8;
      *(_DWORD *)(dword_43C410 + v6 - 16) = *(unsigned __int16 *)(v3 - 8) << 8;
      *(_DWORD *)(dword_43C410 + v6 - 12) = *(unsigned __int16 *)(v3 - 6) << 8;
      *(_DWORD *)(dword_43C410 + v6 - 8) = *(_DWORD *)(a2 + 4 * *(unsigned __int16 *)(v3 - 4));
      --v4;
      *(_DWORD *)(dword_43C410 + v6 - 4) = *(_DWORD *)(a3 + 4 * *(unsigned __int16 *)(v3 - 2));
    }
    while ( v4 );
  }
  return 0;
}
// 43C410: using guessed type int dword_43C410;

//----- (00401E30) --------------------------------------------------------
int __cdecl sub_401E30(int a1, int a2)
{
  int v2; // esi
  int v3; // ecx
  _BYTE *v4; // eax
  __int16 *v5; // edx
  int v6; // edi
  int v7; // ecx
  __int16 *v8; // edx
  int v9; // esi
  int v10; // ecx
  _DWORD *v11; // esi
  _DWORD *v12; // edi
  int v13; // ecx
  int v14; // edx
  _BYTE *v15; // eax
  int v16; // ebx
  int v17; // ebx
  _BYTE *v18; // eax
  int v19; // ebx
  int v20; // ebx
  int v21; // ebx
  _DWORD *v22; // edi
  int v23; // ebx
  int v24; // ebx
  _DWORD *v25; // edi
  int v26; // ebx
  int v27; // ebx
  int v28; // ebx
  _DWORD *v29; // edi
  int v30; // ebx
  int v31; // ebx
  int v32; // ebx
  int v33; // ebx
  _DWORD *v34; // edi
  int v35; // ebx
  int v36; // ebx
  int v37; // ebx
  int v38; // ebx
  _DWORD *v39; // edi
  int v40; // ebx
  int v41; // ebx

  v2 = dword_43C418;
  v3 = dword_43C408 + 12 * a1;
  v4 = *(_BYTE **)v3;
  v5 = *(__int16 **)(v3 + 4);
  v6 = *(_DWORD *)(v3 + 8);
  if ( a2 )
  {
    if ( a2 == 1 && v6 > 0 )
    {
      do
      {
        v8 = v5 + 1;
        v9 = v2 + 4;
        *(_DWORD *)(v9 - 4) = 32 * *(v8 - 1);
        v10 = *v8;
        v5 = v8 + 1;
        v2 = v9 + 4;
        --v6;
        *(_DWORD *)(v2 - 4) = 38 * v10;
      }
      while ( v6 );
    }
  }
  else
  {
    v7 = 2 * v6;
    if ( 2 * v6 > 0 )
    {
      do
      {
        ++v5;
        v2 += 4;
        --v7;
        *(_DWORD *)(v2 - 4) = 16 * *(v5 - 1);
      }
      while ( v7 );
    }
  }
  v11 = (_DWORD *)dword_43C414;
  v12 = (_DWORD *)dword_43C464;
  if ( *v4 == 0xFF )
  {
LABEL_36:
    *v11 = 0;
    return dword_43C414;
  }
  else
  {
    while ( 1 )
    {
      v4 += 2;
      v13 = (unsigned __int8)*(v4 - 2);
      v14 = (unsigned __int8)*(v4 - 1);
      if ( (unsigned int)(v13 - 7) > 0xC )
        return 0;
      switch ( *(v4 - 2) )
      {
        case 7:
          if ( a2 )
          {
            if ( a2 == 1 && *(v4 - 1) )
            {
              do
              {
                *v11++ = v12;
                *v12 = v13;
                v18 = v4 + 6;
                v12 += 9;
                v19 = 32 * *((__int16 *)v18 - 3);
                v4 = v18 + 2;
                *(v12 - 8) = dword_43C410 + v19;
                *(v12 - 7) = v12 - 4;
                *(v12 - 4) = *((unsigned __int16 *)v4 - 3) << 9;
                *(v12 - 3) = 0;
                *(v12 - 2) = 0;
                --v14;
                *(v12 - 1) = 614 * *((unsigned __int16 *)v4 - 2);
                v20 = *((__int16 *)v4 - 1);
                *(v12 - 6) = *(_DWORD *)(dword_43C418 + 8 * v20);
                *(v12 - 5) = *(_DWORD *)(dword_43C418 + 8 * v20 + 4);
              }
              while ( v14 );
            }
          }
          else if ( *(v4 - 1) )
          {
            do
            {
              *v11++ = v12;
              *v12 = v13;
              v15 = v4 + 6;
              v12 += 9;
              v16 = 32 * *((__int16 *)v15 - 3);
              v4 = v15 + 2;
              *(v12 - 8) = dword_43C410 + v16;
              *(v12 - 7) = v12 - 4;
              *(v12 - 4) = *((unsigned __int16 *)v4 - 3) << 8;
              *(v12 - 3) = 0;
              *(v12 - 2) = 0;
              --v14;
              *(v12 - 1) = *((unsigned __int16 *)v4 - 2) << 8;
              v17 = *((__int16 *)v4 - 1);
              *(v12 - 6) = *(_DWORD *)(dword_43C418 + 8 * v17);
              *(v12 - 5) = *(_DWORD *)(dword_43C418 + 8 * v17 + 4);
            }
            while ( v14 );
          }
          break;
        case 8:
        case 9:
        case 0xA:
        case 0xC:
        case 0xE:
        case 0x10:
          return 0;
        case 0xB:
          if ( *(v4 - 1) )
          {
            do
            {
              *v11++ = v12;
              *v12 = v13;
              v4 += 5;
              v21 = *(__int16 *)(v4 - 5);
              v22 = v12 + 8;
              *(v22 - 7) = *(_DWORD *)(dword_43C418 + 8 * v21);
              v12 = v22 + 1;
              *(v12 - 7) = *(_DWORD *)(dword_43C418 + 8 * v21 + 4);
              v23 = *(__int16 *)(v4 - 3);
              *(v12 - 5) = *(_DWORD *)(dword_43C418 + 8 * v23);
              *(v12 - 4) = *(_DWORD *)(dword_43C418 + 8 * v23 + 4);
              --v14;
              *(v12 - 2) = (unsigned __int8)*(v4 - 1);
              *(v12 - 1) = 0;
            }
            while ( v14 );
          }
          break;
        case 0xD:
          if ( *(v4 - 1) )
            v4 = &v4[8 * v14 - v14];
          break;
        case 0xF:
          if ( *(v4 - 1) )
          {
            do
            {
              *v11++ = v12;
              *v12 = v13;
              v4 += 7;
              v24 = *(__int16 *)(v4 - 7);
              v25 = v12 + 11;
              *(v25 - 10) = *(_DWORD *)(dword_43C418 + 8 * v24);
              v12 = v25 + 1;
              *(v12 - 10) = *(_DWORD *)(dword_43C418 + 8 * v24 + 4);
              v26 = *(__int16 *)(v4 - 5);
              *(v12 - 8) = *(_DWORD *)(dword_43C418 + 8 * v26);
              *(v12 - 7) = *(_DWORD *)(dword_43C418 + 8 * v26 + 4);
              v27 = *(__int16 *)(v4 - 3);
              *(v12 - 5) = *(_DWORD *)(dword_43C418 + 8 * v27);
              *(v12 - 4) = *(_DWORD *)(dword_43C418 + 8 * v27 + 4);
              --v14;
              *(v12 - 2) = (unsigned __int8)*(v4 - 1);
              *(v12 - 1) = 0;
            }
            while ( v14 );
          }
          break;
        case 0x11:
          if ( *(v4 - 1) )
          {
            do
            {
              *v11++ = v12;
              *v12 = v13;
              v4 += 8;
              v28 = *((__int16 *)v4 - 4);
              v29 = v12 + 8;
              *(v29 - 7) = *(_DWORD *)(dword_43C418 + 8 * v28);
              v12 = v29 + 1;
              *(v12 - 7) = *(_DWORD *)(dword_43C418 + 8 * v28 + 4);
              v30 = *((__int16 *)v4 - 3);
              *(v12 - 6) = *(_DWORD *)(dword_43C418 + 8 * v30);
              *(v12 - 5) = *(_DWORD *)(dword_43C418 + 8 * v30 + 4);
              v31 = *((__int16 *)v4 - 2);
              *(v12 - 4) = *(_DWORD *)(dword_43C418 + 8 * v31);
              *(v12 - 3) = *(_DWORD *)(dword_43C418 + 8 * v31 + 4);
              v32 = 28 * *((__int16 *)v4 - 1);
              --v14;
              *(v12 - 2) = v32 + dword_43C41C;
              *(v12 - 1) = *(_DWORD *)(dword_43C41C + v32 + 24);
            }
            while ( v14 );
          }
          break;
        case 0x12:
          if ( *(v4 - 1) )
          {
            do
            {
              *v11++ = v12;
              *v12 = v13;
              v4 += 9;
              v33 = *(__int16 *)(v4 - 9);
              v34 = v12 + 9;
              *(v34 - 8) = *(_DWORD *)(dword_43C418 + 8 * v33);
              v12 = v34 + 1;
              *(v12 - 8) = *(_DWORD *)(dword_43C418 + 8 * v33 + 4);
              v35 = *(__int16 *)(v4 - 7);
              *(v12 - 7) = *(_DWORD *)(dword_43C418 + 8 * v35);
              *(v12 - 6) = *(_DWORD *)(dword_43C418 + 8 * v35 + 4);
              v36 = *(__int16 *)(v4 - 5);
              *(v12 - 5) = *(_DWORD *)(dword_43C418 + 8 * v36);
              *(v12 - 4) = *(_DWORD *)(dword_43C418 + 8 * v36 + 4);
              v37 = 28 * *(__int16 *)(v4 - 3);
              *(v12 - 3) = v37 + dword_43C41C;
              *(v12 - 2) = *(_DWORD *)(dword_43C41C + v37 + 24);
              --v14;
              *(v12 - 1) = dword_43C420[(unsigned __int8)*(v4 - 1)];
            }
            while ( v14 );
          }
          break;
        case 0x13:
          if ( *(v4 - 1) )
          {
            do
            {
              *v11++ = v12;
              *v12 = v13;
              v4 += 8;
              v38 = *((__int16 *)v4 - 4);
              v39 = v12 + 8;
              *(v39 - 7) = *(_DWORD *)(dword_43C418 + 8 * v38);
              v12 = v39 + 1;
              *(v12 - 7) = *(_DWORD *)(dword_43C418 + 8 * v38 + 4);
              v40 = *((__int16 *)v4 - 3);
              *(v12 - 6) = *(_DWORD *)(dword_43C418 + 8 * v40);
              *(v12 - 5) = *(_DWORD *)(dword_43C418 + 8 * v40 + 4);
              v41 = *((__int16 *)v4 - 2);
              *(v12 - 4) = *(_DWORD *)(dword_43C418 + 8 * v41);
              *(v12 - 3) = *(_DWORD *)(dword_43C418 + 8 * v41 + 4);
              *(v12 - 2) = (unsigned __int8)*(v4 - 2);
              --v14;
              *(v12 - 1) = dword_43C420[(unsigned __int8)*(v4 - 1)];
            }
            while ( v14 );
          }
          break;
      }
      if ( *v4 == 0xFF )
        goto LABEL_36;
    }
  }
}
// 43C408: using guessed type int dword_43C408;
// 43C410: using guessed type int dword_43C410;
// 43C414: using guessed type int dword_43C414;
// 43C418: using guessed type int dword_43C418;
// 43C41C: using guessed type int dword_43C41C;
// 43C420: using guessed type int dword_43C420[16];
// 43C464: using guessed type int dword_43C464;

//----- (004023F0) --------------------------------------------------------
int sub_4023F0()
{
  sub_402540();
  sub_4025D0();
  sub_4027D0();
  sub_4011A0();
  return 1;
}

//----- (00402410) --------------------------------------------------------
int sub_402410()
{
  int v0; // ecx
  int v1; // eax
  int v2; // eax
  bool v3; // zf
  int v4; // eax

  sub_402E30();
  sub_4012A0();
  v0 = dword_41C548;
  if ( dword_41C548 )
    goto LABEL_6;
  dword_4528BC = dword_4529D0[dword_41C544];
  v1 = sub_402840(1.0);
  v0 = dword_41C548;
  if ( v1 == 1 )
    ++dword_41C544;
  if ( dword_41C544 != 3 )
  {
LABEL_6:
    v2 = dword_41C7B0;
  }
  else
  {
    v0 = dword_41C548 + 1;
    v2 = dword_41C7B0;
    dbl_452950 = (double)dword_41C7B0 * 0.02;
  }
  dword_41C548 = v0;
  if ( v0 == 1 || v0 == 2 )
  {
    dbl_452A08 = (double)v2 * 0.02 - dbl_452950;
    sub_402AA0((__int64)dbl_452A08);
    v0 = dword_41C548;
  }
  dword_41C548 = v0;
  if ( v0 == 3 || v0 == 4 )
  {
    dword_4528BC = dword_4529D0[dword_41C544];
    v3 = sub_402840(5.0) == 1;
    v4 = dword_41C544;
    if ( v3 )
      v4 = dword_41C544 + 1;
    dword_41C544 = v4;
    if ( v4 == 4 )
      dword_41C7A8 = 2;
  }
  return 0;
}
// 41C544: using guessed type int dword_41C544;
// 41C548: using guessed type int dword_41C548;
// 41C7A8: using guessed type int dword_41C7A8;
// 41C7B0: using guessed type int dword_41C7B0;
// 4528BC: using guessed type int dword_4528BC;
// 452950: using guessed type double dbl_452950;
// 4529D0: using guessed type int dword_4529D0[];
// 452A08: using guessed type double dbl_452A08;

//----- (00402520) --------------------------------------------------------
int sub_402520()
{
  sub_4013A0();
  sub_403820(dword_452960);
  return 0;
}

//----- (00402540) --------------------------------------------------------
void *sub_402540()
{
  void *result; // eax

  dword_452960 = sub_4035A0(0);
  dword_4528B0 = (int)sub_4037D0(dword_452960, 0x4B000u);
  dword_4529F8 = (int)sub_403630(dword_452960, 0x1DFFFFu);
  dword_45295C = (int)sub_403630(dword_452960, 0x2FFFFu);
  dword_452A00 = (int)sub_403630(dword_452960, 0x20000u);
  result = sub_403630(dword_452960, 0x20000u);
  dword_4528C0 = (int)result;
  return result;
}
// 4528B0: using guessed type int dword_4528B0;
// 4528C0: using guessed type int dword_4528C0;
// 45295C: using guessed type int dword_45295C;
// 4529F8: using guessed type int dword_4529F8;
// 452A00: using guessed type int dword_452A00;

//----- (004025D0) --------------------------------------------------------
int sub_4025D0()
{
  int v0; // esi
  char *v1; // edi
  char *v2; // ebx
  int v3; // eax
  signed int v4; // ebp
  int *v5; // eax
  unsigned int v6; // ebp
  int v7; // ebx
  _BYTE *v8; // esi
  int v9; // ecx
  int v10; // edx
  int v11; // eax
  int v12; // esi
  char v13; // bl
  int result; // eax
  int v15; // ecx
  char *v16; // [esp-Ch] [ebp-1Ch]

  v0 = 0;
  dword_4528B8 = (int)sub_4043A0(aDataIgnPfm);
  dword_4528C8 = (int)sub_4043A0(aDataIgnPsq);
  dword_4528B4 = (int)sub_4043A0(aDataIgnCol);
  dword_452948 = (int)sub_4043A0(aDataIgn0Pic);
  dword_4529D0[0] = (int)sub_4043A0(aDataIgn1Pic);
  dword_4529D4 = (int)sub_4043A0(aDataIgn2Pic);
  dword_4529D8 = (int)sub_4043A0(aDataIgn4Pic);
  dword_4529DC = (int)sub_4043A0(aDataIgn3Pic);
  dword_452A00 = (dword_452A00 + 0xFFFF) & 0xFFFF0000;
  v1 = aDataIgn1Tex;
  sub_404320(FileName, (void *)dword_452A00, 0x10000u, 0);
  v2 = (char *)((dword_4529F8 + 0xFFFF) & 0xFFFF0000);
  do
  {
    v3 = sub_4044D0(v1);
    v4 = v3;
    if ( v3 <= 0 )
      exit(0);
    if ( v3 > 0x100000 )
      v4 = 0x100000;
    sub_404320(v1, v2, v4, 0);
    if ( v4 > 0 )
    {
      v5 = &dword_4528D0[v0];
      v6 = (unsigned int)(v4 + 0xFFFF) >> 16;
      v0 += v6;
      do
      {
        *v5++ = (int)v2;
        v2 += 0x10000;
        --v6;
      }
      while ( v6 );
    }
    v1 += 50;
  }
  while ( v1 < aDataIgnShd );
  v7 = 0;
  dword_4528D0[v0] = 0;
  v16 = (char *)((dword_45295C + 0xFFFF) & 0xFFFF0000);
  dword_452970 = (int)v16;
  v8 = v16 + 0x10000;
  sub_404320(aDataIgnShd, v16, 0x10000u, 0);
  dword_452974 = (int)v8;
  do
    *v8++ = v7++;
  while ( v7 < 256 );
  v10 = 1;
  do
  {
    LOBYTE(v9) = v10;
    BYTE1(v9) = v10++;
    v11 = v9 << 16;
    LOWORD(v11) = v9;
    memset32(v8, v11, 0x40u);
    HIWORD(v9) = 0;
    v8 += 256;
  }
  while ( v10 < 256 );
  v12 = 0;
  v13 = 0;
  dword_452978 = 0;
  dword_4528C0 = (dword_4528C0 + 0xFFFF) & 0xFFFF0000;
  do
  {
    for ( result = 0; result < 256; ++result )
    {
      v15 = v12 + result;
      *(_BYTE *)(v15 + dword_4528C0) = v13;
    }
    v12 += 256;
    ++v13;
  }
  while ( v12 < 0x10000 );
  return result;
}
// 402767: variable 'v9' is possibly undefined
// 4528B4: using guessed type int dword_4528B4;
// 4528B8: using guessed type int dword_4528B8;
// 4528C0: using guessed type int dword_4528C0;
// 4528C8: using guessed type int dword_4528C8;
// 4528D0: using guessed type int dword_4528D0[30];
// 452948: using guessed type int dword_452948;
// 45295C: using guessed type int dword_45295C;
// 452970: using guessed type int dword_452970;
// 452974: using guessed type int dword_452974;
// 452978: using guessed type int dword_452978;
// 4529D0: using guessed type int dword_4529D0[];
// 4529D4: using guessed type int dword_4529D4;
// 4529D8: using guessed type int dword_4529D8;
// 4529DC: using guessed type int dword_4529DC;
// 4529F8: using guessed type int dword_4529F8;
// 452A00: using guessed type int dword_452A00;

//----- (004027D0) --------------------------------------------------------
int sub_4027D0()
{
  int result; // eax

  sub_4019D0((int *)dword_4528B8, (int)dword_4528D0, &dword_452970);
  sub_402F70(1);
  sub_4030C0(dword_4528B4 + 8, dbl_41C550);
  sub_402A80(dword_41C55C, dword_41C558, dword_41C558, dword_41C55C);
  result = sub_4044D0(aDataIgnPsq);
  dword_452958 = result;
  return result;
}
// 41C558: using guessed type int dword_41C558;
// 41C55C: using guessed type int dword_41C55C;
// 4528B4: using guessed type int dword_4528B4;
// 4528B8: using guessed type int dword_4528B8;
// 4528D0: using guessed type int dword_4528D0[30];
// 452958: using guessed type int dword_452958;
// 452970: using guessed type int dword_452970;

//----- (00402840) --------------------------------------------------------
int __cdecl sub_402840(double a1)
{
  int v1; // esi
  char v4; // c0

  if ( dword_4528C4 == dword_4528BC )
  {
    if ( dword_41C548 > 2 )
      goto LABEL_18;
    if ( dword_4529FC >= 10 && dword_4529FC < 40 && dbl_41C550 < 1.0 )
    {
      dbl_41C550 = dbl_41C550 + 0.1;
      sub_4030C0(dword_4528BC + 72, dbl_41C550);
    }
    if ( (double)dword_4529FC > a1 * 100.0 && dbl_41C550 > 0.0 )
    {
      dbl_41C550 = dbl_41C550 - 0.1;
      if ( v4 )
        dbl_41C550 = 0.0;
      sub_4030C0(dword_4528BC + 72, dbl_41C550);
    }
    if ( (double)dword_4529FC <= a1 * 120.0 )
    {
LABEL_18:
      if ( dword_41C548 == 3 && dbl_41C550 < 1.0 )
      {
        dbl_41C550 = dbl_41C550 + 0.1;
        sub_4030C0(dword_4528BC + 72, dbl_41C550);
      }
      if ( dword_41C548 != 4 )
        goto LABEL_25;
      if ( dbl_41C550 > 0.0 )
      {
        dbl_41C550 = dbl_41C550 - 0.1;
        sub_4030C0(dword_4528BC + 72, dbl_41C550);
      }
      if ( dbl_41C550 <= 0.0 )
      {
        return 1;
      }
      else
      {
LABEL_25:
        sub_404600(dword_4528B0, dword_41C558, 0, 0, dword_41C558, dword_41C55C, (int)&unk_43C7F8, 0, 0);
        operator delete(&unk_43C7F8);
        ++dword_4529FC;
        return 0;
      }
    }
    else
    {
      return 1;
    }
  }
  else
  {
    v1 = 0;
    dword_4528C4 = dword_4528BC;
    dword_4529FC = 0;
    dbl_41C550 = 0.0;
    sub_4030C0(dword_4528BC + 72, 0.0);
    do
    {
      ++v1;
      *(_BYTE *)(dword_4528B0 + v1 - 1) = *(_BYTE *)(dword_4528BC + v1 + 845);
    }
    while ( v1 < 307200 );
    return 0;
  }
}
// 402941: variable 'v4' is possibly undefined
// 41C548: using guessed type int dword_41C548;
// 41C558: using guessed type int dword_41C558;
// 41C55C: using guessed type int dword_41C55C;
// 4528B0: using guessed type int dword_4528B0;
// 4528BC: using guessed type int dword_4528BC;
// 4528C4: using guessed type int dword_4528C4;
// 4529FC: using guessed type int dword_4529FC;

//----- (00402A80) --------------------------------------------------------
int __fastcall sub_402A80(int a1, int a2, int a3, int a4)
{
  sub_40A4A0(a3, a2, a1, a4);
  return 1;
}

//----- (00402AA0) --------------------------------------------------------
int __cdecl sub_402AA0(int a1)
{
  _DWORD *v1; // eax
  int v2; // esi
  int v3; // eax

  if ( dword_41C548 == 1 && dbl_41C550 < 1.0 && dword_41C53C > 4 )
  {
    dbl_41C550 = dbl_41C550 + 0.1;
    sub_4030C0(dword_4528B4 + 8, dbl_41C550);
  }
  if ( dword_41C548 == 2 )
  {
    dbl_41C550 = dbl_41C550 - 0.1;
    sub_4030C0(dword_4528B4 + 8, dbl_41C550);
    if ( dbl_41C550 < 0.0 )
    {
      ++dword_41C548;
      dword_41C560 = 1;
      sub_402F70(1);
    }
  }
  v1 = (_DWORD *)(dword_4528C8 + 12 * dword_41C538);
  v2 = dword_41C53C + *v1;
  dword_41C53C = a1 - dword_41C540;
  v3 = v1[1];
  if ( a1 - dword_41C540 >= v3 )
  {
    dword_41C540 += v3;
    dword_41C53C = 0;
    if ( dword_452958 / 12 == ++dword_41C538 )
      dword_41C538 = 0;
  }
  dword_452980 = sub_401E30(v2, dword_41C560);
  dword_45298C = dword_4528C0;
  dword_452984 = dword_4528B0;
  dword_452988 = dword_4528B0;
  dword_452990 = 0;
  dword_452994 = 0;
  dword_452998 = dword_41C558 - 1;
  dword_45299C = dword_41C55C - 1;
  sub_402E10((int)&dword_452980);
  if ( dword_41C560 )
  {
    sub_402F00(0, 57, 40, 40, 0, 0, 320, dword_41C558, dword_452948 + 846);
    sub_402F00(40, 57, 40, 40, dword_41C558 - 40, 0, 320, dword_41C558, dword_452948 + 846);
    sub_402F00(0, 97, 40, 40, 0, dword_41C55C - 40, 320, dword_41C558, dword_452948 + 846);
    sub_402F00(40, 97, 40, 40, dword_41C558 - 40, dword_41C55C - 40, 320, dword_41C558, dword_452948 + 846);
  }
  else
  {
    sub_402F00(0, 0, 20, 20, 0, 0, 320, dword_41C558, dword_452948 + 846);
    sub_402F00(20, 0, 20, 20, dword_41C558 - 20, 0, 320, dword_41C558, dword_452948 + 846);
    sub_402F00(0, 20, 20, 20, 0, dword_41C55C - 20, 320, dword_41C558, dword_452948 + 846);
    sub_402F00(20, 20, 20, 20, dword_41C558 - 20, dword_41C55C - 20, 320, dword_41C558, dword_452948 + 846);
  }
  sub_402F00(40, 0, 173, 57, (dword_41C558 - 173) / 2, 2 * dword_41C55C / 200, 320, dword_41C558, dword_452948 + 846);
  sub_404600(dword_4528B0, dword_41C558, 0, 0, dword_41C558, dword_41C55C, (int)&unk_43C7F8, 0, 0);
  operator delete(&unk_43C7F8);
  return 0;
}
// 41C538: using guessed type int dword_41C538;
// 41C53C: using guessed type int dword_41C53C;
// 41C540: using guessed type int dword_41C540;
// 41C548: using guessed type int dword_41C548;
// 41C558: using guessed type int dword_41C558;
// 41C55C: using guessed type int dword_41C55C;
// 41C560: using guessed type int dword_41C560;
// 4528B0: using guessed type int dword_4528B0;
// 4528B4: using guessed type int dword_4528B4;
// 4528C0: using guessed type int dword_4528C0;
// 4528C8: using guessed type int dword_4528C8;
// 452948: using guessed type int dword_452948;
// 452958: using guessed type int dword_452958;
// 452980: using guessed type int dword_452980;
// 452984: using guessed type int dword_452984;
// 452988: using guessed type int dword_452988;
// 45298C: using guessed type int dword_45298C;
// 452990: using guessed type int dword_452990;
// 452994: using guessed type int dword_452994;
// 452998: using guessed type int dword_452998;
// 45299C: using guessed type int dword_45299C;

//----- (00402E10) --------------------------------------------------------
int __cdecl sub_402E10(int a1)
{
  return sub_40A519(a1);
}

//----- (00402E30) --------------------------------------------------------
void sub_402E30()
{
  int v0; // eax

  sub_404910();
  if ( sub_404A90(0x1Cu) == 1 || sub_404A90(0x39u) == 1 || sub_404A90(1u) == 1 )
  {
    v0 = dword_41C548;
    if ( dword_41C548 == 1 )
      v0 = 2;
    dword_41C548 = v0;
    if ( v0 == 3 )
      dword_41C548 = 4;
  }
  if ( sub_404A90(0x4Au) == 1 && dword_41C560 )
  {
    sub_402F70(0);
    sub_4030C0(dword_4528B4 + 8, 1.0);
  }
  if ( sub_404A90(0x4Eu) == 1 && dword_41C560 != 1 )
  {
    sub_402F70(1);
    sub_4030C0(dword_4528B4 + 8, 1.0);
  }
}
// 41C548: using guessed type int dword_41C548;
// 41C560: using guessed type int dword_41C560;
// 4528B4: using guessed type int dword_4528B4;

//----- (00402F00) --------------------------------------------------------
void __cdecl sub_402F00(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9)
{
  int v9; // ecx
  int v10; // esi
  int v11; // ebp
  int i; // edi
  int v13; // ebx
  int v14; // edx

  v9 = a1 + a2 * a7 + a9;
  v10 = dword_4528B0 + a5 + a6 * a8;
  v11 = a4;
  if ( a4 > 0 )
  {
    do
    {
      for ( i = 0; i < a3; *(_BYTE *)(v10 + i - 1) = *(_BYTE *)(v13 + v14 + dword_452A00) )
      {
        v13 = *(unsigned __int8 *)(v10 + i);
        v14 = *(unsigned __int8 *)(v9 + i++) << 8;
      }
      v9 += a7;
      v10 += a8;
      --v11;
    }
    while ( v11 );
  }
}
// 4528B0: using guessed type int dword_4528B0;
// 452A00: using guessed type int dword_452A00;

//----- (00402F70) --------------------------------------------------------
void __cdecl sub_402F70(int a1)
{
  int i; // eax

  dword_41C560 = a1;
  if ( !a1 )
  {
    dword_41C558 = 320;
    dword_41C55C = 200;
  }
  if ( a1 == 1 )
  {
    dword_41C558 = 640;
    dword_41C55C = 480;
  }
  sub_4030C0(dword_4528B4 + 8, 0.0);
  for ( i = 0; i < 307200; *(_BYTE *)(dword_4528B0 + i - 1) = 0 )
    ++i;
  sub_404600(dword_4528B0, dword_41C558, 0, 0, dword_41C558, dword_41C55C, (int)&unk_43C7F8, 0, 0);
  operator delete(&unk_43C7F8);
  sub_404600(dword_4528B0, dword_41C558, 0, 0, dword_41C558, dword_41C55C, (int)&unk_43C7F8, 0, 0);
  dword_41C870 = dword_41C558;
  dword_41C878 = 8;
  dword_41C87C = 1;
  dword_41C874 = dword_41C55C;
  sub_404660();
  sub_4046B0(dword_4528B0, dword_41C558, dword_41C558, dword_41C55C, 8);
  sub_402A80(dword_41C55C, dword_41C558, dword_41C558, dword_41C55C);
  sub_4030C0(dword_4528B4 + 8, 0.0);
}
// 404660: using guessed type int sub_404660(void);
// 41C558: using guessed type int dword_41C558;
// 41C55C: using guessed type int dword_41C55C;
// 41C560: using guessed type int dword_41C560;
// 41C870: using guessed type int dword_41C870;
// 41C874: using guessed type int dword_41C874;
// 41C878: using guessed type int dword_41C878;
// 41C87C: using guessed type int dword_41C87C;
// 4528B0: using guessed type int dword_4528B0;
// 4528B4: using guessed type int dword_4528B4;

//----- (004030C0) --------------------------------------------------------
void __cdecl sub_4030C0(int a1, double a2)
{
  int i; // edi
  unsigned __int8 v4; // c0
  unsigned __int8 v5; // c3
  double v6; // [esp+10h] [ebp-8h]

  for ( i = 0; i < 768; *((_BYTE *)&dword_43C464 + i + 3) = (__int64)v6 )
  {
    v6 = (double)*(unsigned __int8 *)(i + a1) * a2;
    if ( !(v4 | v5) )
      v6 = 255.0;
    if ( v6 < 0.0 )
      v6 = 0.0;
    ++i;
  }
  operator delete(&unk_43C468);
}
// 4030F1: variable 'v4' is possibly undefined
// 4030F1: variable 'v5' is possibly undefined
// 43C464: using guessed type int dword_43C464;

//----- (00403140) --------------------------------------------------------
int __stdcall WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nShowCmd)
{
  struct tagMSG Msg; // [esp+10h] [ebp-44h] BYREF
  WNDCLASSA WndClass; // [esp+2Ch] [ebp-28h] BYREF

  dword_43C7C0 = (int)&unk_41B1C0;
  ::hInstance = hInstance;
  hCursor = LoadCursorA(0, (LPCSTR)0x7F00);
  WndClass.cbClsExtra = 0;
  WndClass.cbWndExtra = 0;
  WndClass.hInstance = ::hInstance;
  WndClass.style = 8;
  WndClass.lpfnWndProc = (WNDPROC)sub_403340;
  WndClass.hIcon = LoadIconA(0, (LPCSTR)0x7F00);
  WndClass.hCursor = hCursor;
  WndClass.hbrBackground = (HBRUSH)GetStockObject(4);
  WndClass.lpszMenuName = 0;
  WndClass.lpszClassName = ClassName;
  if ( !RegisterClassA(&WndClass) )
    return 0;
  timeBeginPeriod(1u);
  sub_404B00();
  if ( !sub_403510() )
    return 0;
  while ( dword_43C7A4 )
  {
    if ( PeekMessageA(&Msg, 0, 0, 0, 0) )
    {
      if ( !GetMessageA(&Msg, 0, 0, 0) )
        return Msg.wParam;
LABEL_8:
      TranslateMessage(&Msg);
      DispatchMessageA(&Msg);
    }
    else if ( !sub_4032A0() )
    {
      sub_403540();
    }
  }
  if ( GetMessageA(&Msg, 0, 0, 0) )
    goto LABEL_8;
  return Msg.wParam;
}
// 403510: using guessed type int sub_403510(void);
// 43C7A4: using guessed type int dword_43C7A4;
// 43C7C0: using guessed type int dword_43C7C0;

//----- (004032A0) --------------------------------------------------------
int sub_4032A0()
{
  if ( !dword_41C7A8 && !dword_41C828 )
  {
    dword_41C828 = 1;
    dword_41C7B0 = sub_4034D0();
    sub_4023F0();
    dword_41C7A8 = 1;
    return 1;
  }
  if ( dword_41C7A8 != 1 || dword_41C82C )
  {
    if ( dword_41C7A8 != 2 || dword_41C82C )
      return 1;
    dword_41C7B0 = sub_4034D0();
    sub_402520();
    sub_404B30();
    timeEndPeriod(1u);
    dword_41C82C = 1;
    return 0;
  }
  else
  {
    dword_41C7B0 = sub_4034D0();
    sub_402410();
    return 1;
  }
}
// 41C7A8: using guessed type int dword_41C7A8;
// 41C7B0: using guessed type int dword_41C7B0;
// 41C828: using guessed type int dword_41C828;
// 41C82C: using guessed type int dword_41C82C;

//----- (00403340) --------------------------------------------------------
LRESULT __stdcall sub_403340(HWND hWnd, UINT Msg, int wParam, LPARAM lParam)
{
  int v5; // eax
  HWND v6; // edi
  int SystemMetrics; // [esp-4h] [ebp-10h]
  int v8; // [esp+0h] [ebp-Ch]
  int v9; // [esp+4h] [ebp-8h]

  if ( Msg <= 0x1C )
  {
    if ( Msg != 28 )
    {
      switch ( Msg )
      {
        case 1u:
          return 0;
        case 2u:
          if ( !dword_41C7A0 )
          {
            sub_403560();
            PostQuitMessage(0);
          }
          return 0;
        case 3u:
        case 5u:
          if ( dword_41C79C )
          {
            SystemMetrics = GetSystemMetrics(1);
            v5 = GetSystemMetrics(0);
            SetRect(&Point, 0, 0, v5, SystemMetrics);
            goto LABEL_23;
          }
          v6 = hWnd;
          GetClientRect(hWnd, &Point);
          ClientToScreen(hWnd, (LPPOINT)&Point);
          ClientToScreen(hWnd, (LPPOINT)&Point.right);
          break;
        default:
          goto LABEL_23;
      }
      return DefWindowProcA(v6, Msg, wParam, lParam);
    }
    dword_43C7A4 = wParam;
LABEL_23:
    v6 = hWnd;
    return DefWindowProcA(v6, Msg, wParam, lParam);
  }
  if ( Msg != 32 )
  {
    if ( Msg == 256 )
      return 0;
    if ( Msg == 261 && wParam == 13 && dword_43C7B0 == 1 )
    {
      dword_41C7A0 = 1;
      sub_404890();
      sub_404670();
      DestroyWindow(::hWnd);
      dword_41C79C = dword_41C79C == 0;
      sub_404640();
      sub_4046F0(v8, v9);
      dword_41C7A0 = 0;
    }
    goto LABEL_23;
  }
  if ( dword_41C79C )
    SetCursor(0);
  else
    SetCursor(hCursor);
  return 1;
}
// 40348D: variable 'v8' is possibly undefined
// 40348D: variable 'v9' is possibly undefined
// 41C79C: using guessed type int dword_41C79C;
// 41C7A0: using guessed type int dword_41C7A0;
// 43C7A4: using guessed type int dword_43C7A4;
// 43C7B0: using guessed type int dword_43C7B0;

//----- (004034D0) --------------------------------------------------------
int sub_4034D0()
{
  DWORD Time; // eax
  int v1; // edx

  Time = timeGetTime();
  v1 = dword_41C830;
  if ( !dword_41C830 )
    v1 = Time;
  dword_41C830 = v1;
  if ( dword_43C7A4 )
    dword_41C824 += Time - v1;
  dword_41C830 = Time;
  return dword_41C824;
}
// 41C824: using guessed type int dword_41C824;
// 41C830: using guessed type int dword_41C830;
// 43C7A4: using guessed type int dword_43C7A4;

//----- (00403510) --------------------------------------------------------
#error "403523: call analysis failed (funcsize=14)"

//----- (00403540) --------------------------------------------------------
BOOL sub_403540()
{
  return PostMessageA(hWnd, 0x10u, 0, 0);
}

//----- (00403560) --------------------------------------------------------
int sub_403560()
{
  sub_404670();
  return sub_404890();
}

//----- (00403570) --------------------------------------------------------
int sub_403570()
{
  memset(dword_4530D0, 0, sizeof(dword_4530D0));
  sub_4035A0(aDefault);
  return 1;
}
// 4530D0: using guessed type int dword_4530D0[256];

//----- (004035A0) --------------------------------------------------------
int __cdecl sub_4035A0(_BYTE *a1)
{
  int *v1; // eax
  int v2; // esi
  _BYTE *v4; // eax
  int v5; // edi

  v1 = dword_4530D0;
  v2 = 0;
  do
  {
    if ( !*v1 )
      break;
    ++v1;
    ++v2;
  }
  while ( v1 < &dword_4534D0 );
  if ( v2 == 256 )
    return -1;
  v4 = malloc(0x140u);
  if ( !v4 )
    return -1;
  dword_4530D0[v2] = (int)v4;
  if ( a1 )
  {
    v5 = 0;
    if ( *a1 )
    {
      do
      {
        if ( v5 >= 63 )
          break;
        v4[v5] = a1[v5];
        ++v5;
      }
      while ( a1[v5] );
    }
    v4[v5] = 0;
  }
  else
  {
    *v4 = 0;
  }
  memset(v4 + 64, 0, 0x100u);
  return v2;
}
// 4530D0: using guessed type int dword_4530D0[256];
// 4534D0: using guessed type int dword_4534D0;

//----- (00403630) --------------------------------------------------------
void *__cdecl sub_403630(int a1, size_t Size)
{
  _DWORD *v2; // ecx
  int v3; // edi
  bool v4; // zf
  int v5; // ebx
  _DWORD *v6; // edx
  bool v7; // zf
  int v8; // esi
  int v9; // ebp
  _DWORD *v10; // eax
  bool v11; // zf
  void *result; // eax
  _DWORD *v13; // ecx
  _DWORD *v14; // eax
  _DWORD *v15; // esi
  _DWORD *v16; // ecx
  int v17; // eax
  _DWORD *v18; // eax
  _DWORD *v19; // esi
  _DWORD *v20; // ebx
  int v21; // eax
  _DWORD *v22; // ecx
  _DWORD *v23; // [esp+10h] [ebp-8h]
  int v24; // [esp+14h] [ebp-4h]

  v24 = dword_4530D0[a1];
  v2 = (_DWORD *)(v24 + 64);
  v3 = 0;
  if ( *(_DWORD *)(v24 + 64) )
  {
    while ( 1 )
    {
      v4 = v3 == 64;
      if ( v3 >= 64 )
        break;
      v5 = 0;
      v23 = (_DWORD *)*v2;
      if ( *(_DWORD *)*v2 )
      {
        v6 = (_DWORD *)*v2;
        while ( 1 )
        {
          v7 = v5 == 64;
          if ( v5 >= 64 )
            break;
          v8 = *v6;
          v9 = 0;
          v10 = (_DWORD *)(*v6 + 4);
          if ( *v10 )
          {
            while ( 1 )
            {
              v11 = v9 == 16;
              if ( v9 >= 16 )
                break;
              v10 += 2;
              ++v9;
              if ( !*v10 )
                goto LABEL_9;
            }
          }
          else
          {
LABEL_9:
            v11 = v9 == 16;
          }
          if ( !v11 )
          {
            result = malloc(Size);
            if ( !result )
              return 0;
            v13 = (_DWORD *)(v8 + 8 * v9);
            *v13 = result;
            v13[1] = Size;
            return result;
          }
          ++v6;
          ++v5;
          if ( !*v6 )
            goto LABEL_12;
        }
      }
      else
      {
LABEL_12:
        v7 = v5 == 64;
      }
      if ( !v7 )
      {
        v14 = malloc(0x80u);
        v15 = v14;
        if ( !v14 )
          return 0;
        v16 = v14 + 3;
        v23[v5] = v14;
        v17 = 15;
        do
        {
          *v16 = 0;
          v16 += 2;
          --v17;
        }
        while ( v17 );
        result = malloc(Size);
        if ( !result )
          return 0;
        *v15 = result;
        v15[1] = Size;
        return result;
      }
      ++v2;
      ++v3;
      if ( !*v2 )
        goto LABEL_15;
    }
  }
  else
  {
LABEL_15:
    v4 = v3 == 64;
  }
  if ( v4 )
    return 0;
  v18 = malloc(0x100u);
  v19 = v18;
  if ( !v18 )
    return 0;
  *(_DWORD *)(v24 + 4 * v3 + 64) = v18;
  memset(v18, 0, 0x100u);
  v20 = malloc(0x80u);
  if ( !v20 )
    return 0;
  v21 = 16;
  *v19 = v20;
  v22 = v20 + 1;
  do
  {
    *v22 = 0;
    v22 += 2;
    --v21;
  }
  while ( v21 );
  result = malloc(Size);
  if ( !result )
    return 0;
  *v20 = result;
  v20[1] = Size;
  return result;
}
// 4530D0: using guessed type int dword_4530D0[256];

//----- (004037D0) --------------------------------------------------------
void *__cdecl sub_4037D0(int a1, size_t Size)
{
  void *v8; // [esp+4h] [ebp-4h]

  v8 = sub_403630(a1, Size);
  _CF = 0;
  _OF = 0;
  _ZF = v8 == 0;
  _SF = (int)v8 < 0;
  if ( v8 )
  {
    __asm { pushfw }
    memset(v8, 0, Size);
    __asm { popfw }
  }
  return v8;
}

//----- (00403820) --------------------------------------------------------
int __cdecl sub_403820(int a1)
{
  void **v1; // ebp
  _DWORD *v2; // ebx
  _DWORD *v3; // edi
  int v4; // esi
  void **Block; // [esp+10h] [ebp-14h]
  void ***v7; // [esp+14h] [ebp-10h]
  void ***v8; // [esp+18h] [ebp-Ch]
  int v9; // [esp+1Ch] [ebp-8h]
  int v10; // [esp+20h] [ebp-4h]

  v8 = (void ***)dword_4530D0[a1];
  v7 = v8 + 16;
  v10 = 64;
  do
  {
    if ( *v7 )
    {
      v1 = *v7;
      Block = *v7;
      v9 = 64;
      do
      {
        v2 = *v1;
        if ( *v1 )
        {
          v3 = v2 + 1;
          v4 = 16;
          do
          {
            if ( *v3 )
              free((void *)*(v3 - 1));
            v3 += 2;
            --v4;
          }
          while ( v4 );
          free(v2);
        }
        ++v1;
        --v9;
      }
      while ( v9 );
      free(Block);
    }
    ++v7;
    --v10;
  }
  while ( v10 );
  free(v8);
  dword_4530D0[a1] = 0;
  return 1;
}
// 4530D0: using guessed type int dword_4530D0[256];

//----- (004038E0) --------------------------------------------------------
int sub_4038E0()
{
  int i; // esi

  for ( i = 0; i < 256; ++i )
  {
    if ( dword_4530D0[i] )
      sub_403820(i);
  }
  return 1;
}
// 4530D0: using guessed type int dword_4530D0[256];

//----- (00403910) --------------------------------------------------------
int *sub_403910()
{
  if ( dword_41C848 != 1 )
    return 0;
  if ( dword_43C7D8 == 1 )
  {
    if ( !dword_41C844 )
    {
      (*(void (__stdcall **)(int, _DWORD, _DWORD, int))(*(_DWORD *)dword_4530C0 + 48))(dword_4530C0, 0, 0, 1);
      dword_41C844 = 1;
    }
    (*(void (__stdcall **)(int, int *, int *))(*(_DWORD *)dword_4530C0 + 16))(
      dword_4530C0,
      &dword_43C7E4,
      &dword_43C7CC);
    dword_43C7CC = dword_43C7C4 + dword_43C7E4;
    if ( dword_43C7C4 + dword_43C7E4 >= dword_43C7F4 )
      dword_43C7CC -= dword_43C7F4;
    dword_43C7C8 = dword_43C7F0 * dword_45308C + dword_43C7CC;
    if ( dword_43C7F4 > dword_43C7C8 )
    {
      if ( dword_43C7E0 < dword_43C7C8 && dword_43C7CC <= dword_43C7E0 )
        return 0;
    }
    else
    {
      dword_43C7C8 -= dword_43C7F4;
      if ( dword_43C7E0 < dword_43C7C8 || dword_43C7CC <= dword_43C7E0 )
        return 0;
    }
    dword_43C7DC = (*(int (__stdcall **)(int, int, int, int *, int *, int *, int *, _DWORD))(*(_DWORD *)dword_4530C0 + 44))(
                     dword_4530C0,
                     dword_43C7E0,
                     dword_43C7F0 * dword_45308C,
                     &dword_43C7D0,
                     &dword_43C7E8,
                     &dword_43C7D4,
                     &dword_43C7EC,
                     0);
    if ( dword_43C7DC == -2005401450 )
    {
      (*(void (__stdcall **)(int))(*(_DWORD *)dword_4530C0 + 80))(dword_4530C0);
      (*(void (__stdcall **)(int, _DWORD, _DWORD, int))(*(_DWORD *)dword_4530C0 + 48))(dword_4530C0, 0, 0, 1);
      return 0;
    }
    else if ( dword_43C7DC )
    {
      return 0;
    }
    else
    {
      dword_4530B0 = dword_43C7D0;
      dword_4530B4 = dword_43C7D4;
      dword_4530B8 = dword_43C7E8 / (unsigned int)dword_43C7F0;
      dword_4530BC = dword_43C7EC / (unsigned int)dword_43C7F0;
      return &dword_4530B0;
    }
  }
  else
  {
    if ( !dword_41C844 )
    {
      (*(void (__stdcall **)(int, _DWORD, _DWORD, int))(*(_DWORD *)dword_4530A0 + 48))(dword_4530A0, 0, 0, 1);
      dword_41C844 = 1;
    }
    (*(void (__stdcall **)(int, int *, int *))(*(_DWORD *)dword_4530A0 + 16))(
      dword_4530A0,
      &dword_43C7E4,
      &dword_43C7CC);
    dword_43C7CC = dword_43C7C4 + dword_43C7E4;
    if ( dword_43C7C4 + dword_43C7E4 >= dword_43C7F4 )
      dword_43C7CC -= dword_43C7F4;
    dword_43C7C8 = dword_43C7F0 * dword_45308C + dword_43C7CC;
    if ( dword_43C7F4 > dword_43C7C8 )
    {
      if ( dword_43C7E0 < dword_43C7C8 && dword_43C7CC <= dword_43C7E0 )
        return 0;
    }
    else
    {
      dword_43C7C8 -= dword_43C7F4;
      if ( dword_43C7E0 < dword_43C7C8 || dword_43C7CC <= dword_43C7E0 )
        return 0;
    }
    dword_43C7DC = (*(int (__stdcall **)(int, int, int, int *, int *, int *, int *, _DWORD))(*(_DWORD *)dword_4530A0 + 44))(
                     dword_4530A0,
                     dword_43C7E0,
                     dword_43C7F0 * dword_45308C,
                     &dword_43C7D0,
                     &dword_43C7E8,
                     &dword_43C7D4,
                     &dword_43C7EC,
                     0);
    if ( dword_43C7DC == -2005401450 )
    {
      (*(void (__stdcall **)(int))(*(_DWORD *)dword_4530A0 + 80))(dword_4530A0);
      (*(void (__stdcall **)(int, _DWORD, _DWORD, int))(*(_DWORD *)dword_4530A0 + 48))(dword_4530A0, 0, 0, 1);
      return 0;
    }
    else if ( dword_43C7DC )
    {
      return 0;
    }
    else
    {
      dword_4530B0 = dword_43C7D0;
      dword_4530B4 = dword_43C7D4;
      dword_4530B8 = dword_43C7E8 / (unsigned int)dword_43C7F0;
      dword_4530BC = dword_43C7EC / (unsigned int)dword_43C7F0;
      return &dword_4530B0;
    }
  }
}
// 41C844: using guessed type int dword_41C844;
// 41C848: using guessed type int dword_41C848;
// 43C7C4: using guessed type int dword_43C7C4;
// 43C7C8: using guessed type int dword_43C7C8;
// 43C7CC: using guessed type int dword_43C7CC;
// 43C7D0: using guessed type int dword_43C7D0;
// 43C7D4: using guessed type int dword_43C7D4;
// 43C7D8: using guessed type int dword_43C7D8;
// 43C7DC: using guessed type int dword_43C7DC;
// 43C7E0: using guessed type int dword_43C7E0;
// 43C7E4: using guessed type int dword_43C7E4;
// 43C7E8: using guessed type int dword_43C7E8;
// 43C7EC: using guessed type int dword_43C7EC;
// 43C7F0: using guessed type int dword_43C7F0;
// 43C7F4: using guessed type int dword_43C7F4;
// 45308C: using guessed type int dword_45308C;
// 4530A0: using guessed type int dword_4530A0;
// 4530B0: using guessed type int dword_4530B0;
// 4530B4: using guessed type int dword_4530B4;
// 4530B8: using guessed type int dword_4530B8;
// 4530BC: using guessed type int dword_4530BC;
// 4530C0: using guessed type int dword_4530C0;

//----- (00403BF0) --------------------------------------------------------
int sub_403BF0()
{
  if ( dword_41C848 != 1 )
    return 0;
  if ( dword_43C7D8 == 1 )
  {
    (*(void (__stdcall **)(int, int, int, int, int))(*(_DWORD *)dword_4530C0 + 76))(
      dword_4530C0,
      dword_43C7D0,
      dword_43C7E8,
      dword_43C7D4,
      dword_43C7EC);
    for ( dword_43C7E0 += dword_43C7F0 * dword_45308C; dword_43C7F4 <= dword_43C7E0; dword_43C7E0 -= dword_43C7F4 )
      ;
    return 0;
  }
  else
  {
    (*(void (__stdcall **)(int, int, int, int, int))(*(_DWORD *)dword_4530A0 + 76))(
      dword_4530A0,
      dword_43C7D0,
      dword_43C7E8,
      dword_43C7D4,
      dword_43C7EC);
    for ( dword_43C7E0 += dword_43C7F0 * dword_45308C; dword_43C7F4 <= dword_43C7E0; dword_43C7E0 -= dword_43C7F4 )
      ;
    return 0;
  }
}
// 41C848: using guessed type int dword_41C848;
// 43C7D0: using guessed type int dword_43C7D0;
// 43C7D4: using guessed type int dword_43C7D4;
// 43C7D8: using guessed type int dword_43C7D8;
// 43C7E0: using guessed type int dword_43C7E0;
// 43C7E8: using guessed type int dword_43C7E8;
// 43C7EC: using guessed type int dword_43C7EC;
// 43C7F0: using guessed type int dword_43C7F0;
// 43C7F4: using guessed type int dword_43C7F4;
// 45308C: using guessed type int dword_45308C;
// 4530A0: using guessed type int dword_4530A0;
// 4530C0: using guessed type int dword_4530C0;

//----- (00403CB0) --------------------------------------------------------
int sub_403CB0()
{
  if ( dword_41C848 != 1 )
    return 0;
  dword_41C848 = 0;
  if ( ppDS )
  {
    if ( dword_4530A0 )
    {
      (*(void (__stdcall **)(int))(*(_DWORD *)dword_4530A0 + 8))(dword_4530A0);
      dword_4530A0 = 0;
    }
    if ( dword_4530C0 )
    {
      (*(void (__stdcall **)(int))(*(_DWORD *)dword_4530C0 + 8))(dword_4530C0);
      dword_4530C0 = 0;
    }
    ppDS->lpVtbl->Release(ppDS);
    ppDS = 0;
  }
  return 0;
}
// 41C848: using guessed type int dword_41C848;
// 4530A0: using guessed type int dword_4530A0;
// 4530C0: using guessed type int dword_4530C0;

//----- (00403D20) --------------------------------------------------------
int sub_403D20()
{
  int i; // edi
  __int16 v1; // cx
  int v2; // esi
  unsigned int v3; // ebp
  int v4; // eax
  int v5; // ebx
  int v6; // ecx
  int v7; // eax
  int j; // ebx
  int v10; // edi
  int v11; // ebp
  unsigned int v12; // ecx
  unsigned int v13; // esi
  int v14; // ecx
  int v15; // eax
  int v16; // esi
  __int16 v17; // [esp+40h] [ebp-E8h] BYREF
  __int16 v18; // [esp+42h] [ebp-E6h]
  unsigned int v19; // [esp+44h] [ebp-E4h]
  int v20; // [esp+48h] [ebp-E0h]
  unsigned __int16 v21; // [esp+4Ch] [ebp-DCh]
  __int16 v22; // [esp+4Eh] [ebp-DAh]
  unsigned int v23; // [esp+50h] [ebp-D8h]
  int v24; // [esp+54h] [ebp-D4h]
  int v25; // [esp+58h] [ebp-D0h] BYREF
  int v26; // [esp+5Ch] [ebp-CCh]
  int v27; // [esp+60h] [ebp-C8h]
  int v28; // [esp+64h] [ebp-C4h]
  __int16 *v29; // [esp+68h] [ebp-C0h]
  _DWORD v30[6]; // [esp+6Ch] [ebp-BCh]
  _DWORD v31[6]; // [esp+84h] [ebp-A4h]
  _DWORD v32[6]; // [esp+9Ch] [ebp-8Ch]
  _DWORD v33[2]; // [esp+B4h] [ebp-74h] BYREF
  int v34; // [esp+BCh] [ebp-6Ch]
  _DWORD v35[24]; // [esp+C8h] [ebp-60h] BYREF

  v30[1] = 2;
  v30[4] = 2;
  v30[5] = 2;
  v31[0] = 22050;
  v31[1] = 22050;
  v31[3] = 22050;
  v31[2] = 44100;
  v31[4] = 22050;
  v31[5] = 44100;
  v32[0] = 16;
  v32[1] = 16;
  v30[0] = 1;
  v30[2] = 1;
  v30[3] = 1;
  v32[2] = 16;
  v32[3] = 8;
  v32[4] = 8;
  v32[5] = 8;
  if ( dword_41C848 == 1 )
    return 0;
  dword_453094 = 4;
  dword_4530C0 = 0;
  dword_4530A0 = 0;
  dword_43C7D8 = 0;
  dword_41C848 = 0;
  if ( DirectSoundCreate(0, &ppDS, 0) )
    return 0;
  if ( ppDS->lpVtbl->SetCooperativeLevel(ppDS, (HWND)dword_41C7AC, 4) )
  {
    if ( !ppDS->lpVtbl->SetCooperativeLevel(ppDS, (HWND)dword_41C7AC, 3) )
    {
      v28 = 0;
      v25 = 20;
      v26 = 1;
      v27 = 0;
      v29 = 0;
      if ( !ppDS->lpVtbl->CreateSoundBuffer(ppDS, (LPCDSBUFFERDESC)&v25, (LPDIRECTSOUNDBUFFER *)&dword_4530C0, 0) )
      {
        for ( i = 0; i < 6; ++i )
        {
          v1 = v30[i];
          v2 = v32[i];
          v3 = v31[i];
          v17 = 0;
          v19 = 0;
          v20 = 0;
          v21 = 0;
          v18 = v1;
          v22 = v2;
          v4 = v30[i] * v2;
          v17 = 1;
          v19 = v3;
          LOWORD(v24) = v4 / 8;
          v21 = v24;
          dword_43C7F0 = (unsigned __int16)v24;
          v5 = v3 * (unsigned __int16)v24;
          v23 = v3 / 0x64;
          v20 = v5;
          v6 = (*(int (__stdcall **)(int, __int16 *))(*(_DWORD *)dword_4530C0 + 56))(dword_4530C0, &v17);
          dword_453080 = v3;
          v7 = v30[i];
          dword_453084 = v2;
          dword_453088 = v7 - 1;
          dword_453090 = v2 / 8 - 1;
          if ( !v6 )
          {
            v18 = v30[i];
            v21 = v24;
            v22 = v2;
            v19 = v3;
            v20 = v5;
            dword_43C7F4 = v5;
            v28 = 0;
            v27 = v5;
            v29 = &v17;
            v25 = 20;
            v26 = 232;
            v17 = 1;
            v6 = ppDS->lpVtbl->CreateSoundBuffer(ppDS, (LPCDSBUFFERDESC)&v25, (LPDIRECTSOUNDBUFFER *)&dword_4530A0, 0);
            if ( v6 )
              return 0;
            i = 6;
          }
        }
        if ( !v6 )
        {
          dword_45308C = v23;
          v33[0] = 20;
          if ( !(*(int (__stdcall **)(int, _DWORD *))(*(_DWORD *)dword_4530A0 + 12))(dword_4530A0, v33) )
          {
            dword_43C7F4 = v34;
            dword_43C7C4 = dword_43C7F0 * v23 * (dword_453098 + 27);
            memset(v35, 0, sizeof(v35));
            v35[0] = 96;
            if ( !ppDS->lpVtbl->GetCaps(ppDS, (LPDSCAPS)v35) && (v35[1] & 0x20) == 0 )
              dword_43C7C4 = dword_43C7F0 * v23 * (dword_453098 + 2);
            if ( (int)(dword_43C7F4 - dword_43C7F0 * v23) < dword_43C7C4 )
              dword_43C7C4 = dword_43C7F4 - dword_43C7F0 * v23;
            dword_43C7E0 = 0;
            (*(void (__stdcall **)(int, _DWORD, _DWORD, int))(*(_DWORD *)dword_4530C0 + 48))(dword_4530C0, 0, 0, 1);
            (*(void (__stdcall **)(int, _DWORD, _DWORD, int))(*(_DWORD *)dword_4530A0 + 48))(dword_4530A0, 0, 0, 1);
            dword_41C844 = 1;
            dword_41C848 = 1;
            return 1;
          }
        }
      }
    }
    return 0;
  }
  dword_43C7D8 = 1;
  v28 = 0;
  v25 = 20;
  v26 = 1;
  v27 = 0;
  v29 = 0;
  if ( ppDS->lpVtbl->CreateSoundBuffer(ppDS, (LPCDSBUFFERDESC)&v25, (LPDIRECTSOUNDBUFFER *)&dword_4530C0, 0) )
    return 0;
  for ( j = 0; j < 6; ++j )
  {
    v10 = v30[j];
    v11 = v32[j];
    v12 = v31[j];
    v18 = v10;
    v22 = v11;
    v19 = v12;
    v17 = 1;
    v21 = v10 * v11 / 8;
    v13 = v12 / 0x64;
    dword_43C7F0 = v21;
    v20 = v21 * v12;
    v14 = (*(int (__stdcall **)(int, __int16 *))(*(_DWORD *)dword_4530C0 + 56))(dword_4530C0, &v17);
    dword_453080 = v31[j];
    dword_453088 = v10 - 1;
    dword_453084 = v11;
    dword_453090 = v11 / 8 - 1;
    if ( !v14 )
      j = 6;
  }
  if ( v14 )
    return 0;
  v33[0] = 20;
  if ( (*(int (__stdcall **)(int, _DWORD *))(*(_DWORD *)dword_4530C0 + 12))(dword_4530C0, v33) )
    return 0;
  dword_45308C = v13;
  dword_43C7F4 = v34;
  v15 = dword_43C7F0 * v13 * dword_453098;
  v16 = dword_43C7F0 * v13;
  dword_43C7C4 = v15;
  if ( v34 - v16 < v15 )
    dword_43C7C4 = v34 - v16;
  dword_43C7E0 = 0;
  (*(void (__stdcall **)(int, _DWORD, _DWORD, int))(*(_DWORD *)dword_4530C0 + 48))(dword_4530C0, 0, 0, 1);
  dword_41C844 = 1;
  dword_41C848 = 1;
  return 1;
}
// 41C7AC: using guessed type int dword_41C7AC;
// 41C844: using guessed type int dword_41C844;
// 41C848: using guessed type int dword_41C848;
// 43C7C4: using guessed type int dword_43C7C4;
// 43C7D8: using guessed type int dword_43C7D8;
// 43C7E0: using guessed type int dword_43C7E0;
// 43C7F0: using guessed type int dword_43C7F0;
// 43C7F4: using guessed type int dword_43C7F4;
// 453080: using guessed type int dword_453080;
// 453084: using guessed type int dword_453084;
// 453088: using guessed type int dword_453088;
// 45308C: using guessed type int dword_45308C;
// 453090: using guessed type int dword_453090;
// 453094: using guessed type int dword_453094;
// 453098: using guessed type int dword_453098;
// 4530A0: using guessed type int dword_4530A0;
// 4530C0: using guessed type int dword_4530C0;

//----- (00404320) --------------------------------------------------------
int __cdecl sub_404320(char *FileName, void *Buffer, size_t ElementCount, int a4)
{
  FILE *v4; // edi
  fpos_t Position; // [esp+8h] [ebp-8h] BYREF

  v4 = fopen(FileName, Mode);
  if ( !v4 )
    return 2000;
  Position = a4;
  fsetpos(v4, &Position);
  if ( ElementCount != fread(Buffer, 1u, ElementCount, v4) )
    return 2010;
  fclose(v4);
  return 1;
}

//----- (004043A0) --------------------------------------------------------
void *__cdecl sub_4043A0(char *FileName)
{
  size_t v2; // eax
  size_t v3; // edi
  void *v4; // ebx
  FILE *v5; // esi
  fpos_t Position; // [esp+Ch] [ebp-8h] BYREF

  if ( sub_404500(FileName) == 1 )
  {
    v2 = sub_4044D0(FileName);
    v3 = v2;
    if ( v2 )
    {
      v4 = sub_403630(0, v2);
      if ( v4 )
      {
        v5 = fopen(FileName, Mode);
        if ( v5 )
        {
          Position = 0;
          fsetpos(v5, &Position);
          if ( v3 == fread(v4, 1u, v3, v5) )
          {
            fclose(v5);
            return v4;
          }
          else
          {
            dword_41C90C = 2010;
            return 0;
          }
        }
        else
        {
          dword_41C90C = 2000;
          return 0;
        }
      }
      else
      {
        dword_41C90C = 2050;
        return 0;
      }
    }
    else
    {
      dword_41C90C = 2040;
      return 0;
    }
  }
  else
  {
    dword_41C90C = 2030;
    return 0;
  }
}
// 41C90C: using guessed type int dword_41C90C;

//----- (00404490) --------------------------------------------------------
int __cdecl sub_404490(FILE *Stream)
{
  int v1; // edi
  int v2; // ebx

  v1 = ftell(Stream);
  fseek(Stream, 0, 2);
  v2 = ftell(Stream);
  fseek(Stream, v1, 0);
  return v2;
}

//----- (004044D0) --------------------------------------------------------
int __cdecl sub_4044D0(char *FileName)
{
  FILE *v1; // esi
  int v2; // edi

  v1 = fopen(FileName, aR);
  v2 = sub_404490(v1);
  fclose(v1);
  return v2;
}

//----- (00404500) --------------------------------------------------------
int __cdecl sub_404500(char *FileName)
{
  FILE *v1; // eax

  v1 = fopen(FileName, aR);
  if ( !v1 )
    return 2031;
  fclose(v1);
  return 1;
}

//----- (00404530) --------------------------------------------------------
int sub_404530()
{
  int *v0; // eax
  int *v1; // eax
  int *v2; // eax

  v0 = &dword_43C8E8;
  do
  {
    *v0 = 0;
    v0 += 12;
    *(v0 - 11) = 0;
    *(v0 - 10) = 0;
    *(v0 - 9) = 0;
    *(v0 - 8) = 0;
    *(v0 - 7) = 0;
    *(v0 - 6) = 0;
    *(v0 - 5) = 0;
    *(v0 - 4) = 0;
    *(v0 - 3) = 0;
    *(v0 - 2) = 0;
    *(v0 - 1) = 0;
  }
  while ( v0 < dword_43C918 );
  v1 = (int *)&unk_43C7F8;
  do
  {
    *v1 = 0;
    v1 += 12;
    *(v1 - 11) = 0;
    *(v1 - 10) = 0;
    *(v1 - 9) = 0;
    *(v1 - 8) = 0;
    *(v1 - 7) = 0;
    *(v1 - 6) = 0;
    *(v1 - 5) = 0;
    *(v1 - 4) = 0;
    *(v1 - 3) = 0;
    *(v1 - 2) = 1;
    *(v1 - 1) = 0;
  }
  while ( v1 < &dword_43C8E8 );
  v2 = dword_43C918;
  do
  {
    *v2 = 0;
    v2 += 12;
    *(v2 - 11) = 0;
    *(v2 - 10) = 0;
    *(v2 - 9) = 0;
    *(v2 - 8) = 0;
    *(v2 - 7) = 0;
    *(v2 - 6) = 0;
    *(v2 - 5) = 0;
    *(v2 - 4) = 0;
    *(v2 - 3) = 0;
    *(v2 - 2) = 2;
    *(v2 - 1) = 0;
  }
  while ( v2 < &dword_43CCD8 );
  return 1;
}
// 43C8E8: using guessed type int dword_43C8E8;
// 43C918: using guessed type int dword_43C918[11];
// 43CCD8: using guessed type int dword_43CCD8;

//----- (004045E0) --------------------------------------------------------
int __cdecl sub_4045E0(int a1)
{
  if ( a1 )
    return 2;
  _cfltcvt_init_0();
  _cfltcvt_init();
  return 1;
}
// 404C60: using guessed type int _cfltcvt_init(void);
// 405220: using guessed type int _cfltcvt_init_0(void);

//----- (00404600) --------------------------------------------------------
int __cdecl sub_404600(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9)
{
  return dword_43CCF0(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}
// 43CCF0: using guessed type int (__cdecl *dword_43CCF0)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (00404640) --------------------------------------------------------
int sub_404640()
{
  if ( dword_43CCDC() )
    return dword_43CD10();
  else
    return 0;
}
// 43CCDC: using guessed type int (*dword_43CCDC)(void);
// 43CD10: using guessed type int (*dword_43CD10)(void);

//----- (00404670) --------------------------------------------------------
int sub_404670()
{
  if ( dword_43CCE4() )
    return dword_43CD14();
  else
    return 0;
}
// 43CCE4: using guessed type int (*dword_43CCE4)(void);
// 43CD14: using guessed type int (*dword_43CD14)(void);

//----- (004046B0) --------------------------------------------------------
int __cdecl sub_4046B0(int a1, int a2, int a3, int a4, int a5)
{
  return dword_43CD20(a1, a2, a3, a4, a5);
}
// 43CD20: using guessed type int (__cdecl *dword_43CD20)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (004046E0) --------------------------------------------------------
int sub_4046E0()
{
  dword_43CD64 = 0;
  dword_43D5C8 = 0;
  return 0;
}
// 43CD64: using guessed type int (__cdecl *dword_43CD64)(_DWORD, _DWORD);
// 43D5C8: using guessed type int dword_43D5C8;

//----- (004046F0) --------------------------------------------------------
int __cdecl sub_4046F0(int a1, int a2)
{
  int v3; // edx
  _DWORD v4[5]; // [esp+24h] [ebp-24h] BYREF
  _DWORD v5[4]; // [esp+38h] [ebp-10h] BYREF

  v5[0] = 1864182625;
  v4[0] = 20;
  v4[1] = 16;
  v5[1] = unk_41B1B4;
  v5[2] = unk_41B1B8;
  v5[3] = unk_41B1BC;
  v4[2] = 0;
  v4[3] = 0;
  v4[4] = 32;
  if ( DirectInputCreateA(hInstance, 768, &dword_43CEB0, 0) )
    return 0;
  if ( (*(int (__stdcall **)(int, _DWORD *, int *, _DWORD))(*(_DWORD *)dword_43CEB0 + 12))(
         dword_43CEB0,
         v5,
         &dword_43D1BC,
         0) )
  {
    return 0;
  }
  if ( (*(int (__stdcall **)(int, int *))(*(_DWORD *)dword_43D1BC + 44))(dword_43D1BC, dword_40A480) )
    return 0;
  if ( (*(int (__stdcall **)(int, HWND, int))(*(_DWORD *)dword_43D1BC + 52))(dword_43D1BC, hWnd, 6) )
    return 0;
  if ( (*(int (__stdcall **)(int, int, _DWORD *))(*(_DWORD *)dword_43D1BC + 24))(dword_43D1BC, 1, v4) )
    return 0;
  dword_43D1C0 = (*(int (__stdcall **)(int))(*(_DWORD *)dword_43D1BC + 28))(dword_43D1BC) >= 0;
  v3 = 0;
  dword_43CD60 = (int)&unk_43CD68;
  memset(&unk_43CD68, 0xFFu, 0x40u);
  byte_43CDA8 = 0;
  memset(byte_43CEB8, 0, sizeof(byte_43CEB8));
  memset(byte_43CDB0, 0, sizeof(byte_43CDB0));
  do
  {
    byte_43CFB8[v3] = 0;
    dword_43D1C8[v3] = 0;
    byte_43D0B8[v3++] = 0;
  }
  while ( v3 < 256 );
  dword_43CEB4 = a1;
  dword_43D1C4 = a2;
  dword_43D1B8 = dword_41C7B0;
  dword_41C894 = 0;
  uTimerID = 0;
  return 1;
}
// 40A480: using guessed type int dword_40A480[5];
// 40A498: using guessed type int __stdcall DirectInputCreateA(_DWORD, _DWORD, _DWORD, _DWORD);
// 41C7B0: using guessed type int dword_41C7B0;
// 41C894: using guessed type int dword_41C894;
// 43CD60: using guessed type int dword_43CD60;
// 43CDA8: using guessed type char byte_43CDA8;
// 43CEB0: using guessed type int dword_43CEB0;
// 43CEB4: using guessed type int dword_43CEB4;
// 43D1B8: using guessed type int dword_43D1B8;
// 43D1BC: using guessed type int dword_43D1BC;
// 43D1C0: using guessed type int dword_43D1C0;
// 43D1C4: using guessed type int dword_43D1C4;
// 43D1C8: using guessed type int dword_43D1C8[256];

//----- (00404890) --------------------------------------------------------
int sub_404890()
{
  if ( dword_43D1C0 )
  {
    (*(void (__stdcall **)(int))(*(_DWORD *)dword_43D1BC + 32))(dword_43D1BC);
    dword_43D1C0 = 0;
  }
  if ( dword_43D1BC )
  {
    (*(void (__stdcall **)(int))(*(_DWORD *)dword_43D1BC + 8))(dword_43D1BC);
    dword_43D1BC = 0;
  }
  if ( dword_43CEB0 )
  {
    (*(void (__stdcall **)(int))(*(_DWORD *)dword_43CEB0 + 8))(dword_43CEB0);
    dword_43CEB0 = 0;
  }
  if ( dword_41C894 )
    timeKillEvent(uTimerID);
  return 1;
}
// 41C894: using guessed type int dword_41C894;
// 43CEB0: using guessed type int dword_43CEB0;
// 43D1BC: using guessed type int dword_43D1BC;
// 43D1C0: using guessed type int dword_43D1C0;

//----- (00404910) --------------------------------------------------------
int sub_404910()
{
  int v0; // eax
  int *v1; // edx
  int v2; // esi
  int v3; // ecx
  int v4; // ecx
  unsigned int v5; // eax
  int result; // eax
  int v7; // esi
  _DWORD *v8; // edi
  int v9; // eax
  int v10; // [esp+0h] [ebp-218h]
  int v11; // [esp+14h] [ebp-204h] BYREF
  _BYTE v12[512]; // [esp+18h] [ebp-200h] BYREF

  v0 = 0;
  v1 = dword_43D1C8;
  v11 = 32;
  do
  {
    if ( byte_43CDB0[v0] == 1 )
    {
      v2 = dword_43D1C4 + dword_43CEB4;
      v3 = dword_41C7B0 + *v1 - dword_43D1B8;
      *v1 = v3;
      if ( v2 <= v3 )
      {
        v4 = v3 - dword_43D1C4;
        byte_43CEB8[v0] = 1;
        *v1 = v4;
      }
    }
    ++v1;
    ++v0;
  }
  while ( v1 < &dword_43D5C8 );
  v5 = (*(int (__stdcall **)(int, int, _BYTE *, int *, _DWORD))(*(_DWORD *)dword_43D1BC + 40))(
         dword_43D1BC,
         16,
         v12,
         &v11,
         0);
  if ( v5 == -2147024866 )
  {
    dword_43D1C0 = 0;
    result = (*(int (__stdcall **)(int))(*(_DWORD *)dword_43D1BC + 28))(dword_43D1BC);
    if ( result >= 0 )
      dword_43D1C0 = 1;
  }
  else
  {
    if ( v5 <= 1 )
    {
      v7 = 0;
      if ( v11 > 0 )
      {
        v8 = v12;
        do
        {
          v9 = (unsigned __int8)*v8;
          if ( (v8[1] & 0x80) != 0 )
          {
            byte_43CDB0[v9] = 1;
            if ( !byte_43D0B8[v9] )
            {
              byte_43CFB8[v9] = 1;
              byte_43D0B8[v9] = 1;
            }
            if ( !dword_43D1C8[v9] )
              byte_43CEB8[v9] = 1;
            sub_404AA0(1, v9);
            sub_404AC0(1, (unsigned __int8)*v8);
          }
          else
          {
            v10 = (unsigned __int8)*v8;
            byte_43CDB0[v9] = 0;
            byte_43CFB8[v9] = 0;
            byte_43D0B8[v9] = 0;
            byte_43CEB8[v9] = 0;
            dword_43D1C8[v9] = 0;
            sub_404AA0(0, v10);
          }
          v8 += 4;
          ++v7;
        }
        while ( v7 < v11 );
      }
    }
    dword_43D1B8 = dword_41C7B0;
    return dword_41C7B0;
  }
  return result;
}
// 41C7B0: using guessed type int dword_41C7B0;
// 43CEB4: using guessed type int dword_43CEB4;
// 43D1B8: using guessed type int dword_43D1B8;
// 43D1BC: using guessed type int dword_43D1BC;
// 43D1C0: using guessed type int dword_43D1C0;
// 43D1C4: using guessed type int dword_43D1C4;
// 43D1C8: using guessed type int dword_43D1C8[256];
// 43D5C8: using guessed type int dword_43D5C8;

//----- (00404A90) --------------------------------------------------------
int __cdecl sub_404A90(unsigned __int8 a1)
{
  return (unsigned __int8)byte_43CDB0[a1];
}

//----- (00404AA0) --------------------------------------------------------
int __cdecl sub_404AA0(int a1, int a2)
{
  int result; // eax

  if ( dword_43CD64 )
    return dword_43CD64(a1, a2);
  return result;
}
// 43CD64: invalid function type '?' has been ignored
// 43CD64: using guessed type int (__cdecl *dword_43CD64)(_DWORD, _DWORD);

//----- (00404AC0) --------------------------------------------------------
int __cdecl sub_404AC0(int a1, int a2)
{
  int result; // eax
  char v3; // cl

  result = a2;
  if ( a2 <= 83 )
  {
    v3 = byte_41C898[a2];
    *(_BYTE *)dword_43CD60 = v3;
    result = dword_43CD60;
    *(_BYTE *)(dword_43CD60 + 32) = v3;
    if ( (_UNKNOWN *)++dword_43CD60 == &unk_43CD88 )
      dword_43CD60 = (int)&unk_43CD68;
  }
  return result;
}
// 43CD60: using guessed type int dword_43CD60;

//----- (00404B00) --------------------------------------------------------
int sub_404B00()
{
  sub_404C30();
  sub_403570();
  sub_404B40();
  sub_4046E0();
  sub_406310();
  sub_4045E0(0);
  return 1;
}

//----- (00404B30) --------------------------------------------------------
int sub_404B30()
{
  sub_404B90();
  sub_4038E0();
  return 1;
}

//----- (00404B40) --------------------------------------------------------
int sub_404B40()
{
  int v1; // eax

  if ( dword_41C910 == 1 )
    return 1;
  v1 = 0;
  dword_41C910 = 1;
  memset(dword_43E0C0, 0, 0x320u);
  do
  {
    ++v1;
    word_43DC0E[v1] = v1;
  }
  while ( v1 < 200 );
  word_43EA20 = 0;
  return 1;
}
// 41C910: using guessed type int dword_41C910;
// 43DC0E: using guessed type __int16 word_43DC0E[601];
// 43E0C0: using guessed type int dword_43E0C0[];
// 43EA20: using guessed type __int16 word_43EA20;

//----- (00404B90) --------------------------------------------------------
int sub_404B90()
{
  int v1; // esi
  int i; // esi

  if ( !dword_41C910 )
    return 1;
  v1 = 0;
  dword_41C910 = 0;
  do
  {
    if ( dword_43E0C0[v1] == 1 && dword_43E700[v1] == 0x10000 )
    {
      dword_43E0C0[v1] = 0;
      ((void (__cdecl *)(int))dword_43E3E0[v1])(dword_43D8F0[v1]);
    }
    ++v1;
  }
  while ( v1 < 200 );
  for ( i = 0; i < 200; ++i )
  {
    if ( dword_43E0C0[i] == 1 && dword_43E700[i] == 0x20000 )
    {
      dword_43E0C0[i] = 0;
      ((void (__cdecl *)(int))dword_43E3E0[i])(dword_43D8F0[i]);
    }
  }
  return 1;
}
// 41C910: using guessed type int dword_41C910;
// 43D8F0: using guessed type int dword_43D8F0[];
// 43E0C0: using guessed type int dword_43E0C0[];
// 43E3E0: using guessed type int dword_43E3E0[];
// 43E700: using guessed type int dword_43E700[];

//----- (00404C30) --------------------------------------------------------
int sub_404C30()
{
  printf("\nLisa 2 Development System, %s\n", aCompilation091);
  printf("Copyright (c) UDS, 1995-1996\n\n");
  return 0;
}

//----- (00404D20) --------------------------------------------------------
int sub_404D20()
{
  return 1;
}

//----- (00404D30) --------------------------------------------------------
int sub_404D30()
{
  return 1;
}

//----- (00404D40) --------------------------------------------------------
int sub_404D40()
{
  return 1;
}

//----- (00404D50) --------------------------------------------------------
int sub_404D50()
{
  return 0;
}

//----- (00404D60) --------------------------------------------------------
int __cdecl sub_404D60(int a1, int a2, int a3, int a4, int a5)
{
  dword_41C958 = a1;
  dword_43EA2C = a2;
  dword_43EB64 = a3;
  dword_43EB70 = a4;
  dword_43EB6C = a5;
  dword_43EB58 = 0;
  dword_43EA28 = 0;
  dword_43EB5C = 0;
  dword_43EA38 = 0;
  dword_43EB60 = a3;
  dword_43EA30 = a3 << 8;
  dword_43EB68 = a4;
  dword_43EA3C = a4 << 8;
  dword_453054 = 0;
  dword_45304C = 0;
  dword_453050 = a3;
  dword_453048 = a4;
  dword_453060 = 0;
  dword_453044 = 0;
  dword_453064 = a3 << 8;
  dword_453058 = a4 << 8;
  dword_453068 = a1;
  dword_45305C = a2;
  dword_453040 = a4;
  return 1;
}
// 41C958: using guessed type int dword_41C958;
// 43EA28: using guessed type int dword_43EA28;
// 43EA2C: using guessed type int dword_43EA2C;
// 43EA30: using guessed type int dword_43EA30;
// 43EA38: using guessed type int dword_43EA38;
// 43EA3C: using guessed type int dword_43EA3C;
// 43EB58: using guessed type int dword_43EB58;
// 43EB5C: using guessed type int dword_43EB5C;
// 43EB60: using guessed type int dword_43EB60;
// 43EB64: using guessed type int dword_43EB64;
// 43EB68: using guessed type int dword_43EB68;
// 43EB6C: using guessed type int dword_43EB6C;
// 43EB70: using guessed type int dword_43EB70;
// 453040: using guessed type int dword_453040;
// 453044: using guessed type int dword_453044;
// 453048: using guessed type int dword_453048;
// 45304C: using guessed type int dword_45304C;
// 453050: using guessed type int dword_453050;
// 453054: using guessed type int dword_453054;
// 453058: using guessed type int dword_453058;
// 45305C: using guessed type int dword_45305C;
// 453060: using guessed type int dword_453060;
// 453064: using guessed type int dword_453064;
// 453068: using guessed type int dword_453068;

//----- (00404E20) --------------------------------------------------------
int __cdecl sub_404E20(int a1, int a2, int a3, int a4)
{
  if ( a1 < 0 || a2 < 0 || a3 <= a1 || a4 <= a2 || a3 > dword_43EB64 || a4 > dword_43EB70 )
    return 0;
  dword_43EB58 = a1;
  dword_43EA28 = a1 << 8;
  dword_43EB5C = a2;
  dword_43EA38 = a2 << 8;
  dword_43EB60 = a3;
  dword_43EA30 = a3 << 8;
  dword_43EB68 = a4;
  dword_43EA3C = a4 << 8;
  dword_453054 = a1;
  dword_45304C = a2;
  dword_453050 = a3;
  dword_453048 = a4;
  dword_453060 = a1 << 8;
  dword_453044 = a2 << 8;
  dword_453064 = a3 << 8;
  dword_453058 = a4 << 8;
  return 1;
}
// 43EA28: using guessed type int dword_43EA28;
// 43EA30: using guessed type int dword_43EA30;
// 43EA38: using guessed type int dword_43EA38;
// 43EA3C: using guessed type int dword_43EA3C;
// 43EB58: using guessed type int dword_43EB58;
// 43EB5C: using guessed type int dword_43EB5C;
// 43EB60: using guessed type int dword_43EB60;
// 43EB64: using guessed type int dword_43EB64;
// 43EB68: using guessed type int dword_43EB68;
// 43EB70: using guessed type int dword_43EB70;
// 453044: using guessed type int dword_453044;
// 453048: using guessed type int dword_453048;
// 45304C: using guessed type int dword_45304C;
// 453050: using guessed type int dword_453050;
// 453054: using guessed type int dword_453054;
// 453058: using guessed type int dword_453058;
// 453060: using guessed type int dword_453060;
// 453064: using guessed type int dword_453064;

//----- (00404F10) --------------------------------------------------------
int __cdecl sub_404F10(_DWORD *a1)
{
  int v1; // edx

  *a1 = dword_43EB64;
  a1[1] = dword_43EB70;
  a1[2] = dword_43EB6C;
  v1 = dword_43EA2C;
  a1[8] = 3;
  a1[7] = v1;
  a1[9] = dword_41C958;
  a1[3] = dword_43EB58;
  a1[4] = dword_43EB5C;
  a1[5] = dword_43EB60;
  a1[6] = dword_43EB68;
  return 1;
}
// 41C958: using guessed type int dword_41C958;
// 43EA2C: using guessed type int dword_43EA2C;
// 43EB58: using guessed type int dword_43EB58;
// 43EB5C: using guessed type int dword_43EB5C;
// 43EB60: using guessed type int dword_43EB60;
// 43EB64: using guessed type int dword_43EB64;
// 43EB68: using guessed type int dword_43EB68;
// 43EB6C: using guessed type int dword_43EB6C;
// 43EB70: using guessed type int dword_43EB70;

//----- (00404FB0) --------------------------------------------------------
int __cdecl sub_404FB0(int a1, int a2, float *a3)
{
  long double v3; // st7
  double v4; // st6

  dword_41C968 = a2;
  dword_41C970 = 0;
  dword_41C96C = a1;
  if ( a3 )
  {
    v3 = a3[1];
    v4 = (double)(int)(__int64)(*a3 * 65536.0);
    dword_43EA48 = (__int64)(cos(v3) * v4);
    dword_43EA4C = (__int64)(v4 * sin(v3));
    dword_43EA50 = dword_43EA4C;
    dword_41C970 = (int)&dword_43EA48;
    dword_43EA54 = dword_43EA48;
  }
  dword_43EA34 = (int)&dword_41C968;
  sub_405170();
  return 1;
}
// 41C968: using guessed type int dword_41C968;
// 41C96C: using guessed type int dword_41C96C;
// 41C970: using guessed type int dword_41C970;
// 43EA34: using guessed type int dword_43EA34;
// 43EA48: using guessed type int dword_43EA48;
// 43EA4C: using guessed type int dword_43EA4C;
// 43EA50: using guessed type int dword_43EA50;
// 43EA54: using guessed type int dword_43EA54;

//----- (00405050) --------------------------------------------------------
int __cdecl sub_405050(int *a1)
{
  int *i; // esi
  int v2; // ecx
  int *v3; // esi
  int v4; // eax

  for ( i = a1; *i; i = v3 + 1 )
  {
    v2 = *i;
    v3 = i + 1;
    nullsub_1(v2);
    while ( *v3 )
    {
      v4 = *v3++;
      for ( dword_43EA34 = v4; *(_DWORD *)dword_43EA34; dword_43EA34 += 4 * dword_41C964 )
        sub_4050C0();
    }
  }
  return 1;
}
// 4050B0: using guessed type int __cdecl nullsub_1(_DWORD);
// 41C964: using guessed type int dword_41C964;
// 43EA34: using guessed type int dword_43EA34;

//----- (004050C0) --------------------------------------------------------
int sub_4050C0()
{
  dword_41C97C = **(_DWORD **)dword_43EA34;
  dword_41C980 = *(_DWORD *)(*(_DWORD *)dword_43EA34 + 4);
  dword_41C984 = **(_DWORD **)(dword_43EA34 + 4);
  dword_41C988 = *(_DWORD *)(*(_DWORD *)(dword_43EA34 + 4) + 4);
  dword_41C98C = **(_DWORD **)(dword_43EA34 + 8);
  dword_41C990 = *(_DWORD *)(*(_DWORD *)(dword_43EA34 + 8) + 4);
  dword_41C994 = *(_DWORD *)(*(_DWORD *)(dword_43EA34 + 12) + 8);
  dword_41C998 = *(_DWORD *)(*(_DWORD *)(dword_43EA34 + 12) + 12);
  dword_41C99C = *(_DWORD *)(*(_DWORD *)(dword_43EA34 + 12) + 16);
  dword_41C9A0 = *(_DWORD *)(*(_DWORD *)(dword_43EA34 + 12) + 20);
  dword_41C9A4 = *(_DWORD *)(*(_DWORD *)(dword_43EA34 + 12) + 24);
  dword_41C9A8 = *(_DWORD *)(*(_DWORD *)(dword_43EA34 + 12) + 28);
  dword_41C9AC = **(_DWORD **)(dword_43EA34 + 12);
  return sub_408040(&dword_41C978);
}
// 41C978: using guessed type _DWORD dword_41C978;
// 41C97C: using guessed type int dword_41C97C;
// 41C980: using guessed type int dword_41C980;
// 41C984: using guessed type int dword_41C984;
// 41C988: using guessed type int dword_41C988;
// 41C98C: using guessed type int dword_41C98C;
// 41C990: using guessed type int dword_41C990;
// 41C994: using guessed type int dword_41C994;
// 41C998: using guessed type int dword_41C998;
// 41C99C: using guessed type int dword_41C99C;
// 41C9A0: using guessed type int dword_41C9A0;
// 41C9A4: using guessed type int dword_41C9A4;
// 41C9A8: using guessed type int dword_41C9A8;
// 41C9AC: using guessed type int dword_41C9AC;
// 43EA34: using guessed type int dword_43EA34;

//----- (00405170) --------------------------------------------------------
int sub_405170()
{
  int *v0; // esi
  int result; // eax
  _DWORD v2[4]; // [esp+4h] [ebp-40h] BYREF
  int v3; // [esp+14h] [ebp-30h]

  dword_41C9DC = *(_DWORD *)dword_43EA34;
  dword_41C9E4 = *(_DWORD *)(dword_43EA34 + 8);
  v0 = *(int **)(dword_43EA34 + 4);
  sub_4067E0(v2, *v0);
  dword_41C9B8 = v0[1];
  dword_41C9BC = v0[2];
  dword_41C9C0 = (unsigned __int8)v3 << 8;
  dword_41C9C4 = v3 & 0xFF00;
  dword_41C9D0 = v3 & 0xFFFF0000;
  dword_41C9C8 = dword_41C9C0 + (v2[1] << 8);
  dword_41C9CC = dword_41C9C4 + (v2[2] << 8);
  result = dword_45306C;
  dword_41C9D4 = dword_45306C;
  sub_408DC9(&dword_41C9D8);
  return result;
}
// 41C9B8: using guessed type int dword_41C9B8;
// 41C9BC: using guessed type int dword_41C9BC;
// 41C9C0: using guessed type int dword_41C9C0;
// 41C9C4: using guessed type int dword_41C9C4;
// 41C9C8: using guessed type int dword_41C9C8;
// 41C9CC: using guessed type int dword_41C9CC;
// 41C9D0: using guessed type int dword_41C9D0;
// 41C9D4: using guessed type int dword_41C9D4;
// 41C9D8: using guessed type _DWORD dword_41C9D8;
// 41C9DC: using guessed type int dword_41C9DC;
// 41C9E4: using guessed type int dword_41C9E4;
// 43EA34: using guessed type int dword_43EA34;
// 45306C: using guessed type int dword_45306C;

//----- (004052C0) --------------------------------------------------------
int sub_4052C0()
{
  return 2;
}

//----- (004052D0) --------------------------------------------------------
int sub_4052D0()
{
  int v0; // eax
  HRESULT v2; // eax
  HDC DC; // esi
  int DeviceCaps; // ebx
  LONG WindowLongA; // eax
  LONG v6; // eax
  int v7; // ebp
  int *v8; // esi
  int v9; // ecx
  int v10; // edx
  int v11; // eax
  bool v12; // cc
  int *v13; // eax
  int v14; // ebx
  LPDIRECTDRAWSURFACE *v15; // edi
  int v16; // eax
  int v17; // ecx
  int v18; // edx
  int SystemMetrics; // [esp+4h] [ebp-B8h]
  HINSTANCE v20; // [esp+10h] [ebp-ACh]
  BOOL v21; // [esp+10h] [ebp-ACh]
  LONG v22; // [esp+14h] [ebp-A8h]
  int v23; // [esp+28h] [ebp-94h] BYREF
  struct tagRECT rc; // [esp+2Ch] [ebp-90h] BYREF
  int v25; // [esp+3Ch] [ebp-80h] BYREF
  LONG pvParam; // [esp+40h] [ebp-7Ch] BYREF
  LONG v27; // [esp+44h] [ebp-78h]
  _DWORD v28[27]; // [esp+50h] [ebp-6Ch] BYREF

  sub_404530();
  v20 = hInstance;
  SystemMetrics = GetSystemMetrics(1);
  v0 = GetSystemMetrics(0);
  hWnd = CreateWindowExA(0x40000u, ClassName, WindowName, 0x80080000, 0, 0, v0, SystemMetrics, 0, 0, v20, 0);
  dword_41C7AC = (int)hWnd;
  if ( !hWnd )
    return 0;
  UpdateWindow(hWnd);
  SetFocus(hWnd);
  if ( DirectDrawCreate(0, &lpDD, 0) )
    return 0;
  if ( dword_41C79C )
    v2 = lpDD->lpVtbl->SetCooperativeLevel(lpDD, hWnd, 83);
  else
    v2 = lpDD->lpVtbl->SetCooperativeLevel(lpDD, hWnd, 8);
  if ( v2 )
    return 0;
  if ( dword_41C79C )
  {
    if ( lpDD->lpVtbl->SetDisplayMode(lpDD, dword_41C870, dword_41C874, dword_41C878) )
      return 0;
  }
  else
  {
    DC = GetDC(0);
    DeviceCaps = GetDeviceCaps(DC, 12);
    dword_41C9EC = GetDeviceCaps(DC, 14) * DeviceCaps;
    ReleaseDC(0, DC);
    WindowLongA = GetWindowLongA(hWnd, -16);
    SetWindowLongA(hWnd, -16, WindowLongA & 0x7F39FFFF | 0xC60000);
    SetRect(&rc, 0, 0, 640, 480);
    v22 = GetWindowLongA(hWnd, -20);
    v21 = GetMenu(hWnd) != 0;
    v6 = GetWindowLongA(hWnd, -16);
    AdjustWindowRectEx(&rc, v6, v21, v22);
    SetWindowPos(hWnd, 0, 0, 0, rc.right - rc.left, rc.bottom - rc.top, 0x16u);
    SetWindowPos(hWnd, (HWND)0xFFFFFFFE, 0, 0, 0, 0, 0x13u);
    SystemParametersInfoA(0x30u, 0, &pvParam, 0);
    GetWindowRect(hWnd, &rc);
    if ( rc.left < pvParam )
      rc.left = pvParam;
    if ( rc.top < v27 )
      rc.top = v27;
    SetWindowPos(hWnd, 0, rc.left, rc.top, 0, 0, 0x15u);
  }
  memset(v28, 0, sizeof(v28));
  v28[0] = 108;
  if ( dword_41C79C )
  {
    v28[5] = dword_41C87C;
    v28[1] = 33;
    v28[26] = 536;
    if ( lpDD->lpVtbl->CreateSurface(lpDD, (LPDDSURFACEDESC)v28, (LPDIRECTDRAWSURFACE *)&dword_43C914, 0) )
      return 0;
    dword_43C8E8 = 1;
    dword_43C8EC = 1;
    dword_43C904 = dword_41C870;
    dword_43C908 = dword_41C874;
    dword_43C90C = dword_41C878;
    if ( dword_41C87C >= 5 )
      goto LABEL_22;
    if ( dword_41C87C > 0 )
    {
      v7 = 0;
      v8 = (int *)&unk_43C824;
      v23 = dword_43C914;
      v25 = 4;
      while ( 1 )
      {
        if ( v8 != (int *)&unk_43C824 )
          v25 = 16;
        if ( (*(int (__stdcall **)(int, int *, int *))(*(_DWORD *)v23 + 48))(v23, &v25, &v23) )
          break;
        v9 = dword_41C870;
        *v8 = v23;
        v10 = dword_41C874;
        *(v8 - 11) = 1;
        v11 = dword_41C878;
        *(v8 - 10) = 1;
        v8 += 12;
        ++v7;
        *(v8 - 16) = v9;
        *(v8 - 15) = v10;
        v12 = v7 < dword_41C87C;
        *(v8 - 14) = v11;
        if ( !v12 )
          goto LABEL_29;
      }
      MessageBoxA(hWnd, aBackbufferCoul, 0, 0);
      return 0;
    }
  }
  else
  {
    v28[1] = 1;
    v28[26] = 512;
    if ( lpDD->lpVtbl->CreateSurface(lpDD, (LPDDSURFACEDESC)v28, (LPDIRECTDRAWSURFACE *)&dword_43C914, 0) )
      return 0;
    dword_43C8E8 = 1;
    dword_43C8EC = 1;
    dword_43C904 = dword_41C870;
    dword_43C908 = dword_41C874;
    v28[1] = 7;
    v28[26] = 64;
    v28[3] = 640;
    v28[2] = 480;
    dword_43C90C = dword_41C878;
    if ( dword_41C87C >= 5 )
    {
LABEL_22:
      MessageBoxA(hWnd, Text, 0, 0);
      return 0;
    }
    if ( dword_41C87C > 0 )
    {
      v14 = 0;
      v15 = (LPDIRECTDRAWSURFACE *)&unk_43C824;
      while ( !lpDD->lpVtbl->CreateSurface(lpDD, (LPDDSURFACEDESC)v28, v15, 0) )
      {
        *(v15 - 11) = (LPDIRECTDRAWSURFACE)1;
        v16 = dword_41C870;
        *(v15 - 10) = (LPDIRECTDRAWSURFACE)1;
        v17 = dword_41C874;
        *(v15 - 4) = (LPDIRECTDRAWSURFACE)v16;
        v18 = dword_41C878;
        *(v15 - 3) = (LPDIRECTDRAWSURFACE)v17;
        v15 += 12;
        ++v14;
        *(v15 - 14) = (LPDIRECTDRAWSURFACE)v18;
        if ( v14 >= dword_41C87C )
          goto LABEL_44;
      }
      return 0;
    }
LABEL_44:
    if ( lpDD->lpVtbl->CreateClipper(lpDD, 0, (LPDIRECTDRAWCLIPPER *)&dword_41C9E8, 0) )
      return 0;
    if ( (*(int (__stdcall **)(int, _DWORD, HWND))(*(_DWORD *)dword_41C9E8 + 32))(dword_41C9E8, 0, hWnd) )
      return 0;
    if ( (*(int (__stdcall **)(int, int))(*(_DWORD *)dword_43C914 + 112))(dword_43C914, dword_41C9E8) )
      return 1;
  }
LABEL_29:
  v28[1] = 7;
  v28[26] = 64;
  if ( !dword_41C79C )
    goto LABEL_53;
  if ( dword_43EF78 )
  {
    (*(void (__stdcall **)(int))(*(_DWORD *)dword_43EF78 + 8))(dword_43EF78);
    dword_43EF78 = 0;
  }
  byte_43EB78 = 0;
  byte_43EB79 = 0;
  byte_43EB7A = 0;
  v13 = (int *)&unk_43EB7C;
  do
  {
    *(_BYTE *)v13++ = -1;
    *((_BYTE *)v13 - 3) = -1;
    *((_BYTE *)v13 - 2) = -1;
  }
  while ( v13 < &dword_43EF78 );
  if ( lpDD->lpVtbl->CreatePalette(lpDD, 68, (LPPALETTEENTRY)&byte_43EB78, (LPDIRECTDRAWPALETTE *)&dword_43EF78, 0) )
    return 0;
  if ( (*(int (__stdcall **)(int, int))(*(_DWORD *)dword_43C914 + 124))(dword_43C914, dword_43EF78) )
    return 0;
LABEL_53:
  sub_406250();
  ShowWindow(hWnd, 5);
  return 1;
}
// 41C79C: using guessed type int dword_41C79C;
// 41C7AC: using guessed type int dword_41C7AC;
// 41C870: using guessed type int dword_41C870;
// 41C874: using guessed type int dword_41C874;
// 41C878: using guessed type int dword_41C878;
// 41C87C: using guessed type int dword_41C87C;
// 41C9E8: using guessed type int dword_41C9E8;
// 41C9EC: using guessed type int dword_41C9EC;
// 43C8E8: using guessed type int dword_43C8E8;
// 43C8EC: using guessed type int dword_43C8EC;
// 43C904: using guessed type int dword_43C904;
// 43C908: using guessed type int dword_43C908;
// 43C90C: using guessed type int dword_43C90C;
// 43C914: using guessed type int dword_43C914;
// 43EB78: using guessed type char byte_43EB78;
// 43EB79: using guessed type char byte_43EB79;
// 43EB7A: using guessed type char byte_43EB7A;
// 43EF78: using guessed type int dword_43EF78;

//----- (00405900) --------------------------------------------------------
int sub_405900()
{
  int *v0; // esi
  int *v1; // esi
  int v3; // esi
  int *v4; // edi
  int v5; // ecx
  int v6; // edx
  int v7; // eax
  bool v8; // cc
  _BYTE *v9; // eax
  int v10; // [esp+28h] [ebp-74h] BYREF
  int v11; // [esp+2Ch] [ebp-70h] BYREF
  _DWORD v12[27]; // [esp+30h] [ebp-6Ch] BYREF

  v0 = &dword_43C914;
  do
  {
    if ( dword_41C79C && *v0 )
    {
      (*(void (__stdcall **)(int))(*(_DWORD *)*v0 + 8))(*v0);
      *v0 = 0;
      *(v0 - 11) = 0;
    }
    v0 += 12;
  }
  while ( v0 < dword_43C944 );
  v1 = dword_43C944;
  do
  {
    if ( *v1 )
    {
      (*(void (__stdcall **)(int))(*(_DWORD *)*v1 + 8))(*v1);
      *v1 = 0;
      *(v1 - 11) = 0;
    }
    v1 += 12;
  }
  while ( v1 < &dword_43CD04 );
  if ( dword_41C79C && dword_43EF78 )
  {
    (*(void (__stdcall **)(int))(*(_DWORD *)dword_43EF78 + 8))(dword_43EF78);
    dword_43EF78 = 0;
  }
  sub_404530();
  if ( dword_41C79C && lpDD->lpVtbl->SetDisplayMode(lpDD, dword_41C870, dword_41C874, dword_41C878) )
    return 0;
  memset(v12, 0, sizeof(v12));
  v12[0] = 108;
  if ( !dword_41C79C )
    goto LABEL_27;
  v12[5] = dword_41C87C;
  v12[1] = 33;
  v12[26] = 536;
  if ( lpDD->lpVtbl->CreateSurface(lpDD, (LPDDSURFACEDESC)v12, (LPDIRECTDRAWSURFACE *)&dword_43C914, 0) )
    return 0;
  dword_43C8E8 = 1;
  dword_43C8EC = 1;
  dword_43C904 = dword_41C870;
  dword_43C908 = dword_41C874;
  dword_43C90C = dword_41C878;
  if ( dword_41C87C >= 5 )
  {
    MessageBoxA(hWnd, Text, 0, 0);
    return 0;
  }
  if ( dword_41C87C > 0 )
  {
    v3 = 0;
    v4 = (int *)&unk_43C824;
    v10 = dword_43C914;
    v11 = 4;
    while ( 1 )
    {
      if ( v4 != (int *)&unk_43C824 )
        v11 = 16;
      if ( (*(int (__stdcall **)(int, int *, int *))(*(_DWORD *)v10 + 48))(v10, &v11, &v10) )
        break;
      v5 = dword_41C870;
      *v4 = v10;
      v6 = dword_41C874;
      *(v4 - 11) = 1;
      v7 = dword_41C878;
      *(v4 - 10) = 1;
      v4 += 12;
      ++v3;
      *(v4 - 16) = v5;
      *(v4 - 15) = v6;
      v8 = dword_41C87C <= v3;
      *(v4 - 14) = v7;
      if ( v8 )
        goto LABEL_27;
    }
    MessageBoxA(hWnd, aBackbufferCoul, 0, 0);
    return 0;
  }
  else
  {
LABEL_27:
    v12[1] = 7;
    v12[26] = 64;
    if ( !dword_41C79C )
      goto LABEL_37;
    if ( dword_43EF78 )
    {
      (*(void (__stdcall **)(int))(*(_DWORD *)dword_43EF78 + 8))(dword_43EF78);
      dword_43EF78 = 0;
    }
    byte_43F380 = 0;
    byte_43F381 = 0;
    byte_43F382 = 0;
    v9 = &unk_43F384;
    do
    {
      *v9 = -1;
      v9 += 4;
      *(v9 - 3) = -1;
      *(v9 - 2) = -1;
    }
    while ( v9 < (_BYTE *)&lpDD );
    if ( lpDD->lpVtbl->CreatePalette(lpDD, 68, (LPPALETTEENTRY)&byte_43F380, (LPDIRECTDRAWPALETTE *)&dword_43EF78, 0) )
      return 0;
    if ( (*(int (__stdcall **)(int, int))(*(_DWORD *)dword_43C914 + 124))(dword_43C914, dword_43EF78) )
    {
      return 0;
    }
    else
    {
LABEL_37:
      sub_406250();
      ShowWindow(hWnd, 5);
      return 1;
    }
  }
}
// 41C79C: using guessed type int dword_41C79C;
// 41C870: using guessed type int dword_41C870;
// 41C874: using guessed type int dword_41C874;
// 41C878: using guessed type int dword_41C878;
// 41C87C: using guessed type int dword_41C87C;
// 43C8E8: using guessed type int dword_43C8E8;
// 43C8EC: using guessed type int dword_43C8EC;
// 43C904: using guessed type int dword_43C904;
// 43C908: using guessed type int dword_43C908;
// 43C90C: using guessed type int dword_43C90C;
// 43C914: using guessed type int dword_43C914;
// 43C944: using guessed type int dword_43C944[229];
// 43CD04: using guessed type int dword_43CD04;
// 43EF78: using guessed type int dword_43EF78;
// 43F380: using guessed type char byte_43F380;
// 43F381: using guessed type char byte_43F381;
// 43F382: using guessed type char byte_43F382;

//----- (00405BF0) --------------------------------------------------------
int sub_405BF0()
{
  int *v0; // esi
  int *v1; // esi
  int *v2; // esi

  if ( !dword_41C79C && dword_41C9E8 )
    (*(void (__stdcall **)(int))(*(_DWORD *)dword_41C9E8 + 8))(dword_41C9E8);
  v0 = &dword_43C914;
  do
  {
    if ( !dword_41C79C && *v0 )
    {
      (*(void (__stdcall **)(int))(*(_DWORD *)*v0 + 8))(*v0);
      *v0 = 0;
      *(v0 - 11) = 0;
    }
    v0 += 12;
  }
  while ( v0 < dword_43C944 );
  v1 = (int *)&unk_43C824;
  do
  {
    if ( !dword_41C79C && *v1 )
    {
      (*(void (__stdcall **)(int))(*(_DWORD *)*v1 + 8))(*v1);
      *v1 = 0;
      *(v1 - 11) = 0;
    }
    v1 += 12;
  }
  while ( v1 < &dword_43C914 );
  v2 = dword_43C944;
  do
  {
    if ( *v2 )
    {
      (*(void (__stdcall **)(int))(*(_DWORD *)*v2 + 8))(*v2);
      *v2 = 0;
      *(v2 - 11) = 0;
    }
    v2 += 12;
  }
  while ( v2 < &dword_43CD04 );
  if ( dword_41C79C && dword_43EF78 )
  {
    (*(void (__stdcall **)(int))(*(_DWORD *)dword_43EF78 + 8))(dword_43EF78);
    dword_43EF78 = 0;
  }
  if ( lpDD )
  {
    lpDD->lpVtbl->Release(lpDD);
    lpDD = 0;
  }
  return 1;
}
// 41C79C: using guessed type int dword_41C79C;
// 41C9E8: using guessed type int dword_41C9E8;
// 43C914: using guessed type int dword_43C914;
// 43C944: using guessed type int dword_43C944[229];
// 43CD04: using guessed type int dword_43CD04;
// 43EF78: using guessed type int dword_43EF78;

//----- (00405CE0) --------------------------------------------------------
int sub_405CE0()
{
  return 2;
}

//----- (00405CF0) --------------------------------------------------------
BOOL __cdecl sub_405CF0(_DWORD *a1, int a2, int a3, int a4, int a5, _DWORD *a6, int a7, int a8)
{
  int v8; // ecx
  _DWORD v10[4]; // [esp+8h] [ebp-10h] BYREF

  if ( !*a1 || !*a6 )
    return 0;
  v10[0] = a2;
  v10[1] = a3;
  v8 = a6[11];
  v10[2] = a4 + a2;
  v10[3] = a3 + a5;
  return (*(int (__stdcall **)(int, int, int, _DWORD, _DWORD *, int))(*(_DWORD *)v8 + 28))(v8, a7, a8, a1[11], v10, 16) == 0;
}

//----- (00405D60) --------------------------------------------------------
int __cdecl sub_405D60(int a1, int a2, int a3, int a4, int a5, int a6, _DWORD *a7, int a8, int a9)
{
  int v10; // eax
  char *v11; // ebx
  int v12; // ebp
  int v13; // eax
  int v14; // [esp+10h] [ebp-1Ch]
  unsigned int v15; // [esp+14h] [ebp-18h]
  unsigned int v16; // [esp+18h] [ebp-14h]
  int v17; // [esp+1Ch] [ebp-10h]
  int v18; // [esp+20h] [ebp-Ch]

  if ( !*a7 )
    return 0;
  v10 = a7[3];
  v14 = v10;
  if ( v10 )
  {
    if ( v10 == 1 )
    {
      if ( !sub_4061A0((int)a7) )
        return 0;
      if ( !sub_406050((int)a7, 3) )
        return 0;
    }
  }
  else if ( !sub_406050((int)a7, 3) )
  {
    return 0;
  }
  v11 = (char *)(a3 + a2 * a4 + a1);
  v17 = a7[6];
  v12 = a7[5] + a9 * v17 + a8;
  v16 = -v12 & 3;
  v15 = ((_BYTE)v12 + (_BYTE)a5) & 3;
  v18 = (int)(a5 - v15 - v16) / 4;
  v13 = a6;
  if ( a6 > 0 )
  {
    do
    {
      qmemcpy((void *)v12, v11, v16);
      qmemcpy((void *)(v12 + v16), &v11[v16], 4 * v18);
      qmemcpy((void *)(v12 + v16 + 4 * v18), &v11[4 * v18 + v16], v15);
      v11 += a2;
      v12 += v17;
      --v13;
    }
    while ( v13 );
  }
  if ( a7[3] != v14 )
  {
    if ( v14 )
    {
      if ( !sub_4061A0((int)a7) )
        return 0;
      if ( !sub_406050((int)a7, v14) )
        return 0;
    }
    else if ( !sub_4061A0((int)a7) )
    {
      return 0;
    }
  }
  return 1;
}

//----- (00405EF0) --------------------------------------------------------
int __cdecl sub_405EF0(_DWORD *a1)
{
  int v2; // edi
  int v3; // edx
  int i; // ecx
  int j; // eax
  int v6; // ebx

  if ( !*a1 )
    return 0;
  v2 = a1[3];
  if ( v2 )
  {
    if ( v2 == 1 )
    {
      if ( !sub_4061A0((int)a1) )
        return 0;
      if ( !sub_406050((int)a1, 3) )
        return 0;
    }
  }
  else if ( !sub_406050((int)a1, 3) )
  {
    return 0;
  }
  v3 = a1[5];
  for ( i = 0; a1[8] > i; ++i )
  {
    for ( j = 0; a1[7] > j; *(_DWORD *)(v3 + 4 * v6) = 0 )
    {
      v6 = j + i * a1[6];
      ++j;
    }
  }
  if ( a1[3] != v2 )
  {
    if ( v2 )
    {
      if ( !sub_4061A0((int)a1) )
        return 0;
      if ( !sub_406050((int)a1, v2) )
        return 0;
    }
    else if ( !sub_4061A0((int)a1) )
    {
      return 0;
    }
  }
  return 1;
}

//----- (00405FD0) --------------------------------------------------------
BOOL __cdecl sub_405FD0(int a1)
{
  int v2; // eax
  _BYTE v3[4]; // [esp+8h] [ebp-4h] BYREF

  if ( *(_DWORD *)(a1 + 40) != 1 )
    return 0;
  if ( !*(_DWORD *)a1 )
    return 0;
  (*(void (__stdcall **)(_DWORD, _BYTE *))(**(_DWORD **)(a1 + 44) + 56))(*(_DWORD *)(a1 + 44), v3);
  if ( (v3[0] & 0x10) == 0 )
    return 0;
  do
    v2 = (*(int (__stdcall **)(int, _DWORD, _DWORD))(*(_DWORD *)dword_43C914 + 44))(
           dword_43C914,
           *(_DWORD *)(a1 + 44),
           0);
  while ( v2 == -2005532132 );
  return v2 == 0;
}
// 43C914: using guessed type int dword_43C914;

//----- (00406040) --------------------------------------------------------
int sub_406040()
{
  return 2;
}

//----- (00406050) --------------------------------------------------------
int __cdecl sub_406050(int a1, int a2)
{
  int v3; // eax
  _DWORD *v4; // edx
  _DWORD *v5; // ebx
  int v6; // ecx
  int v7; // eax
  _DWORD v8[9]; // [esp+14h] [ebp-6Ch] BYREF
  int v9; // [esp+38h] [ebp-48h]

  if ( !*(_DWORD *)a1 )
    return 0;
  if ( *(_DWORD *)(a1 + 8) == 1 )
  {
    if ( *(_DWORD *)(a1 + 12) == a2 )
      return 1;
    if ( (*(int (__stdcall **)(_DWORD, int))(**(_DWORD **)(a1 + 44) + 128))(*(_DWORD *)(a1 + 44), a1 + 44) )
      return 0;
    *(_DWORD *)(a1 + 12) = 0;
  }
  if ( (*(int (__stdcall **)(_DWORD))(**(_DWORD **)(a1 + 44) + 96))(*(_DWORD *)(a1 + 44)) == -2005532222 )
  {
    (*(void (__stdcall **)(_DWORD))(**(_DWORD **)(a1 + 44) + 108))(*(_DWORD *)(a1 + 44));
    *(_DWORD *)(a1 + 4) = 1;
  }
  v8[0] = 108;
  if ( a2 == 1 )
  {
    v3 = (*(int (__stdcall **)(_DWORD, _DWORD, _DWORD *, int, _DWORD))(**(_DWORD **)(a1 + 44) + 100))(
           *(_DWORD *)(a1 + 44),
           0,
           v8,
           17,
           0);
    v4 = (_DWORD *)(a1 + 16);
    v5 = (_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 16) = v9;
    *(_DWORD *)(a1 + 20) = 0;
  }
  else
  {
    if ( a2 == 2 )
    {
      v3 = (*(int (__stdcall **)(_DWORD, _DWORD, _DWORD *, int, _DWORD))(**(_DWORD **)(a1 + 44) + 100))(
             *(_DWORD *)(a1 + 44),
             0,
             v8,
             1,
             0);
      v4 = (_DWORD *)(a1 + 16);
      v6 = v9;
      v5 = (_DWORD *)(a1 + 20);
      *(_DWORD *)(a1 + 16) = v9;
    }
    else
    {
      if ( a2 != 3 )
        return 0;
      v3 = (*(int (__stdcall **)(_DWORD, _DWORD, _DWORD *, int, _DWORD))(**(_DWORD **)(a1 + 44) + 100))(
             *(_DWORD *)(a1 + 44),
             0,
             v8,
             33,
             0);
      v4 = (_DWORD *)(a1 + 16);
      v5 = (_DWORD *)(a1 + 20);
      v6 = v9;
      *(_DWORD *)(a1 + 16) = 0;
    }
    *v5 = v6;
  }
  if ( v3 )
  {
    *v4 = 0;
    *v5 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    return 0;
  }
  else
  {
    v7 = v8[4];
    *(_DWORD *)(a1 + 12) = a2;
    *(_DWORD *)(a1 + 24) = v7;
    *(_DWORD *)(a1 + 8) = 1;
    return 1;
  }
}

//----- (004061A0) --------------------------------------------------------
int __cdecl sub_4061A0(int a1)
{
  if ( !*(_DWORD *)a1 )
    return 0;
  if ( !*(_DWORD *)(a1 + 8) )
    return 1;
  if ( (*(int (__stdcall **)(_DWORD, int))(**(_DWORD **)(a1 + 44) + 128))(*(_DWORD *)(a1 + 44), a1 + 44) )
    return 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = 0;
  return 1;
}

//----- (004061F0) --------------------------------------------------------
BOOL __cdecl sub_4061F0(char *a1)
{
  char *v3; // eax
  char v4; // dl

  if ( !dword_43EF78 )
    return 0;
  v3 = (char *)&unk_43EF80;
  do
  {
    v4 = *a1;
    a1 += 3;
    *v3 = v4;
    v3 += 4;
    *(v3 - 3) = *(a1 - 2);
    *(v3 - 2) = *(a1 - 1);
  }
  while ( v3 < &byte_43F380 );
  return (*(int (__stdcall **)(int, _DWORD, _DWORD, int, void *))(*(_DWORD *)dword_43EF78 + 24))(
           dword_43EF78,
           0,
           0,
           256,
           &unk_43EF80) == 0;
}
// 43EF78: using guessed type int dword_43EF78;
// 43F380: using guessed type char byte_43F380;

//----- (00406250) --------------------------------------------------------
BOOL sub_406250()
{
  int v0; // edi
  int *v1; // esi
  int *v2; // esi

  v0 = 0;
  if ( dword_43C8E8 == 1 && (*(int (__stdcall **)(int))(*(_DWORD *)dword_43C914 + 96))(dword_43C914) == -2005532222 )
  {
    v0 = 1;
    (*(void (__stdcall **)(int))(*(_DWORD *)dword_43C914 + 108))(dword_43C914);
    dword_43C8EC = 1;
  }
  v1 = (int *)&unk_43C824;
  do
  {
    if ( *(v1 - 11) == 1 && (*(int (__stdcall **)(int))(*(_DWORD *)*v1 + 96))(*v1) == -2005532222 )
    {
      ++v0;
      (*(void (__stdcall **)(int))(*(_DWORD *)*v1 + 108))(*v1);
      *(v1 - 10) = 1;
    }
    v1 += 12;
  }
  while ( v1 < &dword_43C914 );
  v2 = dword_43C944;
  do
  {
    if ( *(v2 - 11) == 1 && (*(int (__stdcall **)(int))(*(_DWORD *)*v2 + 96))(*v2) == -2005532222 )
    {
      ++v0;
      (*(void (__stdcall **)(int))(*(_DWORD *)*v2 + 108))(*v2);
      *(v2 - 10) = 1;
    }
    v2 += 12;
  }
  while ( v2 < &dword_43CD04 );
  return v0 <= 0;
}
// 43C8E8: using guessed type int dword_43C8E8;
// 43C8EC: using guessed type int dword_43C8EC;
// 43C914: using guessed type int dword_43C914;
// 43C944: using guessed type int dword_43C944[229];
// 43CD04: using guessed type int dword_43CD04;

//----- (00406310) --------------------------------------------------------
_DWORD *sub_406310()
{
  _DWORD *result; // eax

  dword_4449E8 = 0;
  dword_4449EC = 0;
  dword_4449F0 = 0;
  dword_4449F4 = 0;
  dword_444B80 = 0;
  unk_444B84 = 0;
  unk_444B88 = 0;
  unk_444B8C = 0;
  dword_4450A0 = 0;
  unk_4450A4 = 0;
  unk_4450A8 = 0;
  unk_4450AC = 0;
  dword_445048 = 0;
  unk_44504C = 0;
  unk_445050 = 0;
  unk_445054 = 0;
  dword_444B18 = 0;
  unk_444B1C = 0;
  unk_444B20 = 0;
  unk_444B24 = 0;
  dword_444970 = 0;
  unk_444974 = 0;
  unk_444978 = 0;
  unk_44497C = 0;
  dword_445088 = 0;
  *(_DWORD *)algn_44508C = 0;
  *(_DWORD *)&algn_44508C[4] = 0;
  *(_DWORD *)&algn_44508C[8] = 0;
  dword_445068 = 0;
  dword_44506C = 0;
  dword_445070 = 0;
  dword_445074 = 0;
  sub_406460();
  sub_4065F0();
  sub_4066D0();
  sub_4069D0();
  sub_406630();
  sub_406520();
  sub_406590();
  sub_406F70(dword_445058);
  dword_43F7C8 = (int)aDefault_0;
  dword_43F7D4 = 1065353216;
  dword_43F7E4 = 0;
  dword_43F7CC = 0;
  byte_43F7E8 = 0;
  dword_43F7E0 = 1053609165;
  dword_43F7DC = 1056964608;
  dword_43F7D8 = 1036831949;
  result = sub_406470(0x10u);
  dword_43F7E9 = (int)result;
  *result = 12;
  result[1] = 0;
  result[2] = 4095;
  result[3] = 0;
  dword_4450A0 = 1;
  return result;
}
// 43F7C8: using guessed type int dword_43F7C8;
// 43F7CC: using guessed type int dword_43F7CC;
// 43F7D4: using guessed type int dword_43F7D4;
// 43F7D8: using guessed type int dword_43F7D8;
// 43F7DC: using guessed type int dword_43F7DC;
// 43F7E0: using guessed type int dword_43F7E0;
// 43F7E4: using guessed type int dword_43F7E4;
// 43F7E8: using guessed type char byte_43F7E8;
// 43F7E9: using guessed type int dword_43F7E9;
// 444970: using guessed type int dword_444970;
// 4449E8: using guessed type int dword_4449E8;
// 4449EC: using guessed type int dword_4449EC;
// 4449F0: using guessed type int dword_4449F0;
// 4449F4: using guessed type int dword_4449F4;
// 444B18: using guessed type int dword_444B18;
// 444B80: using guessed type int dword_444B80;
// 445048: using guessed type int dword_445048;
// 445058: using guessed type _DWORD dword_445058[4];
// 445068: using guessed type int dword_445068;
// 44506C: using guessed type int dword_44506C;
// 445070: using guessed type int dword_445070;
// 445074: using guessed type int dword_445074;
// 445088: using guessed type int dword_445088;
// 44508C: using guessed type _BYTE[20];
// 4450A0: using guessed type int dword_4450A0;

//----- (00406460) --------------------------------------------------------
int sub_406460()
{
  return sub_406F70(dword_444908);
}
// 444908: using guessed type _DWORD dword_444908[26];

//----- (00406470) --------------------------------------------------------
void *__cdecl sub_406470(size_t Size)
{
  if ( Size )
    return malloc(Size);
  else
    return 0;
}

//----- (00406490) --------------------------------------------------------
void __cdecl sub_406490(int a1)
{
  int *v1; // edi
  void *v2; // eax
  int v3; // edx
  int *v4; // ecx
  int v5; // eax
  int v6; // ebx
  int v7; // edx
  int v8; // ecx

  v1 = *(int **)(a1 + 12);
  v2 = malloc(4 * *(_DWORD *)(a1 + 8) + 4000);
  v3 = 0;
  *(_DWORD *)(a1 + 12) = v2;
  if ( *(int *)(a1 + 8) > 0 )
  {
    v4 = v1;
    v5 = 0;
    do
    {
      v6 = *v4++;
      v5 += 4;
      ++v3;
      *(_DWORD *)(*(_DWORD *)(a1 + 12) + v5 - 4) = v6;
    }
    while ( *(_DWORD *)(a1 + 8) > v3 );
  }
  v7 = *(_DWORD *)(a1 + 8);
  if ( v7 + 1000 > v7 )
  {
    v8 = 4 * v7;
    do
    {
      v8 += 4;
      ++v7;
      *(_DWORD *)(*(_DWORD *)(a1 + 12) + v8 - 4) = 0;
    }
    while ( *(_DWORD *)(a1 + 8) + 1000 > v7 );
  }
  *(_DWORD *)(a1 + 8) += 1000;
  free(v1);
}

//----- (00406520) --------------------------------------------------------
int sub_406520()
{
  dword_4448B0 = 0;
  dword_4448B8 = 0;
  dword_4448B4 = 0;
  dword_4448BC = 0;
  dword_4448C0 = 0;
  dword_4448C8 = 0;
  dword_4448C4 = 0;
  dword_4448CC = 0;
  dword_4448D0 = 0;
  dword_4448D4 = 0;
  dword_445048 = 1;
  dword_4448D8 = 0;
  return 0;
}
// 4448B0: using guessed type int dword_4448B0;
// 4448B4: using guessed type int dword_4448B4;
// 4448B8: using guessed type int dword_4448B8;
// 4448BC: using guessed type int dword_4448BC;
// 4448C0: using guessed type int dword_4448C0;
// 4448C4: using guessed type int dword_4448C4;
// 4448C8: using guessed type int dword_4448C8;
// 4448CC: using guessed type int dword_4448CC;
// 4448D0: using guessed type int dword_4448D0;
// 4448D4: using guessed type int dword_4448D4;
// 4448D8: using guessed type int dword_4448D8;
// 445048: using guessed type int dword_445048;

//----- (00406570) --------------------------------------------------------
void __cdecl sub_406570(void *Block)
{
  if ( Block )
    free(Block);
}

//----- (00406590) --------------------------------------------------------
void sub_406590()
{
  dword_444B18 = 8;
}
// 444B18: using guessed type int dword_444B18;

//----- (004065A0) --------------------------------------------------------
void __cdecl sub_4065A0(_BYTE *a1, _DWORD *a2)
{
  int v2; // esi
  signed int v3; // esi
  char *v4; // edx
  signed int i; // eax
  char v6; // cl

  v2 = 0;
  if ( a1 )
  {
    if ( *a1 )
    {
      do
        ++v2;
      while ( a1[v2] );
    }
    v3 = v2 + 1;
    v4 = (char *)sub_406470(v3);
    *a2 = v4;
    for ( i = 0; i < v3; v4[i - 1] = v6 )
      v6 = a1[i++];
  }
  else
  {
    *a2 = 0;
  }
}

//----- (004065F0) --------------------------------------------------------
__int64 sub_4065F0()
{
  int i; // esi
  __int64 result; // rax
  int v2; // [esp+4h] [ebp-4h]

  for ( i = 0; i < 4096; dword_440844[i] = result )
  {
    v2 = i++;
    result = (__int64)(sin((double)v2 * 0.000244140625 * 6.283192) * 2147418112.0);
  }
  return result;
}
// 440844: using guessed type int dword_440844[4107];

//----- (00406630) --------------------------------------------------------
void sub_406630()
{
  dword_444B80 = 1;
}
// 444B80: using guessed type int dword_444B80;

//----- (004066D0) --------------------------------------------------------
int sub_4066D0()
{
  dword_444870 = (int)aDefault_0;
  dword_444874 = 0;
  dword_444878 = 0;
  dword_44487C = 0;
  dword_444880 = 0;
  dword_444884 = 0;
  dword_444888 = 0;
  dword_445068 = 1;
  return 0;
}
// 444870: using guessed type int dword_444870;
// 444874: using guessed type int dword_444874;
// 444878: using guessed type int dword_444878;
// 44487C: using guessed type int dword_44487C;
// 444880: using guessed type int dword_444880;
// 444884: using guessed type int dword_444884;
// 444888: using guessed type int dword_444888;
// 445068: using guessed type int dword_445068;

//----- (00406710) --------------------------------------------------------
_DWORD *__cdecl sub_406710(_DWORD *a1, int a2)
{
  int v2; // ecx
  int *v3; // ebp
  void *v4; // eax
  int v5; // ecx
  _DWORD *result; // eax
  int *v7; // [esp+10h] [ebp-4h]

  v2 = a2;
  if ( a2 < 0 || a2 >= dword_445070 )
  {
    v2 = 0;
    v3 = v7;
  }
  else
  {
    if ( !*(_DWORD *)(dword_445074 + 4 * a2) )
      v2 = 0;
    v3 = *(int **)(dword_445074 + 4 * v2);
  }
  if ( !v2 )
    v3 = &dword_444870;
  qmemcpy(a1, v3, 0x40u);
  sub_4065A0((_BYTE *)*v3, a1);
  a1[6] = *a1;
  v4 = sub_406470(a1[1] * a1[2]);
  v5 = a1[1];
  a1[4] = v4;
  a1[5] = v5;
  result = sub_4067A0(v3, (int)a1);
  a1[7] = a1[4];
  return result;
}
// 406740: variable 'v7' is possibly undefined
// 444870: using guessed type int dword_444870;
// 445070: using guessed type int dword_445070;
// 445074: using guessed type int dword_445074;

//----- (004067A0) --------------------------------------------------------
_DWORD *__cdecl sub_4067A0(_DWORD *a1, int a2)
{
  _DWORD *result; // eax
  int v3; // esi
  int v4; // edi
  int i; // ebp
  int j; // edx

  result = a1;
  v3 = 0;
  v4 = a1[4];
  for ( i = *(_DWORD *)(a2 + 16); a1[2] > v3; ++v3 )
  {
    for ( j = 0; a1[1] > j; ++j )
      *(_BYTE *)(j + i) = *(_BYTE *)(j + v4);
    v4 += a1[5];
    i += *(_DWORD *)(a2 + 20);
  }
  return result;
}

//----- (004067E0) --------------------------------------------------------
int __cdecl sub_4067E0(_DWORD *a1, int a2)
{
  int result; // eax
  const void *v3; // esi

  result = a2;
  if ( a2 > 0 && a2 < dword_445070 && (v3 = *(const void **)(dword_445074 + 4 * a2)) != 0 )
  {
    qmemcpy(a1, v3, 0x40u);
    a1[6] = 0;
    a1[7] = 0;
    return 0;
  }
  else
  {
    qmemcpy(a1, &dword_444870, 0x40u);
  }
  return result;
}
// 444870: using guessed type int dword_444870;
// 445070: using guessed type int dword_445070;
// 445074: using guessed type int dword_445074;

//----- (00406860) --------------------------------------------------------
int __cdecl sub_406860(const void *a1, int a2)
{
  int v2; // ebx
  void **v3; // eax
  int v5; // eax
  _DWORD *v6; // ecx
  void ***v7; // edi
  _BYTE **v8; // ebp

  v2 = a2;
  while ( a1 )
  {
    if ( a2 )
    {
      if ( a2 < 0 || dword_445070 <= a2 )
        return 0;
      goto LABEL_21;
    }
    if ( dword_445070 > dword_445068 )
    {
      v2 = dword_445068;
      v5 = dword_445068 + 1;
      if ( dword_445068 + 1 < dword_445070 )
      {
        v6 = (_DWORD *)(dword_445074 + 4 * v5);
        do
        {
          if ( !*v6 )
            break;
          ++v6;
          ++v5;
        }
        while ( v5 < dword_445070 );
      }
      dword_445068 = v5;
LABEL_21:
      v7 = (void ***)(dword_445074 + 4 * v2);
      if ( *v7 )
      {
        sub_406570(**v7);
        sub_406D90(*(_DWORD **)(dword_445074 + 4 * v2));
      }
      else
      {
        *v7 = (void **)sub_406470(0x40u);
      }
      v8 = *(_BYTE ***)(dword_445074 + 4 * v2);
      qmemcpy(v8, a1, 0x40u);
      sub_4065A0(*v8, v8);
      sub_406A10((int *)v8);
      return v2;
    }
    sub_406490((int)&dword_445068);
  }
  if ( a2 > 0 && dword_445070 > a2 )
  {
    v3 = *(void ***)(dword_445074 + 4 * a2);
    if ( v3 )
    {
      sub_406570(*v3);
      sub_406D90(*(_DWORD **)(dword_445074 + 4 * a2));
    }
    if ( dword_445068 > a2 )
      dword_445068 = a2;
    sub_406570(*(void **)(dword_445074 + 4 * a2));
    *(_DWORD *)(dword_445074 + 4 * a2) = 0;
  }
  return 0;
}
// 445068: using guessed type int dword_445068;
// 445070: using guessed type int dword_445070;
// 445074: using guessed type int dword_445074;

//----- (004069B0) --------------------------------------------------------
void __cdecl sub_4069B0(int a1)
{
  sub_406570(*(void **)(a1 + 24));
  sub_406570(*(void **)(a1 + 28));
}

//----- (004069D0) --------------------------------------------------------
int sub_4069D0()
{
  dword_4448F8 = 0;
  dword_4448FC = 0;
  dword_4448F4 = 0;
  dword_4448E8 = 0;
  dword_4448EC = 0;
  dword_4448F0 = 0;
  memset(&dword_444C40, 0, 0x404u);
  dword_444B28 = 0;
  return 0;
}
// 4448E8: using guessed type int dword_4448E8;
// 4448EC: using guessed type int dword_4448EC;
// 4448F0: using guessed type int dword_4448F0;
// 4448F4: using guessed type int dword_4448F4;
// 4448F8: using guessed type int dword_4448F8;
// 4448FC: using guessed type int dword_4448FC;

//----- (00406A10) --------------------------------------------------------
void __cdecl sub_406A10(int *a1)
{
  int v1; // edx
  int v2; // eax
  _DWORD *v3; // esi
  int v4; // ebp
  int v5; // eax
  _DWORD *v6; // [esp+10h] [ebp-48h]
  int v7; // [esp+14h] [ebp-44h]
  _DWORD v8[16]; // [esp+18h] [ebp-40h] BYREF

  while ( a1[2] > 0 )
  {
    v1 = a1[2];
    if ( v1 > 256 )
      break;
    v2 = a1[1];
    if ( v2 <= 0 || v2 > 256 )
      break;
    v3 = *(&dword_444C40 + v1);
    if ( v3 )
    {
      while ( 1 )
      {
        v4 = v3[1];
        v7 = sub_406D50(a1[1], *(int **)(v4 + 12));
        if ( v7 )
          break;
        v3 = (_DWORD *)*v3;
        if ( !v3 )
        {
          sub_406BA0(a1[2], (int **)dword_444B28);
          goto LABEL_15;
        }
      }
      if ( v7 == -1 )
      {
        v6 = sub_406470(0x18u);
        qmemcpy(v6, &dword_4448E8, 0x18u);
        v6[1] = a1[1];
        v6[2] = *v6 + *(_DWORD *)(v4 + 8);
        v5 = *(_DWORD *)(v4 + 12);
        v6[5] = v5;
        if ( v5 )
          *(_DWORD *)(v5 + 16) = v6;
        *(_DWORD *)(v4 + 12) = v6;
      }
      else
      {
        v6 = sub_406470(0x18u);
        qmemcpy(v6, &dword_4448E8, 0x18u);
        *v6 = *(_DWORD *)(v7 + 4);
        v6[1] = *(_DWORD *)(v7 + 4) + a1[1];
        v6[2] = *v6 + *(_DWORD *)(v4 + 8);
        sub_406B70(v7, (int)v6, *(_DWORD *)(v7 + 20));
      }
      qmemcpy(v8, a1, sizeof(v8));
      a1[4] = v6[2];
      a1[5] = 256;
      sub_4067A0(v8, (int)a1);
      return;
    }
    sub_406BA0(v1, (int **)dword_444B28);
LABEL_15:
    ;
  }
}
// 4448E8: using guessed type int dword_4448E8;

//----- (00406B70) --------------------------------------------------------
int __cdecl sub_406B70(int a1, int a2, int a3)
{
  int result; // eax

  result = a1;
  *(_DWORD *)(a2 + 20) = a3;
  *(_DWORD *)(a2 + 16) = a1;
  if ( a1 )
    *(_DWORD *)(a1 + 20) = a2;
  if ( a3 )
    *(_DWORD *)(a3 + 16) = a2;
  return result;
}

//----- (00406BA0) --------------------------------------------------------
_DWORD *__cdecl sub_406BA0(int a1, int **a2)
{
  int v3; // eax
  int v4; // ebp
  int *v5; // eax
  _DWORD *result; // eax
  void **v7; // ecx
  _DWORD *v8; // [esp+10h] [ebp-4h]

  while ( !a2 )
  {
LABEL_2:
    sub_406CC0();
    a2 = (int **)dword_444B28;
  }
  while ( 1 )
  {
    v3 = sub_406D50(a1, a2[3]);
    v4 = v3;
    if ( v3 )
      break;
    a2 = (int **)a2[5];
    if ( !a2 )
      goto LABEL_2;
  }
  if ( v3 == -1 )
  {
    v8 = sub_406470(0x18u);
    qmemcpy(v8, &dword_4448E8, 0x18u);
    v8[1] = a1;
    v8[2] = &a2[2][64 * *v8];
    v5 = a2[3];
    v8[5] = v5;
    if ( v5 )
      v5[4] = (int)v8;
    a2[3] = v8;
  }
  else
  {
    v8 = sub_406470(0x18u);
    qmemcpy(v8, &dword_4448E8, 0x18u);
    *v8 = *(_DWORD *)(v4 + 4);
    v8[1] = a1 + *(_DWORD *)(v4 + 4);
    v8[2] = &a2[2][64 * *v8];
    sub_406B70(v4, (int)v8, *(_DWORD *)(v4 + 20));
  }
  result = sub_406470(8u);
  v7 = &dword_444C40 + a1;
  *result = *v7;
  result[1] = v8;
  *v7 = result;
  return result;
}
// 4448E8: using guessed type int dword_4448E8;

//----- (00406CC0) --------------------------------------------------------
void *sub_406CC0()
{
  _DWORD *v0; // ebx
  void *result; // eax

  v0 = sub_406470(0x18u);
  qmemcpy(v0, &dword_4448E8, 0x18u);
  v0[5] = dword_444B28;
  result = (void *)sub_406D20(0x10000, 0x10000u);
  v0[2] = result;
  if ( dword_444B28 )
  {
    result = dword_444B28;
    *((_DWORD *)dword_444B28 + 4) = v0;
  }
  dword_444B28 = v0;
  return result;
}
// 4448E8: using guessed type int dword_4448E8;

//----- (00406D20) --------------------------------------------------------
int __cdecl sub_406D20(int a1, unsigned int a2)
{
  char *v2; // eax
  unsigned int v3; // edx

  v2 = (char *)sub_406470(a2 + a1 + 4);
  v3 = (unsigned int)(v2 + 4) % a2;
  *(_DWORD *)&v2[a2 - v3] = v2;
  return (int)&v2[a2 - v3 + 4];
}

//----- (00406D50) --------------------------------------------------------
int __cdecl sub_406D50(int a1, int *a2)
{
  int result; // eax
  int *v3; // edx
  int v4; // esi

  result = (int)a2;
  if ( !a2 )
    return -1;
  if ( *a2 >= a1 )
    return -1;
  while ( 1 )
  {
    v3 = *(int **)(result + 20);
    v4 = 256;
    if ( v3 )
      v4 = *v3;
    if ( v4 - *(_DWORD *)(result + 4) >= a1 )
      break;
    result = *(_DWORD *)(result + 20);
    if ( !v3 )
      return 0;
  }
  return result;
}

//----- (00406D90) --------------------------------------------------------
void __cdecl sub_406D90(_DWORD *a1)
{
  int v1; // edx
  int v2; // ecx
  int *v3; // edi
  int v4; // ebp
  _DWORD *v5; // ebx
  _DWORD *v6; // esi
  _DWORD *v7; // ebp
  int v8; // ecx
  int v9; // eax
  int v10; // eax
  int *v11; // ecx
  int v12; // ecx
  int v13; // eax
  int v14; // eax
  int v15; // eax
  _DWORD *v16; // [esp+10h] [ebp-4h]

  v1 = a1[2];
  if ( v1 > 0 && v1 <= 256 )
  {
    v2 = a1[1];
    if ( v2 > 0 && v2 <= 256 )
    {
      v3 = (int *)dword_444B28;
      v4 = a1[4];
      if ( dword_444B28 )
      {
        while ( v3[2] != (v4 & 0xFFFF0000) )
        {
          v3 = (int *)v3[5];
          if ( !v3 )
            return;
        }
        v5 = (_DWORD *)v3[3];
        while ( v5[2] != (a1[4] & 0xFFFFFF00) )
        {
          v5 = (_DWORD *)v5[5];
          if ( !v5 )
            return;
        }
        v6 = (_DWORD *)v5[3];
        while ( v6[2] != v4 )
        {
          v6 = (_DWORD *)v6[5];
          if ( !v6 )
            return;
        }
        v16 = 0;
        v7 = *(&dword_444C40 + v1);
        while ( (_DWORD *)v7[1] != v5 )
        {
          v16 = v7;
          v7 = (_DWORD *)*v7;
          if ( !v7 )
            return;
        }
        v8 = v6[5];
        if ( v8 || v6[4] )
        {
          v14 = v6[4];
          if ( v14 )
            *(_DWORD *)(v14 + 20) = v8;
          else
            v5[3] = v8;
          v15 = v6[5];
          if ( v15 )
            *(_DWORD *)(v15 + 16) = v6[4];
        }
        else
        {
          v9 = v5[5];
          if ( v9 || v5[4] )
          {
            v12 = v5[4];
            if ( v12 )
              *(_DWORD *)(v12 + 20) = v9;
            else
              v3[3] = v9;
            v13 = v5[5];
            if ( v13 )
              *(_DWORD *)(v13 + 16) = v5[4];
          }
          else
          {
            sub_406F40(v3[2]);
            v10 = v3[4];
            v11 = v3 + 5;
            if ( v10 )
              *(_DWORD *)(v10 + 20) = *v11;
            else
              dword_444B28 = (void *)*v11;
            if ( *v11 )
              *(_DWORD *)(*v11 + 16) = v3[4];
            sub_406570(v3);
          }
          if ( v16 )
            *v16 = *v7;
          else
            *(&dword_444C40 + a1[2]) = (void *)*v7;
          sub_406570(v7);
          sub_406570(v5);
        }
        sub_406570(v6);
      }
    }
  }
}

//----- (00406F40) --------------------------------------------------------
void __cdecl sub_406F40(int a1)
{
  sub_406570(*(void **)(a1 - 4));
}

//----- (00406F60) --------------------------------------------------------
int sub_406F60()
{
  return 0;
}

//----- (00406F70) --------------------------------------------------------
int __cdecl sub_406F70(_DWORD *a1)
{
  void *v1; // eax
  int v2; // ecx
  int result; // eax

  v1 = sub_406470(0x80u);
  v2 = 0;
  a1[3] = v1;
  do
  {
    v2 += 8;
    *(_DWORD *)(a1[3] + v2 - 8) = 0;
    result = a1[3];
    *(_DWORD *)(result + v2 - 4) = 0;
  }
  while ( v2 < 128 );
  a1[2] = 15;
  a1[1] = 0;
  *a1 = 16;
  return result;
}

//----- (00406FC0) --------------------------------------------------------
int sub_406FC0()
{
  _DWORD *v0; // ecx
  int *v1; // eax

  v0 = &unk_447038;
  v1 = (int *)&unk_4450B8;
  dword_44CDF8 = (int)&dword_446FF8;
  do
  {
    *v1++ = (int)v0;
    *v0 = 0;
    v0 += 3;
  }
  while ( v1 < &dword_446FF8 );
  sub_4067E0(&dword_446FF8, 0);
  return 1;
}
// 446FF8: using guessed type int dword_446FF8;
// 44CDF8: using guessed type int dword_44CDF8;

//----- (00407000) --------------------------------------------------------
int *__cdecl sub_407000(_DWORD *a1, int *a2)
{
  int *v2; // esi
  _DWORD *v3; // edi

  v2 = a2;
  if ( !a2 )
  {
    v3 = a1;
    if ( !a1 )
      return 0;
    if ( (_UNKNOWN *)dword_44CDF8 == &unk_4450B8 )
      return 0;
    dword_44CDF8 -= 4;
    v2 = *(int **)dword_44CDF8;
    **(_DWORD **)dword_44CDF8 = 0;
    goto LABEL_7;
  }
  if ( !*a2 )
    return 0;
  v3 = a1;
  if ( a1 )
  {
LABEL_7:
    dword_446FF8 = 0;
    dword_446FFC = v3[1];
    dword_447000 = v3[2];
    dword_447004 = v3[3];
    dword_447008 = v3[4];
    dword_44700C = v3[5];
    *v2 = sub_406860(&dword_446FF8, *v2);
    v2[1] = v3[6];
    v2[2] = v3[7];
    return v2;
  }
  sub_406860(0, *a2);
  *a2 = 0;
  *(_DWORD *)dword_44CDF8 = a2;
  dword_44CDF8 += 4;
  return 0;
}
// 446FF8: using guessed type int dword_446FF8;
// 446FFC: using guessed type int dword_446FFC;
// 447000: using guessed type int dword_447000;
// 447004: using guessed type int dword_447004;
// 447008: using guessed type int dword_447008;
// 44700C: using guessed type int dword_44700C;
// 44CDF8: using guessed type int dword_44CDF8;

//----- (004070F0) --------------------------------------------------------
int __cdecl sub_4070F0(int a1)
{
  sub_4069B0(a1);
  return 1;
}

//----- (00407110) --------------------------------------------------------
int __cdecl sub_407110(_DWORD *a1, int a2)
{
  sub_4067E0(a1, a2);
  return 1;
}

//----- (00407130) --------------------------------------------------------
unsigned int __cdecl sub_407130(int a1, int a2, int a3, int a4)
{
  return sub_408FA4(a1, a4, a3, a2);
}

//----- (00407150) --------------------------------------------------------
char __cdecl sub_407150(int a1, int a2, int a3, char a4, _BYTE *a5)
{
  return sub_408FCA(a5, a3, a4, a1, a2);
}

//----- (00407170) --------------------------------------------------------
char __cdecl sub_407170(int a1, int a2, int a3, _BYTE *a4)
{
  return sub_40901F(a3, a4, a1, a2);
}

//----- (00407190) --------------------------------------------------------
void sub_407190()
{
  dword_44CE2C = 0;
  if ( !dword_41CA54 )
  {
    dword_44CE38 = (int)malloc(0x20D8u);
    dword_44CE3C = (int)malloc(0x20D8u);
    dword_44CE40 = (int)malloc(0x20D8u);
    dword_41CA54 = 1;
  }
}
// 41CA54: using guessed type int dword_41CA54;
// 44CE2C: using guessed type int dword_44CE2C;
// 44CE38: using guessed type int dword_44CE38;
// 44CE3C: using guessed type int dword_44CE3C;
// 44CE40: using guessed type int dword_44CE40;

//----- (004071F0) --------------------------------------------------------
int __cdecl sub_4071F0(_DWORD *a1)
{
  int v1; // eax
  int v2; // edx
  int v3; // ebx
  int v4; // eax
  int v5; // eax
  int v6; // edx
  int v7; // ebx
  int v8; // eax
  int v9; // eax
  int v10; // edx
  int v11; // ebx
  int v12; // eax
  int result; // eax
  int v14; // esi
  int v15; // eax
  int v16; // esi
  int v17; // edi
  _DWORD *v18; // ebx
  int v19; // ebp
  int v20; // edi
  int v21; // eax
  int v22; // esi
  int v23; // ebx
  _DWORD *v24; // ebp
  int v25; // ecx
  int v26; // esi
  int v27; // edi
  _DWORD *v28; // ebx
  int v29; // ebp
  int v30; // esi
  int v31; // ebx
  int v32; // edi
  int v33; // ebp
  int v34; // edx
  int v35; // eax
  _BYTE *v36; // [esp-4h] [ebp-14h]

  dword_41CAAC = a1[1];
  dword_41CAB0 = a1[2];
  dword_41CAB4 = a1[3];
  dword_41CAB8 = a1[4];
  dword_41CABC = a1[5];
  dword_41CAC0 = a1[6];
  dword_41CAC4 = a1[7];
  dword_41CAC8 = a1[8];
  dword_41CACC = a1[9];
  dword_41CAD0 = a1[10];
  dword_41CAD4 = a1[11];
  dword_41CAD8 = a1[12];
  dword_44CE24 = a1[13];
  dword_44CE30 = dword_453068;
  if ( dword_41CAAC <= dword_41CAB4 )
  {
    dword_44CE58 = dword_41CAB4;
    dword_44CE34 = dword_41CAAC;
  }
  else
  {
    dword_44CE34 = dword_41CAB4;
    dword_44CE58 = dword_41CAAC;
  }
  if ( dword_41CABC <= dword_44CE58 )
  {
    if ( dword_44CE34 > dword_41CABC )
      dword_44CE34 = dword_41CABC;
  }
  else
  {
    dword_44CE58 = dword_41CABC;
  }
  v1 = dword_41CAC0;
  if ( dword_41CAB0 > dword_41CAC0 )
  {
    v2 = dword_41CAD8;
    v3 = dword_41CABC;
    dword_41CAC0 = dword_41CAB0;
    dword_41CAB0 = v1;
    dword_41CABC = dword_41CAAC;
    dword_41CAD8 = dword_41CAC8;
    dword_41CAC8 = v2;
    v4 = dword_41CAD4;
    dword_41CAAC = v3;
    dword_41CAD4 = dword_41CAC4;
    dword_41CAC4 = v4;
  }
  v5 = dword_41CAB8;
  if ( dword_41CAB0 <= dword_41CAB8 )
  {
    v9 = dword_41CAB8;
    if ( dword_41CAC0 < dword_41CAB8 )
    {
      v10 = dword_41CAD0;
      v11 = dword_41CAB4;
      dword_41CAB8 = dword_41CAC0;
      dword_41CAC0 = v9;
      dword_41CAB4 = dword_41CABC;
      dword_41CAD0 = dword_41CAD8;
      dword_41CAD8 = v10;
      v12 = dword_41CACC;
      dword_41CABC = v11;
      dword_41CACC = dword_41CAD4;
      dword_41CAD4 = v12;
    }
  }
  else
  {
    v6 = dword_41CAD0;
    v7 = dword_41CAB4;
    dword_41CAB8 = dword_41CAB0;
    dword_41CAB0 = v5;
    dword_41CAB4 = dword_41CAAC;
    dword_41CAD0 = dword_41CAC8;
    dword_41CAC8 = v6;
    v8 = dword_41CACC;
    dword_41CAAC = v7;
    dword_41CACC = dword_41CAC4;
    dword_41CAC4 = v8;
  }
  if ( dword_41CAB0 < dword_453044
    || dword_41CAC0 > dword_453058
    || dword_44CE58 > dword_453064
    || dword_44CE34 < dword_453060 )
  {
    return sub_407910((int)a1);
  }
  sub_456000();
  sub_407130(dword_41CAE0, dword_41CADC, dword_44CE24, a1[14]);
  v14 = sub_407F40(dword_41CAAC, dword_41CAB0, dword_41CABC, dword_41CAC0);
  v15 = sub_407F40(dword_41CAAC, dword_41CAB0, dword_41CAB4, dword_41CAB8);
  dword_44CE04 = dword_41CAB0;
  dword_44CE00 = dword_41CAAC;
  dword_44CE08 = dword_41CAB4;
  dword_44CE0C = dword_41CAB8;
  dword_44CE10 = dword_41CAC4;
  dword_44CE14 = dword_41CAC8;
  dword_44CE18 = dword_41CACC;
  dword_44CE1C = dword_41CAD0;
  if ( v14 <= v15 )
  {
    sub_456180((int *)dword_44CE38, &dword_44CE00);
    dword_44CE00 = dword_41CAAC;
    dword_44CE04 = dword_41CAB0;
    dword_44CE08 = dword_41CABC;
    dword_44CE0C = dword_41CAC0;
    dword_44CE10 = dword_41CAC4;
    dword_44CE14 = dword_41CAC8;
    dword_44CE18 = dword_41CAD4;
    dword_44CE1C = dword_41CAD8;
    sub_4561C0((int *)dword_44CE3C, &dword_44CE00);
    dword_44CE00 = dword_41CAB4;
    dword_44CE04 = dword_41CAB8;
    dword_44CE08 = dword_41CABC;
    dword_44CE0C = dword_41CAC0;
    dword_44CE10 = dword_41CACC;
    dword_44CE14 = dword_41CAD0;
    dword_44CE18 = dword_41CAD4;
    dword_44CE1C = dword_41CAD8;
    sub_456180((int *)dword_44CE40, &dword_44CE00);
    v26 = 0;
    v27 = 0;
    dword_44CE30 += dword_45305C * *(_DWORD *)dword_44CE3C;
    if ( *(int *)(dword_44CE38 + 4) > 0 )
    {
      do
      {
        v28 = (_DWORD *)(v26 + dword_44CE38);
        v29 = v26 + dword_44CE3C + 8;
        v26 += 12;
        ++v27;
        sub_407150(
          *(_DWORD *)(v29 + 8) + dword_44CE30 + 1,
          v28[4] - *(_DWORD *)(v29 + 8) - 1,
          (v28[3] << 24) + (unsigned __int16)v28[2],
          (unsigned __int64)(int)v28[3] >> 8,
          (_BYTE *)v29);
        dword_44CE30 += dword_45305C;
      }
      while ( *(_DWORD *)(dword_44CE38 + 4) > v27 );
    }
    result = dword_44CE40;
    v30 = 0;
    v31 = 0;
    if ( *(int *)(dword_44CE40 + 4) > 0 )
    {
      v32 = 12 * v27;
      do
      {
        v33 = v30 + dword_44CE40;
        v34 = v32 + dword_44CE3C + 8;
        v32 += 12;
        v35 = *(_DWORD *)(v30 + dword_44CE40 + 12);
        v30 += 12;
        ++v31;
        sub_407150(
          *(_DWORD *)(v34 + 8) + dword_44CE30 + 1,
          *(_DWORD *)(v33 + 16) - *(_DWORD *)(v34 + 8) - 1,
          (v35 << 24) + (unsigned __int16)*(_DWORD *)(v33 + 8),
          SBYTE1(v35),
          (_BYTE *)v34);
        result = dword_44CE40;
        dword_44CE30 += dword_45305C;
      }
      while ( *(_DWORD *)(dword_44CE40 + 4) > v31 );
    }
  }
  else
  {
    sub_4561C0((int *)dword_44CE38, &dword_44CE00);
    dword_44CE00 = dword_41CAAC;
    dword_44CE04 = dword_41CAB0;
    dword_44CE08 = dword_41CABC;
    dword_44CE0C = dword_41CAC0;
    dword_44CE10 = dword_41CAC4;
    dword_44CE14 = dword_41CAC8;
    dword_44CE18 = dword_41CAD4;
    dword_44CE1C = dword_41CAD8;
    sub_456180((int *)dword_44CE3C, &dword_44CE00);
    dword_44CE00 = dword_41CAB4;
    dword_44CE04 = dword_41CAB8;
    dword_44CE08 = dword_41CABC;
    dword_44CE0C = dword_41CAC0;
    dword_44CE10 = dword_41CACC;
    dword_44CE14 = dword_41CAD0;
    dword_44CE18 = dword_41CAD4;
    dword_44CE1C = dword_41CAD8;
    sub_4561C0((int *)dword_44CE40, &dword_44CE00);
    v16 = 0;
    dword_44CE30 += dword_45305C * *(_DWORD *)dword_44CE38;
    if ( *(int *)(dword_44CE38 + 4) > 0 )
    {
      v17 = 0;
      do
      {
        v18 = (_DWORD *)(v17 + dword_44CE3C);
        v19 = v17 + dword_44CE38 + 8;
        v17 += 12;
        ++v16;
        sub_407150(
          *(_DWORD *)(v19 + 8) + dword_44CE30 + 1,
          v18[4] - *(_DWORD *)(v19 + 8) - 1,
          (v18[3] << 24) + (unsigned __int16)v18[2],
          (unsigned __int64)(int)v18[3] >> 8,
          (_BYTE *)v19);
        dword_44CE30 += dword_45305C;
      }
      while ( *(_DWORD *)(dword_44CE38 + 4) > v16 );
    }
    v20 = 0;
    result = dword_44CE40;
    if ( *(int *)(dword_44CE40 + 4) > 0 )
    {
      v21 = 3 * v16;
      v22 = 0;
      v23 = 4 * v21;
      do
      {
        v24 = (_DWORD *)(v23 + dword_44CE3C);
        v23 += 12;
        v36 = (_BYTE *)(v22 + dword_44CE40 + 8);
        v25 = *(_DWORD *)(v22 + dword_44CE40 + 16);
        v22 += 12;
        ++v20;
        sub_407150(
          v25 + dword_44CE30 + 1,
          v24[4] - v25 - 1,
          (v24[3] << 24) + (unsigned __int16)v24[2],
          BYTE1(v24[3]),
          v36);
        result = dword_44CE40;
        dword_44CE30 += dword_45305C;
      }
      while ( *(_DWORD *)(dword_44CE40 + 4) > v20 );
    }
  }
  return result;
}
// 41CAAC: using guessed type int dword_41CAAC;
// 41CAB0: using guessed type int dword_41CAB0;
// 41CAB4: using guessed type int dword_41CAB4;
// 41CAB8: using guessed type int dword_41CAB8;
// 41CABC: using guessed type int dword_41CABC;
// 41CAC0: using guessed type int dword_41CAC0;
// 41CAC4: using guessed type int dword_41CAC4;
// 41CAC8: using guessed type int dword_41CAC8;
// 41CACC: using guessed type int dword_41CACC;
// 41CAD0: using guessed type int dword_41CAD0;
// 41CAD4: using guessed type int dword_41CAD4;
// 41CAD8: using guessed type int dword_41CAD8;
// 41CADC: using guessed type int dword_41CADC;
// 41CAE0: using guessed type int dword_41CAE0;
// 44CE00: using guessed type int dword_44CE00;
// 44CE04: using guessed type int dword_44CE04;
// 44CE08: using guessed type int dword_44CE08;
// 44CE0C: using guessed type int dword_44CE0C;
// 44CE10: using guessed type int dword_44CE10;
// 44CE14: using guessed type int dword_44CE14;
// 44CE18: using guessed type int dword_44CE18;
// 44CE1C: using guessed type int dword_44CE1C;
// 44CE24: using guessed type int dword_44CE24;
// 44CE30: using guessed type int dword_44CE30;
// 44CE34: using guessed type int dword_44CE34;
// 44CE38: using guessed type int dword_44CE38;
// 44CE3C: using guessed type int dword_44CE3C;
// 44CE40: using guessed type int dword_44CE40;
// 44CE58: using guessed type int dword_44CE58;
// 453044: using guessed type int dword_453044;
// 453058: using guessed type int dword_453058;
// 45305C: using guessed type int dword_45305C;
// 453060: using guessed type int dword_453060;
// 453064: using guessed type int dword_453064;
// 453068: using guessed type int dword_453068;

//----- (00407910) --------------------------------------------------------
int __cdecl sub_407910(int a1)
{
  int result; // eax
  int v2; // esi
  int v3; // eax
  int v4; // esi
  int v5; // edi
  int v6; // ecx
  int v7; // edi
  int v8; // eax
  int v9; // esi
  int v10; // ebx
  int v11; // ecx
  int v12; // esi
  int v13; // edi
  int v14; // ecx
  int v15; // esi
  int v16; // ebx
  int v17; // edi
  int v18; // ecx

  result = dword_453044;
  if ( dword_41CAC0 >= dword_453044 )
  {
    result = dword_453058;
    if ( dword_41CAB0 <= dword_453058 )
    {
      result = dword_453064;
      if ( dword_44CE34 <= dword_453064 )
      {
        result = dword_453060;
        if ( dword_44CE58 >= dword_453060 )
        {
          sub_456000();
          sub_407130(dword_41CAE0, dword_41CADC, dword_44CE24, *(_DWORD *)(a1 + 56));
          v2 = sub_407F40(dword_41CAB4, dword_41CAB8, dword_41CABC, dword_41CAC0);
          v3 = sub_407F40(dword_41CAAC, dword_41CAB0, dword_41CAB4, dword_41CAB8);
          dword_44CE64 = dword_41CAB0;
          dword_44CE60 = dword_41CAAC;
          dword_44CE68 = dword_41CAB4;
          dword_44CE6C = dword_41CAB8;
          dword_44CE70 = dword_41CAC4;
          dword_44CE74 = dword_41CAC8;
          dword_44CE78 = dword_41CACC;
          dword_44CE7C = dword_41CAD0;
          if ( v2 <= v3 )
          {
            sub_456520((int *)dword_44CE38, &dword_44CE60);
            dword_44CE60 = dword_41CAAC;
            dword_44CE64 = dword_41CAB0;
            dword_44CE68 = dword_41CABC;
            dword_44CE6C = dword_41CAC0;
            dword_44CE70 = dword_41CAC4;
            dword_44CE74 = dword_41CAC8;
            dword_44CE78 = dword_41CAD4;
            dword_44CE7C = dword_41CAD8;
            sub_456640((int *)dword_44CE3C, &dword_44CE60);
            dword_44CE60 = dword_41CAB4;
            dword_44CE64 = dword_41CAB8;
            dword_44CE68 = dword_41CABC;
            dword_44CE6C = dword_41CAC0;
            dword_44CE70 = dword_41CACC;
            dword_44CE74 = dword_41CAD0;
            dword_44CE78 = dword_41CAD4;
            dword_44CE7C = dword_41CAD8;
            sub_456520((int *)dword_44CE40, &dword_44CE60);
            v12 = 0;
            v13 = 0;
            dword_44CE30 += dword_45305C * *(_DWORD *)dword_44CE3C;
            if ( *(int *)(dword_44CE38 + 4) > 0 )
            {
              do
              {
                v14 = *(_DWORD *)(v12 + dword_44CE3C + 16);
                if ( dword_453054 <= v14 )
                  sub_407150(
                    v14 + dword_44CE30 + 1,
                    *(_DWORD *)(v12 + dword_44CE38 + 16) - v14 - 1,
                    (*(_DWORD *)(v12 + dword_44CE38 + 12) << 24) + (unsigned __int16)*(_DWORD *)(v12 + dword_44CE38 + 8),
                    (unsigned __int64)*(int *)(v12 + dword_44CE38 + 12) >> 8,
                    (_BYTE *)(v12 + dword_44CE3C + 8));
                else
                  sub_407170(
                    dword_44CE30 + dword_453054,
                    *(_DWORD *)(v12 + dword_44CE38 + 16) - dword_453054,
                    (*(_DWORD *)(v12 + dword_44CE38 + 12) << 24) + (unsigned __int16)*(_DWORD *)(v12 + dword_44CE38 + 8),
                    (_BYTE *)((unsigned __int64)*(int *)(v12 + dword_44CE38 + 12) >> 8));
                v12 += 12;
                ++v13;
                dword_44CE30 += dword_45305C;
              }
              while ( *(_DWORD *)(dword_44CE38 + 4) > v13 );
            }
            result = dword_44CE40;
            v15 = 0;
            v16 = 0;
            if ( *(int *)(dword_44CE40 + 4) > 0 )
            {
              v17 = 12 * v13;
              do
              {
                v18 = *(_DWORD *)(v17 + dword_44CE3C + 16);
                if ( dword_453054 <= v18 )
                  sub_407150(
                    v18 + dword_44CE30 + 1,
                    *(_DWORD *)(v15 + dword_44CE40 + 16) - v18 - 1,
                    (*(_DWORD *)(v15 + dword_44CE40 + 12) << 24) + (unsigned __int16)*(_DWORD *)(v15 + dword_44CE40 + 8),
                    (unsigned __int64)*(int *)(v15 + dword_44CE40 + 12) >> 8,
                    (_BYTE *)(v17 + dword_44CE3C + 8));
                else
                  sub_407170(
                    dword_44CE30 + dword_453054,
                    *(_DWORD *)(v15 + dword_44CE40 + 16) - dword_453054,
                    (*(_DWORD *)(v15 + dword_44CE40 + 12) << 24) + (unsigned __int16)*(_DWORD *)(v15 + dword_44CE40 + 8),
                    (_BYTE *)((unsigned __int64)*(int *)(v15 + dword_44CE40 + 12) >> 8));
                v17 += 12;
                dword_44CE30 += dword_45305C;
                result = dword_44CE40;
                v15 += 12;
                ++v16;
              }
              while ( *(_DWORD *)(dword_44CE40 + 4) > v16 );
            }
          }
          else
          {
            sub_456640((int *)dword_44CE38, &dword_44CE60);
            dword_44CE60 = dword_41CAAC;
            dword_44CE64 = dword_41CAB0;
            dword_44CE68 = dword_41CABC;
            dword_44CE6C = dword_41CAC0;
            dword_44CE70 = dword_41CAC4;
            dword_44CE74 = dword_41CAC8;
            dword_44CE78 = dword_41CAD4;
            dword_44CE7C = dword_41CAD8;
            sub_456520((int *)dword_44CE3C, &dword_44CE60);
            dword_44CE60 = dword_41CAB4;
            dword_44CE64 = dword_41CAB8;
            dword_44CE68 = dword_41CABC;
            dword_44CE6C = dword_41CAC0;
            dword_44CE70 = dword_41CACC;
            dword_44CE74 = dword_41CAD0;
            dword_44CE78 = dword_41CAD4;
            dword_44CE7C = dword_41CAD8;
            sub_456640((int *)dword_44CE40, &dword_44CE60);
            v4 = 0;
            dword_44CE30 += dword_45305C * *(_DWORD *)dword_44CE38;
            if ( *(int *)(dword_44CE38 + 4) > 0 )
            {
              v5 = 0;
              do
              {
                v6 = *(_DWORD *)(v5 + dword_44CE38 + 16);
                if ( dword_453054 <= v6 )
                  sub_407150(
                    v6 + dword_44CE30 + 1,
                    *(_DWORD *)(v5 + dword_44CE3C + 16) - v6 - 1,
                    (*(_DWORD *)(v5 + dword_44CE3C + 12) << 24) + (unsigned __int16)*(_DWORD *)(v5 + dword_44CE3C + 8),
                    (unsigned __int64)*(int *)(v5 + dword_44CE3C + 12) >> 8,
                    (_BYTE *)(v5 + dword_44CE38 + 8));
                else
                  sub_407170(
                    dword_44CE30 + dword_453054,
                    *(_DWORD *)(v5 + dword_44CE3C + 16) - dword_453054,
                    (*(_DWORD *)(v5 + dword_44CE3C + 12) << 24) + (unsigned __int16)*(_DWORD *)(v5 + dword_44CE3C + 8),
                    (_BYTE *)((unsigned __int64)*(int *)(v5 + dword_44CE3C + 12) >> 8));
                v5 += 12;
                ++v4;
                dword_44CE30 += dword_45305C;
              }
              while ( *(_DWORD *)(dword_44CE38 + 4) > v4 );
            }
            v7 = 0;
            result = dword_44CE40;
            if ( *(int *)(dword_44CE40 + 4) > 0 )
            {
              v8 = 3 * v4;
              v9 = 0;
              v10 = 4 * v8;
              do
              {
                v11 = *(_DWORD *)(v9 + dword_44CE40 + 16);
                if ( dword_453054 <= v11 )
                  sub_407150(
                    v11 + dword_44CE30 + 1,
                    *(_DWORD *)(v10 + dword_44CE3C + 16) - v11 - 1,
                    (*(_DWORD *)(v10 + dword_44CE3C + 12) << 24) + (unsigned __int16)*(_DWORD *)(v10 + dword_44CE3C + 8),
                    (unsigned __int64)*(int *)(v10 + dword_44CE3C + 12) >> 8,
                    (_BYTE *)(v9 + dword_44CE40 + 8));
                else
                  sub_407170(
                    dword_44CE30 + dword_453054,
                    *(_DWORD *)(v10 + dword_44CE3C + 16) - dword_453054,
                    (*(_DWORD *)(v10 + dword_44CE3C + 12) << 24) + (unsigned __int16)*(_DWORD *)(v10 + dword_44CE3C + 8),
                    (_BYTE *)((unsigned __int64)*(int *)(v10 + dword_44CE3C + 12) >> 8));
                v10 += 12;
                dword_44CE30 += dword_45305C;
                result = dword_44CE40;
                v9 += 12;
                ++v7;
              }
              while ( *(_DWORD *)(dword_44CE40 + 4) > v7 );
            }
          }
        }
      }
    }
  }
  return result;
}
// 41CAAC: using guessed type int dword_41CAAC;
// 41CAB0: using guessed type int dword_41CAB0;
// 41CAB4: using guessed type int dword_41CAB4;
// 41CAB8: using guessed type int dword_41CAB8;
// 41CABC: using guessed type int dword_41CABC;
// 41CAC0: using guessed type int dword_41CAC0;
// 41CAC4: using guessed type int dword_41CAC4;
// 41CAC8: using guessed type int dword_41CAC8;
// 41CACC: using guessed type int dword_41CACC;
// 41CAD0: using guessed type int dword_41CAD0;
// 41CAD4: using guessed type int dword_41CAD4;
// 41CAD8: using guessed type int dword_41CAD8;
// 41CADC: using guessed type int dword_41CADC;
// 41CAE0: using guessed type int dword_41CAE0;
// 44CE24: using guessed type int dword_44CE24;
// 44CE30: using guessed type int dword_44CE30;
// 44CE34: using guessed type int dword_44CE34;
// 44CE38: using guessed type int dword_44CE38;
// 44CE3C: using guessed type int dword_44CE3C;
// 44CE40: using guessed type int dword_44CE40;
// 44CE58: using guessed type int dword_44CE58;
// 44CE60: using guessed type int dword_44CE60;
// 44CE64: using guessed type int dword_44CE64;
// 44CE68: using guessed type int dword_44CE68;
// 44CE6C: using guessed type int dword_44CE6C;
// 44CE70: using guessed type int dword_44CE70;
// 44CE74: using guessed type int dword_44CE74;
// 44CE78: using guessed type int dword_44CE78;
// 44CE7C: using guessed type int dword_44CE7C;
// 453044: using guessed type int dword_453044;
// 453054: using guessed type int dword_453054;
// 453058: using guessed type int dword_453058;
// 45305C: using guessed type int dword_45305C;
// 453060: using guessed type int dword_453060;
// 453064: using guessed type int dword_453064;

//----- (00407F40) --------------------------------------------------------
int __cdecl sub_407F40(int a1, int a2, int a3, int a4)
{
  int result; // eax

  if ( a4 != a2 )
    return ((a1 - a3) << 8) / (a2 - a4);
  result = -2147418112;
  if ( a3 >= a1 )
    return 2147418112;
  return result;
}

//----- (00407F80) --------------------------------------------------------
unsigned int __cdecl sub_407F80(int a1, int a2, int a3)
{
  return sub_4090B8(a1, a3, a2);
}

//----- (00407FA0) --------------------------------------------------------
char __cdecl sub_407FA0(int a1, int a2, int a3, char a4, _BYTE *a5)
{
  return sub_4090D8(a5, a3, a4, a1, a2);
}

//----- (00407FC0) --------------------------------------------------------
char __usercall sub_407FC0@<al>(unsigned int a1@<eax>, int a2, int a3, int a4, _BYTE *a5)
{
  return sub_40914E(a1, a4, a5, a2, a3);
}

//----- (00407FE0) --------------------------------------------------------
void sub_407FE0()
{
  dword_44CEB0 = 0;
  if ( !dword_41CA58 )
  {
    dword_44CEBC = (int)malloc(0x20D8u);
    dword_44CEC0 = (int)malloc(0x20D8u);
    dword_44CEC4 = (int)malloc(0x20D8u);
    dword_41CA58 = 1;
  }
}
// 41CA58: using guessed type int dword_41CA58;
// 44CEB0: using guessed type int dword_44CEB0;
// 44CEBC: using guessed type int dword_44CEBC;
// 44CEC0: using guessed type int dword_44CEC0;
// 44CEC4: using guessed type int dword_44CEC4;

//----- (00408040) --------------------------------------------------------
int __cdecl sub_408040(_DWORD *a1)
{
  int v1; // edx
  int v2; // eax
  int v3; // ebx
  int v4; // ebp
  int v5; // eax
  int v6; // eax
  int v7; // ebx
  int v8; // ebp
  int v9; // eax
  int v10; // eax
  int v11; // ebx
  int v12; // ebp
  int v13; // eax
  int result; // eax
  int v15; // esi
  int v16; // eax
  int v17; // esi
  int v18; // edi
  _DWORD *v19; // ebx
  int v20; // ebp
  int v21; // edi
  int v22; // eax
  int v23; // esi
  int v24; // ebx
  _DWORD *v25; // ebp
  int v26; // ecx
  int v27; // esi
  int v28; // edi
  _DWORD *v29; // ebx
  int v30; // ebp
  int v31; // esi
  int v32; // ebx
  int v33; // edi
  int v34; // ebp
  int v35; // edx
  int v36; // eax
  _BYTE *v37; // [esp-4h] [ebp-14h]

  dword_41CAAC = a1[1];
  dword_41CAB0 = a1[2];
  dword_41CAB4 = a1[3];
  dword_41CAB8 = a1[4];
  dword_41CABC = a1[5];
  dword_41CAC0 = a1[6];
  dword_41CAC4 = a1[7];
  dword_41CAC8 = a1[8];
  dword_41CACC = a1[9];
  dword_41CAD0 = a1[10];
  dword_41CAD4 = a1[11];
  dword_41CAD8 = a1[12];
  dword_44CEA8 = a1[13];
  dword_44CEB4 = dword_453068;
  if ( dword_41CAB4 >= dword_41CAAC )
  {
    v1 = dword_41CAAC;
    dword_44CED8 = dword_41CAB4;
  }
  else
  {
    v1 = dword_41CAB4;
    dword_44CED8 = dword_41CAAC;
  }
  dword_44CEB8 = v1;
  if ( dword_41CABC <= dword_44CED8 )
  {
    if ( dword_44CEB8 > dword_41CABC )
      dword_44CEB8 = dword_41CABC;
  }
  else
  {
    dword_44CED8 = dword_41CABC;
  }
  v2 = dword_41CAC0;
  if ( dword_41CAB0 > dword_41CAC0 )
  {
    v3 = dword_41CAD8;
    v4 = dword_41CABC;
    dword_41CAC0 = dword_41CAB0;
    dword_41CAB0 = v2;
    dword_41CABC = dword_41CAAC;
    dword_41CAD8 = dword_41CAC8;
    dword_41CAC8 = v3;
    v5 = dword_41CAD4;
    dword_41CAAC = v4;
    dword_41CAD4 = dword_41CAC4;
    dword_41CAC4 = v5;
  }
  v6 = dword_41CAB8;
  if ( dword_41CAB0 <= dword_41CAB8 )
  {
    v10 = dword_41CAB8;
    if ( dword_41CAC0 < dword_41CAB8 )
    {
      v11 = dword_41CAD0;
      v12 = dword_41CAB4;
      dword_41CAB8 = dword_41CAC0;
      dword_41CAC0 = v10;
      dword_41CAB4 = dword_41CABC;
      dword_41CAD0 = dword_41CAD8;
      dword_41CAD8 = v11;
      v13 = dword_41CACC;
      dword_41CABC = v12;
      dword_41CACC = dword_41CAD4;
      dword_41CAD4 = v13;
    }
  }
  else
  {
    v7 = dword_41CAD0;
    v8 = dword_41CAB4;
    dword_41CAB8 = dword_41CAB0;
    dword_41CAB0 = v6;
    dword_41CAB4 = dword_41CAAC;
    dword_41CAD0 = dword_41CAC8;
    dword_41CAC8 = v7;
    v9 = dword_41CACC;
    dword_41CAAC = v8;
    dword_41CACC = dword_41CAC4;
    dword_41CAC4 = v9;
  }
  if ( dword_41CAB0 < dword_453044
    || dword_41CAC0 > dword_453058
    || dword_44CED8 > dword_453064
    || dword_453060 > dword_44CEB8 )
  {
    return sub_408750();
  }
  sub_456000();
  sub_407F80(dword_41CAE0, dword_41CADC, dword_44CEA8);
  v15 = sub_408D70(dword_41CAAC, dword_41CAB0, dword_41CABC, dword_41CAC0);
  v16 = sub_408D70(dword_41CAAC, dword_41CAB0, dword_41CAB4, dword_41CAB8);
  dword_44CE8C = dword_41CAB0;
  dword_44CE88 = dword_41CAAC;
  dword_44CE90 = dword_41CAB4;
  dword_44CE94 = dword_41CAB8;
  dword_44CE98 = dword_41CAC4;
  dword_44CE9C = dword_41CAC8;
  dword_44CEA0 = dword_41CACC;
  dword_44CEA4 = dword_41CAD0;
  if ( v15 <= v16 )
  {
    sub_456180((int *)dword_44CEBC, &dword_44CE88);
    dword_44CE88 = dword_41CAAC;
    dword_44CE8C = dword_41CAB0;
    dword_44CE90 = dword_41CABC;
    dword_44CE94 = dword_41CAC0;
    dword_44CE98 = dword_41CAC4;
    dword_44CE9C = dword_41CAC8;
    dword_44CEA0 = dword_41CAD4;
    dword_44CEA4 = dword_41CAD8;
    sub_4561C0((int *)dword_44CEC0, &dword_44CE88);
    dword_44CE88 = dword_41CAB4;
    dword_44CE8C = dword_41CAB8;
    dword_44CE90 = dword_41CABC;
    dword_44CE94 = dword_41CAC0;
    dword_44CE98 = dword_41CACC;
    dword_44CE9C = dword_41CAD0;
    dword_44CEA0 = dword_41CAD4;
    dword_44CEA4 = dword_41CAD8;
    sub_456180((int *)dword_44CEC4, &dword_44CE88);
    v27 = 0;
    v28 = 0;
    dword_44CEB4 += dword_45305C * *(_DWORD *)dword_44CEC0;
    if ( *(int *)(dword_44CEBC + 4) > 0 )
    {
      do
      {
        v29 = (_DWORD *)(v27 + dword_44CEBC);
        v30 = v27 + dword_44CEC0 + 8;
        v27 += 12;
        ++v28;
        sub_407FA0(
          *(_DWORD *)(v30 + 8) + dword_44CEB4 + 1,
          v29[4] - *(_DWORD *)(v30 + 8) - 1,
          (v29[3] << 24) + (unsigned __int16)v29[2],
          (unsigned __int64)(int)v29[3] >> 8,
          (_BYTE *)v30);
        dword_44CEB4 += dword_45305C;
      }
      while ( *(_DWORD *)(dword_44CEBC + 4) > v28 );
    }
    result = dword_44CEC4;
    v31 = 0;
    v32 = 0;
    if ( *(int *)(dword_44CEC4 + 4) > 0 )
    {
      v33 = 12 * v28;
      do
      {
        v34 = v31 + dword_44CEC4;
        v35 = v33 + dword_44CEC0 + 8;
        v33 += 12;
        v36 = *(_DWORD *)(v31 + dword_44CEC4 + 12);
        v31 += 12;
        ++v32;
        sub_407FA0(
          *(_DWORD *)(v35 + 8) + dword_44CEB4 + 1,
          *(_DWORD *)(v34 + 16) - *(_DWORD *)(v35 + 8) - 1,
          (v36 << 24) + (unsigned __int16)*(_DWORD *)(v34 + 8),
          SBYTE1(v36),
          (_BYTE *)v35);
        result = dword_44CEC4;
        dword_44CEB4 += dword_45305C;
      }
      while ( *(_DWORD *)(dword_44CEC4 + 4) > v32 );
    }
  }
  else
  {
    sub_4561C0((int *)dword_44CEBC, &dword_44CE88);
    dword_44CE88 = dword_41CAAC;
    dword_44CE8C = dword_41CAB0;
    dword_44CE90 = dword_41CABC;
    dword_44CE94 = dword_41CAC0;
    dword_44CE98 = dword_41CAC4;
    dword_44CE9C = dword_41CAC8;
    dword_44CEA0 = dword_41CAD4;
    dword_44CEA4 = dword_41CAD8;
    sub_456180((int *)dword_44CEC0, &dword_44CE88);
    dword_44CE88 = dword_41CAB4;
    dword_44CE8C = dword_41CAB8;
    dword_44CE90 = dword_41CABC;
    dword_44CE94 = dword_41CAC0;
    dword_44CE98 = dword_41CACC;
    dword_44CE9C = dword_41CAD0;
    dword_44CEA0 = dword_41CAD4;
    dword_44CEA4 = dword_41CAD8;
    sub_4561C0((int *)dword_44CEC4, &dword_44CE88);
    v17 = 0;
    dword_44CEB4 += dword_45305C * *(_DWORD *)dword_44CEBC;
    if ( *(int *)(dword_44CEBC + 4) > 0 )
    {
      v18 = 0;
      do
      {
        v19 = (_DWORD *)(v18 + dword_44CEC0);
        v20 = v18 + dword_44CEBC + 8;
        v18 += 12;
        ++v17;
        sub_407FA0(
          *(_DWORD *)(v20 + 8) + dword_44CEB4 + 1,
          v19[4] - *(_DWORD *)(v20 + 8) - 1,
          (v19[3] << 24) + (unsigned __int16)v19[2],
          (unsigned __int64)(int)v19[3] >> 8,
          (_BYTE *)v20);
        dword_44CEB4 += dword_45305C;
      }
      while ( *(_DWORD *)(dword_44CEBC + 4) > v17 );
    }
    v21 = 0;
    result = dword_44CEC4;
    if ( *(int *)(dword_44CEC4 + 4) > 0 )
    {
      v22 = 3 * v17;
      v23 = 0;
      v24 = 4 * v22;
      do
      {
        v25 = (_DWORD *)(v24 + dword_44CEC0);
        v24 += 12;
        v37 = (_BYTE *)(v23 + dword_44CEC4 + 8);
        v26 = *(_DWORD *)(v23 + dword_44CEC4 + 16);
        v23 += 12;
        ++v21;
        sub_407FA0(
          v26 + dword_44CEB4 + 1,
          v25[4] - v26 - 1,
          (v25[3] << 24) + (unsigned __int16)v25[2],
          BYTE1(v25[3]),
          v37);
        result = dword_44CEC4;
        dword_44CEB4 += dword_45305C;
      }
      while ( *(_DWORD *)(dword_44CEC4 + 4) > v21 );
    }
  }
  return result;
}
// 41CAAC: using guessed type int dword_41CAAC;
// 41CAB0: using guessed type int dword_41CAB0;
// 41CAB4: using guessed type int dword_41CAB4;
// 41CAB8: using guessed type int dword_41CAB8;
// 41CABC: using guessed type int dword_41CABC;
// 41CAC0: using guessed type int dword_41CAC0;
// 41CAC4: using guessed type int dword_41CAC4;
// 41CAC8: using guessed type int dword_41CAC8;
// 41CACC: using guessed type int dword_41CACC;
// 41CAD0: using guessed type int dword_41CAD0;
// 41CAD4: using guessed type int dword_41CAD4;
// 41CAD8: using guessed type int dword_41CAD8;
// 41CADC: using guessed type int dword_41CADC;
// 41CAE0: using guessed type int dword_41CAE0;
// 44CE88: using guessed type int dword_44CE88;
// 44CE8C: using guessed type int dword_44CE8C;
// 44CE90: using guessed type int dword_44CE90;
// 44CE94: using guessed type int dword_44CE94;
// 44CE98: using guessed type int dword_44CE98;
// 44CE9C: using guessed type int dword_44CE9C;
// 44CEA0: using guessed type int dword_44CEA0;
// 44CEA4: using guessed type int dword_44CEA4;
// 44CEA8: using guessed type int dword_44CEA8;
// 44CEB4: using guessed type int dword_44CEB4;
// 44CEB8: using guessed type int dword_44CEB8;
// 44CEBC: using guessed type int dword_44CEBC;
// 44CEC0: using guessed type int dword_44CEC0;
// 44CEC4: using guessed type int dword_44CEC4;
// 44CED8: using guessed type int dword_44CED8;
// 453044: using guessed type int dword_453044;
// 453058: using guessed type int dword_453058;
// 45305C: using guessed type int dword_45305C;
// 453060: using guessed type int dword_453060;
// 453064: using guessed type int dword_453064;
// 453068: using guessed type int dword_453068;

//----- (00408750) --------------------------------------------------------
int sub_408750()
{
  int result; // eax
  int v1; // esi
  int v2; // eax
  int v3; // esi
  int v4; // edi
  int v5; // ecx
  int v6; // edi
  int v7; // eax
  int v8; // esi
  int v9; // ebx
  int v10; // ecx
  int v11; // esi
  int v12; // edi
  int v13; // ecx
  int v14; // esi
  int v15; // ebx
  int v16; // edi
  int v17; // ecx

  result = dword_453044;
  if ( dword_41CAC0 >= dword_453044 )
  {
    result = dword_453058;
    if ( dword_41CAB0 <= dword_453058 )
    {
      result = dword_453064;
      if ( dword_44CEB8 <= dword_453064 )
      {
        result = dword_44CED8;
        if ( dword_453060 <= dword_44CED8 )
        {
          sub_456000();
          sub_407F80(dword_41CAE0, dword_41CADC, dword_44CEA8);
          v1 = sub_408D70(dword_41CAB4, dword_41CAB8, dword_41CABC, dword_41CAC0);
          v2 = sub_408D70(dword_41CAAC, dword_41CAB0, dword_41CAB4, dword_41CAB8);
          dword_44CEE4 = dword_41CAB0;
          dword_44CEE0 = dword_41CAAC;
          dword_44CEE8 = dword_41CAB4;
          dword_44CEEC = dword_41CAB8;
          dword_44CEF0 = dword_41CAC4;
          dword_44CEF4 = dword_41CAC8;
          dword_44CEF8 = dword_41CACC;
          dword_44CEFC = dword_41CAD0;
          if ( v1 <= v2 )
          {
            sub_456520((int *)dword_44CEBC, &dword_44CEE0);
            dword_44CEE0 = dword_41CAAC;
            dword_44CEE4 = dword_41CAB0;
            dword_44CEE8 = dword_41CABC;
            dword_44CEEC = dword_41CAC0;
            dword_44CEF0 = dword_41CAC4;
            dword_44CEF4 = dword_41CAC8;
            dword_44CEF8 = dword_41CAD4;
            dword_44CEFC = dword_41CAD8;
            sub_456640((int *)dword_44CEC0, &dword_44CEE0);
            dword_44CEE0 = dword_41CAB4;
            dword_44CEE4 = dword_41CAB8;
            dword_44CEE8 = dword_41CABC;
            dword_44CEEC = dword_41CAC0;
            dword_44CEF0 = dword_41CACC;
            dword_44CEF4 = dword_41CAD0;
            dword_44CEF8 = dword_41CAD4;
            dword_44CEFC = dword_41CAD8;
            sub_456520((int *)dword_44CEC4, &dword_44CEE0);
            v11 = 0;
            v12 = 0;
            dword_44CEB4 += dword_45305C * *(_DWORD *)dword_44CEC0;
            if ( *(int *)(dword_44CEBC + 4) > 0 )
            {
              do
              {
                v13 = *(_DWORD *)(v11 + dword_44CEC0 + 16);
                if ( dword_453054 <= v13 )
                  sub_407FA0(
                    v13 + dword_44CEB4 + 1,
                    *(_DWORD *)(v11 + dword_44CEBC + 16) - v13 - 1,
                    (*(_DWORD *)(v11 + dword_44CEBC + 12) << 24) + (unsigned __int16)*(_DWORD *)(v11 + dword_44CEBC + 8),
                    (unsigned __int64)*(int *)(v11 + dword_44CEBC + 12) >> 8,
                    (_BYTE *)(v11 + dword_44CEC0 + 8));
                else
                  sub_407FC0(
                    dword_44CEB4 + dword_453054,
                    dword_44CEB4 + dword_453054,
                    *(_DWORD *)(v11 + dword_44CEBC + 16) - dword_453054,
                    (*(_DWORD *)(v11 + dword_44CEBC + 12) << 24) + (unsigned __int16)*(_DWORD *)(v11 + dword_44CEBC + 8),
                    (_BYTE *)((unsigned __int64)*(int *)(v11 + dword_44CEBC + 12) >> 8));
                v11 += 12;
                ++v12;
                dword_44CEB4 += dword_45305C;
              }
              while ( *(_DWORD *)(dword_44CEBC + 4) > v12 );
            }
            result = dword_44CEC4;
            v14 = 0;
            v15 = 0;
            if ( *(int *)(dword_44CEC4 + 4) > 0 )
            {
              v16 = 12 * v12;
              do
              {
                v17 = *(_DWORD *)(v16 + dword_44CEC0 + 16);
                if ( dword_453054 <= v17 )
                  sub_407FA0(
                    v17 + dword_44CEB4 + 1,
                    *(_DWORD *)(v14 + dword_44CEC4 + 16) - v17 - 1,
                    (*(_DWORD *)(v14 + dword_44CEC4 + 12) << 24) + (unsigned __int16)*(_DWORD *)(v14 + dword_44CEC4 + 8),
                    (unsigned __int64)*(int *)(v14 + dword_44CEC4 + 12) >> 8,
                    (_BYTE *)(v16 + dword_44CEC0 + 8));
                else
                  sub_407FC0(
                    dword_44CEB4 + dword_453054,
                    dword_44CEB4 + dword_453054,
                    *(_DWORD *)(v14 + dword_44CEC4 + 16) - dword_453054,
                    (*(_DWORD *)(v14 + dword_44CEC4 + 12) << 24) + (unsigned __int16)*(_DWORD *)(v14 + dword_44CEC4 + 8),
                    (_BYTE *)((unsigned __int64)*(int *)(v14 + dword_44CEC4 + 12) >> 8));
                v16 += 12;
                dword_44CEB4 += dword_45305C;
                result = dword_44CEC4;
                v14 += 12;
                ++v15;
              }
              while ( *(_DWORD *)(dword_44CEC4 + 4) > v15 );
            }
          }
          else
          {
            sub_456640((int *)dword_44CEBC, &dword_44CEE0);
            dword_44CEE0 = dword_41CAAC;
            dword_44CEE4 = dword_41CAB0;
            dword_44CEE8 = dword_41CABC;
            dword_44CEEC = dword_41CAC0;
            dword_44CEF0 = dword_41CAC4;
            dword_44CEF4 = dword_41CAC8;
            dword_44CEF8 = dword_41CAD4;
            dword_44CEFC = dword_41CAD8;
            sub_456520((int *)dword_44CEC0, &dword_44CEE0);
            dword_44CEE0 = dword_41CAB4;
            dword_44CEE4 = dword_41CAB8;
            dword_44CEE8 = dword_41CABC;
            dword_44CEEC = dword_41CAC0;
            dword_44CEF0 = dword_41CACC;
            dword_44CEF4 = dword_41CAD0;
            dword_44CEF8 = dword_41CAD4;
            dword_44CEFC = dword_41CAD8;
            sub_456640((int *)dword_44CEC4, &dword_44CEE0);
            v3 = 0;
            dword_44CEB4 += dword_45305C * *(_DWORD *)dword_44CEBC;
            if ( *(int *)(dword_44CEBC + 4) > 0 )
            {
              v4 = 0;
              do
              {
                v5 = *(_DWORD *)(v4 + dword_44CEBC + 16);
                if ( dword_453054 <= v5 )
                  sub_407FA0(
                    v5 + dword_44CEB4 + 1,
                    *(_DWORD *)(v4 + dword_44CEC0 + 16) - v5 - 1,
                    (*(_DWORD *)(v4 + dword_44CEC0 + 12) << 24) + (unsigned __int16)*(_DWORD *)(v4 + dword_44CEC0 + 8),
                    (unsigned __int64)*(int *)(v4 + dword_44CEC0 + 12) >> 8,
                    (_BYTE *)(v4 + dword_44CEBC + 8));
                else
                  sub_407FC0(
                    dword_44CEB4 + dword_453054,
                    dword_44CEB4 + dword_453054,
                    *(_DWORD *)(v4 + dword_44CEC0 + 16) - dword_453054,
                    (*(_DWORD *)(v4 + dword_44CEC0 + 12) << 24) + (unsigned __int16)*(_DWORD *)(v4 + dword_44CEC0 + 8),
                    (_BYTE *)((unsigned __int64)*(int *)(v4 + dword_44CEC0 + 12) >> 8));
                v4 += 12;
                ++v3;
                dword_44CEB4 += dword_45305C;
              }
              while ( *(_DWORD *)(dword_44CEBC + 4) > v3 );
            }
            v6 = 0;
            result = dword_44CEC4;
            if ( *(int *)(dword_44CEC4 + 4) > 0 )
            {
              v7 = 3 * v3;
              v8 = 0;
              v9 = 4 * v7;
              do
              {
                v10 = *(_DWORD *)(v8 + dword_44CEC4 + 16);
                if ( dword_453054 <= v10 )
                  sub_407FA0(
                    v10 + dword_44CEB4 + 1,
                    *(_DWORD *)(v9 + dword_44CEC0 + 16) - v10 - 1,
                    (*(_DWORD *)(v9 + dword_44CEC0 + 12) << 24) + (unsigned __int16)*(_DWORD *)(v9 + dword_44CEC0 + 8),
                    (unsigned __int64)*(int *)(v9 + dword_44CEC0 + 12) >> 8,
                    (_BYTE *)(v8 + dword_44CEC4 + 8));
                else
                  sub_407FC0(
                    dword_44CEB4 + dword_453054,
                    dword_44CEB4 + dword_453054,
                    *(_DWORD *)(v9 + dword_44CEC0 + 16) - dword_453054,
                    (*(_DWORD *)(v9 + dword_44CEC0 + 12) << 24) + (unsigned __int16)*(_DWORD *)(v9 + dword_44CEC0 + 8),
                    (_BYTE *)((unsigned __int64)*(int *)(v9 + dword_44CEC0 + 12) >> 8));
                v9 += 12;
                dword_44CEB4 += dword_45305C;
                result = dword_44CEC4;
                v8 += 12;
                ++v6;
              }
              while ( *(_DWORD *)(dword_44CEC4 + 4) > v6 );
            }
          }
        }
      }
    }
  }
  return result;
}
// 41CAAC: using guessed type int dword_41CAAC;
// 41CAB0: using guessed type int dword_41CAB0;
// 41CAB4: using guessed type int dword_41CAB4;
// 41CAB8: using guessed type int dword_41CAB8;
// 41CABC: using guessed type int dword_41CABC;
// 41CAC0: using guessed type int dword_41CAC0;
// 41CAC4: using guessed type int dword_41CAC4;
// 41CAC8: using guessed type int dword_41CAC8;
// 41CACC: using guessed type int dword_41CACC;
// 41CAD0: using guessed type int dword_41CAD0;
// 41CAD4: using guessed type int dword_41CAD4;
// 41CAD8: using guessed type int dword_41CAD8;
// 41CADC: using guessed type int dword_41CADC;
// 41CAE0: using guessed type int dword_41CAE0;
// 44CEA8: using guessed type int dword_44CEA8;
// 44CEB4: using guessed type int dword_44CEB4;
// 44CEB8: using guessed type int dword_44CEB8;
// 44CEBC: using guessed type int dword_44CEBC;
// 44CEC0: using guessed type int dword_44CEC0;
// 44CEC4: using guessed type int dword_44CEC4;
// 44CED8: using guessed type int dword_44CED8;
// 44CEE0: using guessed type int dword_44CEE0;
// 44CEE4: using guessed type int dword_44CEE4;
// 44CEE8: using guessed type int dword_44CEE8;
// 44CEEC: using guessed type int dword_44CEEC;
// 44CEF0: using guessed type int dword_44CEF0;
// 44CEF4: using guessed type int dword_44CEF4;
// 44CEF8: using guessed type int dword_44CEF8;
// 44CEFC: using guessed type int dword_44CEFC;
// 453044: using guessed type int dword_453044;
// 453054: using guessed type int dword_453054;
// 453058: using guessed type int dword_453058;
// 45305C: using guessed type int dword_45305C;
// 453060: using guessed type int dword_453060;
// 453064: using guessed type int dword_453064;

//----- (00408D70) --------------------------------------------------------
int __cdecl sub_408D70(int a1, int a2, int a3, int a4)
{
  int result; // eax

  if ( a4 != a2 )
    return ((a1 - a3) << 8) / (a2 - a4);
  result = -2147418112;
  if ( a1 <= a3 )
    return 2147418112;
  return result;
}

//----- (00408DC9) --------------------------------------------------------
void __usercall __spoils<ecx> sub_408DC9(_DWORD *a1@<esi>)
{
  int *v1; // ebx
  int v2; // eax
  int v3; // ebx
  _DWORD *v4; // edx
  int v5; // ebx
  int v6; // ecx
  int v7; // ecx
  bool v8; // cc
  int v9; // edx
  int v10; // ebx
  int v11; // edx
  int v12; // eax
  _BYTE *v13; // edi
  _BYTE *v14; // ebx
  int v15; // ebp
  _BYTE *v16; // esi
  int v17; // ecx
  char *v18; // edx
  int v19; // ecx
  bool v20; // sf
  int v21; // ecx
  char v22; // ah
  int v23; // ecx

  if ( a1[3] )
  {
    v1 = (int *)a1[1];
    dword_41CA74 = *v1;
    dword_41CA78 = v1[1];
    dword_41CA6C = a1[2];
    dword_41CA70 = a1[3];
    sub_4091F8(&dword_41CA68);
    return;
  }
  v2 = a1[2];
  v3 = *(_DWORD *)(v2 + 12);
  LOBYTE(v3) = *(_BYTE *)(v2 + 9);
  dword_41CA5C = *(_DWORD *)(v2 + 24) + v3;
  dword_41CA60 = (*(int *)(v2 + 16) >> 8) - (*(int *)(v2 + 8) >> 8);
  dword_41CA64 = (*(int *)(v2 + 20) >> 8) - (*(int *)(v2 + 12) >> 8);
  v4 = (_DWORD *)a1[1];
  v5 = (*v4 - *(_DWORD *)v2) >> 8;
  v6 = (v4[1] - *(_DWORD *)(v2 + 4)) >> 8;
  if ( v6 < dword_45304C )
  {
    v7 = dword_45304C - v6;
    v8 = dword_41CA64 <= v7;
    dword_41CA64 -= v7;
    if ( v8 )
      return;
    dword_41CA5C += v7 << 8;
    v6 = dword_45304C;
  }
  v9 = dword_41CA64 + v6 - dword_453048;
  if ( dword_41CA64 + v6 <= dword_453048 || (v8 = dword_41CA64 <= v9, dword_41CA64 -= v9, !v8) )
  {
    if ( v5 < dword_453054 )
    {
      v10 = dword_453054 - v5;
      v8 = dword_41CA60 <= v10;
      dword_41CA60 -= v10;
      if ( v8 )
        return;
      dword_41CA5C += v10;
      v5 = dword_453054;
    }
    v11 = dword_41CA60 + v5 - dword_453050;
    if ( dword_41CA60 + v5 <= dword_453050 || (v8 = dword_41CA60 <= v11, dword_41CA60 -= v11, !v8) )
    {
      v12 = a1[2];
      v13 = (_BYTE *)(dword_453068 + dword_45305C * v6 + v5);
      v14 = *(_BYTE **)(v12 + 28);
      v15 = dword_41CA64;
      v16 = (_BYTE *)dword_41CA5C;
      v17 = dword_41CA60;
      HIWORD(v18) = HIWORD(v14);
      while ( 1 )
      {
        v8 = v17 < 6;
        v19 = v17 - 6;
        if ( !v8 )
          break;
        v23 = v19 + 4;
        if ( v23 >= 0 )
        {
          LOBYTE(v14) = v13[v23 + 1];
          BYTE1(v18) = v16[v23];
          BYTE1(v14) = v16[v23 + 1];
          LOBYTE(v18) = v13[v23];
          v19 = v23 - 4;
          BYTE1(v12) = *v14;
          goto LABEL_17;
        }
        if ( v23 + 1 < 0 )
          goto LABEL_20;
        LOBYTE(v18) = *v13;
        BYTE1(v18) = *v16;
        v22 = *v18;
LABEL_19:
        *v13 = v22;
LABEL_20:
        HIWORD(v12) = HIWORD(dword_45305C);
        v16 += 256;
        v13 += dword_45305C;
        --v15;
        v17 = dword_41CA60;
        if ( !v15 )
          return;
      }
      LOBYTE(v14) = v13[v19 + 5];
      BYTE1(v18) = v16[v19 + 4];
      BYTE1(v14) = v16[v19 + 5];
      LOBYTE(v18) = v13[v19 + 4];
      BYTE1(v12) = *v14;
      do
      {
        LOBYTE(v14) = v13[v19 + 3];
        LOBYTE(v12) = *v18;
        BYTE1(v14) = v16[v19 + 3];
        LOBYTE(v18) = v13[v19 + 2];
        v12 <<= 16;
        BYTE1(v18) = v16[v19 + 2];
        BYTE1(v12) = *v14;
        LOBYTE(v14) = v13[v19 + 1];
        LOBYTE(v12) = *v18;
        LOBYTE(v18) = v13[v19];
        BYTE1(v14) = v16[v19 + 1];
        *(_DWORD *)&v13[v19 + 2] = v12;
        BYTE1(v18) = v16[v19];
        v19 -= 4;
        BYTE1(v12) = *v14;
      }
      while ( v19 >= 0 );
LABEL_17:
      v13[v19 + 5] = BYTE1(v12);
      v20 = v19 + 3 < 0;
      v21 = v19 + 3;
      v22 = *v18;
      if ( !v20 )
      {
        do
        {
          BYTE1(v18) = v16[v21];
          v13[v21 + 1] = v22;
          LOBYTE(v18) = v13[v21--];
          v22 = *v18;
        }
        while ( v21 >= 0 );
      }
      goto LABEL_19;
    }
  }
}
// 408DC9: could not find valid save-restore pair for esi
// 41CA5C: using guessed type int dword_41CA5C;
// 41CA60: using guessed type int dword_41CA60;
// 41CA64: using guessed type int dword_41CA64;
// 41CA68: using guessed type _DWORD dword_41CA68;
// 41CA6C: using guessed type int dword_41CA6C;
// 41CA70: using guessed type int dword_41CA70;
// 41CA74: using guessed type int dword_41CA74;
// 41CA78: using guessed type int dword_41CA78;
// 453048: using guessed type int dword_453048;
// 45304C: using guessed type int dword_45304C;
// 453050: using guessed type int dword_453050;
// 453054: using guessed type int dword_453054;
// 45305C: using guessed type int dword_45305C;
// 453068: using guessed type int dword_453068;

//----- (00408FA4) --------------------------------------------------------
unsigned int __usercall sub_408FA4@<eax>(int a1@<eax>, int a2@<edx>, int a3@<ecx>, int a4@<ebx>)
{
  unsigned int result; // eax
  int v5; // ebx

  dword_41CAA4 = a2;
  result = (unsigned int)-a1 >> 8;
  dword_41CAA0 = a3;
  v5 = __ROR4__(-a4, 16);
  byte_41CA98 = v5;
  LOWORD(v5) = result;
  dword_41CA9C = v5;
  return result;
}
// 41CA98: using guessed type char byte_41CA98;
// 41CA9C: using guessed type int dword_41CA9C;
// 41CAA0: using guessed type int dword_41CAA0;
// 41CAA4: using guessed type int dword_41CAA4;

//----- (00408FCA) --------------------------------------------------------
char __usercall sub_408FCA@<al>(_BYTE *a1@<eax>, int a2@<ecx>, char a3@<bl>, int a4@<edi>, int a5@<esi>)
{
  char *v6; // ebx
  char v7; // dl
  int v8; // ebp
  _BYTE *v9; // eax
  int i; // esi
  bool v11; // cf

  HIWORD(v6) = HIWORD(dword_41CAA0);
  LOBYTE(v6) = a1[4];
  BYTE1(v6) = *a1;
  byte_41CAA8 = *v6;
  LOBYTE(v6) = a3;
  v7 = byte_41CA98;
  v8 = dword_41CA9C;
  v9 = (_BYTE *)dword_41CAA4;
  for ( i = a5 - 1; i >= 0; --i )
  {
    v11 = __CFADD__(v8, a2);
    a2 += v8;
    BYTE1(v6) = BYTE1(a2);
    LOBYTE(v6) = v7 + v11 + (_BYTE)v6;
    LOBYTE(v9) = *(_BYTE *)(a4 + i);
    BYTE1(v9) = *v6;
    *(_BYTE *)(a4 + i) = *v9;
  }
  if ( i + 1 >= 0 )
  {
    BYTE1(v9) = byte_41CAA8;
    LOBYTE(v9) = *(_BYTE *)(a4 + i);
    *(_BYTE *)(a4 + i) = *v9;
  }
  return (char)v9;
}
// 41CA98: using guessed type char byte_41CA98;
// 41CA9C: using guessed type int dword_41CA9C;
// 41CAA0: using guessed type int dword_41CAA0;
// 41CAA4: using guessed type int dword_41CAA4;
// 41CAA8: using guessed type char byte_41CAA8;

//----- (0040901F) --------------------------------------------------------
char __usercall sub_40901F@<al>(int a1@<ecx>, _BYTE *a2@<ebx>, int a3@<edi>, int a4@<esi>)
{
  char v4; // dl
  int v5; // ebp
  _BYTE *v6; // eax
  int i; // esi
  bool v8; // cf

  HIWORD(a2) = HIWORD(dword_41CAA0);
  v4 = byte_41CA98;
  v5 = dword_41CA9C;
  v6 = (_BYTE *)dword_41CAA4;
  for ( i = a4 - 1; i >= 0; --i )
  {
    v8 = __CFADD__(v5, a1);
    a1 += v5;
    BYTE1(a2) = BYTE1(a1);
    LOBYTE(a2) = v4 + v8 + (_BYTE)a2;
    BYTE1(v6) = *a2;
    LOBYTE(v6) = *(_BYTE *)(a3 + i);
    *(_BYTE *)(a3 + i) = *v6;
  }
  return (char)v6;
}
// 41CA98: using guessed type char byte_41CA98;
// 41CA9C: using guessed type int dword_41CA9C;
// 41CAA0: using guessed type int dword_41CAA0;
// 41CAA4: using guessed type int dword_41CAA4;

//----- (004090B8) --------------------------------------------------------
unsigned int __usercall sub_4090B8@<eax>(int a1@<eax>, int a2@<ecx>, int a3@<ebx>)
{
  unsigned int result; // eax
  int v4; // ebx

  result = (unsigned int)-a1 >> 8;
  dword_41CC3C = a2;
  v4 = __ROR4__(-a3, 16);
  byte_41CC34 = v4;
  LOWORD(v4) = result;
  dword_41CC38 = v4;
  return result;
}
// 41CC34: using guessed type char byte_41CC34;
// 41CC38: using guessed type int dword_41CC38;
// 41CC3C: using guessed type int dword_41CC3C;

//----- (004090D8) --------------------------------------------------------
char __usercall sub_4090D8@<al>(_BYTE *a1@<eax>, int a2@<ecx>, char a3@<bl>, int a4@<edi>, int a5@<esi>)
{
  char *v6; // ebx
  char v7; // dl
  int v8; // ebp
  int i; // esi
  bool v10; // cf
  int v11; // ecx
  int v12; // ecx
  int v13; // ecx
  int j; // esi

  HIWORD(v6) = HIWORD(dword_41CC3C);
  LOBYTE(v6) = a1[4];
  BYTE1(v6) = *a1;
  byte_41CC44 = *v6;
  LOBYTE(v6) = a3;
  v7 = byte_41CC34;
  v8 = dword_41CC38;
  for ( i = a5 - 4; i >= 0; i -= 4 )
  {
    v10 = __CFADD__(v8, a2);
    v11 = v8 + a2;
    BYTE1(v6) = BYTE1(v11);
    LOBYTE(v6) = v7 + v10 + (_BYTE)v6;
    LOBYTE(a1) = *v6;
    v10 = __CFADD__(v8, v11);
    v12 = v8 + v11;
    BYTE1(v6) = BYTE1(v12);
    LOBYTE(v6) = v7 + v10 + (_BYTE)v6;
    v10 = __CFADD__(v8, v12);
    v13 = v8 + v12;
    BYTE1(a1) = *v6;
    BYTE1(v6) = BYTE1(v13);
    LOBYTE(v6) = v7 + v10 + (_BYTE)v6;
    a1 = (_BYTE *)_byteswap_ulong((unsigned int)a1);
    v10 = __CFADD__(v8, v13);
    a2 = v8 + v13;
    BYTE1(a1) = *v6;
    BYTE1(v6) = BYTE1(a2);
    LOBYTE(v6) = v7 + v10 + (_BYTE)v6;
    LOBYTE(a1) = *v6;
    *(_DWORD *)(a4 + i) = a1;
  }
  for ( j = i + 3; j >= 0; --j )
  {
    v10 = __CFADD__(v8, a2);
    a2 += v8;
    BYTE1(v6) = BYTE1(a2);
    LOBYTE(v6) = v7 + v10 + (_BYTE)v6;
    LOBYTE(a1) = *v6;
    *(_BYTE *)(a4 + j) = *v6;
  }
  if ( j + 1 >= 0 )
  {
    LOBYTE(a1) = byte_41CC44;
    *(_BYTE *)(a4 + j) = byte_41CC44;
  }
  return (char)a1;
}
// 41CC34: using guessed type char byte_41CC34;
// 41CC38: using guessed type int dword_41CC38;
// 41CC3C: using guessed type int dword_41CC3C;
// 41CC44: using guessed type char byte_41CC44;

//----- (0040914E) --------------------------------------------------------
char __usercall sub_40914E@<al>(unsigned int a1@<eax>, int a2@<ecx>, _BYTE *a3@<ebx>, int a4@<edi>, int a5@<esi>)
{
  char v5; // dl
  int v6; // ebp
  int i; // esi
  bool v8; // cf
  int v9; // ecx
  int v10; // ecx
  int v11; // ecx
  int j; // esi

  HIWORD(a3) = HIWORD(dword_41CC3C);
  v5 = byte_41CC34;
  v6 = dword_41CC38;
  for ( i = a5 - 4; i >= 0; i -= 4 )
  {
    v8 = __CFADD__(v6, a2);
    v9 = v6 + a2;
    BYTE1(a3) = BYTE1(v9);
    LOBYTE(a3) = v5 + v8 + (_BYTE)a3;
    v8 = __CFADD__(v6, v9);
    v10 = v6 + v9;
    LOBYTE(a1) = *a3;
    BYTE1(a3) = BYTE1(v10);
    LOBYTE(a3) = v5 + v8 + (_BYTE)a3;
    v8 = __CFADD__(v6, v10);
    v11 = v6 + v10;
    BYTE1(a1) = *a3;
    BYTE1(a3) = BYTE1(v11);
    LOBYTE(a3) = v5 + v8 + (_BYTE)a3;
    a1 = _byteswap_ulong(a1);
    v8 = __CFADD__(v6, v11);
    a2 = v6 + v11;
    BYTE1(a1) = *a3;
    BYTE1(a3) = BYTE1(a2);
    LOBYTE(a3) = v5 + v8 + (_BYTE)a3;
    LOBYTE(a1) = *a3;
    *(_DWORD *)(a4 + i) = a1;
  }
  for ( j = i + 3; j >= 0; --j )
  {
    v8 = __CFADD__(v6, a2);
    a2 += v6;
    BYTE1(a3) = BYTE1(a2);
    LOBYTE(a3) = v5 + v8 + (_BYTE)a3;
    LOBYTE(a1) = *a3;
    *(_BYTE *)(a4 + j) = *a3;
  }
  return a1;
}
// 41CC34: using guessed type char byte_41CC34;
// 41CC38: using guessed type int dword_41CC38;
// 41CC3C: using guessed type int dword_41CC3C;

//----- (004091F8) --------------------------------------------------------
int __usercall sub_4091F8@<eax>(_DWORD *a1@<esi>)
{
  _DWORD *v1; // ebp
  int *v2; // ecx
  int v3; // eax
  int v4; // ebx
  int v5; // ebx
  int v7; // [esp-4h] [ebp-8h]

  v1 = (_DWORD *)a1[1];
  dword_41CC68 = v1[3];
  dword_41CC6C = v1[5] - 16;
  dword_41CC70 = v1[2];
  dword_41CC74 = v1[4] - 16;
  dword_41CC78 = v1[7];
  dword_41CC7C = v1[6];
  v2 = (int *)a1[2];
  HIWORD(v3) = (unsigned int)(*v2 * -*v1) >> 16;
  LOWORD(v3) = (unsigned __int64)(*v2 * (__int64)-*v1) >> 32;
  dword_41CC48 = __ROL4__(v3, 16);
  HIWORD(v3) = (unsigned int)(v2[2] * -v1[1]) >> 16;
  LOWORD(v3) = (unsigned __int64)(v2[2] * (__int64)-v1[1]) >> 32;
  dword_41CC48 += __ROL4__(v3, 16);
  HIWORD(v3) = (unsigned int)(v2[1] * -*v1) >> 16;
  LOWORD(v3) = (unsigned __int64)(v2[1] * (__int64)-*v1) >> 32;
  dword_41CC4C = __ROL4__(v3, 16);
  HIWORD(v3) = (unsigned int)(v2[3] * -v1[1]) >> 16;
  LOWORD(v3) = (unsigned __int64)(v2[3] * (__int64)-v1[1]) >> 32;
  dword_41CC4C += __ROL4__(v3, 16);
  v4 = v1[4] - 16 - v1[2];
  HIWORD(v3) = (unsigned int)(v4 * v2[1]) >> 16;
  LOWORD(v3) = (unsigned __int64)(v4 * (__int64)v2[1]) >> 32;
  dword_41CC54 = __ROL4__(v3, 16);
  HIWORD(v3) = (unsigned int)(v4 * *v2) >> 16;
  LOWORD(v3) = (unsigned __int64)(v4 * (__int64)*v2) >> 32;
  dword_41CC50 = __ROL4__(v3, 16);
  v5 = v1[5] - 16 - v1[3];
  HIWORD(v3) = (unsigned int)(v5 * v2[3]) >> 16;
  LOWORD(v3) = (unsigned __int64)(v5 * (__int64)v2[3]) >> 32;
  dword_41CC5C = dword_41CC4C + __ROL4__(v3, 16);
  dword_41CC64 = dword_41CC54 + dword_41CC5C;
  dword_41CC54 += dword_41CC4C;
  HIWORD(v3) = (unsigned int)(v5 * v2[2]) >> 16;
  LOWORD(v3) = (unsigned __int64)(v5 * (__int64)v2[2]) >> 32;
  dword_41CC58 = dword_41CC48 + __ROL4__(v3, 16);
  dword_41CC60 = dword_41CC50 + dword_41CC58;
  dword_41CC50 += dword_41CC48;
  dword_41CC48 += a1[3];
  dword_41CC4C += a1[4];
  dword_41CC50 += a1[3];
  dword_41CC54 += a1[4];
  dword_41CC58 += a1[3];
  dword_41CC5C += a1[4];
  dword_41CC60 += a1[3];
  dword_41CC64 += a1[4];
  dword_41CC80[1] = dword_41CC48;
  dword_41CC80[2] = dword_41CC4C;
  dword_41CC80[3] = dword_41CC50;
  dword_41CC80[4] = dword_41CC54;
  dword_41CC80[5] = dword_41CC58;
  dword_41CC80[6] = dword_41CC5C;
  dword_41CC80[8] = dword_41CC68;
  dword_41CC80[10] = dword_41CC68;
  dword_41CC80[12] = dword_41CC6C;
  dword_41CC80[7] = dword_41CC70;
  dword_41CC80[11] = dword_41CC70;
  dword_41CC80[9] = dword_41CC74;
  dword_41CC80[13] = dword_41CC7C;
  dword_41CC80[14] = dword_41CC78;
  sub_4071F0(dword_41CC80);
  dword_41CC80[1] = dword_41CC50;
  dword_41CC80[2] = dword_41CC54;
  dword_41CC80[3] = dword_41CC58;
  dword_41CC80[4] = dword_41CC5C;
  dword_41CC80[5] = dword_41CC60;
  dword_41CC80[6] = dword_41CC64;
  dword_41CC80[8] = dword_41CC68;
  dword_41CC80[10] = dword_41CC6C;
  dword_41CC80[12] = dword_41CC6C;
  dword_41CC80[7] = dword_41CC74;
  dword_41CC80[11] = dword_41CC74;
  dword_41CC80[9] = dword_41CC70;
  dword_41CC80[13] = dword_41CC7C;
  dword_41CC80[14] = dword_41CC78;
  sub_4071F0(dword_41CC80);
  return v7;
}
// 40946C: variable 'v7' is possibly undefined
// 41CC48: using guessed type int dword_41CC48;
// 41CC4C: using guessed type int dword_41CC4C;
// 41CC50: using guessed type int dword_41CC50;
// 41CC54: using guessed type int dword_41CC54;
// 41CC58: using guessed type int dword_41CC58;
// 41CC5C: using guessed type int dword_41CC5C;
// 41CC60: using guessed type int dword_41CC60;
// 41CC64: using guessed type int dword_41CC64;
// 41CC68: using guessed type int dword_41CC68;
// 41CC6C: using guessed type int dword_41CC6C;
// 41CC70: using guessed type int dword_41CC70;
// 41CC74: using guessed type int dword_41CC74;
// 41CC78: using guessed type int dword_41CC78;
// 41CC7C: using guessed type int dword_41CC7C;
// 41CC80: using guessed type _DWORD dword_41CC80[70];

//----- (0040A4A0) --------------------------------------------------------
int __usercall sub_40A4A0@<eax>(int a1@<eax>, int a2@<edx>, int a3@<ecx>, int a4@<ebx>)
{
  _DWORD *v4; // edi
  unsigned int i; // ebx
  void (__fastcall **j)(int, int); // edi
  int *v7; // edi
  int v8; // ebx
  __int16 v9; // cx
  int v11; // [esp-24h] [ebp-24h]

  if ( a1 > 1400 || a4 > 600 )
    return -1;
  dword_41CDF0 = a1;
  dword_41CDF4 = a4;
  v4 = &unk_41D75C;
  for ( i = 1; i != 15003; ++i )
    *v4++ = 0x10000 / i - 1;
  for ( j = (void (__fastcall **)(int, int))&off_42C21C; *j; ++j )
  {
    v11 = a1;
    (*j)(a3, a2);
    a1 = v11;
  }
  v7 = dword_41CDF8;
  v8 = 0;
  v9 = 600;
  do
  {
    *v7++ = v8;
    v8 += a1;
    --v9;
  }
  while ( v9 );
  return 0;
}
// 40A4ED: variable 'a3' is possibly undefined
// 40A4ED: variable 'a2' is possibly undefined
// 41CDF0: using guessed type int dword_41CDF0;
// 41CDF4: using guessed type int dword_41CDF4;
// 41CDF8: using guessed type int dword_41CDF8[601];
// 42C21C: using guessed type _UNKNOWN *off_42C21C;

//----- (0040A519) --------------------------------------------------------
int __usercall sub_40A519@<eax>(int a1@<esi>)
{
  int *v1; // edi
  int v2; // ebx
  int v3; // ebx
  int v4; // ebx
  int v5; // esi
  int result; // eax
  int v7; // eax
  int v8; // ecx
  int v9; // ebx
  int v10; // edx
  int v11; // ebx
  int v12; // edx
  int v13; // et1
  int v14; // edx
  int v15; // ecx
  int v16; // edx
  int v17; // ebx
  unsigned int v18; // ett
  unsigned int v19; // ett
  int v20; // edx
  int v21; // ebx
  unsigned int v22; // ett
  int v23; // ebx
  unsigned int v24; // ett
  unsigned __int64 v25; // rtt
  unsigned __int64 v26; // rtt
  int v27; // ebx
  unsigned __int64 v28; // rtt
  unsigned __int64 v29; // rtt
  int v30; // ebx
  unsigned __int64 v31; // rtt
  unsigned __int64 v32; // rtt
  int v33; // ebx
  int v34; // eax
  int v35; // ebx
  _BYTE *v36; // eax
  unsigned __int16 v37; // bx
  int *v38; // ecx
  int *v39; // ebx
  int v40; // eax
  int *v41; // edx
  int v42; // eax
  int *v43; // ebx
  int *v44; // ecx
  int *v45; // edx
  int v46; // edi
  int v47; // eax
  int v48; // eax
  int v49; // edi
  int v50; // eax
  int v51; // eax
  int v52; // edi
  int v53; // eax
  unsigned int v54; // eax
  int v55; // eax
  int v56; // eax
  int v57; // edi
  int v58; // eax
  int v59; // eax
  int v60; // edi
  int v61; // eax
  unsigned __int16 v62; // dx
  unsigned __int32 v63; // eax
  int v64; // ebx
  int v65; // ecx
  int v66; // edi
  int v67; // edi
  int v68; // edi
  int v69; // eax
  int v70; // esi
  int v71; // edx
  int v72; // edx
  _WORD *v73; // esi
  int i; // edx
  int v75; // ebx
  int v76; // ecx
  int v77; // edi
  int v78; // edi
  int v79; // edi
  int v80; // eax
  int v81; // esi
  int v82; // edx
  int v83; // edx
  _WORD *v84; // esi
  int j; // edx
  int v86; // edi
  int v87; // edi
  int v88; // eax
  unsigned int v89; // eax
  int v90; // eax
  int v91; // edi
  int v92; // eax
  int v93; // eax
  int v94; // eax
  int v95; // edi
  int v96; // eax
  int v97; // eax
  int v98; // ebx
  int v99; // ecx
  int v100; // edi
  int v101; // edi
  int v102; // edi
  unsigned __int16 v103; // dx
  unsigned __int32 v104; // eax
  int v105; // esi
  int v106; // edx
  int v107; // edx
  _WORD *v108; // esi
  int k; // edx
  int v110; // edi
  unsigned __int16 v111; // bx
  int v112; // eax
  int v113; // ebx
  int v114; // ecx
  int v115; // edx
  int v116; // edx
  int v117; // ecx
  int v118; // edx
  unsigned int v119; // ett
  unsigned int v120; // ett
  int v121; // edx
  unsigned int v122; // ett
  unsigned int v123; // ett
  unsigned __int64 v124; // rtt
  unsigned __int64 v125; // rtt
  unsigned __int64 v126; // rtt
  unsigned __int64 v127; // rtt
  unsigned __int64 v128; // rtt
  unsigned __int64 v129; // rtt
  int *v130; // ebx
  int *v131; // esi
  int v132; // ecx
  int v133; // eax
  int v134; // eax
  int *v135; // ecx
  int *v136; // ebx
  int *v137; // edx
  int v138; // eax
  int v139; // edi
  int v140; // eax
  int v141; // eax
  int v142; // edi
  int v143; // eax
  int v144; // eax
  int v145; // edi
  int v146; // eax
  int v147; // eax
  int v148; // eax
  int v149; // eax
  int v150; // edi
  int v151; // eax
  int v152; // eax
  int v153; // edi
  int v154; // eax
  int v155; // eax
  int *v156; // ett
  int v157; // eax
  int v158; // edi
  int v159; // eax
  int *v160; // et1
  int v161; // eax
  int v162; // edi
  int v163; // eax
  int v164; // eax
  int v165; // eax
  int *v166; // et2
  int v167; // eax
  int v168; // edi
  int v169; // eax
  int v170; // eax
  int v171; // eax
  int v172; // eax
  int v173; // ebx
  _BYTE *v174; // eax
  _BYTE *v175; // ebx
  unsigned int v176; // eax
  int *v177; // eax
  int v178; // ecx
  _BYTE *v179; // ecx
  int v180; // ebx
  int v181; // ebx
  int v182; // edx
  int v183; // edx
  int v184; // eax
  int v185; // ecx
  int v186; // ebx
  int v187; // edx
  int v188; // ebx
  int v189; // edx
  int v190; // et0
  int v191; // edx
  int v192; // ecx
  int v193; // edx
  int v194; // ebx
  unsigned int v195; // ett
  unsigned int v196; // ett
  int v197; // edx
  int v198; // ebx
  unsigned int v199; // ett
  int v200; // ebx
  unsigned int v201; // ett
  unsigned __int64 v202; // rtt
  unsigned __int64 v203; // rtt
  int v204; // ebx
  unsigned __int64 v205; // rtt
  unsigned __int64 v206; // rtt
  int v207; // ebx
  unsigned __int64 v208; // rtt
  unsigned __int64 v209; // rtt
  int v210; // ebx
  int *v211; // [esp+Ch] [ebp-24h]

  dword_41CD98 = a1;
  v1 = *(int **)a1;
  dword_41CD9C = *(_DWORD *)a1;
  v2 = *(_DWORD *)(a1 + 12);
  dword_41CDA4 = *(_DWORD *)(a1 + 4);
  dword_41CDAC = v2;
  v3 = *(_DWORD *)(a1 + 20);
  dword_41CDB0 = *(_DWORD *)(a1 + 16);
  dword_41CDB4 = v3;
  dword_41CDC0 = dword_41CDB0;
  dword_41CDC4 = v3;
  dword_41CDD0 = dword_41CDB0 << 8;
  dword_41CDD4 = v3 << 8;
  dword_41CDE0 = dword_41CDB0 << 8;
  dword_41CDE4 = v3 << 8;
  v4 = *(_DWORD *)(a1 + 28);
  dword_41CDB8 = *(_DWORD *)(a1 + 24);
  dword_41CDBC = v4;
  dword_41CDC8 = dword_41CDB8 + 1;
  dword_41CDCC = v4 + 1;
  dword_41CDE8 = (dword_41CDB8 + 1) << 8;
  dword_41CDD8 = dword_41CDE8 - 1;
  dword_41CDEC = (v4 + 1) << 8;
  dword_41CDDC = dword_41CDEC - 1;
LABEL_2:
  while ( 1 )
  {
    v5 = *v1;
    dword_41CDA0 = v5;
    if ( !v5 )
      return 0;
    ++v1;
    switch ( *(_DWORD *)v5 )
    {
      case 0:
        dword_436880 = dword_41CDBC - dword_41CDB4 + 1;
        v176 = dword_41CDB8 - dword_41CDB0 + 1;
        dword_436884 = dword_41CDF0 - v176;
        dword_436878 = v176 >> 4;
        dword_43687C = ((_BYTE)dword_41CDB8 - (_BYTE)dword_41CDB0 + 1) & 0xF;
        v177 = (int *)(dword_41CDA4 + dword_41CDB0 + dword_41CDF0 * dword_41CDB4);
        v178 = *(_DWORD *)(v5 + 8) >> 8;
        BYTE1(v178) = *(_BYTE *)(v5 + 4);
        v179 = (_BYTE *)(dword_41CDAC + v178);
        v180 = (unsigned __int8)*v179;
        BYTE1(v180) = *v179;
        v181 = v180 << 16;
        LOBYTE(v181) = *v179;
        BYTE1(v181) = *v179;
        do
        {
          v182 = dword_436878;
          do
          {
            *v177 = v181;
            v177[1] = v181;
            v177[2] = v181;
            v177[3] = v181;
            v177 += 4;
            --v182;
          }
          while ( v182 );
          if ( dword_43687C )
          {
            v183 = dword_43687C;
            do
            {
              *(_BYTE *)v177 = v181;
              v177 = (int *)((char *)v177 + 1);
              --v183;
            }
            while ( v183 );
          }
          v177 = (int *)((char *)v177 + dword_436884);
          v5 += dword_436884 + dword_436884;
          --dword_436880;
        }
        while ( dword_436880 );
        continue;
      case 1:
        v34 = *(_DWORD *)(v5 + 4);
        v35 = *(_DWORD *)(v5 + 8);
        if ( v34 >= dword_41CDD0 && v34 <= dword_41CDD8 && v35 >= dword_41CDD4 && v35 <= dword_41CDDC )
        {
          v36 = (_BYTE *)(dword_41CDA4 + dword_41CDF8[v35 >> 8] + (v34 >> 8));
          HIBYTE(v37) = *(_BYTE *)(v5 + 16);
          LOBYTE(v37) = *(_BYTE *)(v5 + 21);
          *v36 = *(_BYTE *)(dword_41CDAC + v37);
        }
        continue;
      case 2:
        v172 = *(_DWORD *)(v5 + 4);
        v173 = *(_DWORD *)(v5 + 8);
        if ( v172 >= dword_41CDD0 && v172 <= dword_41CDD8 && v173 >= dword_41CDD4 && v173 <= dword_41CDDC )
        {
          v174 = (_BYTE *)(dword_41CDA4 + dword_41CDF8[v173 >> 8] + (v172 >> 8));
          v175 = *(_BYTE **)(v5 + 16);
          BYTE1(v175) = *(_BYTE *)(v5 + 12);
          LOBYTE(v175) = *v174;
          *v174 = *v175;
        }
        continue;
      case 3:
      case 4:
      case 5:
      case 6:
      case 8:
      case 9:
      case 0xA:
      case 0xE:
        return -1;
      case 7:
        sub_410A20((_DWORD *)v5);
        continue;
      case 0xB:
        LOBYTE(v111) = *(_BYTE *)(v5 + 33);
        HIBYTE(v111) = *(_BYTE *)(v5 + 28);
        byte_4301B0 = *(_BYTE *)(dword_41CDAC + v111);
        v112 = *(int *)(v5 + 4) >> 8;
        v113 = *(int *)(v5 + 8) >> 8;
        v114 = *(int *)(v5 + 16) >> 8;
        v115 = *(int *)(v5 + 20) >> 8;
        if ( v112 > v114 )
        {
          v112 = *(int *)(v5 + 16) >> 8;
          v114 = *(int *)(v5 + 4) >> 8;
          v113 = *(int *)(v5 + 20) >> 8;
          v115 = *(int *)(v5 + 8) >> 8;
        }
        if ( v112 >= dword_41CDB0 )
          goto LABEL_183;
        if ( v114 < dword_41CDB0 )
          continue;
        dword_4301A4 = v114;
        dword_4301A8 = v115;
        LODWORD(v125) = 0;
        HIDWORD(v125) = v114 - dword_41CDB0 + 1;
        dword_4301AC = (unsigned int)(v125 / (unsigned int)(v114 - v112 + 1)) >> 1;
        dword_4301A0 = v115 - ((unsigned __int64)(dword_4301AC * (__int64)(2 * (v115 - v113))) >> 32);
        dword_43019C = dword_41CDB0;
        v112 = dword_41CDB0;
        v113 = dword_4301A0;
        v114 = dword_4301A4;
        v115 = dword_4301A8;
LABEL_183:
        if ( v114 <= dword_41CDB8 )
          goto LABEL_184;
        if ( v112 > dword_41CDB8 )
          continue;
        dword_43019C = v112;
        dword_4301A0 = v113;
        LODWORD(v124) = 0;
        HIDWORD(v124) = dword_41CDB8 - v112 + 1;
        dword_4301AC = (unsigned int)(v124 / (unsigned int)(v114 - v112 + 1)) >> 1;
        dword_4301A8 = v113 + ((unsigned __int64)(dword_4301AC * (__int64)(2 * (v115 - v113))) >> 32);
        dword_4301A4 = dword_41CDB8;
        v112 = dword_43019C;
        v113 = dword_4301A0;
        v114 = dword_41CDB8;
        v115 = dword_4301A8;
LABEL_184:
        if ( v113 > v115 )
        {
          if ( v113 > dword_41CDBC )
          {
            if ( v115 > dword_41CDBC )
              continue;
            dword_4301A4 = v114;
            dword_4301A8 = v115;
            LODWORD(v127) = 0;
            HIDWORD(v127) = dword_41CDBC - v115 + 1;
            dword_4301AC = (unsigned int)(v127 / (unsigned int)(v113 - v115 + 1)) >> 1;
            dword_43019C = v114 - ((unsigned __int64)(dword_4301AC * (__int64)(2 * (v114 - v112))) >> 32);
            dword_4301A0 = dword_41CDBC;
            v112 = dword_43019C;
            v113 = dword_41CDBC;
            v114 = dword_4301A4;
            v115 = dword_4301A8;
          }
          if ( v115 >= dword_41CDB4 )
            goto LABEL_190;
          if ( v113 >= dword_41CDB4 )
          {
            dword_43019C = v112;
            dword_4301A0 = v113;
            LODWORD(v126) = 0;
            HIDWORD(v126) = v113 - dword_41CDB4 + 1;
            dword_4301AC = (unsigned int)(v126 / (unsigned int)(v113 - v115 + 1)) >> 1;
            dword_4301A4 = v112 + ((unsigned __int64)(dword_4301AC * (__int64)(2 * (v114 - v112))) >> 32);
            dword_4301A8 = dword_41CDB4;
            v112 = dword_43019C;
            v113 = dword_4301A0;
            v114 = dword_4301A4;
            v115 = dword_41CDB4;
            goto LABEL_190;
          }
        }
        else
        {
          if ( v115 > dword_41CDBC )
          {
            if ( v113 > dword_41CDBC )
              continue;
            dword_43019C = v112;
            dword_4301A0 = v113;
            LODWORD(v128) = 0;
            HIDWORD(v128) = dword_41CDBC - v113 + 1;
            dword_4301AC = (unsigned int)(v128 / (unsigned int)(v115 - v113 + 1)) >> 1;
            dword_4301A4 = v112 + ((unsigned __int64)(dword_4301AC * (__int64)(2 * (v114 - v112))) >> 32);
            dword_4301A8 = dword_41CDBC;
            v112 = dword_43019C;
            v113 = dword_4301A0;
            v114 = dword_4301A4;
            v115 = dword_41CDBC;
          }
          if ( v113 >= dword_41CDB4 )
            goto LABEL_190;
          if ( v115 >= dword_41CDB4 )
          {
            dword_4301A4 = v114;
            dword_4301A8 = v115;
            LODWORD(v129) = 0;
            HIDWORD(v129) = v115 - dword_41CDB4 + 1;
            dword_4301AC = (unsigned int)(v129 / (unsigned int)(v115 - v113 + 1)) >> 1;
            dword_43019C = v114 - ((unsigned __int64)(dword_4301AC * (__int64)(2 * (v114 - v112))) >> 32);
            dword_4301A0 = dword_41CDB4;
            v112 = dword_43019C;
            v113 = dword_41CDB4;
            v114 = dword_4301A4;
            v115 = dword_4301A8;
LABEL_190:
            v116 = v115 - v113;
            v117 = v114 - v112 + 1;
            if ( v116 >= 0 )
            {
              v118 = v116 + 1;
              if ( v117 <= v118 )
              {
                word_43408E = (unsigned __int16)v118 / (unsigned __int16)v117;
                LOWORD(v119) = 0;
                HIWORD(v119) = (unsigned __int16)v118 % (unsigned __int16)v117;
                word_43408C = v117;
                word_43408A = v119 / (unsigned __int16)v117;
                LOWORD(v113) = (unsigned __int16)v118 / (unsigned __int16)v117;
                __asm { jmp     dword_4301B2[ebx*4] }
              }
              word_43408C = v118;
              word_43408E = (unsigned __int16)v117 / (unsigned __int16)v118;
              LOWORD(v120) = 0;
              HIWORD(v120) = (unsigned __int16)v117 % (unsigned __int16)v118;
              word_43408A = v120 / (unsigned __int16)v118;
              LOWORD(v113) = (unsigned __int16)v117 / (unsigned __int16)v118;
              __asm { jmp     dword_430B26[ebx*4] }
            }
            v121 = 1 - v116;
            if ( v117 <= v121 )
            {
              word_43408E = (unsigned __int16)v121 / (unsigned __int16)v117;
              word_43408C = v117;
              LOWORD(v122) = 0;
              HIWORD(v122) = (unsigned __int16)v121 % (unsigned __int16)v117;
              word_43408A = v122 / (unsigned __int16)v117;
              LOWORD(v113) = (unsigned __int16)v121 / (unsigned __int16)v117;
              __asm { jmp     dword_43211A[ebx*4] }
            }
            word_43408C = v121;
            word_43408E = (unsigned __int16)v117 / (unsigned __int16)v121;
            LOWORD(v123) = 0;
            HIWORD(v123) = (unsigned __int16)v117 % (unsigned __int16)v121;
            word_43408A = v123 / (unsigned __int16)v121;
            LOWORD(v113) = (unsigned __int16)v117 / (unsigned __int16)v121;
            __asm { jmp     dword_432A8E[ebx*4] }
          }
        }
        continue;
      case 0xC:
        v184 = *(int *)(v5 + 4) >> 8;
        v185 = *(int *)(v5 + 16) >> 8;
        v186 = *(_DWORD *)(v5 + 32);
        v187 = *(_DWORD *)(v5 + 36);
        if ( v184 > v185 )
        {
          v186 = *(_DWORD *)(v5 + 36);
          v187 = *(_DWORD *)(v5 + 32);
        }
        dword_4368D8 = v187 - v186;
        dword_43A7BC = v186;
        BYTE1(v186) = *(_BYTE *)(v5 + 28);
        dword_4368D4 = dword_41CDAC + v186;
        v188 = *(int *)(v5 + 8) >> 8;
        v189 = *(int *)(v5 + 20) >> 8;
        if ( v184 > v185 )
        {
          v190 = v184;
          v184 = v185;
          v185 = v190;
          v188 = *(int *)(v5 + 20) >> 8;
          v189 = *(int *)(v5 + 8) >> 8;
        }
        if ( v184 >= dword_41CDB0 )
          goto LABEL_295;
        if ( v185 < dword_41CDB0 )
          continue;
        dword_4368C8 = v185;
        dword_4368CC = v189;
        LODWORD(v203) = 0;
        HIDWORD(v203) = v185 - dword_41CDB0 + 1;
        dword_4368D0 = (unsigned int)(v203 / (unsigned int)(v185 - v184 + 1)) >> 1;
        dword_4368C4 = v189 - ((unsigned __int64)(dword_4368D0 * (__int64)(2 * (v189 - v188))) >> 32);
        dword_4368C0 = dword_41CDB0;
        v204 = dword_4368D8 + dword_43A7BC;
        dword_4368D8 = (unsigned __int64)(dword_4368D0 * (__int64)(2 * dword_4368D8)) >> 32;
        dword_43A7BC = v204 - dword_4368D8;
        v184 = dword_41CDB0;
        v188 = dword_4368C4;
        v185 = dword_4368C8;
        v189 = dword_4368CC;
LABEL_295:
        if ( v185 <= dword_41CDB8 )
          goto LABEL_296;
        if ( v184 > dword_41CDB8 )
          continue;
        dword_4368C0 = v184;
        dword_4368C4 = v188;
        LODWORD(v202) = 0;
        HIDWORD(v202) = dword_41CDB8 - v184 + 1;
        dword_4368D0 = (unsigned int)(v202 / (unsigned int)(v185 - v184 + 1)) >> 1;
        dword_4368CC = v188 + ((unsigned __int64)(dword_4368D0 * (__int64)(2 * (v189 - v188))) >> 32);
        dword_4368C8 = dword_41CDB8;
        dword_4368D8 = (unsigned __int64)(dword_4368D0 * (__int64)(2 * dword_4368D8)) >> 32;
        v184 = dword_4368C0;
        v188 = dword_4368C4;
        v185 = dword_41CDB8;
        v189 = dword_4368CC;
LABEL_296:
        if ( v188 > v189 )
        {
          if ( v188 > dword_41CDBC )
          {
            if ( v189 > dword_41CDBC )
              continue;
            dword_4368C8 = v185;
            dword_4368CC = v189;
            LODWORD(v206) = 0;
            HIDWORD(v206) = dword_41CDBC - v189 + 1;
            dword_4368D0 = (unsigned int)(v206 / (unsigned int)(v188 - v189 + 1)) >> 1;
            dword_4368C0 = v185 - ((unsigned __int64)(dword_4368D0 * (__int64)(2 * (v185 - v184))) >> 32);
            dword_4368C4 = dword_41CDBC;
            v207 = dword_4368D8 + dword_43A7BC;
            dword_4368D8 = (unsigned __int64)(dword_4368D0 * (__int64)(2 * dword_4368D8)) >> 32;
            dword_43A7BC = v207 - dword_4368D8;
            v184 = dword_4368C0;
            v188 = dword_41CDBC;
            v185 = dword_4368C8;
            v189 = dword_4368CC;
          }
          if ( v189 >= dword_41CDB4 )
            goto LABEL_302;
          if ( v188 >= dword_41CDB4 )
          {
            dword_4368C0 = v184;
            dword_4368C4 = v188;
            LODWORD(v205) = 0;
            HIDWORD(v205) = v188 - dword_41CDB4 + 1;
            dword_4368D0 = (unsigned int)(v205 / (unsigned int)(v188 - v189 + 1)) >> 1;
            dword_4368C8 = v184 + ((unsigned __int64)(dword_4368D0 * (__int64)(2 * (v185 - v184))) >> 32);
            dword_4368CC = dword_41CDB4;
            dword_4368D8 = (unsigned __int64)(dword_4368D0 * (__int64)(2 * dword_4368D8)) >> 32;
            v184 = dword_4368C0;
            v188 = dword_4368C4;
            v185 = dword_4368C8;
            v189 = dword_41CDB4;
            goto LABEL_302;
          }
        }
        else
        {
          if ( v189 > dword_41CDBC )
          {
            if ( v188 > dword_41CDBC )
              continue;
            dword_4368C0 = v184;
            dword_4368C4 = v188;
            LODWORD(v208) = 0;
            HIDWORD(v208) = dword_41CDBC - v188 + 1;
            dword_4368D0 = (unsigned int)(v208 / (unsigned int)(v189 - v188 + 1)) >> 1;
            dword_4368C8 = v184 + ((unsigned __int64)(dword_4368D0 * (__int64)(2 * (v185 - v184))) >> 32);
            dword_4368CC = dword_41CDBC;
            dword_4368D8 = (unsigned __int64)(dword_4368D0 * (__int64)(2 * dword_4368D8)) >> 32;
            v184 = dword_4368C0;
            v188 = dword_4368C4;
            v185 = dword_4368C8;
            v189 = dword_41CDBC;
          }
          if ( v188 >= dword_41CDB4 )
            goto LABEL_302;
          if ( v189 >= dword_41CDB4 )
          {
            dword_4368C8 = v185;
            dword_4368CC = v189;
            LODWORD(v209) = 0;
            HIDWORD(v209) = v189 - dword_41CDB4 + 1;
            dword_4368D0 = (unsigned int)(v209 / (unsigned int)(v189 - v188 + 1)) >> 1;
            dword_4368C0 = v185 - ((unsigned __int64)(dword_4368D0 * (__int64)(2 * (v185 - v184))) >> 32);
            dword_4368C4 = dword_41CDB4;
            v210 = dword_4368D8 + dword_43A7BC;
            dword_4368D8 = (unsigned __int64)(dword_4368D0 * (__int64)(2 * dword_4368D8)) >> 32;
            dword_43A7BC = v210 - dword_4368D8;
            v184 = dword_4368C0;
            v188 = dword_41CDB4;
            v185 = dword_4368C8;
            v189 = dword_4368CC;
LABEL_302:
            v191 = v189 - v188;
            v192 = v185 - v184 + 1;
            if ( v191 >= 0 )
            {
              v193 = v191 + 1;
              if ( v192 <= v193 )
              {
                HIWORD(v194) = HIWORD(v193);
                word_43A7BA = dword_4368D8 / v193;
                word_43A7B8 = (unsigned __int16)v193 / (unsigned __int16)v192;
                LOWORD(v195) = 0;
                HIWORD(v195) = (unsigned __int16)v193 % (unsigned __int16)v192;
                word_43A7B6 = v192;
                word_43A7B4 = v195 / (unsigned __int16)v192;
                LOWORD(v194) = (unsigned __int16)v193 / (unsigned __int16)v192;
                __asm { jmp     dword_4368DC[ebx*4] }
              }
              word_43A7B6 = v193;
              word_43A7BA = dword_4368D8 / v192;
              word_43A7B8 = (unsigned __int16)v192 / (unsigned __int16)v193;
              LOWORD(v196) = 0;
              HIWORD(v196) = (unsigned __int16)v192 % (unsigned __int16)v193;
              word_43A7B4 = v196 / (unsigned __int16)v193;
              LOWORD(v188) = (unsigned __int16)v192 / (unsigned __int16)v193;
              __asm { jmp     dword_437250[ebx*4] }
            }
            v197 = 1 - v191;
            if ( v192 <= v197 )
            {
              HIWORD(v198) = HIWORD(v197);
              word_43A7BA = dword_4368D8 / v197;
              word_43A7B8 = (unsigned __int16)v197 / (unsigned __int16)v192;
              word_43A7B6 = v192;
              LOWORD(v199) = 0;
              HIWORD(v199) = (unsigned __int16)v197 % (unsigned __int16)v192;
              word_43A7B4 = v199 / (unsigned __int16)v192;
              LOWORD(v198) = (unsigned __int16)v197 / (unsigned __int16)v192;
              __asm { jmp     dword_438844[ebx*4] }
            }
            HIWORD(v200) = HIWORD(v197);
            word_43A7B6 = v197;
            word_43A7BA = dword_4368D8 / v192;
            word_43A7B8 = (unsigned __int16)v192 / (unsigned __int16)v197;
            LOWORD(v201) = 0;
            HIWORD(v201) = (unsigned __int16)v192 % (unsigned __int16)v197;
            word_43A7B4 = v201 / (unsigned __int16)v197;
            LOWORD(v200) = (unsigned __int16)v192 / (unsigned __int16)v197;
            __asm { jmp     dword_4391B8[ebx*4] }
          }
        }
        continue;
      case 0xD:
        v7 = *(int *)(v5 + 4) >> 8;
        v8 = *(int *)(v5 + 16) >> 8;
        v9 = *(_DWORD *)(v5 + 32);
        v10 = *(_DWORD *)(v5 + 36);
        if ( v7 > v8 )
        {
          v9 = *(_DWORD *)(v5 + 36);
          v10 = *(_DWORD *)(v5 + 32);
        }
        dword_42C258 = v10 - v9;
        dword_43013C = v9;
        dword_42C254 = *(_DWORD *)(v5 + 28);
        v11 = *(int *)(v5 + 8) >> 8;
        v12 = *(int *)(v5 + 20) >> 8;
        if ( v7 > v8 )
        {
          v13 = v7;
          v7 = v8;
          v8 = v13;
          v11 = *(int *)(v5 + 20) >> 8;
          v12 = *(int *)(v5 + 8) >> 8;
        }
        if ( v7 >= dword_41CDB0 )
          goto LABEL_13;
        if ( v8 < dword_41CDB0 )
          continue;
        dword_42C248 = v8;
        dword_42C24C = v12;
        LODWORD(v26) = 0;
        HIDWORD(v26) = v8 - dword_41CDB0 + 1;
        dword_42C250 = (unsigned int)(v26 / (unsigned int)(v8 - v7 + 1)) >> 1;
        dword_42C244 = v12 - ((unsigned __int64)(dword_42C250 * (__int64)(2 * (v12 - v11))) >> 32);
        dword_42C240 = dword_41CDB0;
        v27 = dword_42C258 + dword_43013C;
        dword_42C258 = (unsigned __int64)(dword_42C250 * (__int64)(2 * dword_42C258)) >> 32;
        dword_43013C = v27 - dword_42C258;
        v7 = dword_41CDB0;
        v11 = dword_42C244;
        v8 = dword_42C248;
        v12 = dword_42C24C;
LABEL_13:
        if ( v8 <= dword_41CDB8 )
          goto LABEL_14;
        if ( v7 > dword_41CDB8 )
          continue;
        dword_42C240 = v7;
        dword_42C244 = v11;
        LODWORD(v25) = 0;
        HIDWORD(v25) = dword_41CDB8 - v7 + 1;
        dword_42C250 = (unsigned int)(v25 / (unsigned int)(v8 - v7 + 1)) >> 1;
        dword_42C24C = v11 + ((unsigned __int64)(dword_42C250 * (__int64)(2 * (v12 - v11))) >> 32);
        dword_42C248 = dword_41CDB8;
        dword_42C258 = (unsigned __int64)(dword_42C250 * (__int64)(2 * dword_42C258)) >> 32;
        v7 = dword_42C240;
        v11 = dword_42C244;
        v8 = dword_41CDB8;
        v12 = dword_42C24C;
LABEL_14:
        if ( v11 > v12 )
        {
          if ( v11 > dword_41CDBC )
          {
            if ( v12 > dword_41CDBC )
              continue;
            dword_42C248 = v8;
            dword_42C24C = v12;
            LODWORD(v29) = 0;
            HIDWORD(v29) = dword_41CDBC - v12 + 1;
            dword_42C250 = (unsigned int)(v29 / (unsigned int)(v11 - v12 + 1)) >> 1;
            dword_42C240 = v8 - ((unsigned __int64)(dword_42C250 * (__int64)(2 * (v8 - v7))) >> 32);
            dword_42C244 = dword_41CDBC;
            v30 = dword_42C258 + dword_43013C;
            dword_42C258 = (unsigned __int64)(dword_42C250 * (__int64)(2 * dword_42C258)) >> 32;
            dword_43013C = v30 - dword_42C258;
            v7 = dword_42C240;
            v11 = dword_41CDBC;
            v8 = dword_42C248;
            v12 = dword_42C24C;
          }
          if ( v12 < dword_41CDB4 )
          {
            if ( v11 < dword_41CDB4 )
              continue;
            dword_42C240 = v7;
            dword_42C244 = v11;
            LODWORD(v28) = 0;
            HIDWORD(v28) = v11 - dword_41CDB4 + 1;
            dword_42C250 = (unsigned int)(v28 / (unsigned int)(v11 - v12 + 1)) >> 1;
            dword_42C248 = v7 + ((unsigned __int64)(dword_42C250 * (__int64)(2 * (v8 - v7))) >> 32);
            dword_42C24C = dword_41CDB4;
            dword_42C258 = (unsigned __int64)(dword_42C250 * (__int64)(2 * dword_42C258)) >> 32;
            v7 = dword_42C240;
            v11 = dword_42C244;
            v8 = dword_42C248;
            v12 = dword_41CDB4;
          }
        }
        else
        {
          if ( v12 > dword_41CDBC )
          {
            if ( v11 > dword_41CDBC )
              continue;
            dword_42C240 = v7;
            dword_42C244 = v11;
            LODWORD(v31) = 0;
            HIDWORD(v31) = dword_41CDBC - v11 + 1;
            dword_42C250 = (unsigned int)(v31 / (unsigned int)(v12 - v11 + 1)) >> 1;
            dword_42C248 = v7 + ((unsigned __int64)(dword_42C250 * (__int64)(2 * (v8 - v7))) >> 32);
            dword_42C24C = dword_41CDBC;
            dword_42C258 = (unsigned __int64)(dword_42C250 * (__int64)(2 * dword_42C258)) >> 32;
            v7 = dword_42C240;
            v11 = dword_42C244;
            v8 = dword_42C248;
            v12 = dword_41CDBC;
          }
          if ( v11 < dword_41CDB4 )
          {
            if ( v12 < dword_41CDB4 )
              continue;
            dword_42C248 = v8;
            dword_42C24C = v12;
            LODWORD(v32) = 0;
            HIDWORD(v32) = v12 - dword_41CDB4 + 1;
            dword_42C250 = (unsigned int)(v32 / (unsigned int)(v12 - v11 + 1)) >> 1;
            dword_42C240 = v8 - ((unsigned __int64)(dword_42C250 * (__int64)(2 * (v8 - v7))) >> 32);
            dword_42C244 = dword_41CDB4;
            v33 = dword_42C258 + dword_43013C;
            dword_42C258 = (unsigned __int64)(dword_42C250 * (__int64)(2 * dword_42C258)) >> 32;
            dword_43013C = v33 - dword_42C258;
            v7 = dword_42C240;
            v11 = dword_41CDB4;
            v8 = dword_42C248;
            v12 = dword_42C24C;
          }
        }
        v14 = v12 - v11;
        v15 = v8 - v7 + 1;
        if ( v14 >= 0 )
        {
          v16 = v14 + 1;
          if ( v15 <= v16 )
          {
            HIWORD(v17) = HIWORD(v16);
            word_43013A = dword_42C258 / v16;
            word_430138 = (unsigned __int16)v16 / (unsigned __int16)v15;
            LOWORD(v18) = 0;
            HIWORD(v18) = (unsigned __int16)v16 % (unsigned __int16)v15;
            word_430136 = v15;
            word_430134 = v18 / (unsigned __int16)v15;
            LOWORD(v17) = (unsigned __int16)v16 / (unsigned __int16)v15;
            __asm { jmp     dword_42C25C[ebx*4] }
          }
          word_430136 = v16;
          word_43013A = dword_42C258 / v15;
          word_430138 = (unsigned __int16)v15 / (unsigned __int16)v16;
          LOWORD(v19) = 0;
          HIWORD(v19) = (unsigned __int16)v15 % (unsigned __int16)v16;
          word_430134 = v19 / (unsigned __int16)v16;
          LOWORD(v11) = (unsigned __int16)v15 / (unsigned __int16)v16;
          __asm { jmp     dword_42CBD0[ebx*4] }
        }
        v20 = 1 - v14;
        if ( v15 <= v20 )
        {
          HIWORD(v21) = HIWORD(v20);
          word_43013A = dword_42C258 / v20;
          word_430138 = (unsigned __int16)v20 / (unsigned __int16)v15;
          word_430136 = v15;
          LOWORD(v22) = 0;
          HIWORD(v22) = (unsigned __int16)v20 % (unsigned __int16)v15;
          word_430134 = v22 / (unsigned __int16)v15;
          LOWORD(v21) = (unsigned __int16)v20 / (unsigned __int16)v15;
          __asm { jmp     dword_42E1C4[ebx*4] }
        }
        HIWORD(v23) = HIWORD(v20);
        word_430136 = v20;
        word_43013A = dword_42C258 / v15;
        word_430138 = (unsigned __int16)v15 / (unsigned __int16)v20;
        LOWORD(v24) = 0;
        HIWORD(v24) = (unsigned __int16)v15 % (unsigned __int16)v20;
        word_430134 = v24 / (unsigned __int16)v20;
        LOWORD(v23) = (unsigned __int16)v15 / (unsigned __int16)v20;
        __asm { jmp     dword_42EB38[ebx*4] }
        return result;
      case 0xF:
        v38 = (int *)(v5 + 16);
        v39 = (int *)(v5 + 4);
        v40 = *(_DWORD *)(v5 + 20);
        v41 = (int *)(v5 + 28);
        if ( v40 < *(_DWORD *)(v5 + 8) )
        {
          v42 = *(_DWORD *)(v5 + 32);
          v39 = (int *)(v5 + 16);
          v38 = (int *)(v5 + 4);
          if ( v42 <= *(_DWORD *)(v5 + 8) )
          {
            v38 = (int *)(v5 + 28);
            v41 = (int *)(v5 + 4);
            if ( v42 <= *(_DWORD *)(v5 + 20) )
            {
              v39 = (int *)(v5 + 28);
              v38 = (int *)(v5 + 16);
            }
          }
        }
        else if ( v40 >= *(_DWORD *)(v5 + 32) )
        {
          v38 = (int *)(v5 + 28);
          v41 = (int *)(v5 + 16);
          if ( *(_DWORD *)(v5 + 8) >= *(_DWORD *)(v5 + 32) )
          {
            v39 = (int *)(v5 + 28);
            v38 = (int *)(v5 + 4);
          }
        }
        v211 = v1;
        dword_430140[0] = *v39 >> 8;
        dword_430140[1] = v39[1] >> 8;
        v43 = dword_430140;
        dword_430140[2] = *v38 >> 8;
        dword_430140[3] = v38[1] >> 8;
        v44 = &dword_430140[2];
        dword_430140[4] = *v41 >> 8;
        dword_430140[5] = v41[1] >> 8;
        v45 = &dword_430140[4];
        if ( dword_430140[5] - dword_430140[1] > 15000 )
          goto LABEL_179;
        if ( dword_430140[0] < -32000 )
        {
          dword_430140[0] = -32000;
        }
        else if ( dword_430140[0] > 32000 )
        {
          dword_430140[0] = 32000;
        }
        if ( dword_430140[2] < -32000 )
        {
          dword_430140[2] = -32000;
        }
        else if ( dword_430140[2] > 32000 )
        {
          dword_430140[2] = 32000;
        }
        if ( dword_430140[4] < -32000 )
        {
          dword_430140[4] = -32000;
        }
        else if ( dword_430140[4] > 32000 )
        {
          dword_430140[4] = 32000;
        }
        if ( dword_430140[1] == dword_430140[5] )
        {
          if ( dword_430140[0] > dword_430140[2] )
          {
            v43 = &dword_430140[2];
            v44 = dword_430140;
          }
          v88 = dword_430140[4];
          if ( dword_430140[4] <= *v44 )
          {
            if ( dword_430140[4] <= *v43 )
              v43 = &dword_430140[4];
            v88 = *v44;
          }
          *(int *)((char *)&dword_430192 + 2) = v88;
          *(int *)((char *)&dword_43018C + 2) = *v43;
          v89 = v43[1];
          dword_430178 = v89;
          dword_430188 = 0;
        }
        else if ( dword_430140[1] == dword_430140[3] )
        {
          if ( dword_430140[0] > dword_430140[2] )
          {
            v43 = &dword_430140[2];
            v44 = dword_430140;
          }
          dword_430178 = v43[1];
          dword_430188 = dword_430140[5] - v43[1];
          *(int *)((char *)&dword_43018C + 2) = *v43;
          *(int *)((char *)&dword_430192 + 2) = *v44;
          v90 = dword_430140[4] - *(int *)((char *)&dword_430192 + 2);
          v91 = dword_430198 + dword_430188;
          if ( dword_430140[4] - *(int *)((char *)&dword_430192 + 2) <= 0 )
          {
            LOWORD(dword_430192) = -1;
            v92 = *(_DWORD *)(4 * v91) * (v90 - 1);
          }
          else
          {
            LOWORD(dword_430192) = 0;
            v92 = *(_DWORD *)(4 * v91) * (v90 + 1);
            dword_430192 += v92;
          }
          dword_430180 = v92;
          v93 = dword_430140[4] - *v43;
          if ( v93 >= 0 )
          {
            LOWORD(dword_43018C) = 0;
            v89 = *(_DWORD *)(4 * v91) * (v93 + 1);
          }
          else
          {
            LOWORD(dword_43018C) = -1;
            v89 = *(_DWORD *)(4 * v91) * (v93 - 1);
            dword_43018C += v89;
          }
          dword_43017C = v89;
        }
        else
        {
          if ( dword_430140[3] != dword_430140[5] )
          {
            dword_430178 = dword_430140[1];
            dword_430158 = dword_430140[3];
            dword_430188 = dword_430140[3] - dword_430140[1];
            dword_43015C = dword_430140[5] - dword_430140[3];
            *(int *)((char *)&dword_43018C + 2) = dword_430140[0];
            *(int *)((char *)&dword_430192 + 2) = dword_430140[0];
            v46 = dword_430198 + dword_430140[5] - dword_430140[1];
            if ( dword_430140[0]
               + (((dword_430140[3] - dword_430140[1]) * *(_DWORD *)(4 * v46) * (dword_430140[4] - dword_430140[0])
                 + 0x8000) >> 16) >= dword_430140[2] )
            {
              *(int *)((char *)&dword_43016E + 2) = dword_430140[0]
                                                  + ((dword_430188
                                                    * *(_DWORD *)(4 * v46)
                                                    * (dword_430140[4] - dword_430140[0])
                                                    + 0x8000) >> 16);
              v55 = dword_430140[4] - dword_430140[0];
              if ( dword_430140[4] - dword_430140[0] >= 0 )
              {
                LOWORD(dword_430192) = 0;
                v56 = *(_DWORD *)(4 * v46) * (v55 + 1);
                LOWORD(dword_43016E) = 0;
                dword_430192 += v56;
                dword_43016E += v56;
              }
              else
              {
                v56 = *(_DWORD *)(4 * v46) * (v55 - 1);
                LOWORD(dword_430192) = -1;
                LOWORD(dword_43016E) = -1;
              }
              dword_430180 = v56;
              dword_430164 = v56;
              v57 = dword_430198 + dword_430188;
              v58 = dword_430140[2] - dword_430140[0];
              if ( dword_430140[2] - dword_430140[0] <= 0 )
              {
                v59 = *(_DWORD *)(4 * v57) * (v58 - 1);
                LOWORD(dword_43018C) = -1;
                dword_43018C += v59;
              }
              else
              {
                v59 = *(_DWORD *)(4 * v57) * (v58 + 1);
                LOWORD(dword_43018C) = 0;
              }
              dword_43017C = v59;
              *(int *)((char *)&dword_430168 + 2) = dword_430140[2];
              v60 = dword_430198 + dword_43015C;
              v61 = dword_430140[4] - dword_430140[2];
              if ( dword_430140[4] - dword_430140[2] >= 0 )
              {
                v54 = *(_DWORD *)(4 * v60) * (v61 + 1);
                LOWORD(dword_430168) = 0;
              }
              else
              {
                v54 = *(_DWORD *)(4 * v60) * (v61 - 1);
                LOWORD(dword_430168) = -1;
                dword_430168 += v54;
              }
              dword_430160 = v54;
            }
            else
            {
              *(int *)((char *)&dword_430168 + 2) = dword_430140[0]
                                                  + ((dword_430188
                                                    * *(_DWORD *)(4 * v46)
                                                    * (dword_430140[4] - dword_430140[0])
                                                    + 0x8000) >> 16);
              v47 = dword_430140[4] - dword_430140[0];
              if ( dword_430140[4] - dword_430140[0] <= 0 )
              {
                LOWORD(dword_43018C) = -1;
                LOWORD(dword_430168) = -1;
                v48 = *(_DWORD *)(4 * v46) * (v47 - 1);
                dword_43018C += v48;
                dword_430168 += v48;
              }
              else
              {
                LOWORD(dword_43018C) = 0;
                v48 = *(_DWORD *)(4 * v46) * (v47 + 1);
                LOWORD(dword_430168) = 0;
              }
              dword_43017C = v48;
              dword_430160 = v48;
              v49 = dword_430198 + dword_430188;
              v50 = dword_430140[2] - dword_430140[0];
              if ( dword_430140[2] - dword_430140[0] >= 0 )
              {
                v51 = *(_DWORD *)(4 * v49) * (v50 + 1);
                LOWORD(dword_430192) = 0;
                dword_430192 += v51;
              }
              else
              {
                v51 = *(_DWORD *)(4 * v49) * (v50 - 1);
                LOWORD(dword_430192) = -1;
              }
              dword_430180 = v51;
              *(int *)((char *)&dword_43016E + 2) = dword_430140[2];
              v52 = dword_430198 + dword_43015C;
              v53 = dword_430140[4] - dword_430140[2];
              if ( dword_430140[4] - dword_430140[2] <= 0 )
              {
                v54 = *(_DWORD *)(4 * v52) * (v53 - 1);
                LOWORD(dword_43016E) = -1;
              }
              else
              {
                LOWORD(dword_43016E) = 0;
                v54 = *(_DWORD *)(4 * v52) * (v53 + 1);
                dword_43016E += v54;
              }
              dword_430164 = v54;
            }
            LOBYTE(v62) = *(_BYTE *)(v5 + 45);
            HIBYTE(v62) = *(_BYTE *)(v5 + 40);
            LOBYTE(v62) = *(_BYTE *)(dword_41CDAC + v62);
            BYTE1(v54) = v62;
            LOBYTE(v54) = v62;
            v63 = _byteswap_ulong(v54);
            BYTE1(v63) = v62;
            LOBYTE(v63) = v62;
            dword_430174 = v63;
            word_430190 = 0;
            word_430196 = 0;
            v64 = dword_430180;
            v65 = dword_43017C;
            v66 = dword_430178;
            if ( dword_430178 < dword_41CDB4 )
            {
              v86 = dword_41CDB4 - dword_430178;
              dword_430188 -= dword_41CDB4 - dword_430178;
              if ( dword_430188 < 0 )
                goto LABEL_103;
              dword_430192 += v86 * dword_430180;
              dword_43018C += v86 * dword_43017C;
              v66 = dword_41CDB4;
              dword_430178 = dword_41CDB4;
            }
            v67 = dword_430188 + v66;
            if ( v67 <= dword_41CDBC || (dword_430188 -= v67 - dword_41CDBC, dword_430188 >= 0) )
            {
              v68 = dword_41CDA4 + dword_41CDF8[dword_430178];
              v69 = dword_430174;
              do
              {
                v70 = *(int *)((char *)&dword_43018C + 2);
                v71 = *(int *)((char *)&dword_430192 + 2);
                if ( SHIWORD(dword_43018C) < (__int16)dword_41CDB0 )
                {
                  if ( SHIWORD(dword_430192) < (__int16)dword_41CDB0 )
                    goto LABEL_102;
                  v70 = dword_41CDB0;
                  if ( SHIWORD(dword_430192) <= (__int16)dword_41CDB8 )
                    goto LABEL_95;
                }
                else if ( SHIWORD(dword_430192) <= (__int16)dword_41CDB8 )
                {
                  goto LABEL_95;
                }
                if ( (__int16)v70 <= (__int16)dword_41CDB8 )
                {
                  v71 = dword_41CDB8;
LABEL_95:
                  v72 = v71 - v70;
                  v73 = (_WORD *)(v68 + v70);
                  if ( (v72 & 0x8000u) == 0 )
                  {
                    for ( i = v72 - 3; i >= 0; i -= 4 )
                      *(_DWORD *)((char *)v73 + i) = v69;
                    if ( i >= -2 )
                      *v73 = v69;
                    if ( i > -4 )
                      *((_BYTE *)v73 + i + 3) = v69;
                  }
                }
LABEL_102:
                dword_430192 += v64;
                dword_43018C += v65;
                v68 += dword_41CDF0;
                --dword_430188;
              }
              while ( dword_430188 >= 0 );
            }
LABEL_103:
            --dword_43015C;
            ++dword_430158;
            word_43016C = 0;
            word_430172 = 0;
            v75 = dword_430164;
            v76 = dword_430160;
            v77 = dword_430158;
            if ( dword_430158 < dword_41CDB4 )
            {
              v87 = dword_41CDB4 - dword_430158;
              dword_43015C -= dword_41CDB4 - dword_430158;
              if ( dword_43015C < 0 )
                goto LABEL_116;
              dword_43016E += v87 * dword_430164;
              dword_430168 += v87 * dword_430160;
              v77 = dword_41CDB4;
              dword_430158 = dword_41CDB4;
            }
            v78 = dword_43015C + v77;
            if ( v78 <= dword_41CDBC || (dword_43015C -= v78 - dword_41CDBC, dword_43015C >= 0) )
            {
              v79 = dword_41CDA4 + dword_41CDF8[dword_430158];
              v80 = dword_430174;
              do
              {
                dword_43016E += v75;
                dword_430168 += v76;
                v81 = *(int *)((char *)&dword_430168 + 2);
                v82 = *(int *)((char *)&dword_43016E + 2);
                if ( SHIWORD(dword_430168) < (__int16)dword_41CDB0 )
                {
                  if ( SHIWORD(dword_43016E) < (__int16)dword_41CDB0 )
                    goto LABEL_115;
                  v81 = dword_41CDB0;
                  if ( SHIWORD(dword_43016E) <= (__int16)dword_41CDB8 )
                    goto LABEL_108;
                }
                else if ( SHIWORD(dword_43016E) <= (__int16)dword_41CDB8 )
                {
                  goto LABEL_108;
                }
                if ( (__int16)v81 <= (__int16)dword_41CDB8 )
                {
                  v82 = dword_41CDB8;
LABEL_108:
                  v83 = v82 - v81;
                  v84 = (_WORD *)(v79 + v81);
                  if ( (v83 & 0x8000u) == 0 )
                  {
                    for ( j = v83 - 3; j >= 0; j -= 4 )
                      *(_DWORD *)((char *)v84 + j) = v80;
                    if ( j >= -2 )
                      *v84 = v80;
                    if ( j > -4 )
                      *((_BYTE *)v84 + j + 3) = v80;
                  }
                }
LABEL_115:
                v79 += dword_41CDF0;
                --dword_43015C;
              }
              while ( dword_43015C >= 0 );
            }
LABEL_116:
            v1 = v211;
            continue;
          }
          if ( dword_430140[2] > dword_430140[4] )
          {
            v44 = &dword_430140[4];
            v45 = &dword_430140[2];
          }
          dword_430178 = dword_430140[1];
          dword_430188 = v45[1] - dword_430140[1];
          *(int *)((char *)&dword_43018C + 2) = dword_430140[0];
          *(int *)((char *)&dword_430192 + 2) = dword_430140[0];
          v94 = *v45 - dword_430140[0];
          v95 = dword_430198 + dword_430188;
          if ( v94 <= 0 )
          {
            LOWORD(dword_430192) = -1;
            v96 = *(_DWORD *)(4 * v95) * (v94 - 1);
          }
          else
          {
            LOWORD(dword_430192) = 0;
            v96 = *(_DWORD *)(4 * v95) * (v94 + 1);
            dword_430192 += v96;
          }
          dword_430180 = v96;
          v97 = *v44 - dword_430140[0];
          if ( v97 >= 0 )
          {
            LOWORD(dword_43018C) = 0;
            v89 = *(_DWORD *)(4 * v95) * (v97 + 1);
          }
          else
          {
            LOWORD(dword_43018C) = -1;
            v89 = *(_DWORD *)(4 * v95) * (v97 - 1);
            dword_43018C += v89;
          }
          dword_43017C = v89;
        }
        word_430190 = 0;
        word_430196 = 0;
        v98 = dword_430180;
        v99 = dword_43017C;
        v100 = dword_430178;
        if ( dword_430178 >= dword_41CDB4 )
          goto LABEL_159;
        v110 = dword_41CDB4 - dword_430178;
        dword_430188 -= dword_41CDB4 - dword_430178;
        if ( dword_430188 >= 0 )
        {
          dword_430192 += v110 * dword_430180;
          v89 = v110 * dword_43017C;
          dword_43018C += v110 * dword_43017C;
          v100 = dword_41CDB4;
          dword_430178 = dword_41CDB4;
LABEL_159:
          v101 = dword_430188 + v100;
          if ( v101 <= dword_41CDBC || (dword_430188 -= v101 - dword_41CDBC, dword_430188 >= 0) )
          {
            v102 = dword_41CDA4 + dword_41CDF8[dword_430178];
            LOBYTE(v103) = *(_BYTE *)(v5 + 45);
            HIBYTE(v103) = *(_BYTE *)(v5 + 40);
            LOBYTE(v103) = *(_BYTE *)(dword_41CDAC + v103);
            BYTE1(v89) = v103;
            LOBYTE(v89) = v103;
            v104 = _byteswap_ulong(v89);
            BYTE1(v104) = v103;
            LOBYTE(v104) = v103;
            while ( 1 )
            {
              v105 = *(int *)((char *)&dword_43018C + 2);
              v106 = *(int *)((char *)&dword_430192 + 2);
              if ( SHIWORD(dword_43018C) < (__int16)dword_41CDB0 )
              {
                if ( SHIWORD(dword_430192) < (__int16)dword_41CDB0 )
                  goto LABEL_170;
                v105 = dword_41CDB0;
                if ( SHIWORD(dword_430192) <= (__int16)dword_41CDB8 )
                  goto LABEL_163;
              }
              else if ( SHIWORD(dword_430192) <= (__int16)dword_41CDB8 )
              {
                goto LABEL_163;
              }
              if ( (__int16)v105 <= (__int16)dword_41CDB8 )
              {
                v106 = dword_41CDB8;
LABEL_163:
                v107 = v106 - v105;
                v108 = (_WORD *)(v102 + v105);
                if ( (v107 & 0x8000u) == 0 )
                {
                  for ( k = v107 - 3; k >= 0; k -= 4 )
                    *(_DWORD *)((char *)v108 + k) = v104;
                  if ( k >= -2 )
                    *v108 = v104;
                  if ( k > -4 )
                    *((_BYTE *)v108 + k + 3) = v104;
                }
              }
LABEL_170:
              dword_430192 += v98;
              dword_43018C += v99;
              v102 += dword_41CDF0;
              if ( --dword_430188 < 0 )
              {
                v1 = v211;
                goto LABEL_2;
              }
            }
          }
        }
LABEL_179:
        v1 = v211;
        break;
      case 0x10:
        v130 = (int *)&unk_434098;
        v131 = (int *)(v5 + 4);
        v132 = 3;
        do
        {
          v133 = *v131 >> 8;
          if ( v133 < -16000 )
            v133 = -16000;
          if ( v133 > 16000 )
            v133 = 16000;
          *v130 = v133;
          v134 = v131[1] >> 8;
          if ( v134 < -16000 )
            v134 = -16000;
          if ( v134 > 16000 )
            v134 = 16000;
          v130[1] = v134;
          v130[2] = v131[2];
          v130[3] = v131[3];
          v131 += 4;
          v130 += 4;
          --v132;
        }
        while ( v132 );
        *v130 = *v131;
        v135 = (int *)&unk_4340A8;
        v136 = (int *)&unk_434098;
        v137 = (int *)&unk_4340B8;
        if ( unk_4340AC < unk_43409C )
        {
          v136 = (int *)&unk_4340A8;
          v135 = (int *)&unk_434098;
          if ( unk_4340BC <= unk_43409C )
          {
            v135 = (int *)&unk_4340B8;
            v137 = (int *)&unk_434098;
            if ( unk_4340BC <= unk_4340AC )
            {
              v136 = (int *)&unk_4340B8;
              v135 = (int *)&unk_4340A8;
            }
          }
        }
        else if ( unk_4340AC >= unk_4340BC )
        {
          v135 = (int *)&unk_4340B8;
          v137 = (int *)&unk_4340A8;
          if ( unk_43409C >= unk_4340BC )
          {
            v136 = (int *)&unk_4340B8;
            v135 = (int *)&unk_434098;
          }
        }
        if ( v137[1] - v136[1] <= 15000 )
        {
          v138 = v136[1];
          if ( v138 == v137[1] )
          {
            if ( *v136 > *v135 )
            {
              v156 = v136;
              v136 = v135;
              v135 = v156;
            }
            v157 = *v137;
            v158 = v137[3];
            if ( *v137 <= *v135 )
            {
              if ( v157 <= *v136 )
                v136 = v137;
              v157 = *v135;
              v158 = v135[3];
            }
            *(int *)((char *)&dword_434126 + 2) = v157;
            *(int *)((char *)&dword_434120 + 2) = *v136;
            dword_434134 = v136[1];
            dword_43411C = 0;
            v159 = v136[3] << 8;
            dword_434130 = v158 << 8;
            dword_43412C = v159;
          }
          else if ( v138 == v135[1] )
          {
            if ( *v136 > *v135 )
            {
              v160 = v136;
              v136 = v135;
              v135 = v160;
            }
            dword_434134 = v136[1];
            dword_43411C = v137[1] - v136[1];
            dword_43412C = v136[3] << 8;
            dword_434130 = v135[3] << 8;
            *(int *)((char *)&dword_434120 + 2) = *v136;
            *(int *)((char *)&dword_434126 + 2) = *v135;
            v161 = *v137 - *(int *)((char *)&dword_434126 + 2);
            v162 = dword_4366B8 + dword_43411C;
            if ( v161 <= 0 )
            {
              LOWORD(dword_434126) = -1;
              v163 = *(_DWORD *)(4 * v162) * (v161 - 1);
            }
            else
            {
              LOWORD(dword_434126) = 0;
              v163 = *(_DWORD *)(4 * v162) * (v161 + 1);
              dword_434126 += v163;
            }
            dword_43410C = v163;
            v164 = *v137 - *v136;
            if ( v164 >= 0 )
            {
              LOWORD(dword_434120) = 0;
              v165 = *(_DWORD *)(4 * v162) * (v164 + 1);
            }
            else
            {
              LOWORD(dword_434120) = -1;
              v165 = *(_DWORD *)(4 * v162) * (v164 - 1);
              dword_434120 += v165;
            }
            dword_434108 = v165;
            dword_434110 = (*(_DWORD *)(4 * v162) * (v137[3] - v136[3])) >> 8;
            dword_434114 = (*(_DWORD *)(4 * v162) * (v137[3] - v135[3])) >> 8;
          }
          else if ( v135[1] == v137[1] )
          {
            if ( *v135 > *v137 )
            {
              v166 = v135;
              v135 = v137;
              v137 = v166;
            }
            dword_43412C = v136[3] << 8;
            dword_434130 = dword_43412C;
            dword_434134 = v136[1];
            dword_43411C = v137[1] - v136[1];
            *(int *)((char *)&dword_434120 + 2) = *v136;
            *(int *)((char *)&dword_434126 + 2) = *(int *)((char *)&dword_434120 + 2);
            v167 = *v137 - *(int *)((char *)&dword_434120 + 2);
            v168 = dword_4366B8 + dword_43411C;
            if ( v167 <= 0 )
            {
              LOWORD(dword_434126) = -1;
              v169 = *(_DWORD *)(4 * v168) * (v167 - 1);
            }
            else
            {
              LOWORD(dword_434126) = 0;
              v169 = *(_DWORD *)(4 * v168) * (v167 + 1);
              dword_434126 += v169;
            }
            dword_43410C = v169;
            v170 = *v135 - *v136;
            if ( v170 >= 0 )
            {
              LOWORD(dword_434120) = 0;
              v171 = *(_DWORD *)(4 * v168) * (v170 + 1);
            }
            else
            {
              LOWORD(dword_434120) = -1;
              v171 = *(_DWORD *)(4 * v168) * (v170 - 1);
              dword_434120 += v171;
            }
            dword_434108 = v171;
            dword_434110 = (*(_DWORD *)(4 * v168) * (v135[3] - v136[3])) >> 8;
            dword_434114 = (*(_DWORD *)(4 * v168) * (v137[3] - v136[3])) >> 8;
          }
          else
          {
            dword_434134 = v136[1];
            dword_4340CC = v135[1];
            dword_43411C = v135[1] - v136[1];
            dword_4340D0 = v137[1] - v135[1];
            *(int *)((char *)&dword_434120 + 2) = *v136;
            *(int *)((char *)&dword_434126 + 2) = *(int *)((char *)&dword_434120 + 2);
            dword_43412C = v136[3] << 8;
            dword_434130 = dword_43412C;
            v139 = dword_4366B8 + v137[1] - v136[1];
            if ( *v136 + ((dword_43411C * *(_DWORD *)(4 * v139) * (*v137 - *v136) + 0x8000) >> 16) >= *v135 )
            {
              *(int *)((char *)&dword_4340E2 + 2) = *v136
                                                  + ((dword_43411C * *(_DWORD *)(4 * v139) * (*v137 - *v136) + 0x8000) >> 16);
              dword_4340F4 = (v136[3] << 8) + ((dword_43411C * *(_DWORD *)(4 * v139) * (v137[3] - v136[3])) >> 8);
              v148 = *v137 - *v136;
              if ( v148 >= 0 )
              {
                LOWORD(dword_434126) = 0;
                v149 = *(_DWORD *)(4 * v139) * (v148 + 1);
                LOWORD(dword_4340E2) = 0;
                dword_434126 += v149;
                dword_4340E2 += v149;
              }
              else
              {
                v149 = *(_DWORD *)(4 * v139) * (v148 - 1);
                LOWORD(dword_434126) = -1;
                LOWORD(dword_4340E2) = -1;
              }
              dword_43410C = v149;
              dword_4340D8 = v149;
              dword_434114 = (*(_DWORD *)(4 * v139 - 4) * (v137[3] - v136[3])) >> 8;
              dword_4340EC = dword_434114;
              v150 = dword_4366B8 + dword_43411C;
              v151 = *v135 - *v136;
              if ( v151 <= 0 )
              {
                v152 = *(_DWORD *)(4 * v150) * (v151 - 1);
                LOWORD(dword_434120) = -1;
                dword_434120 += v152;
              }
              else
              {
                v152 = *(_DWORD *)(4 * v150) * (v151 + 1);
                LOWORD(dword_434120) = 0;
              }
              dword_434108 = v152;
              dword_434110 = (*(_DWORD *)(4 * v150 - 4) * (v135[3] - v136[3])) >> 8;
              dword_4340F0 = v135[3] << 8;
              *(int *)((char *)&dword_4340DC + 2) = *v135;
              v153 = dword_4366B8 + dword_4340D0;
              v154 = *v137 - *v135;
              if ( v154 >= 0 )
              {
                v155 = *(_DWORD *)(4 * v153) * (v154 + 1);
                LOWORD(dword_4340DC) = 0;
              }
              else
              {
                v155 = *(_DWORD *)(4 * v153) * (v154 - 1);
                LOWORD(dword_4340DC) = -1;
                dword_4340DC += v155;
              }
              dword_4340D4 = v155;
              dword_4340E8 = (*(_DWORD *)(4 * v153 - 4) * (v137[3] - v135[3])) >> 8;
            }
            else
            {
              *(int *)((char *)&dword_4340DC + 2) = *v136
                                                  + ((dword_43411C * *(_DWORD *)(4 * v139) * (*v137 - *v136) + 0x8000) >> 16);
              dword_4340F0 = (v136[3] << 8) + ((dword_43411C * *(_DWORD *)(4 * v139 - 4) * (v137[3] - v136[3])) >> 8);
              v140 = *v137 - *v136;
              if ( v140 <= 0 )
              {
                v141 = *(_DWORD *)(4 * v139) * (v140 - 1);
                LOWORD(dword_434120) = -1;
                LOWORD(dword_4340DC) = -1;
                dword_434120 += v141;
                dword_4340DC += v141;
              }
              else
              {
                v141 = *(_DWORD *)(4 * v139) * (v140 + 1);
                LOWORD(dword_434120) = 0;
                LOWORD(dword_4340DC) = 0;
              }
              dword_434108 = v141;
              dword_4340D4 = v141;
              dword_434110 = (*(_DWORD *)(4 * v139 - 4) * (v137[3] - v136[3])) >> 8;
              dword_4340E8 = dword_434110;
              v142 = dword_4366B8 + dword_43411C;
              v143 = *v135 - *v136;
              if ( v143 >= 0 )
              {
                v144 = *(_DWORD *)(4 * v142) * (v143 + 1);
                LOWORD(dword_434126) = 0;
                dword_434126 += v144;
              }
              else
              {
                v144 = *(_DWORD *)(4 * v142) * (v143 - 1);
                LOWORD(dword_434126) = -1;
              }
              dword_43410C = v144;
              dword_434114 = (*(_DWORD *)(4 * v142 - 4) * (v135[3] - v136[3])) >> 8;
              dword_4340F4 = v135[3] << 8;
              *(int *)((char *)&dword_4340E2 + 2) = *v135;
              v145 = dword_4366B8 + dword_4340D0;
              v146 = *v137 - *v135;
              if ( v146 <= 0 )
              {
                v147 = *(_DWORD *)(4 * v145) * (v146 - 1);
                LOWORD(dword_4340E2) = -1;
              }
              else
              {
                LOWORD(dword_4340E2) = 0;
                v147 = *(_DWORD *)(4 * v145) * (v146 + 1);
                dword_4340E2 += v147;
              }
              dword_4340D8 = v147;
              dword_4340EC = (*(_DWORD *)(4 * v145 - 4) * (v137[3] - v135[3])) >> 8;
            }
          }
          JUMPOUT(0x40E79B);
        }
        continue;
      case 0x11:
        JUMPOUT(0x40D750);
      case 0x12:
        JUMPOUT(0x40B390);
      case 0x13:
        sub_40F9DC(v5);
        continue;
      case 0x14:
      case 0x15:
        JUMPOUT(0x40CDE0);
    }
  }
}
// 40A5DC: control flows out of bounds to 40D750
// 40A5E9: control flows out of bounds to 40B390
// 40A5FD: control flows out of bounds to 40CDE0
// 40E4DB: control flows out of bounds to 40E79B
// 40A519: could not find valid save-restore pair for esi
// 41CD98: using guessed type int dword_41CD98;
// 41CD9C: using guessed type int dword_41CD9C;
// 41CDA0: using guessed type int dword_41CDA0;
// 41CDA4: using guessed type int dword_41CDA4;
// 41CDAC: using guessed type int dword_41CDAC;
// 41CDB0: using guessed type int dword_41CDB0;
// 41CDB4: using guessed type int dword_41CDB4;
// 41CDB8: using guessed type int dword_41CDB8;
// 41CDBC: using guessed type int dword_41CDBC;
// 41CDC0: using guessed type int dword_41CDC0;
// 41CDC4: using guessed type int dword_41CDC4;
// 41CDC8: using guessed type int dword_41CDC8;
// 41CDCC: using guessed type int dword_41CDCC;
// 41CDD0: using guessed type int dword_41CDD0;
// 41CDD4: using guessed type int dword_41CDD4;
// 41CDD8: using guessed type int dword_41CDD8;
// 41CDDC: using guessed type int dword_41CDDC;
// 41CDE0: using guessed type int dword_41CDE0;
// 41CDE4: using guessed type int dword_41CDE4;
// 41CDE8: using guessed type int dword_41CDE8;
// 41CDEC: using guessed type int dword_41CDEC;
// 41CDF0: using guessed type int dword_41CDF0;
// 41CDF8: using guessed type int dword_41CDF8[601];
// 42C240: using guessed type int dword_42C240;
// 42C244: using guessed type int dword_42C244;
// 42C248: using guessed type int dword_42C248;
// 42C24C: using guessed type int dword_42C24C;
// 42C250: using guessed type int dword_42C250;
// 42C254: using guessed type int dword_42C254;
// 42C258: using guessed type int dword_42C258;
// 430134: using guessed type __int16 word_430134;
// 430136: using guessed type __int16 word_430136;
// 430138: using guessed type __int16 word_430138;
// 43013A: using guessed type __int16 word_43013A;
// 43013C: using guessed type int dword_43013C;
// 430140: using guessed type int dword_430140[6];
// 430158: using guessed type int dword_430158;
// 43015C: using guessed type int dword_43015C;
// 430160: using guessed type int dword_430160;
// 430164: using guessed type int dword_430164;
// 430168: using guessed type int dword_430168;
// 43016C: using guessed type __int16 word_43016C;
// 43016E: using guessed type int dword_43016E;
// 430172: using guessed type __int16 word_430172;
// 430174: using guessed type int dword_430174;
// 430178: using guessed type int dword_430178;
// 43017C: using guessed type int dword_43017C;
// 430180: using guessed type int dword_430180;
// 430188: using guessed type int dword_430188;
// 43018C: using guessed type int dword_43018C;
// 430190: using guessed type __int16 word_430190;
// 430192: using guessed type int dword_430192;
// 430196: using guessed type __int16 word_430196;
// 430198: using guessed type int dword_430198;
// 43019C: using guessed type int dword_43019C;
// 4301A0: using guessed type int dword_4301A0;
// 4301A4: using guessed type int dword_4301A4;
// 4301A8: using guessed type int dword_4301A8;
// 4301AC: using guessed type int dword_4301AC;
// 4301B0: using guessed type char byte_4301B0;
// 43408A: using guessed type __int16 word_43408A;
// 43408C: using guessed type __int16 word_43408C;
// 43408E: using guessed type __int16 word_43408E;
// 4340CC: using guessed type int dword_4340CC;
// 4340D0: using guessed type int dword_4340D0;
// 4340D4: using guessed type int dword_4340D4;
// 4340D8: using guessed type int dword_4340D8;
// 4340DC: using guessed type int dword_4340DC;
// 4340E2: using guessed type int dword_4340E2;
// 4340E8: using guessed type int dword_4340E8;
// 4340EC: using guessed type int dword_4340EC;
// 4340F0: using guessed type int dword_4340F0;
// 4340F4: using guessed type int dword_4340F4;
// 434108: using guessed type int dword_434108;
// 43410C: using guessed type int dword_43410C;
// 434110: using guessed type int dword_434110;
// 434114: using guessed type int dword_434114;
// 43411C: using guessed type int dword_43411C;
// 434120: using guessed type int dword_434120;
// 434126: using guessed type int dword_434126;
// 43412C: using guessed type int dword_43412C;
// 434130: using guessed type int dword_434130;
// 434134: using guessed type int dword_434134;
// 4366B8: using guessed type int dword_4366B8;
// 436878: using guessed type int dword_436878;
// 43687C: using guessed type int dword_43687C;
// 436880: using guessed type int dword_436880;
// 436884: using guessed type int dword_436884;
// 4368C0: using guessed type int dword_4368C0;
// 4368C4: using guessed type int dword_4368C4;
// 4368C8: using guessed type int dword_4368C8;
// 4368CC: using guessed type int dword_4368CC;
// 4368D0: using guessed type int dword_4368D0;
// 4368D4: using guessed type int dword_4368D4;
// 4368D8: using guessed type int dword_4368D8;
// 43A7B4: using guessed type __int16 word_43A7B4;
// 43A7B6: using guessed type __int16 word_43A7B6;
// 43A7B8: using guessed type __int16 word_43A7B8;
// 43A7BA: using guessed type __int16 word_43A7BA;
// 43A7BC: using guessed type int dword_43A7BC;

//----- (0040F9DC) --------------------------------------------------------
int __usercall sub_40F9DC@<eax>(int a1@<esi>)
{
  int v1; // edx
  int *v2; // ecx
  int *v3; // ebx
  int v4; // eax
  int *v5; // edx
  int v6; // eax
  int result; // eax
  int v8; // eax
  int v9; // eax
  int v10; // eax
  int v11; // eax

  v1 = *(_DWORD *)(a1 + 32);
  BYTE1(v1) = *(_BYTE *)(a1 + 28);
  dword_4368A0 = v1;
  v2 = (int *)(a1 + 12);
  v3 = (int *)(a1 + 4);
  v4 = *(_DWORD *)(a1 + 16);
  v5 = (int *)(a1 + 20);
  if ( v4 < *(_DWORD *)(a1 + 8) )
  {
    v6 = *(_DWORD *)(a1 + 24);
    v3 = (int *)(a1 + 12);
    v2 = (int *)(a1 + 4);
    if ( v6 <= *(_DWORD *)(a1 + 8) )
    {
      v2 = (int *)(a1 + 20);
      v5 = (int *)(a1 + 4);
      if ( v6 <= *(_DWORD *)(a1 + 16) )
      {
        v3 = (int *)(a1 + 20);
        v2 = (int *)(a1 + 12);
      }
    }
  }
  else if ( v4 >= *(_DWORD *)(a1 + 24) )
  {
    v2 = (int *)(a1 + 20);
    v5 = (int *)(a1 + 12);
    if ( *(_DWORD *)(a1 + 8) >= *(_DWORD *)(a1 + 24) )
    {
      v3 = (int *)(a1 + 20);
      v2 = (int *)(a1 + 4);
    }
  }
  result = *v3;
  if ( *v3 >= -8192000 && result <= 8192000 )
  {
    dword_4368A8[0] = *v3;
    if ( result >= -8192000 )
    {
      dword_4368A8[1] = v3[1];
      result = *v2;
      if ( *v2 >= -8192000 && result <= 8192000 )
      {
        dword_4368B0[0] = *v2;
        dword_4368B0[1] = v2[1];
        result = *v5;
        if ( *v5 >= -8192000 && result <= 8192000 )
        {
          dword_4368B8[0] = *v5;
          result = v5[1];
          if ( result <= 8192000 )
          {
            dword_4368B8[1] = v5[1];
            dword_436888 = dword_4368A8[1] >> 8;
            if ( dword_4368B0[1] >> 8 != dword_4368A8[1] >> 8 )
            {
              dword_43688C = (dword_4368B0[1] >> 8) - (dword_4368A8[1] >> 8);
              sub_40FC98(dword_4368B0, dword_4368A8);
              sub_40FCFE(dword_4368B8, dword_4368A8);
              v8 = dword_436898;
              if ( dword_436898 > dword_43689C )
              {
                dword_436898 = dword_43689C;
                dword_43689C = v8;
                v9 = dword_436890;
                dword_436890 = dword_436894;
                dword_436894 = v9;
              }
              sub_40FBA0();
            }
            dword_436888 = dword_4368B0[1] >> 8;
            result = (dword_4368B8[1] >> 8) - (dword_4368B0[1] >> 8);
            if ( dword_4368B8[1] >> 8 != dword_4368B0[1] >> 8 )
            {
              dword_43688C = (dword_4368B8[1] >> 8) - (dword_4368B0[1] >> 8);
              sub_40FC98(dword_4368B8, dword_4368A8);
              sub_40FCFE(dword_4368B8, dword_4368B0);
              dword_436890 += dword_436898 * ((dword_4368B0[1] >> 8) - (dword_4368A8[1] >> 8));
              v10 = dword_436898;
              if ( dword_436898 < dword_43689C )
              {
                dword_436898 = dword_43689C;
                dword_43689C = v10;
                v11 = dword_436890;
                dword_436890 = dword_436894;
                dword_436894 = v11;
              }
              return sub_40FBA0();
            }
          }
        }
      }
    }
  }
  return result;
}
// 436888: using guessed type int dword_436888;
// 43688C: using guessed type int dword_43688C;
// 436890: using guessed type int dword_436890;
// 436894: using guessed type int dword_436894;
// 436898: using guessed type int dword_436898;
// 43689C: using guessed type int dword_43689C;
// 4368A0: using guessed type int dword_4368A0;
// 4368A8: using guessed type _DWORD dword_4368A8[2];
// 4368B0: using guessed type _DWORD dword_4368B0[2];
// 4368B8: using guessed type _DWORD dword_4368B8[2];

//----- (0040FBA0) --------------------------------------------------------
int sub_40FBA0()
{
  int result; // eax
  int v1; // ebx
  int v2; // edx
  bool v3; // cc
  int v4; // ebp
  char *v5; // edx
  int v6; // edi
  int v7; // ecx
  int v8; // esi
  int v9; // ecx
  int v10; // esi
  int i; // ecx
  char v12; // al

  result = dword_436890;
  v1 = dword_436894;
  v2 = dword_436888;
  if ( dword_436888 < dword_41CDB4 )
  {
    v3 = dword_43688C <= dword_41CDB4 - dword_436888;
    dword_43688C -= dword_41CDB4 - dword_436888;
    if ( v3 )
      return result;
    result = dword_436898 * (dword_41CDB4 - dword_436888) + dword_436890;
    v1 = dword_43689C * (dword_41CDB4 - dword_436888) + dword_436894;
    v2 = dword_41CDB4;
  }
  if ( dword_41CDCC - v2 < dword_43688C )
  {
    if ( v2 >= dword_41CDCC )
      return result;
    dword_43688C = dword_41CDCC - v2;
  }
  v4 = dword_41CDA4 + dword_41CDF8[v2] - 1;
  v5 = (char *)dword_4368A0;
  v6 = result;
  do
  {
    v7 = v1 >> 16;
    v8 = v6 >> 16;
    if ( v6 >> 16 < dword_41CDB0 )
    {
      if ( v7 < dword_41CDB0 )
        goto LABEL_18;
      v8 = dword_41CDB0;
    }
    if ( v7 > dword_41CDC8 )
    {
      if ( v8 > dword_41CDC8 )
        goto LABEL_18;
      v7 = dword_41CDC8;
    }
    v3 = v7 <= v8;
    v9 = v7 - v8;
    if ( !v3 )
    {
      v10 = v4 + v8;
      LOBYTE(v5) = *(_BYTE *)(v10 + v9);
      for ( i = v9 - 1; i; --i )
      {
        v12 = *v5;
        LOBYTE(v5) = *(_BYTE *)(v10 + i);
        *(_BYTE *)(v10 + i + 1) = v12;
      }
      *(_BYTE *)(v10 + 1) = *v5;
    }
LABEL_18:
    v6 += dword_436898;
    v1 += dword_43689C;
    v4 += dword_41CDF0;
    --dword_43688C;
  }
  while ( dword_43688C );
  return v6;
}
// 41CDA4: using guessed type int dword_41CDA4;
// 41CDB0: using guessed type int dword_41CDB0;
// 41CDB4: using guessed type int dword_41CDB4;
// 41CDC8: using guessed type int dword_41CDC8;
// 41CDCC: using guessed type int dword_41CDCC;
// 41CDF0: using guessed type int dword_41CDF0;
// 41CDF8: using guessed type int dword_41CDF8[601];
// 436888: using guessed type int dword_436888;
// 43688C: using guessed type int dword_43688C;
// 436890: using guessed type int dword_436890;
// 436894: using guessed type int dword_436894;
// 436898: using guessed type int dword_436898;
// 43689C: using guessed type int dword_43689C;
// 4368A0: using guessed type int dword_4368A0;

//----- (0040FC98) --------------------------------------------------------
int __usercall sub_40FC98@<eax>(_DWORD *a1@<edi>, _DWORD *a2@<esi>)
{
  unsigned int v2; // ecx
  unsigned int v3; // eax

  v2 = a1[1] - a2[1];
  if ( v2 <= 0x40 )
  {
    v3 = *a1 - *a2;
    if ( *a1 <= *a2 )
      v3 = *a2 - *a1;
    if ( v3 > 0x10000 )
    {
      if ( v2 <= 3 )
        v2 = 3;
    }
    else
    {
      v2 = 65;
    }
  }
  dword_436898 = ((__int64)(*a1 - *a2) << 16) / (int)v2;
  dword_436890 = (*a2 << 8) + (dword_436898 >> 8) * (256 - (unsigned __int8)a2[1]);
  return dword_436898 >> 8;
}
// 436890: using guessed type int dword_436890;
// 436898: using guessed type int dword_436898;

//----- (0040FCFE) --------------------------------------------------------
int __usercall sub_40FCFE@<eax>(_DWORD *a1@<edi>, _DWORD *a2@<esi>)
{
  unsigned int v2; // ecx
  unsigned int v3; // eax
  int v4; // edx
  __int64 v5; // rtt

  v2 = a1[1] - a2[1];
  if ( v2 <= 0x40 )
  {
    v3 = *a1 - *a2;
    if ( *a1 <= *a2 )
      v3 = *a2 - *a1;
    if ( v3 > 0x10000 )
    {
      if ( v2 <= 3 )
        v2 = 3;
    }
    else
    {
      v2 = 65;
    }
  }
  v4 = *a1 - *a2;
  LODWORD(v5) = v4 << 16;
  HIDWORD(v5) = v4 >> 16;
  dword_43689C = v5 / (int)v2;
  dword_436894 = (*a2 << 8) + (dword_43689C >> 8) * (256 - (unsigned __int8)a2[1]);
  return dword_43689C >> 8;
}
// 436894: using guessed type int dword_436894;
// 43689C: using guessed type int dword_43689C;

//----- (0040FD64) --------------------------------------------------------
int __usercall sub_40FD64@<eax>(int result@<eax>)
{
  dword_43A7AC = result + 1;
  dword_43A7B0 = 1 - result;
  return result;
}
// 43A7AC: using guessed type int dword_43A7AC;
// 43A7B0: using guessed type int dword_43A7B0;

//----- (0041035C) --------------------------------------------------------
void __usercall sub_41035C(_BYTE *a1@<edx>, __int16 a2@<cx>, _BYTE *a3@<esi>)
{
  __int16 v3; // bx
  bool v4; // cf
  __int16 v5; // ax

  v3 = dword_43A7BC;
  while ( 1 )
  {
    v4 = __CFADD__(word_43A7B4, a2);
    a2 += word_43A7B4;
    if ( v4 )
    {
      LOBYTE(a1) = HIBYTE(v3);
      *a3 = *a1;
      v3 += word_43A7BA;
      a3 += dword_41CDF0;
    }
    v5 = word_43A7B8;
    do
    {
      LOBYTE(a1) = HIBYTE(v3);
      *a3 = *a1;
      v3 += word_43A7BA;
      a3 += dword_41CDF0;
      --v5;
    }
    while ( v5 );
    ++a3;
    if ( !--word_43A7B6 )
      JUMPOUT(0x40A5AD);
  }
}
// 4103A5: control flows out of bounds to 40A5AD
// 41CDF0: using guessed type int dword_41CDF0;
// 43A7B4: using guessed type __int16 word_43A7B4;
// 43A7B6: using guessed type __int16 word_43A7B6;
// 43A7B8: using guessed type __int16 word_43A7B8;
// 43A7BA: using guessed type __int16 word_43A7BA;
// 43A7BC: using guessed type int dword_43A7BC;

//----- (00410A20) --------------------------------------------------------
int __usercall sub_410A20@<eax>(_DWORD *a1@<esi>)
{
  _DWORD *v1; // ebp
  int *v2; // ecx
  int v3; // eax
  int v4; // ebx
  int v5; // ebx
  int v7; // [esp-4h] [ebp-8h]

  v1 = (_DWORD *)a1[1];
  dword_43A7E0 = v1[3];
  dword_43A7E4 = v1[5];
  dword_43A7E8 = v1[2];
  dword_43A7EC = v1[4];
  dword_43A7F0 = v1[7];
  dword_43A7F4 = v1[6];
  v2 = (int *)a1[2];
  HIWORD(v3) = (unsigned int)(*v2 * -*v1) >> 16;
  LOWORD(v3) = (unsigned __int64)(*v2 * (__int64)-*v1) >> 32;
  dword_43A7C0 = __ROL4__(v3, 16);
  HIWORD(v3) = (unsigned int)(v2[2] * -v1[1]) >> 16;
  LOWORD(v3) = (unsigned __int64)(v2[2] * (__int64)-v1[1]) >> 32;
  dword_43A7C0 += __ROL4__(v3, 16);
  HIWORD(v3) = (unsigned int)(v2[1] * -*v1) >> 16;
  LOWORD(v3) = (unsigned __int64)(v2[1] * (__int64)-*v1) >> 32;
  dword_43A7C4 = __ROL4__(v3, 16);
  HIWORD(v3) = (unsigned int)(v2[3] * -v1[1]) >> 16;
  LOWORD(v3) = (unsigned __int64)(v2[3] * (__int64)-v1[1]) >> 32;
  dword_43A7C4 += __ROL4__(v3, 16);
  v4 = v1[4] - v1[2];
  HIWORD(v3) = (unsigned int)(v4 * v2[1]) >> 16;
  LOWORD(v3) = (unsigned __int64)(v4 * (__int64)v2[1]) >> 32;
  dword_43A7CC = __ROL4__(v3, 16);
  HIWORD(v3) = (unsigned int)(v4 * *v2) >> 16;
  LOWORD(v3) = (unsigned __int64)(v4 * (__int64)*v2) >> 32;
  dword_43A7C8 = __ROL4__(v3, 16);
  v5 = v1[5] - v1[3];
  HIWORD(v3) = (unsigned int)(v5 * v2[3]) >> 16;
  LOWORD(v3) = (unsigned __int64)(v5 * (__int64)v2[3]) >> 32;
  dword_43A7D4 = dword_43A7C4 + __ROL4__(v3, 16);
  dword_43A7DC = dword_43A7CC + dword_43A7D4;
  dword_43A7CC += dword_43A7C4;
  HIWORD(v3) = (unsigned int)(v5 * v2[2]) >> 16;
  LOWORD(v3) = (unsigned __int64)(v5 * (__int64)v2[2]) >> 32;
  dword_43A7D0 = dword_43A7C0 + __ROL4__(v3, 16);
  dword_43A7D8 = dword_43A7C8 + dword_43A7D0;
  dword_43A7C8 += dword_43A7C0;
  dword_43A7C0 += a1[3];
  dword_43A7C4 += a1[4];
  dword_43A7C8 += a1[3];
  dword_43A7CC += a1[4];
  dword_43A7D0 += a1[3];
  dword_43A7D4 += a1[4];
  dword_43A7D8 += a1[3];
  dword_43A7DC += a1[4];
  unk_43A7FC = dword_43A7C0;
  unk_43A800 = dword_43A7C4;
  unk_43A804 = dword_43A7C8;
  unk_43A808 = dword_43A7CC;
  unk_43A80C = dword_43A7D0;
  unk_43A810 = dword_43A7D4;
  unk_43A814 = dword_43A820;
  dword_43A820[1] = dword_43A7E0;
  dword_43A820[3] = dword_43A7E0;
  dword_43A820[5] = dword_43A7E4;
  dword_43A820[0] = dword_43A7E8;
  dword_43A820[4] = dword_43A7E8;
  dword_43A820[2] = dword_43A7EC;
  unk_43A818 = dword_43A7F4;
  unk_43A81C = dword_43A7F0;
  ((void (__cdecl *)(void *))loc_40B390)(&unk_43A7F8);
  unk_43A7FC = dword_43A7C8;
  unk_43A800 = dword_43A7CC;
  unk_43A804 = dword_43A7D0;
  unk_43A808 = dword_43A7D4;
  unk_43A80C = dword_43A7D8;
  unk_43A810 = dword_43A7DC;
  unk_43A814 = dword_43A820;
  dword_43A820[1] = dword_43A7E0;
  dword_43A820[3] = dword_43A7E4;
  dword_43A820[5] = dword_43A7E4;
  dword_43A820[0] = dword_43A7EC;
  dword_43A820[4] = dword_43A7EC;
  dword_43A820[2] = dword_43A7E8;
  unk_43A818 = dword_43A7F4;
  unk_43A81C = dword_43A7F0;
  ((void (__cdecl *)(void *))loc_40B390)(&unk_43A7F8);
  return v7;
}
// 410C94: variable 'v7' is possibly undefined
// 43A7C0: using guessed type int dword_43A7C0;
// 43A7C4: using guessed type int dword_43A7C4;
// 43A7C8: using guessed type int dword_43A7C8;
// 43A7CC: using guessed type int dword_43A7CC;
// 43A7D0: using guessed type int dword_43A7D0;
// 43A7D4: using guessed type int dword_43A7D4;
// 43A7D8: using guessed type int dword_43A7D8;
// 43A7DC: using guessed type int dword_43A7DC;
// 43A7E0: using guessed type int dword_43A7E0;
// 43A7E4: using guessed type int dword_43A7E4;
// 43A7E8: using guessed type int dword_43A7E8;
// 43A7EC: using guessed type int dword_43A7EC;
// 43A7F0: using guessed type int dword_43A7F0;
// 43A7F4: using guessed type int dword_43A7F4;
// 43A820: using guessed type _DWORD[60];

//----- (00410CBE) --------------------------------------------------------
_DWORD *__usercall sub_410CBE@<eax>(_DWORD *result@<eax>, int a2@<edx>, int a3@<edi>, int a4@<esi>)
{
  int v4; // edx
  _BYTE *v5; // ebx
  int v6; // edx
  int v7; // ebp
  int v8; // ecx
  int v9; // eax
  int v10; // edi
  int v11; // esi
  bool v12; // cf
  int v13; // ecx
  char *v14; // eax
  int i; // esi
  char v16; // dh
  int v17; // [esp-10h] [ebp-10h]
  int v18; // [esp-Ch] [ebp-Ch]
  _DWORD *v19; // [esp-8h] [ebp-8h]

  v4 = a2 - 1;
  if ( v4 >= 0 )
  {
    v6 = v4 << 16;
    HIWORD(v5) = HIWORD(dword_43A94C);
    LOBYTE(v6) = byte_43A944;
    v7 = dword_43A948;
    do
    {
      v19 = result;
      v8 = *(_DWORD *)(a4 + 4) << 16;
      v18 = a4;
      LOBYTE(v8) = *(_BYTE *)(a4 + 1);
      v17 = a3;
      BYTE1(v8) = *(_BYTE *)(a4 + 2);
      LOBYTE(v5) = *(_BYTE *)(a4 + 6);
      v9 = *result;
      v10 = v9 + a3;
      v11 = *(_DWORD *)(a4 + 8) - v9 - 1;
      if ( v11 >= 0 )
      {
        HIWORD(v14) = HIWORD(dword_43A910);
        BYTE1(v5) = BYTE1(v8);
        LOBYTE(v14) = *(_BYTE *)(v10 + v11);
        v12 = __CFADD__(v7, v8);
        v13 = v7 + v8;
        BYTE1(v14) = *v5;
        for ( i = v11 - 1; i >= 0; --i )
        {
          LOBYTE(v5) = v6 + v12 + (_BYTE)v5;
          BYTE1(v5) = BYTE1(v13);
          v16 = *v14;
          LOBYTE(v14) = *(_BYTE *)(v10 + i);
          v12 = __CFADD__(v7, v13);
          v13 += v7;
          BYTE1(v14) = *v5;
          *(_BYTE *)(v10 + i + 1) = v16;
        }
        BYTE1(v6) = *v14;
        *(_BYTE *)(v10 + i + 1) = *v14;
      }
      a3 = dword_41CDF0 + v17;
      a4 = v18 + 12;
      result = v19 + 1;
      v6 -= 0x10000;
    }
    while ( v6 >= 0 );
  }
  return result;
}
// 41CDF0: using guessed type int dword_41CDF0;
// 43A910: using guessed type int dword_43A910;
// 43A944: using guessed type char byte_43A944;
// 43A948: using guessed type int dword_43A948;
// 43A94C: using guessed type int dword_43A94C;

//----- (00410D5C) --------------------------------------------------------
_DWORD *__usercall sub_410D5C@<eax>(_DWORD *result@<eax>, int a2@<edx>, int a3@<edi>, int a4@<esi>)
{
  int v4; // edx
  _BYTE *v5; // ebx
  int v6; // edx
  int v7; // ebp
  int v8; // ecx
  int v9; // eax
  int v10; // edi
  int i; // esi
  int v12; // ecx
  int v13; // ecx
  int v14; // ecx
  int v15; // esi
  bool v16; // cf
  int v17; // ecx
  char v18; // al
  int v19; // [esp-10h] [ebp-10h]
  int v20; // [esp-Ch] [ebp-Ch]
  _DWORD *v21; // [esp-8h] [ebp-8h]

  v4 = a2 - 1;
  if ( v4 >= 0 )
  {
    v6 = v4 << 16;
    HIWORD(v5) = HIWORD(dword_43A94C);
    LOBYTE(v6) = byte_43A944;
    v7 = dword_43A948;
    do
    {
      v21 = result;
      v8 = *(_DWORD *)(a4 + 4) << 16;
      v20 = a4;
      LOBYTE(v8) = *(_BYTE *)(a4 + 1);
      v19 = a3;
      BYTE1(v8) = *(_BYTE *)(a4 + 2);
      LOBYTE(v5) = *(_BYTE *)(a4 + 6);
      v9 = *result;
      v10 = v9 + a3;
      BYTE1(v5) = BYTE1(v8);
      for ( i = *(_DWORD *)(a4 + 8) - v9 - 4; i >= 0; i -= 4 )
      {
        v16 = __CFADD__(v7, v8);
        v12 = v7 + v8;
        BYTE1(v9) = *v5;
        BYTE1(v5) = BYTE1(v12);
        LOBYTE(v5) = v6 + v16 + (_BYTE)v5;
        v16 = __CFADD__(v7, v12);
        v13 = v7 + v12;
        LOBYTE(v9) = *v5;
        BYTE1(v5) = BYTE1(v13);
        LOBYTE(v5) = v6 + v16 + (_BYTE)v5;
        v9 <<= 16;
        v16 = __CFADD__(v7, v13);
        v14 = v7 + v13;
        BYTE1(v9) = *v5;
        BYTE1(v5) = BYTE1(v14);
        LOBYTE(v5) = v6 + v16 + (_BYTE)v5;
        v16 = __CFADD__(v7, v14);
        v8 = v7 + v14;
        LOBYTE(v9) = *v5;
        BYTE1(v5) = BYTE1(v8);
        LOBYTE(v5) = v6 + v16 + (_BYTE)v5;
        *(_DWORD *)(v10 + i) = v9;
      }
      v15 = i + 3;
      if ( v15 >= 0 )
      {
        v16 = __CFADD__(v7, v8);
        v17 = v7 + v8;
        do
        {
          v18 = *v5;
          BYTE1(v5) = BYTE1(v17);
          LOBYTE(v5) = v6 + v16 + (_BYTE)v5;
          v16 = __CFADD__(v7, v17);
          v17 += v7;
          *(_BYTE *)(v10 + v15--) = v18;
        }
        while ( v15 >= 0 );
      }
      a3 = dword_41CDF0 + v19;
      result = v21 + 1;
      a4 = v20 + 12;
      v6 -= 0x10000;
    }
    while ( v6 >= 0 );
  }
  return result;
}
// 41CDF0: using guessed type int dword_41CDF0;
// 43A944: using guessed type char byte_43A944;
// 43A948: using guessed type int dword_43A948;
// 43A94C: using guessed type int dword_43A94C;

//----- (00410E20) --------------------------------------------------------
int sub_410E20()
{
  int result; // eax

  _cfltcvt_init_1();
  dword_43AA48 = _ms_p5_mp_test_fdiv();
  result = _setdefaultprecision();
  __asm { fnclex }
  return result;
}
// 410E50: using guessed type int _cfltcvt_init_1(void);
// 411A00: using guessed type int _setdefaultprecision(void);
// 411A70: using guessed type int _ms_p5_mp_test_fdiv(void);
// 43AA48: using guessed type int dword_43AA48;

//----- (00415E90) --------------------------------------------------------
int __cdecl sub_415E90(int a1, int a2)
{
  return _ld12cvt(a1, a2, &unk_43BDA0);
}
// 415CC0: using guessed type _DWORD __cdecl _ld12cvt(_DWORD, _DWORD, _DWORD);

//----- (00415EB0) --------------------------------------------------------
int __cdecl sub_415EB0(int a1, int a2)
{
  return _ld12cvt(a1, a2, &unk_43BDB8);
}
// 415CC0: using guessed type _DWORD __cdecl _ld12cvt(_DWORD, _DWORD, _DWORD);

//----- (00415ED0) --------------------------------------------------------
int __cdecl sub_415ED0(int a1, int a2)
{
  _BYTE v3[4]; // [esp+0h] [ebp-10h] BYREF
  _BYTE v4[12]; // [esp+4h] [ebp-Ch] BYREF

  __strgtold12(v4, v3, a2, 0, 0, 0, 0);
  return sub_415E90((int)v4, a1);
}
// 418970: using guessed type _DWORD __cdecl __strgtold12(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (00415F10) --------------------------------------------------------
int __cdecl sub_415F10(int a1, int a2)
{
  _BYTE v3[4]; // [esp+0h] [ebp-10h] BYREF
  _BYTE v4[12]; // [esp+4h] [ebp-Ch] BYREF

  __strgtold12(v4, v3, a2, 0, 0, 0, 0);
  return sub_415EB0((int)v4, a1);
}
// 418970: using guessed type _DWORD __cdecl __strgtold12(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (00419EA0) --------------------------------------------------------
int sub_419EA0()
{
  return 0;
}

//----- (00456000) --------------------------------------------------------
int sub_456000()
{
  signed int v0; // eax
  unsigned __int64 v1; // rtt
  int v2; // eax
  int result; // eax

  dword_41CB2C = dword_41CAB8 - dword_41CAB0;
  dword_41CB30 = dword_41CAC0 - dword_41CAB0;
  if ( dword_41CAC0 == dword_41CAB0 )
    dword_41CB30 = 1;
  if ( dword_41CAC0 - dword_41CAB0 == dword_41CB2C )
  {
    v0 = 0x7FFFFFFF;
  }
  else
  {
    LODWORD(v1) = 0;
    HIDWORD(v1) = dword_41CB2C;
    v0 = (unsigned int)(v1 / (unsigned int)dword_41CB30) >> 1;
  }
  dword_41CB48 = v0;
  dword_41CB38 = dword_41CAB4 - dword_41CAAC;
  dword_41CB3C = (unsigned __int64)(v0 * (__int64)(2 * (dword_41CABC - dword_41CAAC))) >> 32;
  dword_41CB40 = (unsigned __int64)(v0 * (__int64)(2 * (dword_41CAD4 - dword_41CAC4))) >> 32;
  dword_41CB44 = (unsigned __int64)(v0 * (__int64)(2 * (dword_41CAD8 - dword_41CAC8))) >> 32;
  v2 = dword_41CB3C - (dword_41CAB4 - dword_41CAAC);
  if ( v2 >= -2 && v2 <= 2 )
    v2 = 4 * ((v2 >> 2) | 1);
  dword_41CB34 = v2;
  dword_41CADC = ((__int64)(dword_41CAC4 + dword_41CB40 - dword_41CACC) << 16) / v2;
  dword_41CAEC = 0;
  dword_41CAF0 = -dword_41CADC >> 3;
  dword_41CAF4 = 2 * dword_41CAF0;
  dword_41CAF8 = 3 * dword_41CAF0;
  dword_41CAFC = 4 * dword_41CAF0;
  dword_41CB00 = 5 * dword_41CAF0;
  dword_41CB04 = 6 * dword_41CAF0;
  dword_41CB08 = 7 * dword_41CAF0;
  dword_41CAE0 = ((__int64)(dword_41CAC8 + dword_41CB44 - dword_41CAD0) << 16) / v2;
  result = -dword_41CAE0 >> 3;
  dword_41CB0C = 0;
  dword_41CB10 = result;
  dword_41CB14 = 2 * result;
  dword_41CB18 = 3 * result;
  dword_41CB1C = 4 * result;
  dword_41CB20 = 5 * result;
  dword_41CB24 = 6 * result;
  dword_41CB28 = 7 * result;
  return result;
}
// 41CAAC: using guessed type int dword_41CAAC;
// 41CAB0: using guessed type int dword_41CAB0;
// 41CAB4: using guessed type int dword_41CAB4;
// 41CAB8: using guessed type int dword_41CAB8;
// 41CABC: using guessed type int dword_41CABC;
// 41CAC0: using guessed type int dword_41CAC0;
// 41CAC4: using guessed type int dword_41CAC4;
// 41CAC8: using guessed type int dword_41CAC8;
// 41CACC: using guessed type int dword_41CACC;
// 41CAD0: using guessed type int dword_41CAD0;
// 41CAD4: using guessed type int dword_41CAD4;
// 41CAD8: using guessed type int dword_41CAD8;
// 41CADC: using guessed type int dword_41CADC;
// 41CAE0: using guessed type int dword_41CAE0;
// 41CAEC: using guessed type int dword_41CAEC;
// 41CAF0: using guessed type int dword_41CAF0;
// 41CAF4: using guessed type int dword_41CAF4;
// 41CAF8: using guessed type int dword_41CAF8;
// 41CAFC: using guessed type int dword_41CAFC;
// 41CB00: using guessed type int dword_41CB00;
// 41CB04: using guessed type int dword_41CB04;
// 41CB08: using guessed type int dword_41CB08;
// 41CB0C: using guessed type int dword_41CB0C;
// 41CB10: using guessed type int dword_41CB10;
// 41CB14: using guessed type int dword_41CB14;
// 41CB18: using guessed type int dword_41CB18;
// 41CB1C: using guessed type int dword_41CB1C;
// 41CB20: using guessed type int dword_41CB20;
// 41CB24: using guessed type int dword_41CB24;
// 41CB28: using guessed type int dword_41CB28;
// 41CB2C: using guessed type int dword_41CB2C;
// 41CB30: using guessed type int dword_41CB30;
// 41CB34: using guessed type int dword_41CB34;
// 41CB38: using guessed type int dword_41CB38;
// 41CB3C: using guessed type int dword_41CB3C;
// 41CB40: using guessed type int dword_41CB40;
// 41CB44: using guessed type int dword_41CB44;
// 41CB48: using guessed type int dword_41CB48;

//----- (00456180) --------------------------------------------------------
int __usercall sub_456180@<eax>(int *a1@<ebx>, _DWORD *a2@<esi>)
{
  int v2; // edx
  int result; // eax

  v2 = (int)a2[1] >> 8;
  *a1 = v2;
  result = ((int)a2[3] >> 8) - v2;
  a1[1] = result;
  if ( result )
  {
    sub_456A50(a2);
    return sub_4567A0(dword_41CBE0, dword_41CBF4, a1[1], a1 + 2, dword_41CBDC);
  }
  return result;
}
// 41CBDC: using guessed type int dword_41CBDC;
// 41CBE0: using guessed type int dword_41CBE0;
// 41CBF4: using guessed type int dword_41CBF4;

//----- (004561C0) --------------------------------------------------------
int __usercall sub_4561C0@<eax>(int *a1@<ebx>, _DWORD *a2@<esi>)
{
  int v2; // edx
  int result; // eax

  v2 = (int)a2[1] >> 8;
  *a1 = v2;
  result = ((int)a2[3] >> 8) - v2;
  a1[1] = result;
  if ( result )
  {
    sub_456A50(a2);
    return sub_456760(dword_41CBE0, dword_41CBF4, a1[1], a1 + 2, dword_41CBDC);
  }
  return result;
}
// 41CBDC: using guessed type int dword_41CBDC;
// 41CBE0: using guessed type int dword_41CBE0;
// 41CBF4: using guessed type int dword_41CBF4;

//----- (00456520) --------------------------------------------------------
int __usercall sub_456520@<eax>(int *a1@<ebx>, _DWORD *a2@<esi>)
{
  int result; // eax
  int v3; // edx
  int v4; // ecx
  int *v5; // ebx

  if ( dword_453044 < a2[3] )
  {
    if ( dword_453058 > a2[1] )
    {
      sub_4567F0(a2);
      dword_41CBF0 = (int)(a1 + 2);
      v3 = (int)a2[1] >> 8;
      *a1 = v3;
      result = ((int)a2[3] >> 8) - v3;
      a1[1] = result;
      if ( result )
      {
        sub_456A50(a2);
        v4 = a1[1];
        v5 = a1 + 2;
        result = sub_4567A0(dword_41CBE0, dword_41CBF4, v4, v5, dword_41CBDC);
        dword_41CBF0 = (int)v5;
      }
      if ( dword_41CC00 == 1 )
      {
        *a2 = a2[2];
        a2[1] = a2[3];
        a2[4] = a2[6];
        a2[5] = a2[7];
        a2[2] = dword_41CC04;
        a2[3] = dword_41CC08;
        a2[6] = dword_41CC0C;
        a2[7] = dword_41CC10;
        sub_456A09(a2);
        result = ((int)a2[3] >> 8) - ((int)a2[1] >> 8);
        dword_41CC14 = result;
        if ( result )
        {
          a1[1] += result;
          sub_456A50(a2);
          return sub_4567A0(dword_41CBE0, dword_41CBF4, dword_41CC14, (int *)dword_41CBF0, dword_41CBDC);
        }
      }
    }
    else
    {
      a1[1] = 0;
      result = dword_453048;
      *a1 = dword_453048;
    }
  }
  else
  {
    a1[1] = 0;
    result = dword_45304C;
    *a1 = dword_45304C;
  }
  return result;
}
// 41CBDC: using guessed type int dword_41CBDC;
// 41CBE0: using guessed type int dword_41CBE0;
// 41CBF0: using guessed type int dword_41CBF0;
// 41CBF4: using guessed type int dword_41CBF4;
// 41CC00: using guessed type int dword_41CC00;
// 41CC04: using guessed type int dword_41CC04;
// 41CC08: using guessed type int dword_41CC08;
// 41CC0C: using guessed type int dword_41CC0C;
// 41CC10: using guessed type int dword_41CC10;
// 41CC14: using guessed type int dword_41CC14;
// 453044: using guessed type int dword_453044;
// 453048: using guessed type int dword_453048;
// 45304C: using guessed type int dword_45304C;
// 453058: using guessed type int dword_453058;

//----- (00456640) --------------------------------------------------------
int __usercall sub_456640@<eax>(int *a1@<ebx>, _DWORD *a2@<esi>)
{
  int result; // eax
  int v3; // edx
  int v4; // ecx
  int *v5; // ebx

  if ( dword_453044 < a2[3] )
  {
    if ( dword_453058 > a2[1] )
    {
      sub_4567F0(a2);
      dword_41CC1C = (int)(a1 + 2);
      v3 = (int)a2[1] >> 8;
      *a1 = v3;
      result = ((int)a2[3] >> 8) - v3;
      a1[1] = result;
      if ( result )
      {
        sub_456A50(a2);
        v4 = a1[1];
        v5 = a1 + 2;
        result = sub_456760(dword_41CBE0, dword_41CBF4, v4, v5, dword_41CBDC);
        dword_41CC1C = (int)v5;
      }
      if ( dword_41CC00 == 1 )
      {
        *a2 = a2[2];
        a2[1] = a2[3];
        a2[4] = a2[6];
        a2[5] = a2[7];
        a2[2] = dword_41CC04;
        a2[3] = dword_41CC08;
        a2[6] = dword_41CC0C;
        a2[7] = dword_41CC10;
        sub_456A09(a2);
        result = ((int)a2[3] >> 8) - ((int)a2[1] >> 8);
        dword_41CC20 = result;
        if ( result )
        {
          a1[1] += result;
          sub_456A50(a2);
          return sub_456760(dword_41CBE0, dword_41CBF4, dword_41CC20, (int *)dword_41CC1C, dword_41CBDC);
        }
      }
    }
    else
    {
      a1[1] = 0;
      result = dword_453048;
      *a1 = dword_453048;
    }
  }
  else
  {
    a1[1] = 0;
    result = dword_45304C;
    *a1 = dword_45304C;
  }
  return result;
}
// 41CBDC: using guessed type int dword_41CBDC;
// 41CBE0: using guessed type int dword_41CBE0;
// 41CBF4: using guessed type int dword_41CBF4;
// 41CC00: using guessed type int dword_41CC00;
// 41CC04: using guessed type int dword_41CC04;
// 41CC08: using guessed type int dword_41CC08;
// 41CC0C: using guessed type int dword_41CC0C;
// 41CC10: using guessed type int dword_41CC10;
// 41CC1C: using guessed type int dword_41CC1C;
// 41CC20: using guessed type int dword_41CC20;
// 453044: using guessed type int dword_453044;
// 453048: using guessed type int dword_453048;
// 45304C: using guessed type int dword_45304C;
// 453058: using guessed type int dword_453058;

//----- (00456760) --------------------------------------------------------
int __usercall sub_456760@<eax>(int result@<eax>, int a2@<edx>, __int16 a3@<cx>, int *a4@<ebx>, int a5@<esi>)
{
  int v5; // ebp

  do
  {
    a4[1] = a5 >> 16;
    a5 += dword_41CBE4;
    *a4 = result >> 16;
    result += dword_41CBE8;
    v5 = dword_41CBF8;
    a4[2] = a2 >> 16;
    a2 += v5;
    a4 += 3;
  }
  while ( a3-- > 1 );
  return result;
}
// 41CBE4: using guessed type int dword_41CBE4;
// 41CBE8: using guessed type int dword_41CBE8;
// 41CBF8: using guessed type int dword_41CBF8;

//----- (004567A0) --------------------------------------------------------
int __usercall sub_4567A0@<eax>(int result@<eax>, int a2@<edx>, int a3@<ecx>, int *a4@<ebx>, int a5@<esi>)
{
  int v5; // edi
  int v6; // ebp

  do
  {
    v5 = ((unsigned int)a2 >> 11) & 0x1C;
    a4[1] = (a5 + *(int *)((char *)&dword_41CAEC + v5)) >> 8;
    a5 += dword_41CBE4;
    *a4 = (result + *(int *)((char *)&dword_41CB0C + v5)) >> 8;
    result += dword_41CBE8;
    v6 = dword_41CBF8;
    a4[2] = a2 >> 16;
    a2 += v6;
    a4 += 3;
  }
  while ( a3-- > 1 );
  return result;
}
// 41CAEC: using guessed type int dword_41CAEC;
// 41CB0C: using guessed type int dword_41CB0C;
// 41CBE4: using guessed type int dword_41CBE4;
// 41CBE8: using guessed type int dword_41CBE8;
// 41CBF8: using guessed type int dword_41CBF8;

//----- (004567F0) --------------------------------------------------------
int __usercall sub_4567F0@<eax>(_DWORD *a1@<esi>)
{
  __int64 v1; // rax
  unsigned __int64 v2; // rtt
  signed int v3; // ecx
  int v4; // edx
  unsigned __int64 v5; // rtt
  signed int v6; // ecx
  int v7; // ecx
  int v8; // eax
  int v9; // eax
  unsigned __int64 v10; // rtt
  signed int v11; // ecx
  int v12; // ecx
  int v13; // eax
  int v14; // ecx
  unsigned int v15; // ecx
  unsigned __int64 v16; // rax
  unsigned int v17; // eax

  LODWORD(v1) = a1[1];
  if ( dword_453044 > (int)v1 )
  {
    LODWORD(v2) = 0;
    HIDWORD(v2) = dword_453044 - v1;
    v3 = (unsigned int)(v2 / (unsigned int)(a1[3] - v1)) >> 1;
    a1[5] += (unsigned __int64)(v3 * (__int64)(2 * (a1[7] - a1[5]))) >> 32;
    a1[4] += (unsigned __int64)(v3 * (__int64)(2 * (a1[6] - a1[4]))) >> 32;
    v1 = v3 * (__int64)(2 * (a1[2] - *a1));
    *a1 += HIDWORD(v1);
    a1[1] = dword_453044;
  }
  v4 = a1[3];
  if ( dword_453058 < v4 )
  {
    LODWORD(v5) = 0;
    HIDWORD(v5) = v4 - dword_453058;
    v6 = (unsigned int)(v5 / (unsigned int)(v4 - a1[1])) >> 1;
    a1[7] -= (unsigned __int64)(v6 * (__int64)(2 * (a1[7] - a1[5]))) >> 32;
    a1[6] -= (unsigned __int64)(v6 * (__int64)(2 * (a1[6] - a1[4]))) >> 32;
    v1 = v6 * (__int64)(2 * (a1[2] - *a1));
    a1[2] -= HIDWORD(v1);
    a1[3] = dword_453058;
  }
  dword_41CC00 = 0;
  if ( dword_453064 < *a1 )
  {
    if ( dword_453064 > a1[2] )
    {
      dword_41CC00 = 1;
      dword_41CC04 = a1[2];
      dword_41CC08 = a1[3];
      dword_41CC0C = a1[6];
      dword_41CC10 = a1[7];
      v9 = a1[2];
      LODWORD(v10) = 0;
      HIDWORD(v10) = dword_453064 - v9;
      v11 = (unsigned int)(v10 / (unsigned int)(*a1 - v9)) >> 1;
      a1[6] -= (unsigned __int64)(v11 * (__int64)(2 * (a1[6] - a1[4]))) >> 32;
      a1[7] -= (unsigned __int64)(v11 * (__int64)(2 * (a1[7] - a1[5]))) >> 32;
      a1[3] -= (unsigned __int64)(v11 * (__int64)(2 * (a1[3] - a1[1]))) >> 32;
    }
    else
    {
      v7 = a1[2] - dword_453064;
      HIWORD(v8) = (unsigned int)(dword_41CADC * v7) >> 16;
      LOWORD(v8) = (unsigned __int64)(dword_41CADC * (__int64)v7) >> 32;
      a1[6] -= __ROR4__(v8, 16);
      HIWORD(v8) = (unsigned int)(dword_41CAE0 * v7) >> 16;
      LOWORD(v8) = (unsigned __int64)(dword_41CAE0 * (__int64)v7) >> 32;
      a1[7] -= __ROR4__(v8, 16);
    }
    a1[2] = dword_453064;
    v12 = *a1 - dword_453064;
    HIWORD(v13) = (unsigned int)(dword_41CADC * v12) >> 16;
    LOWORD(v13) = (unsigned __int64)(dword_41CADC * (__int64)v12) >> 32;
    a1[4] -= __ROR4__(v13, 16);
    HIWORD(v13) = (unsigned int)(dword_41CAE0 * v12) >> 16;
    LOWORD(v13) = (unsigned __int64)(dword_41CAE0 * (__int64)v12) >> 32;
    a1[5] -= __ROR4__(v13, 16);
    LODWORD(v1) = dword_453064;
    *a1 = dword_453064;
  }
  if ( dword_453064 < a1[2] )
  {
    dword_41CC00 = 1;
    dword_41CC04 = a1[2];
    dword_41CC08 = a1[3];
    dword_41CC0C = a1[6];
    dword_41CC10 = a1[7];
    v14 = a1[2];
    HIDWORD(v16) = v14 - dword_453064;
    v15 = v14 - *a1;
    LODWORD(v16) = 0;
    if ( HIDWORD(v16) == v15 )
      v17 = -1;
    else
      v17 = v16 / v15;
    a1[6] -= (unsigned __int64)((v17 >> 1) * (__int64)(2 * (a1[6] - a1[4]))) >> 32;
    a1[7] -= (unsigned __int64)((v17 >> 1) * (__int64)(2 * (a1[7] - a1[5]))) >> 32;
    a1[3] -= (unsigned __int64)((v17 >> 1) * (__int64)(2 * (a1[3] - a1[1]))) >> 32;
    LODWORD(v1) = dword_453064;
    a1[2] = dword_453064;
  }
  return v1;
}
// 41CADC: using guessed type int dword_41CADC;
// 41CAE0: using guessed type int dword_41CAE0;
// 41CC00: using guessed type int dword_41CC00;
// 41CC04: using guessed type int dword_41CC04;
// 41CC08: using guessed type int dword_41CC08;
// 41CC0C: using guessed type int dword_41CC0C;
// 41CC10: using guessed type int dword_41CC10;
// 453044: using guessed type int dword_453044;
// 453058: using guessed type int dword_453058;
// 453064: using guessed type int dword_453064;

//----- (00456A09) --------------------------------------------------------
int __usercall sub_456A09@<eax>(_DWORD *a1@<esi>)
{
  int result; // eax
  int v2; // ecx
  int v3; // eax

  result = a1[2];
  if ( dword_453064 < result )
  {
    v2 = a1[2] - dword_453064;
    HIWORD(v3) = (unsigned int)(dword_41CADC * v2) >> 16;
    LOWORD(v3) = (unsigned __int64)(dword_41CADC * (__int64)v2) >> 32;
    a1[6] -= __ROR4__(v3, 16);
    HIWORD(v3) = (unsigned int)(dword_41CAE0 * v2) >> 16;
    LOWORD(v3) = (unsigned __int64)(dword_41CAE0 * (__int64)v2) >> 32;
    a1[7] -= __ROR4__(v3, 16);
    result = dword_453064;
    a1[2] = dword_453064;
  }
  return result;
}
// 41CADC: using guessed type int dword_41CADC;
// 41CAE0: using guessed type int dword_41CAE0;
// 453064: using guessed type int dword_453064;

//----- (00456A50) --------------------------------------------------------
int __usercall sub_456A50@<eax>(_DWORD *a1@<esi>)
{
  int v1; // ecx
  int v2; // eax
  __int64 v3; // rtt
  int v4; // edx

  v1 = a1[3] - a1[1];
  if ( (unsigned int)v1 <= 0x40 )
  {
    v2 = a1[2] - *a1;
    if ( v2 <= 0 )
      v2 = *a1 - a1[2];
    if ( (unsigned int)v2 > 0x10000 )
    {
      if ( (unsigned int)v1 <= 3 )
        v1 = 3;
    }
    else
    {
      v1 = 65;
    }
  }
  LODWORD(v3) = (a1[7] - a1[5]) << 16;
  HIDWORD(v3) = (a1[7] - a1[5]) >> 31;
  dword_41CBE8 = v3 / v1;
  LODWORD(v3) = (a1[6] - a1[4]) << 16;
  HIDWORD(v3) = (a1[6] - a1[4]) >> 31;
  dword_41CBE4 = v3 / v1;
  dword_41CBF8 = ((__int64)(a1[2] - *a1) << 16) / v1;
  v4 = 256 - (unsigned __int8)a1[1];
  dword_41CBDC = (a1[4] << 8) + ((dword_41CBE4 * v4) >> 8);
  dword_41CBE0 = (a1[5] << 8) + ((dword_41CBE8 * v4) >> 8);
  dword_41CBF4 = (*a1 << 8) + (dword_41CBF8 >> 8) * v4;
  return dword_41CBF8 >> 8;
}
// 41CBDC: using guessed type int dword_41CBDC;
// 41CBE0: using guessed type int dword_41CBE0;
// 41CBE4: using guessed type int dword_41CBE4;
// 41CBE8: using guessed type int dword_41CBE8;
// 41CBF4: using guessed type int dword_41CBF4;
// 41CBF8: using guessed type int dword_41CBF8;

//----- (00456B20) --------------------------------------------------------
int sub_456B20()
{
  signed int v0; // eax
  unsigned __int64 v1; // rtt
  int v2; // edx
  int v3; // eax
  __int64 v4; // rtt
  int v5; // ecx
  int result; // eax

  if ( dword_43A928 - dword_43A918 == dword_43A920 - dword_43A918 )
  {
    v0 = 0x7FFFFFFF;
  }
  else
  {
    LODWORD(v1) = 0;
    HIDWORD(v1) = dword_43A920 - dword_43A918;
    v0 = (unsigned int)(v1 / (unsigned int)(dword_43A928 - dword_43A918)) >> 1;
  }
  v2 = ((unsigned __int64)(v0 * (__int64)(2 * (dword_43A924 - dword_43A914))) >> 32) - (dword_43A91C - dword_43A914);
  if ( v2 >= -3 && v2 <= 3 )
    v2 = 4 * ((v2 >> 2) | 1);
  dword_43A960 = v2;
  dword_43A9A4 = (unsigned __int64)(v0 * (__int64)(2 * (dword_43A940 - dword_43A930))) >> 32;
  v3 = dword_43A92C + ((unsigned __int64)(v0 * (__int64)(2 * (dword_43A93C - dword_43A92C))) >> 32) - dword_43A934;
  LODWORD(v4) = v3 << 16;
  HIDWORD(v4) = v3 >> 16;
  dword_43A950 = v4 / v2;
  dword_43A968 = -dword_43A950 >> 3;
  dword_43A96C = 2 * dword_43A968;
  dword_43A970 = 3 * dword_43A968;
  dword_43A974 = 4 * dword_43A968;
  dword_43A978 = 5 * dword_43A968;
  dword_43A97C = 6 * dword_43A968;
  dword_43A980 = 7 * dword_43A968;
  LODWORD(v4) = (dword_43A930 + dword_43A9A4 - dword_43A938) << 16;
  HIDWORD(v4) = (dword_43A930 + dword_43A9A4 - dword_43A938) >> 16;
  dword_43A954 = v4 / v2;
  v5 = __ROR4__(-dword_43A950, 16);
  byte_43A944 = v5;
  LOWORD(v5) = (unsigned int)-dword_43A954 >> 8;
  dword_43A948 = v5;
  result = -dword_43A954 >> 3;
  dword_43A988 = result;
  dword_43A98C = 2 * result;
  dword_43A990 = 3 * result;
  dword_43A994 = 4 * result;
  dword_43A998 = 5 * result;
  dword_43A99C = 6 * result;
  dword_43A9A0 = 7 * result;
  return result;
}
// 43A914: using guessed type int dword_43A914;
// 43A918: using guessed type int dword_43A918;
// 43A91C: using guessed type int dword_43A91C;
// 43A920: using guessed type int dword_43A920;
// 43A924: using guessed type int dword_43A924;
// 43A928: using guessed type int dword_43A928;
// 43A92C: using guessed type int dword_43A92C;
// 43A930: using guessed type int dword_43A930;
// 43A934: using guessed type int dword_43A934;
// 43A938: using guessed type int dword_43A938;
// 43A93C: using guessed type int dword_43A93C;
// 43A940: using guessed type int dword_43A940;
// 43A944: using guessed type char byte_43A944;
// 43A948: using guessed type int dword_43A948;
// 43A950: using guessed type int dword_43A950;
// 43A954: using guessed type int dword_43A954;
// 43A960: using guessed type int dword_43A960;
// 43A968: using guessed type int dword_43A968;
// 43A96C: using guessed type int dword_43A96C;
// 43A970: using guessed type int dword_43A970;
// 43A974: using guessed type int dword_43A974;
// 43A978: using guessed type int dword_43A978;
// 43A97C: using guessed type int dword_43A97C;
// 43A980: using guessed type int dword_43A980;
// 43A988: using guessed type int dword_43A988;
// 43A98C: using guessed type int dword_43A98C;
// 43A990: using guessed type int dword_43A990;
// 43A994: using guessed type int dword_43A994;
// 43A998: using guessed type int dword_43A998;
// 43A99C: using guessed type int dword_43A99C;
// 43A9A0: using guessed type int dword_43A9A0;
// 43A9A4: using guessed type int dword_43A9A4;

//----- (00456C70) --------------------------------------------------------
int __usercall sub_456C70@<eax>(int *a1@<ebx>, _DWORD *a2@<esi>)
{
  int v2; // edx
  int result; // eax

  v2 = (int)a2[1] >> 8;
  *a1 = v2;
  result = ((int)a2[3] >> 8) - v2;
  a1[1] = result;
  if ( result )
  {
    sub_457210(a2);
    return sub_456F60(dword_43A9F4, dword_43AA08, a1[1], a1 + 2, dword_43A9F0);
  }
  return result;
}
// 43A9F0: using guessed type int dword_43A9F0;
// 43A9F4: using guessed type int dword_43A9F4;
// 43AA08: using guessed type int dword_43AA08;

//----- (00456CB0) --------------------------------------------------------
int __usercall sub_456CB0@<eax>(int *a1@<ebx>, _DWORD *a2@<esi>)
{
  int v2; // edx
  int result; // eax

  v2 = (int)a2[1] >> 8;
  *a1 = v2;
  result = ((int)a2[3] >> 8) - v2;
  a1[1] = result;
  if ( result )
  {
    sub_457440(a2);
    return sub_456EF0(dword_43AA08, a1[1], a1 + 2);
  }
  return result;
}
// 43AA08: using guessed type int dword_43AA08;

//----- (00456CE0) --------------------------------------------------------
int __usercall sub_456CE0@<eax>(int *a1@<ebx>, _DWORD *a2@<esi>)
{
  int result; // eax
  int v3; // edx
  int v4; // ecx
  _DWORD *v5; // ebx
  int v6; // edx
  int v7; // edx
  int v8; // edx
  int v9; // edx

  if ( dword_41CDE4 < a2[3] )
  {
    if ( dword_41CDEC > a2[1] )
    {
      sub_456FB0(a2);
      dword_43AA04 = (int)(a1 + 2);
      v3 = (int)a2[1] >> 8;
      *a1 = v3;
      result = ((int)a2[3] >> 8) - v3;
      a1[1] = result;
      if ( result )
      {
        sub_457210(a2);
        v4 = a1[1];
        v5 = a1 + 2;
        result = sub_456F60(dword_43A9F4, dword_43AA08, v4, v5, dword_43A9F0);
        dword_43AA04 = (int)v5;
      }
      if ( dword_43AA14 == 1 )
      {
        v6 = a2[3];
        *a2 = a2[2];
        a2[1] = v6;
        v7 = a2[7];
        a2[4] = a2[6];
        a2[5] = v7;
        v8 = dword_43AA1C;
        a2[2] = dword_43AA18;
        a2[3] = v8;
        v9 = dword_43AA24;
        a2[6] = dword_43AA20;
        a2[7] = v9;
        sub_4571CB(a2);
        result = ((int)a2[3] >> 8) - ((int)a2[1] >> 8);
        dword_43AA28 = result;
        if ( result )
        {
          a1[1] += result;
          sub_457210(a2);
          return sub_456F60(dword_43A9F4, dword_43AA08, dword_43AA28, (_DWORD *)dword_43AA04, dword_43A9F0);
        }
      }
    }
    else
    {
      a1[1] = 0;
      result = dword_41CDCC;
      *a1 = dword_41CDCC;
    }
  }
  else
  {
    a1[1] = 0;
    result = dword_41CDC4;
    *a1 = dword_41CDC4;
  }
  return result;
}
// 41CDC4: using guessed type int dword_41CDC4;
// 41CDCC: using guessed type int dword_41CDCC;
// 41CDE4: using guessed type int dword_41CDE4;
// 41CDEC: using guessed type int dword_41CDEC;
// 43A9F0: using guessed type int dword_43A9F0;
// 43A9F4: using guessed type int dword_43A9F4;
// 43AA04: using guessed type int dword_43AA04;
// 43AA08: using guessed type int dword_43AA08;
// 43AA14: using guessed type int dword_43AA14;
// 43AA18: using guessed type int dword_43AA18;
// 43AA1C: using guessed type int dword_43AA1C;
// 43AA20: using guessed type int dword_43AA20;
// 43AA24: using guessed type int dword_43AA24;
// 43AA28: using guessed type int dword_43AA28;

//----- (00456E00) --------------------------------------------------------
int __usercall sub_456E00@<eax>(int *a1@<ebx>, _DWORD *a2@<esi>)
{
  int result; // eax
  int v3; // edx
  int v4; // ecx
  int *v5; // ebx
  int v6; // edx
  int v7; // edx

  if ( dword_41CDE4 < a2[3] )
  {
    if ( dword_41CDEC > a2[1] )
    {
      sub_4572E0(a2);
      dword_43AA30 = (int)(a1 + 2);
      v3 = (int)a2[1] >> 8;
      *a1 = v3;
      result = ((int)a2[3] >> 8) - v3;
      a1[1] = result;
      if ( result )
      {
        sub_457440(a2);
        v4 = a1[1];
        v5 = a1 + 2;
        result = sub_456F20(dword_43AA08, v4, v5);
        dword_43AA30 = (int)v5;
      }
      if ( dword_43AA14 == 1 )
      {
        v6 = a2[3];
        *a2 = a2[2];
        a2[1] = v6;
        v7 = dword_43AA1C;
        a2[2] = dword_43AA18;
        a2[3] = v7;
        sub_45741A((int)a2);
        result = ((int)a2[3] >> 8) - ((int)a2[1] >> 8);
        dword_43AA34 = result;
        if ( result )
        {
          a1[1] += result;
          sub_457440(a2);
          return sub_456F20(dword_43AA08, dword_43AA34, (int *)dword_43AA30);
        }
      }
    }
    else
    {
      a1[1] = 0;
      result = dword_41CDCC;
      *a1 = dword_41CDCC;
    }
  }
  else
  {
    a1[1] = 0;
    result = dword_41CDC4;
    *a1 = dword_41CDC4;
  }
  return result;
}
// 41CDC4: using guessed type int dword_41CDC4;
// 41CDCC: using guessed type int dword_41CDCC;
// 41CDE4: using guessed type int dword_41CDE4;
// 41CDEC: using guessed type int dword_41CDEC;
// 43AA08: using guessed type int dword_43AA08;
// 43AA14: using guessed type int dword_43AA14;
// 43AA18: using guessed type int dword_43AA18;
// 43AA1C: using guessed type int dword_43AA1C;
// 43AA30: using guessed type int dword_43AA30;
// 43AA34: using guessed type int dword_43AA34;

//----- (00456EF0) --------------------------------------------------------
int __usercall sub_456EF0@<eax>(int a1@<edx>, int a2@<ecx>, _DWORD *a3@<ebx>)
{
  int v3; // ebp
  int result; // eax
  unsigned __int64 v5; // kr00_8

  v3 = dword_43AA0C << 16;
  result = dword_43AA0C >> 16;
  v5 = __PAIR64__(a1 >> 16, a1 << 16);
  do
  {
    *a3 = HIDWORD(v5);
    v5 += __PAIR64__(result, v3);
    ++a3;
  }
  while ( a2-- > 1 );
  return result;
}
// 43AA0C: using guessed type int dword_43AA0C;

//----- (00456F20) --------------------------------------------------------
int __usercall sub_456F20@<eax>(int a1@<edx>, int a2@<ecx>, int *a3@<ebx>)
{
  int v3; // ebp
  int result; // eax
  int v5; // esi
  unsigned __int64 v6; // kr00_8
  bool v7; // cc

  v3 = dword_43AA0C << 16;
  result = dword_43AA0C >> 16;
  v5 = dword_41CDC0;
  v6 = __PAIR64__(a1 >> 16, a1 << 16);
  do
  {
    while ( HIDWORD(v6) - v5 >= 0 )
    {
      *a3 = HIDWORD(v6);
      v6 += __PAIR64__(result, v3);
      ++a3;
      v7 = a2-- <= 1;
      if ( v7 )
        return result;
    }
    *a3++ = v5;
    v7 = a2-- <= 1;
    v6 += __PAIR64__(result, v3);
  }
  while ( !v7 );
  return result;
}
// 41CDC0: using guessed type int dword_41CDC0;
// 43AA0C: using guessed type int dword_43AA0C;

//----- (00456F60) --------------------------------------------------------
int __usercall sub_456F60@<eax>(int result@<eax>, unsigned int a2@<edx>, int a3@<ecx>, _DWORD *a4@<ebx>, int a5@<esi>)
{
  int v5; // edi
  int v6; // ebp
  int v7; // edi
  int v8; // ebp
  int v9; // edi
  int v10; // ebp

  v5 = (a2 >> 11) & 0x1C;
  do
  {
    v6 = *(int *)((char *)&dword_43A964 + v5);
    v7 = result + *(int *)((char *)&dword_43A984 + v5);
    a4[1] = a5 + v6;
    v8 = dword_43A9F8;
    *a4 = v7;
    a5 += v8;
    v9 = a2;
    a2 += dword_43AA0C;
    v10 = dword_43A9FC;
    a4[2] = v9 >> 16;
    result += v10;
    v5 = (a2 >> 11) & 0x1C;
    a4 += 3;
  }
  while ( a3-- > 1 );
  return result;
}
// 43A964: using guessed type int dword_43A964;
// 43A984: using guessed type int dword_43A984;
// 43A9F8: using guessed type int dword_43A9F8;
// 43A9FC: using guessed type int dword_43A9FC;
// 43AA0C: using guessed type int dword_43AA0C;

//----- (00456FB0) --------------------------------------------------------
int __usercall sub_456FB0@<eax>(_DWORD *a1@<esi>)
{
  __int64 v1; // rax
  unsigned __int64 v2; // rtt
  signed int v3; // ecx
  int v4; // edx
  unsigned __int64 v5; // rtt
  signed int v6; // ecx
  int v7; // ecx
  int v8; // eax
  int v9; // eax
  unsigned __int64 v10; // rtt
  signed int v11; // ecx
  int v12; // ecx
  int v13; // eax
  int v14; // edx
  int v15; // edx
  int v16; // ecx
  unsigned int v17; // ecx
  unsigned __int64 v18; // rax
  unsigned int v19; // eax

  LODWORD(v1) = a1[1];
  if ( dword_41CDE4 > (int)v1 )
  {
    LODWORD(v2) = 0;
    HIDWORD(v2) = dword_41CDE4 - v1;
    v3 = (unsigned int)(v2 / (unsigned int)(a1[3] - v1)) >> 1;
    a1[5] += (unsigned __int64)(v3 * (__int64)(2 * (a1[7] - a1[5]))) >> 32;
    a1[4] += (unsigned __int64)(v3 * (__int64)(2 * (a1[6] - a1[4]))) >> 32;
    v1 = v3 * (__int64)(2 * (a1[2] - *a1));
    *a1 += HIDWORD(v1);
    a1[1] = dword_41CDE4;
  }
  v4 = a1[3];
  if ( dword_41CDEC < v4 )
  {
    LODWORD(v5) = 0;
    HIDWORD(v5) = v4 - dword_41CDEC;
    v6 = (unsigned int)(v5 / (unsigned int)(v4 - a1[1])) >> 1;
    a1[7] -= (unsigned __int64)(v6 * (__int64)(2 * (a1[7] - a1[5]))) >> 32;
    a1[6] -= (unsigned __int64)(v6 * (__int64)(2 * (a1[6] - a1[4]))) >> 32;
    v1 = v6 * (__int64)(2 * (a1[2] - *a1));
    a1[2] -= HIDWORD(v1);
    a1[3] = dword_41CDEC;
  }
  dword_43AA14 = 0;
  if ( dword_41CDE8 < *a1 )
  {
    if ( dword_41CDE8 > a1[2] )
    {
      dword_43AA14 = 1;
      dword_43AA18 = a1[2];
      dword_43AA1C = a1[3];
      dword_43AA20 = a1[6];
      dword_43AA24 = a1[7];
      v9 = a1[2];
      LODWORD(v10) = 0;
      HIDWORD(v10) = dword_41CDE8 - v9;
      v11 = (unsigned int)(v10 / (unsigned int)(*a1 - v9)) >> 1;
      a1[6] -= (unsigned __int64)(v11 * (__int64)(2 * (a1[6] - a1[4]))) >> 32;
      a1[7] -= (unsigned __int64)(v11 * (__int64)(2 * (a1[7] - a1[5]))) >> 32;
      a1[3] -= (unsigned __int64)(v11 * (__int64)(2 * (a1[3] - a1[1]))) >> 32;
    }
    else
    {
      v7 = a1[2] - dword_41CDE8;
      HIWORD(v8) = (unsigned int)(dword_43A950 * v7) >> 16;
      LOWORD(v8) = (unsigned __int64)(dword_43A950 * (__int64)v7) >> 32;
      a1[6] -= __ROR4__(v8, 16);
      HIWORD(v8) = (unsigned int)(dword_43A954 * v7) >> 16;
      LOWORD(v8) = (unsigned __int64)(dword_43A954 * (__int64)v7) >> 32;
      a1[7] -= __ROR4__(v8, 16);
    }
    a1[2] = dword_41CDE8;
    v12 = *a1 - dword_41CDE8;
    HIWORD(v13) = (unsigned int)(dword_43A950 * v12) >> 16;
    LOWORD(v13) = (unsigned __int64)(dword_43A950 * (__int64)v12) >> 32;
    a1[4] -= __ROR4__(v13, 16);
    HIWORD(v13) = (unsigned int)(dword_43A954 * v12) >> 16;
    LOWORD(v13) = (unsigned __int64)(dword_43A954 * (__int64)v12) >> 32;
    a1[5] -= __ROR4__(v13, 16);
    LODWORD(v1) = dword_41CDE8;
    *a1 = dword_41CDE8;
  }
  if ( dword_41CDE8 < a1[2] )
  {
    dword_43AA14 = 1;
    v14 = a1[3];
    dword_43AA18 = a1[2];
    dword_43AA1C = v14;
    v15 = a1[7];
    dword_43AA20 = a1[6];
    dword_43AA24 = v15;
    v16 = a1[2];
    HIDWORD(v18) = v16 - dword_41CDE8;
    v17 = v16 - *a1;
    LODWORD(v18) = 0;
    if ( HIDWORD(v18) == v17 )
      v19 = -1;
    else
      v19 = v18 / v17;
    a1[6] -= (unsigned __int64)((v19 >> 1) * (__int64)(2 * (a1[6] - a1[4]))) >> 32;
    a1[7] -= (unsigned __int64)((v19 >> 1) * (__int64)(2 * (a1[7] - a1[5]))) >> 32;
    a1[3] -= (unsigned __int64)((v19 >> 1) * (__int64)(2 * (a1[3] - a1[1]))) >> 32;
    LODWORD(v1) = dword_41CDE8;
    a1[2] = dword_41CDE8;
  }
  return v1;
}
// 41CDE4: using guessed type int dword_41CDE4;
// 41CDE8: using guessed type int dword_41CDE8;
// 41CDEC: using guessed type int dword_41CDEC;
// 43A950: using guessed type int dword_43A950;
// 43A954: using guessed type int dword_43A954;
// 43AA14: using guessed type int dword_43AA14;
// 43AA18: using guessed type int dword_43AA18;
// 43AA1C: using guessed type int dword_43AA1C;
// 43AA20: using guessed type int dword_43AA20;
// 43AA24: using guessed type int dword_43AA24;

//----- (004571CB) --------------------------------------------------------
int __usercall sub_4571CB@<eax>(_DWORD *a1@<esi>)
{
  int result; // eax
  int v2; // ecx
  int v3; // eax

  result = a1[2];
  if ( dword_41CDE8 < result )
  {
    v2 = a1[2] - dword_41CDE8;
    HIWORD(v3) = (unsigned int)(dword_43A950 * v2) >> 16;
    LOWORD(v3) = (unsigned __int64)(dword_43A950 * (__int64)v2) >> 32;
    a1[6] -= __ROR4__(v3, 16);
    HIWORD(v3) = (unsigned int)(dword_43A954 * v2) >> 16;
    LOWORD(v3) = (unsigned __int64)(dword_43A954 * (__int64)v2) >> 32;
    a1[7] -= __ROR4__(v3, 16);
    result = dword_41CDE8;
    a1[2] = dword_41CDE8;
  }
  return result;
}
// 41CDE8: using guessed type int dword_41CDE8;
// 43A950: using guessed type int dword_43A950;
// 43A954: using guessed type int dword_43A954;

//----- (00457210) --------------------------------------------------------
int __usercall sub_457210@<eax>(_DWORD *a1@<esi>)
{
  int v1; // ecx
  int v2; // eax
  __int64 v3; // rtt
  int v4; // edx

  v1 = a1[3] - a1[1];
  if ( (unsigned int)v1 <= 0x40 )
  {
    v2 = a1[2] - *a1;
    if ( v2 <= 0 )
      v2 = *a1 - a1[2];
    if ( (unsigned int)v2 > 0x10000 )
    {
      if ( (unsigned int)v1 <= 3 )
        v1 = 3;
    }
    else
    {
      v1 = 65;
    }
  }
  LODWORD(v3) = (a1[7] - a1[5]) << 16;
  HIDWORD(v3) = (a1[7] - a1[5]) >> 31;
  dword_43A9FC = v3 / v1;
  LODWORD(v3) = (a1[6] - a1[4]) << 16;
  HIDWORD(v3) = (a1[6] - a1[4]) >> 31;
  dword_43A9F8 = v3 / v1;
  dword_43AA0C = ((__int64)(a1[2] - *a1) << 16) / v1;
  v4 = 256 - (unsigned __int8)a1[1];
  dword_43A9F0 = (a1[4] << 8) + ((dword_43A9F8 * v4) >> 8);
  dword_43A9F4 = (a1[5] << 8) + ((dword_43A9FC * v4) >> 8);
  dword_43AA08 = (*a1 << 8) + (dword_43AA0C >> 8) * v4;
  return dword_43AA0C >> 8;
}
// 43A9F0: using guessed type int dword_43A9F0;
// 43A9F4: using guessed type int dword_43A9F4;
// 43A9F8: using guessed type int dword_43A9F8;
// 43A9FC: using guessed type int dword_43A9FC;
// 43AA08: using guessed type int dword_43AA08;
// 43AA0C: using guessed type int dword_43AA0C;

//----- (004572E0) --------------------------------------------------------
int __usercall sub_4572E0@<eax>(_DWORD *a1@<esi>)
{
  __int64 v1; // rax
  unsigned __int64 v2; // rtt
  int v3; // edx
  unsigned __int64 v4; // rtt
  int v5; // edx
  unsigned __int64 v6; // rtt
  int v7; // edx
  int v8; // eax
  int v9; // edx
  unsigned int v10; // ecx
  unsigned __int64 v11; // rax
  unsigned int v12; // eax

  LODWORD(v1) = a1[1];
  if ( dword_41CDE4 > (int)v1 )
  {
    LODWORD(v2) = 0;
    HIDWORD(v2) = dword_41CDE4 - v1;
    v1 = ((unsigned int)(v2 / (unsigned int)(a1[3] - v1)) >> 1) * (__int64)(2 * (a1[2] - *a1));
    *a1 += HIDWORD(v1);
    a1[1] = dword_41CDE4;
  }
  v3 = a1[3];
  if ( dword_41CDEC < v3 )
  {
    LODWORD(v4) = 0;
    HIDWORD(v4) = v3 - dword_41CDEC;
    v1 = ((unsigned int)(v4 / (unsigned int)(v3 - a1[1])) >> 1) * (__int64)(2 * (a1[2] - *a1));
    a1[2] -= HIDWORD(v1);
    a1[3] = dword_41CDEC;
  }
  dword_43AA14 = 0;
  if ( dword_41CDE8 < *a1 )
  {
    if ( dword_41CDE8 > a1[2] )
    {
      dword_43AA14 = 1;
      v5 = a1[3];
      dword_43AA18 = a1[2];
      dword_43AA1C = v5;
      LODWORD(v6) = 0;
      HIDWORD(v6) = dword_41CDE8 - dword_43AA18;
      a1[3] -= (unsigned __int64)(((unsigned int)(v6 / (unsigned int)(*a1 - dword_43AA18)) >> 1)
                                * (__int64)(2 * (a1[3] - a1[1]))) >> 32;
    }
    a1[2] = dword_41CDE8;
    LODWORD(v1) = dword_41CDE8;
    *a1 = dword_41CDE8;
  }
  if ( dword_41CDE8 < a1[2] )
  {
    v7 = a1[3];
    dword_43AA14 = 1;
    v8 = a1[2];
    dword_43AA1C = v7;
    v9 = a1[2];
    dword_43AA18 = v8;
    v10 = v9 - *a1;
    HIDWORD(v11) = v9 - dword_41CDE8;
    LODWORD(v11) = 0;
    if ( HIDWORD(v11) == v10 )
      v12 = -1;
    else
      v12 = v11 / v10;
    a1[3] -= (unsigned __int64)((v12 >> 1) * (__int64)(2 * (a1[3] - a1[1]))) >> 32;
    LODWORD(v1) = dword_41CDE8;
    a1[2] = dword_41CDE8;
  }
  return v1;
}
// 41CDE4: using guessed type int dword_41CDE4;
// 41CDE8: using guessed type int dword_41CDE8;
// 41CDEC: using guessed type int dword_41CDEC;
// 43AA14: using guessed type int dword_43AA14;
// 43AA18: using guessed type int dword_43AA18;
// 43AA1C: using guessed type int dword_43AA1C;

//----- (0045741A) --------------------------------------------------------
int __usercall sub_45741A@<eax>(int a1@<esi>)
{
  int result; // eax

  result = *(_DWORD *)(a1 + 8);
  if ( dword_41CDE8 < result )
  {
    result = dword_41CDE8;
    *(_DWORD *)(a1 + 8) = dword_41CDE8;
  }
  return result;
}
// 41CDE8: using guessed type int dword_41CDE8;

//----- (00457440) --------------------------------------------------------
int __usercall sub_457440@<eax>(_DWORD *a1@<esi>)
{
  unsigned int v1; // ecx
  int v2; // eax

  v1 = a1[3] - a1[1];
  if ( v1 <= 0x40 )
  {
    v2 = a1[2] - *a1;
    if ( v2 <= 0 )
      v2 = *a1 - a1[2];
    if ( (unsigned int)v2 > 0x10000 )
    {
      if ( v1 <= 3 )
        v1 = 3;
    }
    else
    {
      v1 = 65;
    }
  }
  dword_43AA0C = ((__int64)(a1[2] - *a1) << 16) / (int)v1;
  dword_43AA08 = (*a1 << 8) + (dword_43AA0C >> 8) * (256 - (unsigned __int8)a1[1]);
  return dword_43AA0C >> 8;
}
// 43AA08: using guessed type int dword_43AA08;
// 43AA0C: using guessed type int dword_43AA0C;

// nfuncs=414 queued=186 decompiled=186 lumina nreq=0 worse=0 better=0
#error "There were 1 decompilation failure(s) on 186 function(s)"
